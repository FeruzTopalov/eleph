
Eleph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8a4  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001de0  0800c9d8  0800c9d8  0001c9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7b8  0800e7b8  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e7b8  0800e7b8  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e7b8  0800e7b8  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7b8  0800e7b8  0001e7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7bc  0800e7bc  0001e7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800e7c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001070  200000c8  0800e888  000200c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001138  0800e888  00021138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009eaf  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ef7  00000000  00000000  00029fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000970  00000000  00000000  0002be98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002c808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a8fa  00000000  00000000  0002d038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a9b  00000000  00000000  00037932  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003a7d5  00000000  00000000  0003f3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00079ba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000299c  00000000  00000000  00079c20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000c8 	.word	0x200000c8
 800014c:	00000000 	.word	0x00000000
 8000150:	0800c9bc 	.word	0x0800c9bc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000cc 	.word	0x200000cc
 800016c:	0800c9bc 	.word	0x0800c9bc

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2iz>:
 8000a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a50:	d215      	bcs.n	8000a7e <__aeabi_d2iz+0x36>
 8000a52:	d511      	bpl.n	8000a78 <__aeabi_d2iz+0x30>
 8000a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d912      	bls.n	8000a84 <__aeabi_d2iz+0x3c>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d105      	bne.n	8000a90 <__aeabi_d2iz+0x48>
 8000a84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	bf08      	it	eq
 8000a8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2uiz>:
 8000a98:	004a      	lsls	r2, r1, #1
 8000a9a:	d211      	bcs.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d211      	bcs.n	8000ac6 <__aeabi_d2uiz+0x2e>
 8000aa2:	d50d      	bpl.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d40e      	bmi.n	8000acc <__aeabi_d2uiz+0x34>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_d2uiz+0x3a>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_frsub>:
 8000b78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	e002      	b.n	8000b84 <__addsf3>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_fsub>:
 8000b80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b84 <__addsf3>:
 8000b84:	0042      	lsls	r2, r0, #1
 8000b86:	bf1f      	itttt	ne
 8000b88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b8c:	ea92 0f03 	teqne	r2, r3
 8000b90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b98:	d06a      	beq.n	8000c70 <__addsf3+0xec>
 8000b9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba2:	bfc1      	itttt	gt
 8000ba4:	18d2      	addgt	r2, r2, r3
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	4048      	eorgt	r0, r1
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	bfb8      	it	lt
 8000bae:	425b      	neglt	r3, r3
 8000bb0:	2b19      	cmp	r3, #25
 8000bb2:	bf88      	it	hi
 8000bb4:	4770      	bxhi	lr
 8000bb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4249      	negne	r1, r1
 8000bd6:	ea92 0f03 	teq	r2, r3
 8000bda:	d03f      	beq.n	8000c5c <__addsf3+0xd8>
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	fa41 fc03 	asr.w	ip, r1, r3
 8000be4:	eb10 000c 	adds.w	r0, r0, ip
 8000be8:	f1c3 0320 	rsb	r3, r3, #32
 8000bec:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf4:	d502      	bpl.n	8000bfc <__addsf3+0x78>
 8000bf6:	4249      	negs	r1, r1
 8000bf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c00:	d313      	bcc.n	8000c2a <__addsf3+0xa6>
 8000c02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c06:	d306      	bcc.n	8000c16 <__addsf3+0x92>
 8000c08:	0840      	lsrs	r0, r0, #1
 8000c0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0e:	f102 0201 	add.w	r2, r2, #1
 8000c12:	2afe      	cmp	r2, #254	; 0xfe
 8000c14:	d251      	bcs.n	8000cba <__addsf3+0x136>
 8000c16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1e:	bf08      	it	eq
 8000c20:	f020 0001 	biceq.w	r0, r0, #1
 8000c24:	ea40 0003 	orr.w	r0, r0, r3
 8000c28:	4770      	bx	lr
 8000c2a:	0049      	lsls	r1, r1, #1
 8000c2c:	eb40 0000 	adc.w	r0, r0, r0
 8000c30:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	d1ed      	bne.n	8000c16 <__addsf3+0x92>
 8000c3a:	fab0 fc80 	clz	ip, r0
 8000c3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c42:	ebb2 020c 	subs.w	r2, r2, ip
 8000c46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4a:	bfaa      	itet	ge
 8000c4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c50:	4252      	neglt	r2, r2
 8000c52:	4318      	orrge	r0, r3
 8000c54:	bfbc      	itt	lt
 8000c56:	40d0      	lsrlt	r0, r2
 8000c58:	4318      	orrlt	r0, r3
 8000c5a:	4770      	bx	lr
 8000c5c:	f092 0f00 	teq	r2, #0
 8000c60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c64:	bf06      	itte	eq
 8000c66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6a:	3201      	addeq	r2, #1
 8000c6c:	3b01      	subne	r3, #1
 8000c6e:	e7b5      	b.n	8000bdc <__addsf3+0x58>
 8000c70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c78:	bf18      	it	ne
 8000c7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7e:	d021      	beq.n	8000cc4 <__addsf3+0x140>
 8000c80:	ea92 0f03 	teq	r2, r3
 8000c84:	d004      	beq.n	8000c90 <__addsf3+0x10c>
 8000c86:	f092 0f00 	teq	r2, #0
 8000c8a:	bf08      	it	eq
 8000c8c:	4608      	moveq	r0, r1
 8000c8e:	4770      	bx	lr
 8000c90:	ea90 0f01 	teq	r0, r1
 8000c94:	bf1c      	itt	ne
 8000c96:	2000      	movne	r0, #0
 8000c98:	4770      	bxne	lr
 8000c9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9e:	d104      	bne.n	8000caa <__addsf3+0x126>
 8000ca0:	0040      	lsls	r0, r0, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca8:	4770      	bx	lr
 8000caa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cae:	bf3c      	itt	cc
 8000cb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bxcc	lr
 8000cb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc2:	4770      	bx	lr
 8000cc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc8:	bf16      	itet	ne
 8000cca:	4608      	movne	r0, r1
 8000ccc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd0:	4601      	movne	r1, r0
 8000cd2:	0242      	lsls	r2, r0, #9
 8000cd4:	bf06      	itte	eq
 8000cd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cda:	ea90 0f01 	teqeq	r0, r1
 8000cde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_ui2f>:
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e004      	b.n	8000cf4 <__aeabi_i2f+0x8>
 8000cea:	bf00      	nop

08000cec <__aeabi_i2f>:
 8000cec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf0:	bf48      	it	mi
 8000cf2:	4240      	negmi	r0, r0
 8000cf4:	ea5f 0c00 	movs.w	ip, r0
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d00:	4601      	mov	r1, r0
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	e01c      	b.n	8000d42 <__aeabi_l2f+0x2a>

08000d08 <__aeabi_ul2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e00a      	b.n	8000d2c <__aeabi_l2f+0x14>
 8000d16:	bf00      	nop

08000d18 <__aeabi_l2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__aeabi_l2f+0x14>
 8000d26:	4240      	negs	r0, r0
 8000d28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2c:	ea5f 0c01 	movs.w	ip, r1
 8000d30:	bf02      	ittt	eq
 8000d32:	4684      	moveq	ip, r0
 8000d34:	4601      	moveq	r1, r0
 8000d36:	2000      	moveq	r0, #0
 8000d38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d3c:	bf08      	it	eq
 8000d3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d46:	fabc f28c 	clz	r2, ip
 8000d4a:	3a08      	subs	r2, #8
 8000d4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d50:	db10      	blt.n	8000d74 <__aeabi_l2f+0x5c>
 8000d52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d56:	4463      	add	r3, ip
 8000d58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d64:	fa20 f202 	lsr.w	r2, r0, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	f020 0001 	biceq.w	r0, r0, #1
 8000d72:	4770      	bx	lr
 8000d74:	f102 0220 	add.w	r2, r2, #32
 8000d78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d84:	fa21 f202 	lsr.w	r2, r1, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d92:	4770      	bx	lr

08000d94 <__aeabi_fmul>:
 8000d94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d9c:	bf1e      	ittt	ne
 8000d9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da2:	ea92 0f0c 	teqne	r2, ip
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d06f      	beq.n	8000e8c <__aeabi_fmul+0xf8>
 8000dac:	441a      	add	r2, r3
 8000dae:	ea80 0c01 	eor.w	ip, r0, r1
 8000db2:	0240      	lsls	r0, r0, #9
 8000db4:	bf18      	it	ne
 8000db6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dba:	d01e      	beq.n	8000dfa <__aeabi_fmul+0x66>
 8000dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd4:	bf3e      	ittt	cc
 8000dd6:	0049      	lslcc	r1, r1, #1
 8000dd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	ea40 0001 	orr.w	r0, r0, r1
 8000de2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000de6:	2afd      	cmp	r2, #253	; 0xfd
 8000de8:	d81d      	bhi.n	8000e26 <__aeabi_fmul+0x92>
 8000dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df2:	bf08      	it	eq
 8000df4:	f020 0001 	biceq.w	r0, r0, #1
 8000df8:	4770      	bx	lr
 8000dfa:	f090 0f00 	teq	r0, #0
 8000dfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e02:	bf08      	it	eq
 8000e04:	0249      	lsleq	r1, r1, #9
 8000e06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e0e:	3a7f      	subs	r2, #127	; 0x7f
 8000e10:	bfc2      	ittt	gt
 8000e12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1a:	4770      	bxgt	lr
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	3a01      	subs	r2, #1
 8000e26:	dc5d      	bgt.n	8000ee4 <__aeabi_fmul+0x150>
 8000e28:	f112 0f19 	cmn.w	r2, #25
 8000e2c:	bfdc      	itt	le
 8000e2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e32:	4770      	bxle	lr
 8000e34:	f1c2 0200 	rsb	r2, r2, #0
 8000e38:	0041      	lsls	r1, r0, #1
 8000e3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e3e:	f1c2 0220 	rsb	r2, r2, #32
 8000e42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4a:	f140 0000 	adc.w	r0, r0, #0
 8000e4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e52:	bf08      	it	eq
 8000e54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e58:	4770      	bx	lr
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xce>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fmul+0xe6>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e78f      	b.n	8000dac <__aeabi_fmul+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	bf18      	it	ne
 8000e96:	ea93 0f0c 	teqne	r3, ip
 8000e9a:	d00a      	beq.n	8000eb2 <__aeabi_fmul+0x11e>
 8000e9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea0:	bf18      	it	ne
 8000ea2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea6:	d1d8      	bne.n	8000e5a <__aeabi_fmul+0xc6>
 8000ea8:	ea80 0001 	eor.w	r0, r0, r1
 8000eac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb0:	4770      	bx	lr
 8000eb2:	f090 0f00 	teq	r0, #0
 8000eb6:	bf17      	itett	ne
 8000eb8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	f091 0f00 	teqne	r1, #0
 8000ec2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ec6:	d014      	beq.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	d101      	bne.n	8000ed2 <__aeabi_fmul+0x13e>
 8000ece:	0242      	lsls	r2, r0, #9
 8000ed0:	d10f      	bne.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ed2:	ea93 0f0c 	teq	r3, ip
 8000ed6:	d103      	bne.n	8000ee0 <__aeabi_fmul+0x14c>
 8000ed8:	024b      	lsls	r3, r1, #9
 8000eda:	bf18      	it	ne
 8000edc:	4608      	movne	r0, r1
 8000ede:	d108      	bne.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ee0:	ea80 0001 	eor.w	r0, r0, r1
 8000ee4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef0:	4770      	bx	lr
 8000ef2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efa:	4770      	bx	lr

08000efc <__aeabi_fdiv>:
 8000efc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f04:	bf1e      	ittt	ne
 8000f06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0a:	ea92 0f0c 	teqne	r2, ip
 8000f0e:	ea93 0f0c 	teqne	r3, ip
 8000f12:	d069      	beq.n	8000fe8 <__aeabi_fdiv+0xec>
 8000f14:	eba2 0203 	sub.w	r2, r2, r3
 8000f18:	ea80 0c01 	eor.w	ip, r0, r1
 8000f1c:	0249      	lsls	r1, r1, #9
 8000f1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f22:	d037      	beq.n	8000f94 <__aeabi_fdiv+0x98>
 8000f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f34:	428b      	cmp	r3, r1
 8000f36:	bf38      	it	cc
 8000f38:	005b      	lslcc	r3, r3, #1
 8000f3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f42:	428b      	cmp	r3, r1
 8000f44:	bf24      	itt	cs
 8000f46:	1a5b      	subcs	r3, r3, r1
 8000f48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f50:	bf24      	itt	cs
 8000f52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f5e:	bf24      	itt	cs
 8000f60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f6c:	bf24      	itt	cs
 8000f6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	bf18      	it	ne
 8000f7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f7e:	d1e0      	bne.n	8000f42 <__aeabi_fdiv+0x46>
 8000f80:	2afd      	cmp	r2, #253	; 0xfd
 8000f82:	f63f af50 	bhi.w	8000e26 <__aeabi_fmul+0x92>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f8c:	bf08      	it	eq
 8000f8e:	f020 0001 	biceq.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f9c:	327f      	adds	r2, #127	; 0x7f
 8000f9e:	bfc2      	ittt	gt
 8000fa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fa8:	4770      	bxgt	lr
 8000faa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	3a01      	subs	r2, #1
 8000fb4:	e737      	b.n	8000e26 <__aeabi_fmul+0x92>
 8000fb6:	f092 0f00 	teq	r2, #0
 8000fba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0040      	lsleq	r0, r0, #1
 8000fc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fc6:	3a01      	subeq	r2, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xc2>
 8000fca:	ea40 000c 	orr.w	r0, r0, ip
 8000fce:	f093 0f00 	teq	r3, #0
 8000fd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	bf02      	ittt	eq
 8000fd8:	0049      	lsleq	r1, r1, #1
 8000fda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fde:	3b01      	subeq	r3, #1
 8000fe0:	d0f9      	beq.n	8000fd6 <__aeabi_fdiv+0xda>
 8000fe2:	ea41 010c 	orr.w	r1, r1, ip
 8000fe6:	e795      	b.n	8000f14 <__aeabi_fdiv+0x18>
 8000fe8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fec:	ea92 0f0c 	teq	r2, ip
 8000ff0:	d108      	bne.n	8001004 <__aeabi_fdiv+0x108>
 8000ff2:	0242      	lsls	r2, r0, #9
 8000ff4:	f47f af7d 	bne.w	8000ef2 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	f47f af70 	bne.w	8000ee0 <__aeabi_fmul+0x14c>
 8001000:	4608      	mov	r0, r1
 8001002:	e776      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001004:	ea93 0f0c 	teq	r3, ip
 8001008:	d104      	bne.n	8001014 <__aeabi_fdiv+0x118>
 800100a:	024b      	lsls	r3, r1, #9
 800100c:	f43f af4c 	beq.w	8000ea8 <__aeabi_fmul+0x114>
 8001010:	4608      	mov	r0, r1
 8001012:	e76e      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001014:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001018:	bf18      	it	ne
 800101a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800101e:	d1ca      	bne.n	8000fb6 <__aeabi_fdiv+0xba>
 8001020:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001024:	f47f af5c 	bne.w	8000ee0 <__aeabi_fmul+0x14c>
 8001028:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800102c:	f47f af3c 	bne.w	8000ea8 <__aeabi_fmul+0x114>
 8001030:	e75f      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001032:	bf00      	nop

08001034 <__gesf2>:
 8001034:	f04f 3cff 	mov.w	ip, #4294967295
 8001038:	e006      	b.n	8001048 <__cmpsf2+0x4>
 800103a:	bf00      	nop

0800103c <__lesf2>:
 800103c:	f04f 0c01 	mov.w	ip, #1
 8001040:	e002      	b.n	8001048 <__cmpsf2+0x4>
 8001042:	bf00      	nop

08001044 <__cmpsf2>:
 8001044:	f04f 0c01 	mov.w	ip, #1
 8001048:	f84d cd04 	str.w	ip, [sp, #-4]!
 800104c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001050:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	bf18      	it	ne
 800105a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800105e:	d011      	beq.n	8001084 <__cmpsf2+0x40>
 8001060:	b001      	add	sp, #4
 8001062:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001066:	bf18      	it	ne
 8001068:	ea90 0f01 	teqne	r0, r1
 800106c:	bf58      	it	pl
 800106e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001072:	bf88      	it	hi
 8001074:	17c8      	asrhi	r0, r1, #31
 8001076:	bf38      	it	cc
 8001078:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800107c:	bf18      	it	ne
 800107e:	f040 0001 	orrne.w	r0, r0, #1
 8001082:	4770      	bx	lr
 8001084:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001088:	d102      	bne.n	8001090 <__cmpsf2+0x4c>
 800108a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800108e:	d105      	bne.n	800109c <__cmpsf2+0x58>
 8001090:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001094:	d1e4      	bne.n	8001060 <__cmpsf2+0x1c>
 8001096:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109a:	d0e1      	beq.n	8001060 <__cmpsf2+0x1c>
 800109c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <__aeabi_cfrcmple>:
 80010a4:	4684      	mov	ip, r0
 80010a6:	4608      	mov	r0, r1
 80010a8:	4661      	mov	r1, ip
 80010aa:	e7ff      	b.n	80010ac <__aeabi_cfcmpeq>

080010ac <__aeabi_cfcmpeq>:
 80010ac:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ae:	f7ff ffc9 	bl	8001044 <__cmpsf2>
 80010b2:	2800      	cmp	r0, #0
 80010b4:	bf48      	it	mi
 80010b6:	f110 0f00 	cmnmi.w	r0, #0
 80010ba:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010bc <__aeabi_fcmpeq>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff fff4 	bl	80010ac <__aeabi_cfcmpeq>
 80010c4:	bf0c      	ite	eq
 80010c6:	2001      	moveq	r0, #1
 80010c8:	2000      	movne	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmplt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffea 	bl	80010ac <__aeabi_cfcmpeq>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmple>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffe0 	bl	80010ac <__aeabi_cfcmpeq>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpge>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffd2 	bl	80010a4 <__aeabi_cfrcmple>
 8001100:	bf94      	ite	ls
 8001102:	2001      	movls	r0, #1
 8001104:	2000      	movhi	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmpgt>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffc8 	bl	80010a4 <__aeabi_cfrcmple>
 8001114:	bf34      	ite	cc
 8001116:	2001      	movcc	r0, #1
 8001118:	2000      	movcs	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_f2iz>:
 8001120:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001124:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001128:	d30f      	bcc.n	800114a <__aeabi_f2iz+0x2a>
 800112a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001132:	d90d      	bls.n	8001150 <__aeabi_f2iz+0x30>
 8001134:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800113c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001140:	fa23 f002 	lsr.w	r0, r3, r2
 8001144:	bf18      	it	ne
 8001146:	4240      	negne	r0, r0
 8001148:	4770      	bx	lr
 800114a:	f04f 0000 	mov.w	r0, #0
 800114e:	4770      	bx	lr
 8001150:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001154:	d101      	bne.n	800115a <__aeabi_f2iz+0x3a>
 8001156:	0242      	lsls	r2, r0, #9
 8001158:	d105      	bne.n	8001166 <__aeabi_f2iz+0x46>
 800115a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800115e:	bf08      	it	eq
 8001160:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr

0800116c <__aeabi_f2uiz>:
 800116c:	0042      	lsls	r2, r0, #1
 800116e:	d20e      	bcs.n	800118e <__aeabi_f2uiz+0x22>
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30b      	bcc.n	800118e <__aeabi_f2uiz+0x22>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d409      	bmi.n	8001194 <__aeabi_f2uiz+0x28>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	fa23 f002 	lsr.w	r0, r3, r2
 800118c:	4770      	bx	lr
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	4770      	bx	lr
 8001194:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001198:	d101      	bne.n	800119e <__aeabi_f2uiz+0x32>
 800119a:	0242      	lsls	r2, r0, #9
 800119c:	d102      	bne.n	80011a4 <__aeabi_f2uiz+0x38>
 800119e:	f04f 30ff 	mov.w	r0, #4294967295
 80011a2:	4770      	bx	lr
 80011a4:	f04f 0000 	mov.w	r0, #0
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop

080011ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <SystemInit+0x5c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <SystemInit+0x5c>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <SystemInit+0x5c>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4911      	ldr	r1, [pc, #68]	; (8001208 <SystemInit+0x5c>)
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <SystemInit+0x60>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <SystemInit+0x5c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <SystemInit+0x5c>)
 80011ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <SystemInit+0x5c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <SystemInit+0x5c>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <SystemInit+0x5c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <SystemInit+0x5c>)
 80011ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80011ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SystemInit+0x5c>)
 80011f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011f6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80011f8:	f000 f80c 	bl	8001214 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SystemInit+0x64>)
 80011fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001202:	609a      	str	r2, [r3, #8]
#endif 
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000
 800120c:	f8ff0000 	.word	0xf8ff0000
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001218:	f000 f802 	bl	8001220 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <SetSysClockTo72+0xf8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a39      	ldr	r2, [pc, #228]	; (8001318 <SetSysClockTo72+0xf8>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <SetSysClockTo72+0xf8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d103      	bne.n	8001258 <SetSysClockTo72+0x38>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001256:	d1f0      	bne.n	800123a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <SetSysClockTo72+0xf8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001264:	2301      	movs	r3, #1
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	e001      	b.n	800126e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d14b      	bne.n	800130c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <SetSysClockTo72+0xfc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a28      	ldr	r2, [pc, #160]	; (800131c <SetSysClockTo72+0xfc>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <SetSysClockTo72+0xfc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a25      	ldr	r2, [pc, #148]	; (800131c <SetSysClockTo72+0xfc>)
 8001286:	f023 0303 	bic.w	r3, r3, #3
 800128a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <SetSysClockTo72+0xfc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <SetSysClockTo72+0xfc>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <SetSysClockTo72+0xf8>)
 800129a:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <SetSysClockTo72+0xf8>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <SetSysClockTo72+0xf8>)
 80012a2:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <SetSysClockTo72+0xf8>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <SetSysClockTo72+0xf8>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <SetSysClockTo72+0xf8>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <SetSysClockTo72+0xf8>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <SetSysClockTo72+0xf8>)
 80012ba:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80012be:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <SetSysClockTo72+0xf8>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <SetSysClockTo72+0xf8>)
 80012c6:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80012ca:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <SetSysClockTo72+0xf8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <SetSysClockTo72+0xf8>)
 80012d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80012d8:	bf00      	nop
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <SetSysClockTo72+0xf8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f9      	beq.n	80012da <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <SetSysClockTo72+0xf8>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <SetSysClockTo72+0xf8>)
 80012ec:	f023 0303 	bic.w	r3, r3, #3
 80012f0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <SetSysClockTo72+0xf8>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <SetSysClockTo72+0xf8>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80012fe:	bf00      	nop
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SetSysClockTo72+0xf8>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b08      	cmp	r3, #8
 800130a:	d1f9      	bne.n	8001300 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	40022000 	.word	0x40022000

08001320 <adc_init>:



//ADC Init
void adc_init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    //ADC prescaller
    RCC->CFGR &= ~RCC_CFGR_ADCPRE;      //div by 8
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <adc_init+0x88>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <adc_init+0x88>)
 800132a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800132e:	6053      	str	r3, [r2, #4]
    
    //ADC clock on
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001330:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <adc_init+0x88>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <adc_init+0x88>)
 8001336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133a:	6193      	str	r3, [r2, #24]
    
    //Sample time
    ADC1->SMPR2 |= ADC_SMPR2_SMP0_1;    //13.5 cycles
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <adc_init+0x8c>)
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <adc_init+0x8c>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	6113      	str	r3, [r2, #16]
    
    //Number of conversions in regular sequence
    ADC1->SQR1 &= ~ADC_SQR1_L;          //1 conversion
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <adc_init+0x8c>)
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <adc_init+0x8c>)
 800134e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001352:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    //First channel in regular sequence
    ADC1->SQR3 &= ~ADC_SQR3_SQ1;        //channel #0
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <adc_init+0x8c>)
 8001356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <adc_init+0x8c>)
 800135a:	f023 031f 	bic.w	r3, r3, #31
 800135e:	6353      	str	r3, [r2, #52]	; 0x34
    
    //Extermal trigger enable for regular sequence
    ADC1->CR2 |= ADC_CR2_EXTTRIG;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <adc_init+0x8c>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4a11      	ldr	r2, [pc, #68]	; (80013ac <adc_init+0x8c>)
 8001366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800136a:	6093      	str	r3, [r2, #8]
    
    //Event to start regular sequence
    ADC1->CR2 |= ADC_CR2_EXTSEL;        //start by software
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <adc_init+0x8c>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <adc_init+0x8c>)
 8001372:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8001376:	6093      	str	r3, [r2, #8]
    
    //ADC enable
    ADC1->CR2 |= ADC_CR2_ADON;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <adc_init+0x8c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <adc_init+0x8c>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6093      	str	r3, [r2, #8]
    
    //Calibration
    delay_cyc(100000);
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <adc_init+0x90>)
 8001386:	f007 f84f 	bl	8008428 <delay_cyc>
    ADC1->CR2 |= ADC_CR2_CAL;           //start cal
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <adc_init+0x8c>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <adc_init+0x8c>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6093      	str	r3, [r2, #8]
    while (ADC1->CR2 & ADC_CR2_CAL);    //wait
 8001396:	bf00      	nop
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <adc_init+0x8c>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f9      	bne.n	8001398 <adc_init+0x78>
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40012400 	.word	0x40012400
 80013b0:	000186a0 	.word	0x000186a0
 80013b4:	00000000 	.word	0x00000000

080013b8 <adc_get_bat_voltage>:



//Get battery voltage
uint8_t adc_get_bat_voltage(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	bat_interval_counter++;
 80013bc:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <adc_get_bat_voltage+0x140>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <adc_get_bat_voltage+0x140>)
 80013c6:	701a      	strb	r2, [r3, #0]

    if (bat_interval_counter >= GET_BAT_VOLTAGE_INTERVAL)
 80013c8:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <adc_get_bat_voltage+0x140>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b09      	cmp	r3, #9
 80013ce:	d97e      	bls.n	80014ce <adc_get_bat_voltage+0x116>
    {
    	bat_interval_counter = 0;
 80013d0:	4b49      	ldr	r3, [pc, #292]	; (80014f8 <adc_get_bat_voltage+0x140>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]

    	bat_mon_on();	//Enable resistive divider and wait a bit
 80013d6:	f000 fca9 	bl	8001d2c <bat_mon_on>
    	delay_cyc(100);
 80013da:	2064      	movs	r0, #100	; 0x64
 80013dc:	f007 f824 	bl	8008428 <delay_cyc>

		//Start conversation
		ADC1->CR2 |= ADC_CR2_SWSTART;
 80013e0:	4b46      	ldr	r3, [pc, #280]	; (80014fc <adc_get_bat_voltage+0x144>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4a45      	ldr	r2, [pc, #276]	; (80014fc <adc_get_bat_voltage+0x144>)
 80013e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013ea:	6093      	str	r3, [r2, #8]

		//Wait for conversation end
		while (!(ADC1->SR & ADC_SR_EOC));
 80013ec:	bf00      	nop
 80013ee:	4b43      	ldr	r3, [pc, #268]	; (80014fc <adc_get_bat_voltage+0x144>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f9      	beq.n	80013ee <adc_get_bat_voltage+0x36>

		bat_mon_off();	//Disable resistive divider
 80013fa:	f000 fca3 	bl	8001d44 <bat_mon_off>

		//Convert
		bat_voltage = 2 * ((ADC1->DR * vref) / 4096);     //x2 due to resistive voltage divider before ADC input
 80013fe:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <adc_get_bat_voltage+0x144>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fc6e 	bl	8000ce4 <__aeabi_ui2f>
 8001408:	4602      	mov	r2, r0
 800140a:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <adc_get_bat_voltage+0x148>)
 800140c:	4619      	mov	r1, r3
 800140e:	4610      	mov	r0, r2
 8001410:	f7ff fcc0 	bl	8000d94 <__aeabi_fmul>
 8001414:	4603      	mov	r3, r0
 8001416:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fd6e 	bl	8000efc <__aeabi_fdiv>
 8001420:	4603      	mov	r3, r0
 8001422:	4619      	mov	r1, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fbad 	bl	8000b84 <__addsf3>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b35      	ldr	r3, [pc, #212]	; (8001504 <adc_get_bat_voltage+0x14c>)
 8001430:	601a      	str	r2, [r3, #0]

		//Refresh flags
		if (bat_voltage > V_BATTERY_75_TO_100)
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <adc_get_bat_voltage+0x14c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe fffe 	bl	8000438 <__aeabi_f2d>
 800143c:	a326      	add	r3, pc, #152	; (adr r3, 80014d8 <adc_get_bat_voltage+0x120>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff fae1 	bl	8000a08 <__aeabi_dcmpgt>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <adc_get_bat_voltage+0x9e>
		{
			set_device_flags(FLAGS_BATTERY, FLAG_BATTERY_75_TO_100);
 800144c:	2104      	movs	r1, #4
 800144e:	2001      	movs	r0, #1
 8001450:	f001 f9b6 	bl	80027c0 <set_device_flags>
 8001454:	e03b      	b.n	80014ce <adc_get_bat_voltage+0x116>
		}
		else if (bat_voltage > V_BATTERY_50_TO_75)
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <adc_get_bat_voltage+0x14c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7fe ffec 	bl	8000438 <__aeabi_f2d>
 8001460:	a31f      	add	r3, pc, #124	; (adr r3, 80014e0 <adc_get_bat_voltage+0x128>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7ff facf 	bl	8000a08 <__aeabi_dcmpgt>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <adc_get_bat_voltage+0xc2>
		{
			set_device_flags(FLAGS_BATTERY, FLAG_BATTERY_50_TO_75);
 8001470:	2103      	movs	r1, #3
 8001472:	2001      	movs	r0, #1
 8001474:	f001 f9a4 	bl	80027c0 <set_device_flags>
 8001478:	e029      	b.n	80014ce <adc_get_bat_voltage+0x116>
		}
		else if (bat_voltage > V_BATTERY_25_TO_50)
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <adc_get_bat_voltage+0x14c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ffda 	bl	8000438 <__aeabi_f2d>
 8001484:	a318      	add	r3, pc, #96	; (adr r3, 80014e8 <adc_get_bat_voltage+0x130>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff fabd 	bl	8000a08 <__aeabi_dcmpgt>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <adc_get_bat_voltage+0xe6>
		{
			set_device_flags(FLAGS_BATTERY, FLAG_BATTERY_25_TO_50);
 8001494:	2102      	movs	r1, #2
 8001496:	2001      	movs	r0, #1
 8001498:	f001 f992 	bl	80027c0 <set_device_flags>
 800149c:	e017      	b.n	80014ce <adc_get_bat_voltage+0x116>
		}
		else if (bat_voltage > V_BATTERY_10_TO_25)
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <adc_get_bat_voltage+0x14c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe ffc8 	bl	8000438 <__aeabi_f2d>
 80014a8:	a311      	add	r3, pc, #68	; (adr r3, 80014f0 <adc_get_bat_voltage+0x138>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff faab 	bl	8000a08 <__aeabi_dcmpgt>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <adc_get_bat_voltage+0x10a>
		{
			set_device_flags(FLAGS_BATTERY, FLAG_BATTERY_10_TO_25);
 80014b8:	2101      	movs	r1, #1
 80014ba:	2001      	movs	r0, #1
 80014bc:	f001 f980 	bl	80027c0 <set_device_flags>
 80014c0:	e005      	b.n	80014ce <adc_get_bat_voltage+0x116>
		}
		else
		{
			set_device_flags(FLAGS_BATTERY, FLAG_BATTERY_0_TO_10);
 80014c2:	2100      	movs	r1, #0
 80014c4:	2001      	movs	r0, #1
 80014c6:	f001 f97b 	bl	80027c0 <set_device_flags>
			return 1;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <adc_get_bat_voltage+0x118>
		}
    }

    return 0;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	f3af 8000 	nop.w
 80014d8:	33333333 	.word	0x33333333
 80014dc:	400f3333 	.word	0x400f3333
 80014e0:	cccccccd 	.word	0xcccccccd
 80014e4:	400ccccc 	.word	0x400ccccc
 80014e8:	66666666 	.word	0x66666666
 80014ec:	400a6666 	.word	0x400a6666
 80014f0:	cccccccd 	.word	0xcccccccd
 80014f4:	4008cccc 	.word	0x4008cccc
 80014f8:	200000e4 	.word	0x200000e4
 80014fc:	40012400 	.word	0x40012400
 8001500:	40533333 	.word	0x40533333
 8001504:	20000128 	.word	0x20000128

08001508 <get_bat_voltage>:



float get_bat_voltage(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
	return bat_voltage;
 800150c:	4b02      	ldr	r3, [pc, #8]	; (8001518 <get_bat_voltage+0x10>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000128 	.word	0x20000128

0800151c <scan_buttons>:



//button return code = {ButtonNumber(0...BUTTONS_NUM-1) * BUTTON_ACTIONS_NUM + BUTTON_ACTION(_SHORT)(_LONG)} + 1
uint8_t scan_buttons(void)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
    if (scan_interval_counter < SCAN_INTERVAL)
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <scan_buttons+0x1b4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f240 52db 	movw	r2, #1499	; 0x5db
 800152a:	4293      	cmp	r3, r2
 800152c:	d805      	bhi.n	800153a <scan_buttons+0x1e>
    {
        scan_interval_counter++;            //increase counter
 800152e:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <scan_buttons+0x1b4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	4a66      	ldr	r2, [pc, #408]	; (80016d0 <scan_buttons+0x1b4>)
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e0c3      	b.n	80016c2 <scan_buttons+0x1a6>
    }
    else
    {
        scan_interval_counter = 0;          //time to scan buttons! reset counter
 800153a:	4b65      	ldr	r3, [pc, #404]	; (80016d0 <scan_buttons+0x1b4>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
        
        idr_register_copy = GPIOA->IDR;             //save pins data
 8001540:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <scan_buttons+0x1b8>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a64      	ldr	r2, [pc, #400]	; (80016d8 <scan_buttons+0x1bc>)
 8001546:	6013      	str	r3, [r2, #0]
        idr_register_copy &= (GPIO_IDR_IDR1 |       //mask needed pins
 8001548:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <scan_buttons+0x1bc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001550:	4a61      	ldr	r2, [pc, #388]	; (80016d8 <scan_buttons+0x1bc>)
 8001552:	6013      	str	r3, [r2, #0]
                              GPIO_IDR_IDR2 |
                              GPIO_IDR_IDR3 |
                              GPIO_IDR_IDR4 |
                              GPIO_IDR_IDR5);
        
        idr_register_copy >>= 1;            //align bits to the left, now IDR1(PA1) is in LSBit position
 8001554:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <scan_buttons+0x1bc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	085b      	lsrs	r3, r3, #1
 800155a:	4a5f      	ldr	r2, [pc, #380]	; (80016d8 <scan_buttons+0x1bc>)
 800155c:	6013      	str	r3, [r2, #0]
        
        for (uint8_t i = 0; i < BUTTONS_NUM; i++)       //update buttons weight (digital capacitor, increase or decrease "charge")
 800155e:	2300      	movs	r3, #0
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	e026      	b.n	80015b2 <scan_buttons+0x96>
        {
            if (idr_register_copy & ((uint32_t)1 << i)) //check pin state
 8001564:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <scan_buttons+0x1bc>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	fa22 f303 	lsr.w	r3, r2, r3
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00d      	beq.n	8001592 <scan_buttons+0x76>
            {
                if (button_weight[i] < BUTTON_WEIGHT_MAX)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4a58      	ldr	r2, [pc, #352]	; (80016dc <scan_buttons+0x1c0>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d815      	bhi.n	80015ac <scan_buttons+0x90>
                {
                    button_weight[i] += 1;      // if input pin = 1, increase weight
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	4a56      	ldr	r2, [pc, #344]	; (80016dc <scan_buttons+0x1c0>)
 8001584:	5cd2      	ldrb	r2, [r2, r3]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	3201      	adds	r2, #1
 800158a:	b2d1      	uxtb	r1, r2
 800158c:	4a53      	ldr	r2, [pc, #332]	; (80016dc <scan_buttons+0x1c0>)
 800158e:	54d1      	strb	r1, [r2, r3]
 8001590:	e00c      	b.n	80015ac <scan_buttons+0x90>
                }
            }
            else
            {
                if (button_weight[i] > BUTTON_WEIGHT_MIN)
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4a51      	ldr	r2, [pc, #324]	; (80016dc <scan_buttons+0x1c0>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d007      	beq.n	80015ac <scan_buttons+0x90>
                {
                    button_weight[i] -= 1;      // if input pin = 0, decrease weight
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4a4f      	ldr	r2, [pc, #316]	; (80016dc <scan_buttons+0x1c0>)
 80015a0:	5cd2      	ldrb	r2, [r2, r3]
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	3a01      	subs	r2, #1
 80015a6:	b2d1      	uxtb	r1, r2
 80015a8:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <scan_buttons+0x1c0>)
 80015aa:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < BUTTONS_NUM; i++)       //update buttons weight (digital capacitor, increase or decrease "charge")
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	3301      	adds	r3, #1
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d9d5      	bls.n	8001564 <scan_buttons+0x48>
                }
            }
        }
        
        for (uint8_t i = 0; i < BUTTONS_NUM; i++)       //make a desicion "button is pressed or not?" (with hysteresis)
 80015b8:	2300      	movs	r3, #0
 80015ba:	71bb      	strb	r3, [r7, #6]
 80015bc:	e021      	b.n	8001602 <scan_buttons+0xe6>
        {
            if (button_weight[i] > BUTTON_THRESHOLD_HI)
 80015be:	79bb      	ldrb	r3, [r7, #6]
 80015c0:	4a46      	ldr	r2, [pc, #280]	; (80016dc <scan_buttons+0x1c0>)
 80015c2:	5cd3      	ldrb	r3, [r2, r3]
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	d90a      	bls.n	80015de <scan_buttons+0xc2>
            {
                button_prev_state[i] = button_state[i];
 80015c8:	79ba      	ldrb	r2, [r7, #6]
 80015ca:	79bb      	ldrb	r3, [r7, #6]
 80015cc:	4944      	ldr	r1, [pc, #272]	; (80016e0 <scan_buttons+0x1c4>)
 80015ce:	5c89      	ldrb	r1, [r1, r2]
 80015d0:	4a44      	ldr	r2, [pc, #272]	; (80016e4 <scan_buttons+0x1c8>)
 80015d2:	54d1      	strb	r1, [r2, r3]
                button_state[i] = BUTTON_RELEASED;
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	4a42      	ldr	r2, [pc, #264]	; (80016e0 <scan_buttons+0x1c4>)
 80015d8:	2101      	movs	r1, #1
 80015da:	54d1      	strb	r1, [r2, r3]
 80015dc:	e00e      	b.n	80015fc <scan_buttons+0xe0>
            }
            else if (button_weight[i] < BUTTON_THRESHOLD_LO)
 80015de:	79bb      	ldrb	r3, [r7, #6]
 80015e0:	4a3e      	ldr	r2, [pc, #248]	; (80016dc <scan_buttons+0x1c0>)
 80015e2:	5cd3      	ldrb	r3, [r2, r3]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d809      	bhi.n	80015fc <scan_buttons+0xe0>
            {
                button_prev_state[i] = button_state[i];
 80015e8:	79ba      	ldrb	r2, [r7, #6]
 80015ea:	79bb      	ldrb	r3, [r7, #6]
 80015ec:	493c      	ldr	r1, [pc, #240]	; (80016e0 <scan_buttons+0x1c4>)
 80015ee:	5c89      	ldrb	r1, [r1, r2]
 80015f0:	4a3c      	ldr	r2, [pc, #240]	; (80016e4 <scan_buttons+0x1c8>)
 80015f2:	54d1      	strb	r1, [r2, r3]
                button_state[i] = BUTTON_PRESSED;
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	4a3a      	ldr	r2, [pc, #232]	; (80016e0 <scan_buttons+0x1c4>)
 80015f8:	2100      	movs	r1, #0
 80015fa:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < BUTTONS_NUM; i++)       //make a desicion "button is pressed or not?" (with hysteresis)
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	3301      	adds	r3, #1
 8001600:	71bb      	strb	r3, [r7, #6]
 8001602:	79bb      	ldrb	r3, [r7, #6]
 8001604:	2b04      	cmp	r3, #4
 8001606:	d9da      	bls.n	80015be <scan_buttons+0xa2>
            }
        }
        
        for (uint8_t i = 0; i < BUTTONS_NUM; i++)       //check click duration. short click after button released (and before timeout overflow); long click after timeout overflow
 8001608:	2300      	movs	r3, #0
 800160a:	717b      	strb	r3, [r7, #5]
 800160c:	e056      	b.n	80016bc <scan_buttons+0x1a0>
        {
            if ((button_state[i] == BUTTON_PRESSED) && (button_pressed_counter[i] < BUTTON_PRESSED_COUNTER_MAX))   //increase timeout counter, update overflow states
 800160e:	797b      	ldrb	r3, [r7, #5]
 8001610:	4a33      	ldr	r2, [pc, #204]	; (80016e0 <scan_buttons+0x1c4>)
 8001612:	5cd3      	ldrb	r3, [r2, r3]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d124      	bne.n	8001662 <scan_buttons+0x146>
 8001618:	797b      	ldrb	r3, [r7, #5]
 800161a:	4a33      	ldr	r2, [pc, #204]	; (80016e8 <scan_buttons+0x1cc>)
 800161c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001624:	4293      	cmp	r3, r2
 8001626:	d01c      	beq.n	8001662 <scan_buttons+0x146>
            {
                button_pressed_counter[i]++;
 8001628:	797b      	ldrb	r3, [r7, #5]
 800162a:	4a2f      	ldr	r2, [pc, #188]	; (80016e8 <scan_buttons+0x1cc>)
 800162c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001630:	3201      	adds	r2, #1
 8001632:	b291      	uxth	r1, r2
 8001634:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <scan_buttons+0x1cc>)
 8001636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                
                timeout_prev_state[i] = timeout_state[i];
 800163a:	797a      	ldrb	r2, [r7, #5]
 800163c:	797b      	ldrb	r3, [r7, #5]
 800163e:	492b      	ldr	r1, [pc, #172]	; (80016ec <scan_buttons+0x1d0>)
 8001640:	5c89      	ldrb	r1, [r1, r2]
 8001642:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <scan_buttons+0x1d4>)
 8001644:	54d1      	strb	r1, [r2, r3]
                timeout_state[i] = (button_pressed_counter[i] > BUTTON_PRESSED_COUNTER_THRESHOLD);     //overflow or not? 1 or 0?
 8001646:	797b      	ldrb	r3, [r7, #5]
 8001648:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <scan_buttons+0x1cc>)
 800164a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001652:	bf8c      	ite	hi
 8001654:	2301      	movhi	r3, #1
 8001656:	2300      	movls	r3, #0
 8001658:	b2da      	uxtb	r2, r3
 800165a:	797b      	ldrb	r3, [r7, #5]
 800165c:	4611      	mov	r1, r2
 800165e:	4a23      	ldr	r2, [pc, #140]	; (80016ec <scan_buttons+0x1d0>)
 8001660:	54d1      	strb	r1, [r2, r3]
            }
            
            if ((button_state[i] == BUTTON_RELEASED) && (button_prev_state[i] == BUTTON_PRESSED))   //button has been released
 8001662:	797b      	ldrb	r3, [r7, #5]
 8001664:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <scan_buttons+0x1c4>)
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d114      	bne.n	8001696 <scan_buttons+0x17a>
 800166c:	797b      	ldrb	r3, [r7, #5]
 800166e:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <scan_buttons+0x1c8>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10f      	bne.n	8001696 <scan_buttons+0x17a>
            {
                button_pressed_counter[i] = 0;
 8001676:	797b      	ldrb	r3, [r7, #5]
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <scan_buttons+0x1cc>)
 800167a:	2100      	movs	r1, #0
 800167c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                
                if (timeout_state[i] == TIMEOUT_NO_OVERFLOW)
 8001680:	797b      	ldrb	r3, [r7, #5]
 8001682:	4a1a      	ldr	r2, [pc, #104]	; (80016ec <scan_buttons+0x1d0>)
 8001684:	5cd3      	ldrb	r3, [r2, r3]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <scan_buttons+0x17a>
                {
                    return (i * BUTTON_ACTIONS_NUM + BUTTON_ACTION_SHORT) + 1;              //if before overflow, then short click
 800168a:	797b      	ldrb	r3, [r7, #5]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	e016      	b.n	80016c4 <scan_buttons+0x1a8>
                }
            }
            
            if ((timeout_state[i] == TIMEOUT_OVERFLOW) && (timeout_prev_state[i] == TIMEOUT_NO_OVERFLOW))   //overflow occured
 8001696:	797b      	ldrb	r3, [r7, #5]
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <scan_buttons+0x1d0>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d10a      	bne.n	80016b6 <scan_buttons+0x19a>
 80016a0:	797b      	ldrb	r3, [r7, #5]
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <scan_buttons+0x1d4>)
 80016a4:	5cd3      	ldrb	r3, [r2, r3]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d105      	bne.n	80016b6 <scan_buttons+0x19a>
            {
                return (i * BUTTON_ACTIONS_NUM + BUTTON_ACTION_LONG) + 1;   //long click
 80016aa:	797b      	ldrb	r3, [r7, #5]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	e006      	b.n	80016c4 <scan_buttons+0x1a8>
        for (uint8_t i = 0; i < BUTTONS_NUM; i++)       //check click duration. short click after button released (and before timeout overflow); long click after timeout overflow
 80016b6:	797b      	ldrb	r3, [r7, #5]
 80016b8:	3301      	adds	r3, #1
 80016ba:	717b      	strb	r3, [r7, #5]
 80016bc:	797b      	ldrb	r3, [r7, #5]
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d9a5      	bls.n	800160e <scan_buttons+0xf2>
            }
        }
    }
    return BTN_NO_ACTION;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	200000e8 	.word	0x200000e8
 80016d4:	40010800 	.word	0x40010800
 80016d8:	200000ec 	.word	0x200000ec
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000010 	.word	0x20000010
 80016e8:	200000f0 	.word	0x200000f0
 80016ec:	200000fc 	.word	0x200000fc
 80016f0:	20000104 	.word	0x20000104

080016f4 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	2201      	movs	r2, #1
 8001706:	fa02 f103 	lsl.w	r1, r2, r3
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <NVIC_EnableIRQ+0x2c>)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	095b      	lsrs	r3, r3, #5
 8001712:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100

08001724 <gpio_init>:



//Initialization of all used ports
void gpio_init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    //Port A
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001728:	4b98      	ldr	r3, [pc, #608]	; (800198c <gpio_init+0x268>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a97      	ldr	r2, [pc, #604]	; (800198c <gpio_init+0x268>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6193      	str	r3, [r2, #24]
    
    //PA0 - ADC0 (Battery voltage)
    GPIOA->CRL &= ~GPIO_CRL_MODE0;      //input mode
 8001734:	4b96      	ldr	r3, [pc, #600]	; (8001990 <gpio_init+0x26c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a95      	ldr	r2, [pc, #596]	; (8001990 <gpio_init+0x26c>)
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF0;       //analog input
 8001740:	4b93      	ldr	r3, [pc, #588]	; (8001990 <gpio_init+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a92      	ldr	r2, [pc, #584]	; (8001990 <gpio_init+0x26c>)
 8001746:	f023 030c 	bic.w	r3, r3, #12
 800174a:	6013      	str	r3, [r2, #0]
    
    //PA1 - Button 1
    GPIOA->CRL &= ~GPIO_CRL_MODE1;      //input mode
 800174c:	4b90      	ldr	r3, [pc, #576]	; (8001990 <gpio_init+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a8f      	ldr	r2, [pc, #572]	; (8001990 <gpio_init+0x26c>)
 8001752:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001756:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF1_0;     //input with pull
 8001758:	4b8d      	ldr	r3, [pc, #564]	; (8001990 <gpio_init+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a8c      	ldr	r2, [pc, #560]	; (8001990 <gpio_init+0x26c>)
 800175e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001762:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF1_1; 
 8001764:	4b8a      	ldr	r3, [pc, #552]	; (8001990 <gpio_init+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a89      	ldr	r2, [pc, #548]	; (8001990 <gpio_init+0x26c>)
 800176a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176e:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= GPIO_ODR_ODR1;        //pull-up on
 8001770:	4b87      	ldr	r3, [pc, #540]	; (8001990 <gpio_init+0x26c>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4a86      	ldr	r2, [pc, #536]	; (8001990 <gpio_init+0x26c>)
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	60d3      	str	r3, [r2, #12]
    
    //PA2 - Button 2
    GPIOA->CRL &= ~GPIO_CRL_MODE2;      //input mode
 800177c:	4b84      	ldr	r3, [pc, #528]	; (8001990 <gpio_init+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a83      	ldr	r2, [pc, #524]	; (8001990 <gpio_init+0x26c>)
 8001782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001786:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF2_0;     //input with pull
 8001788:	4b81      	ldr	r3, [pc, #516]	; (8001990 <gpio_init+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a80      	ldr	r2, [pc, #512]	; (8001990 <gpio_init+0x26c>)
 800178e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001792:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF2_1; 
 8001794:	4b7e      	ldr	r3, [pc, #504]	; (8001990 <gpio_init+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a7d      	ldr	r2, [pc, #500]	; (8001990 <gpio_init+0x26c>)
 800179a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800179e:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= GPIO_ODR_ODR2;        //pull-up on
 80017a0:	4b7b      	ldr	r3, [pc, #492]	; (8001990 <gpio_init+0x26c>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <gpio_init+0x26c>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	60d3      	str	r3, [r2, #12]
    
    //PA3 - Button 3
    GPIOA->CRL &= ~GPIO_CRL_MODE3;      //input mode
 80017ac:	4b78      	ldr	r3, [pc, #480]	; (8001990 <gpio_init+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a77      	ldr	r2, [pc, #476]	; (8001990 <gpio_init+0x26c>)
 80017b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017b6:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF3_0;     //input with pull
 80017b8:	4b75      	ldr	r3, [pc, #468]	; (8001990 <gpio_init+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a74      	ldr	r2, [pc, #464]	; (8001990 <gpio_init+0x26c>)
 80017be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017c2:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF3_1; 
 80017c4:	4b72      	ldr	r3, [pc, #456]	; (8001990 <gpio_init+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a71      	ldr	r2, [pc, #452]	; (8001990 <gpio_init+0x26c>)
 80017ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ce:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= GPIO_ODR_ODR3;        //pull-up on
 80017d0:	4b6f      	ldr	r3, [pc, #444]	; (8001990 <gpio_init+0x26c>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a6e      	ldr	r2, [pc, #440]	; (8001990 <gpio_init+0x26c>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	60d3      	str	r3, [r2, #12]
    
    //PA4 - Button 4
    GPIOA->CRL &= ~GPIO_CRL_MODE4;      //input mode
 80017dc:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <gpio_init+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6b      	ldr	r2, [pc, #428]	; (8001990 <gpio_init+0x26c>)
 80017e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017e6:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF4_0;     //input with pull
 80017e8:	4b69      	ldr	r3, [pc, #420]	; (8001990 <gpio_init+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a68      	ldr	r2, [pc, #416]	; (8001990 <gpio_init+0x26c>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f2:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF4_1; 
 80017f4:	4b66      	ldr	r3, [pc, #408]	; (8001990 <gpio_init+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a65      	ldr	r2, [pc, #404]	; (8001990 <gpio_init+0x26c>)
 80017fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017fe:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= GPIO_ODR_ODR4;        //pull-up on
 8001800:	4b63      	ldr	r3, [pc, #396]	; (8001990 <gpio_init+0x26c>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a62      	ldr	r2, [pc, #392]	; (8001990 <gpio_init+0x26c>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	60d3      	str	r3, [r2, #12]
    
    //PA5 - Button 5
    GPIOA->CRL &= ~GPIO_CRL_MODE5;      //input mode
 800180c:	4b60      	ldr	r3, [pc, #384]	; (8001990 <gpio_init+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a5f      	ldr	r2, [pc, #380]	; (8001990 <gpio_init+0x26c>)
 8001812:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001816:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF5_0;     //input with pull
 8001818:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <gpio_init+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a5c      	ldr	r2, [pc, #368]	; (8001990 <gpio_init+0x26c>)
 800181e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001822:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF5_1; 
 8001824:	4b5a      	ldr	r3, [pc, #360]	; (8001990 <gpio_init+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a59      	ldr	r2, [pc, #356]	; (8001990 <gpio_init+0x26c>)
 800182a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800182e:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= GPIO_ODR_ODR5;        //pull-up on
 8001830:	4b57      	ldr	r3, [pc, #348]	; (8001990 <gpio_init+0x26c>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4a56      	ldr	r2, [pc, #344]	; (8001990 <gpio_init+0x26c>)
 8001836:	f043 0320 	orr.w	r3, r3, #32
 800183a:	60d3      	str	r3, [r2, #12]
    
    //PA6 - Battery monitor switch
    GPIOA->CRL |= GPIO_CRL_MODE6;       //output 50 MHz
 800183c:	4b54      	ldr	r3, [pc, #336]	; (8001990 <gpio_init+0x26c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a53      	ldr	r2, [pc, #332]	; (8001990 <gpio_init+0x26c>)
 8001842:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001846:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF6;       //output push-pull
 8001848:	4b51      	ldr	r3, [pc, #324]	; (8001990 <gpio_init+0x26c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a50      	ldr	r2, [pc, #320]	; (8001990 <gpio_init+0x26c>)
 800184e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001852:	6013      	str	r3, [r2, #0]

    //PA7 - Piezo Buzzer (PWM)
    GPIOA->CRL |= GPIO_CRL_MODE7;      //output mode
 8001854:	4b4e      	ldr	r3, [pc, #312]	; (8001990 <gpio_init+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a4d      	ldr	r2, [pc, #308]	; (8001990 <gpio_init+0x26c>)
 800185a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800185e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF7_0;    //alternate output push-pull
 8001860:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <gpio_init+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a4a      	ldr	r2, [pc, #296]	; (8001990 <gpio_init+0x26c>)
 8001866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800186a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF7_1;
 800186c:	4b48      	ldr	r3, [pc, #288]	; (8001990 <gpio_init+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a47      	ldr	r2, [pc, #284]	; (8001990 <gpio_init+0x26c>)
 8001872:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001876:	6013      	str	r3, [r2, #0]

    //PA8 - RES (SSD1306)
    GPIOA->CRH |= GPIO_CRH_MODE8;      //output 50 MHz
 8001878:	4b45      	ldr	r3, [pc, #276]	; (8001990 <gpio_init+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a44      	ldr	r2, [pc, #272]	; (8001990 <gpio_init+0x26c>)
 800187e:	f043 0303 	orr.w	r3, r3, #3
 8001882:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF8;      //output push-pull
 8001884:	4b42      	ldr	r3, [pc, #264]	; (8001990 <gpio_init+0x26c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a41      	ldr	r2, [pc, #260]	; (8001990 <gpio_init+0x26c>)
 800188a:	f023 030c 	bic.w	r3, r3, #12
 800188e:	6053      	str	r3, [r2, #4]
    
    //PA9 - USART TX1 (Debug out)
    GPIOA->CRH |= GPIO_CRH_MODE9;       //output 50 MHz
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <gpio_init+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a3e      	ldr	r2, [pc, #248]	; (8001990 <gpio_init+0x26c>)
 8001896:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800189a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF9_0;     //alternate output push-pull
 800189c:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <gpio_init+0x26c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a3b      	ldr	r2, [pc, #236]	; (8001990 <gpio_init+0x26c>)
 80018a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018a6:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF9_1;
 80018a8:	4b39      	ldr	r3, [pc, #228]	; (8001990 <gpio_init+0x26c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a38      	ldr	r2, [pc, #224]	; (8001990 <gpio_init+0x26c>)
 80018ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b2:	6053      	str	r3, [r2, #4]
    
    //PA10 - USART RX1 (GPS NMEA here)
    GPIOA->CRH &= ~GPIO_CRH_MODE10;     //input
 80018b4:	4b36      	ldr	r3, [pc, #216]	; (8001990 <gpio_init+0x26c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a35      	ldr	r2, [pc, #212]	; (8001990 <gpio_init+0x26c>)
 80018ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018be:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0;     //alternate input floating
 80018c0:	4b33      	ldr	r3, [pc, #204]	; (8001990 <gpio_init+0x26c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a32      	ldr	r2, [pc, #200]	; (8001990 <gpio_init+0x26c>)
 80018c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ca:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF10_1;
 80018cc:	4b30      	ldr	r3, [pc, #192]	; (8001990 <gpio_init+0x26c>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <gpio_init+0x26c>)
 80018d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018d6:	6053      	str	r3, [r2, #4]
    
    //PA11 - GPS (PPS interrupt)
    GPIOA->CRH &= ~GPIO_CRH_MODE11;     //input mode
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <gpio_init+0x26c>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a2c      	ldr	r2, [pc, #176]	; (8001990 <gpio_init+0x26c>)
 80018de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018e2:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF11_0;    //input with pull
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <gpio_init+0x26c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4a29      	ldr	r2, [pc, #164]	; (8001990 <gpio_init+0x26c>)
 80018ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ee:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF11_1; 
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <gpio_init+0x26c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a26      	ldr	r2, [pc, #152]	; (8001990 <gpio_init+0x26c>)
 80018f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fa:	6053      	str	r3, [r2, #4]
    GPIOA->ODR &= ~GPIO_ODR_ODR11;      //pull-down
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <gpio_init+0x26c>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4a23      	ldr	r2, [pc, #140]	; (8001990 <gpio_init+0x26c>)
 8001902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001906:	60d3      	str	r3, [r2, #12]
    
    //PA12 - CTS (SI4463)
    GPIOA->CRH &= ~GPIO_CRH_MODE11;     //input mode
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <gpio_init+0x26c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4a20      	ldr	r2, [pc, #128]	; (8001990 <gpio_init+0x26c>)
 800190e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001912:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF11_0;    //input with pull
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <gpio_init+0x26c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <gpio_init+0x26c>)
 800191a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800191e:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF11_1; 
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <gpio_init+0x26c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <gpio_init+0x26c>)
 8001926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192a:	6053      	str	r3, [r2, #4]
    GPIOA->ODR &= ~GPIO_ODR_ODR11;      //pull-down
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <gpio_init+0x26c>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4a17      	ldr	r2, [pc, #92]	; (8001990 <gpio_init+0x26c>)
 8001932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001936:	60d3      	str	r3, [r2, #12]
    
    //PA15 - CS (SI4463)
    GPIOA->CRH |= GPIO_CRH_MODE15;      //output 50 MHz
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <gpio_init+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <gpio_init+0x26c>)
 800193e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001942:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF15;      //output push-pull
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <gpio_init+0x26c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a11      	ldr	r2, [pc, #68]	; (8001990 <gpio_init+0x26c>)
 800194a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800194e:	6053      	str	r3, [r2, #4]
    
    
    //Port B
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <gpio_init+0x268>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <gpio_init+0x268>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6193      	str	r3, [r2, #24]
    
    //PB0 - Red LED
    GPIOB->CRL |= GPIO_CRL_MODE0;       //output 50 MHz
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <gpio_init+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <gpio_init+0x270>)
 8001962:	f043 0303 	orr.w	r3, r3, #3
 8001966:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF0;       //output push-pull
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <gpio_init+0x270>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a09      	ldr	r2, [pc, #36]	; (8001994 <gpio_init+0x270>)
 800196e:	f023 030c 	bic.w	r3, r3, #12
 8001972:	6013      	str	r3, [r2, #0]
    
    //PB1 - Green LED
    GPIOB->CRL |= GPIO_CRL_MODE1;       //output 50 MHz
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <gpio_init+0x270>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <gpio_init+0x270>)
 800197a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800197e:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF1;       //output push-pull
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <gpio_init+0x270>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a03      	ldr	r2, [pc, #12]	; (8001994 <gpio_init+0x270>)
 8001986:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800198a:	e005      	b.n	8001998 <gpio_init+0x274>
 800198c:	40021000 	.word	0x40021000
 8001990:	40010800 	.word	0x40010800
 8001994:	40010c00 	.word	0x40010c00
 8001998:	6013      	str	r3, [r2, #0]
    
    //PB3 - SCK (SI4463)
    GPIOB->CRL |= GPIO_CRL_MODE3;       //output 50 MHz
 800199a:	4b62      	ldr	r3, [pc, #392]	; (8001b24 <gpio_init+0x400>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a61      	ldr	r2, [pc, #388]	; (8001b24 <gpio_init+0x400>)
 80019a0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80019a4:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF3_0;     //alternate output push-pull
 80019a6:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <gpio_init+0x400>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a5e      	ldr	r2, [pc, #376]	; (8001b24 <gpio_init+0x400>)
 80019ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019b0:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_CNF3_1;
 80019b2:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <gpio_init+0x400>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a5b      	ldr	r2, [pc, #364]	; (8001b24 <gpio_init+0x400>)
 80019b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019bc:	6013      	str	r3, [r2, #0]
    
    //PB4 - MISO (SI4463)
    GPIOB->CRL &= ~GPIO_CRL_MODE4;      //input mode
 80019be:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <gpio_init+0x400>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <gpio_init+0x400>)
 80019c4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019c8:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_CNF4_0;      //floating input
 80019ca:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <gpio_init+0x400>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a55      	ldr	r2, [pc, #340]	; (8001b24 <gpio_init+0x400>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF4_1;
 80019d6:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <gpio_init+0x400>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <gpio_init+0x400>)
 80019dc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80019e0:	6013      	str	r3, [r2, #0]
    
    //PB5 - MOSI (SI4463)
    GPIOB->CRL |= GPIO_CRL_MODE5;       //output 50 MHz
 80019e2:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <gpio_init+0x400>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a4f      	ldr	r2, [pc, #316]	; (8001b24 <gpio_init+0x400>)
 80019e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80019ec:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF5_0;     //alternate output push-pull
 80019ee:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <gpio_init+0x400>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <gpio_init+0x400>)
 80019f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019f8:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_CNF5_1;
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <gpio_init+0x400>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a49      	ldr	r2, [pc, #292]	; (8001b24 <gpio_init+0x400>)
 8001a00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a04:	6013      	str	r3, [r2, #0]
    
    //PB6 - IRQn (SI4463 interrupt)
    GPIOB->CRL &= ~GPIO_CRL_MODE6;      //input mode
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <gpio_init+0x400>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a46      	ldr	r2, [pc, #280]	; (8001b24 <gpio_init+0x400>)
 8001a0c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001a10:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF6_0;     //input with pull
 8001a12:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <gpio_init+0x400>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a43      	ldr	r2, [pc, #268]	; (8001b24 <gpio_init+0x400>)
 8001a18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a1c:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_CNF6_1;
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <gpio_init+0x400>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a40      	ldr	r2, [pc, #256]	; (8001b24 <gpio_init+0x400>)
 8001a24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a28:	6013      	str	r3, [r2, #0]
    GPIOB->ODR |= GPIO_ODR_ODR6;        //pull-up
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <gpio_init+0x400>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	4a3d      	ldr	r2, [pc, #244]	; (8001b24 <gpio_init+0x400>)
 8001a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a34:	60d3      	str	r3, [r2, #12]
    
    //PB7 - SDN (SI4463)
    GPIOB->CRL |= GPIO_CRL_MODE7;       //output 50 MHz
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <gpio_init+0x400>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a3a      	ldr	r2, [pc, #232]	; (8001b24 <gpio_init+0x400>)
 8001a3c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001a40:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF7;       //output push-pull
 8001a42:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <gpio_init+0x400>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a37      	ldr	r2, [pc, #220]	; (8001b24 <gpio_init+0x400>)
 8001a48:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001a4c:	6013      	str	r3, [r2, #0]
    
    //PB10 - I2C SCL
    GPIOB->CRH |= GPIO_CRH_MODE10;       //output 50 MHz
 8001a4e:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <gpio_init+0x400>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a34      	ldr	r2, [pc, #208]	; (8001b24 <gpio_init+0x400>)
 8001a54:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a58:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_CNF10;        //alternate function open-drain
 8001a5a:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <gpio_init+0x400>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <gpio_init+0x400>)
 8001a60:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001a64:	6053      	str	r3, [r2, #4]
    
    //PB11 - I2C SDA
    GPIOB->CRH |= GPIO_CRH_MODE11;       //output max speed
 8001a66:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <gpio_init+0x400>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a2e      	ldr	r2, [pc, #184]	; (8001b24 <gpio_init+0x400>)
 8001a6c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001a70:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_CNF11;        //alternate function open-drain
 8001a72:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <gpio_init+0x400>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4a2b      	ldr	r2, [pc, #172]	; (8001b24 <gpio_init+0x400>)
 8001a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a7c:	6053      	str	r3, [r2, #4]
    
    //PB12 - CS (SSD1306)
    GPIOB->CRH |= GPIO_CRH_MODE12;      //output 50 MHz
 8001a7e:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <gpio_init+0x400>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4a28      	ldr	r2, [pc, #160]	; (8001b24 <gpio_init+0x400>)
 8001a84:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001a88:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~GPIO_CRH_CNF12;      //output push-pull
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <gpio_init+0x400>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a25      	ldr	r2, [pc, #148]	; (8001b24 <gpio_init+0x400>)
 8001a90:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001a94:	6053      	str	r3, [r2, #4]
    
    //PB13 - SCK (SSD1306)
    GPIOB->CRH |= GPIO_CRH_MODE13;      //output 50 MHz
 8001a96:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <gpio_init+0x400>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <gpio_init+0x400>)
 8001a9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001aa0:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~GPIO_CRH_CNF13_0;    //alternate output push-pull
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <gpio_init+0x400>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <gpio_init+0x400>)
 8001aa8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001aac:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_CNF13_1;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <gpio_init+0x400>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <gpio_init+0x400>)
 8001ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ab8:	6053      	str	r3, [r2, #4]
    
    //PB14 - D/C (SSD1306)
    GPIOB->CRH |= GPIO_CRH_MODE14;      //output 50 MHz
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <gpio_init+0x400>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <gpio_init+0x400>)
 8001ac0:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001ac4:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~GPIO_CRH_CNF14;      //output push-pull
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <gpio_init+0x400>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <gpio_init+0x400>)
 8001acc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001ad0:	6053      	str	r3, [r2, #4]
    
    //PB15 - MOSI (SSD1306)
    GPIOB->CRH |= GPIO_CRH_MODE15;      //output 50 MHz
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <gpio_init+0x400>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <gpio_init+0x400>)
 8001ad8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001adc:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~GPIO_CRH_CNF15_0;    //alternate output push-pull
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <gpio_init+0x400>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4a10      	ldr	r2, [pc, #64]	; (8001b24 <gpio_init+0x400>)
 8001ae4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ae8:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_CNF15_1;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <gpio_init+0x400>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <gpio_init+0x400>)
 8001af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001af4:	6053      	str	r3, [r2, #4]
    
    
    //Port C
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <gpio_init+0x404>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <gpio_init+0x404>)
 8001afc:	f043 0310 	orr.w	r3, r3, #16
 8001b00:	6193      	str	r3, [r2, #24]
    
    //PC13 - Blue led
    GPIOC->CRH |= GPIO_CRH_MODE13;      //output 50 MHz
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <gpio_init+0x408>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <gpio_init+0x408>)
 8001b08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001b0c:	6053      	str	r3, [r2, #4]
    GPIOC->CRH &= ~GPIO_CRH_CNF13;      //output push-pull
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <gpio_init+0x408>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <gpio_init+0x408>)
 8001b14:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b18:	6053      	str	r3, [r2, #4]
    led_board_off();
 8001b1a:	f000 f883 	bl	8001c24 <led_board_off>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40010c00 	.word	0x40010c00
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40011000 	.word	0x40011000

08001b30 <ext_int_init>:



//Init external interrupts
void ext_int_init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;         //enable afio clock
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <ext_int_init+0x6c>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <ext_int_init+0x6c>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6193      	str	r3, [r2, #24]
    
    //PA11 GPS PPS interrupt on rising edge
    AFIO->EXTICR[2] |= AFIO_EXTICR3_EXTI11_PA;  //exti 11 source is port A
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <ext_int_init+0x70>)
 8001b42:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <ext_int_init+0x70>)
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	6113      	str	r3, [r2, #16]
    EXTI->RTSR |= EXTI_RTSR_TR11;               //interrupt 11 on rising edge
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <ext_int_init+0x74>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <ext_int_init+0x74>)
 8001b4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b52:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= EXTI_IMR_MR11;                 //unmask interrupt 11
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <ext_int_init+0x74>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <ext_int_init+0x74>)
 8001b5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b5e:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(EXTI15_10_IRQn);             //enable interrupt
 8001b60:	2028      	movs	r0, #40	; 0x28
 8001b62:	f7ff fdc7 	bl	80016f4 <NVIC_EnableIRQ>
    
    //PB6 SI4463 RX interrupt on falling edge
    AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI6_PB;   //exti 6 source is port B
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <ext_int_init+0x70>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <ext_int_init+0x70>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR |= EXTI_FTSR_TR6;                //interrupt 6 on falling edge
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <ext_int_init+0x74>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <ext_int_init+0x74>)
 8001b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b7c:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= EXTI_IMR_MR6;                  //unmask interrupt 6
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <ext_int_init+0x74>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <ext_int_init+0x74>)
 8001b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b88:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(EXTI9_5_IRQn);               //enable interrupt
 8001b8a:	2017      	movs	r0, #23
 8001b8c:	f7ff fdb2 	bl	80016f4 <NVIC_EnableIRQ>
    
    EXTI->PR = (uint32_t)0x0007FFFF;            //clear all pending interrupts
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <ext_int_init+0x74>)
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <ext_int_init+0x78>)
 8001b94:	615a      	str	r2, [r3, #20]
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40010400 	.word	0x40010400
 8001ba8:	0007ffff 	.word	0x0007ffff

08001bac <led_red_on>:



//Red led on
void led_red_on(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS0;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <led_red_on+0x14>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	611a      	str	r2, [r3, #16]
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40010c00 	.word	0x40010c00

08001bc4 <led_red_off>:



//Red led off
void led_red_off(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR0;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <led_red_off+0x14>)
 8001bca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bce:	611a      	str	r2, [r3, #16]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	40010c00 	.word	0x40010c00

08001bdc <led_green_on>:



//Red green on
void led_green_on(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS1;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <led_green_on+0x14>)
 8001be2:	2202      	movs	r2, #2
 8001be4:	611a      	str	r2, [r3, #16]
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40010c00 	.word	0x40010c00

08001bf4 <led_green_off>:



//Red green off
void led_green_off(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR1;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <led_green_off+0x14>)
 8001bfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bfe:	611a      	str	r2, [r3, #16]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	40010c00 	.word	0x40010c00

08001c0c <led_board_on>:



//Blue led on
void led_board_on(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
    GPIOC->BSRR = GPIO_BSRR_BR13;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <led_board_on+0x14>)
 8001c12:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c16:	611a      	str	r2, [r3, #16]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	40011000 	.word	0x40011000

08001c24 <led_board_off>:



//Blue led off
void led_board_off(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
    GPIOC->BSRR = GPIO_BSRR_BS13;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <led_board_off+0x14>)
 8001c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2e:	611a      	str	r2, [r3, #16]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	40011000 	.word	0x40011000

08001c3c <sdn_si4463_active>:



//SDN SI4463 active
void sdn_si4463_active(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS7;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <sdn_si4463_active+0x14>)
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	611a      	str	r2, [r3, #16]
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40010c00 	.word	0x40010c00

08001c54 <sdn_si4463_inactive>:



//SDN SI4463 inactive
void sdn_si4463_inactive(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR7;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <sdn_si4463_inactive+0x14>)
 8001c5a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c5e:	611a      	str	r2, [r3, #16]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40010c00 	.word	0x40010c00

08001c6c <cs_si4463_active>:



//CS SI4463 active
void cs_si4463_active(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BR15;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <cs_si4463_active+0x14>)
 8001c72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c76:	611a      	str	r2, [r3, #16]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	40010800 	.word	0x40010800

08001c84 <cs_si4463_inactive>:



//CS SI4463 inactive
void cs_si4463_inactive(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BS15;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <cs_si4463_inactive+0x14>)
 8001c8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c8e:	611a      	str	r2, [r3, #16]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	40010800 	.word	0x40010800

08001c9c <res_ssd1306_active>:



//RES SSD1306 active
void res_ssd1306_active(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BR8;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <res_ssd1306_active+0x14>)
 8001ca2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ca6:	611a      	str	r2, [r3, #16]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	40010800 	.word	0x40010800

08001cb4 <res_ssd1306_inactive>:



//RES SSD1306 inactive
void res_ssd1306_inactive(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BS8;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <res_ssd1306_inactive+0x14>)
 8001cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cbe:	611a      	str	r2, [r3, #16]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40010800 	.word	0x40010800

08001ccc <ssd1306_data_mode>:



//Data mode SSD1306
void ssd1306_data_mode(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS14;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <ssd1306_data_mode+0x14>)
 8001cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cd6:	611a      	str	r2, [r3, #16]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	40010c00 	.word	0x40010c00

08001ce4 <ssd1306_command_mode>:



//Command mode SSD1306
void ssd1306_command_mode(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR14;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <ssd1306_command_mode+0x14>)
 8001cea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cee:	611a      	str	r2, [r3, #16]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40010c00 	.word	0x40010c00

08001cfc <cs_ssd1306_active>:



//CS SSD1306 active
void cs_ssd1306_active(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR12;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <cs_ssd1306_active+0x14>)
 8001d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d06:	611a      	str	r2, [r3, #16]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40010c00 	.word	0x40010c00

08001d14 <cs_ssd1306_inactive>:



//CS SSD1306 inactive
void cs_ssd1306_inactive(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS12;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <cs_ssd1306_inactive+0x14>)
 8001d1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d1e:	611a      	str	r2, [r3, #16]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	40010c00 	.word	0x40010c00

08001d2c <bat_mon_on>:



//Battery monitoring on
void bat_mon_on(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BS6;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <bat_mon_on+0x14>)
 8001d32:	2240      	movs	r2, #64	; 0x40
 8001d34:	611a      	str	r2, [r3, #16]
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40010800 	.word	0x40010800

08001d44 <bat_mon_off>:



//Battery monitoring off
void bat_mon_off(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BR6;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <bat_mon_off+0x14>)
 8001d4a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d4e:	611a      	str	r2, [r3, #16]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	40010800 	.word	0x40010800

08001d5c <parse_gps>:



//Parse all gps fields all together
uint8_t parse_gps(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	memset(&gps_raw, 0, sizeof(gps_raw));
 8001d60:	226c      	movs	r2, #108	; 0x6c
 8001d62:	2100      	movs	r1, #0
 8001d64:	4811      	ldr	r0, [pc, #68]	; (8001dac <parse_gps+0x50>)
 8001d66:	f007 fe02 	bl	800996e <memset>
	if (parse_RMC() && parse_GGA() && parse_GSA() && parse_GSV())
 8001d6a:	f000 f9c3 	bl	80020f4 <parse_RMC>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d017      	beq.n	8001da4 <parse_gps+0x48>
 8001d74:	f000 fa98 	bl	80022a8 <parse_GGA>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d012      	beq.n	8001da4 <parse_gps+0x48>
 8001d7e:	f000 fb09 	bl	8002394 <parse_GSA>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00d      	beq.n	8001da4 <parse_gps+0x48>
 8001d88:	f000 fb7a 	bl	8002480 <parse_GSV>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d008      	beq.n	8001da4 <parse_gps+0x48>
	{
		memset(&gps_num, 0, sizeof(gps_num));
 8001d92:	2240      	movs	r2, #64	; 0x40
 8001d94:	2100      	movs	r1, #0
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <parse_gps+0x54>)
 8001d98:	f007 fde9 	bl	800996e <memset>
		gps_raw_convert_to_numerical();
 8001d9c:	f000 f80a 	bl	8001db4 <gps_raw_convert_to_numerical>
		return 1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <parse_gps+0x4a>
	}
	else
	{
		return 0;
 8001da4:	2300      	movs	r3, #0
	}
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000588 	.word	0x20000588
 8001db0:	20000138 	.word	0x20000138

08001db4 <gps_raw_convert_to_numerical>:



//Converts gps_raw data (symbols) to gps_num data (numbers) with conversions if needed
void gps_raw_convert_to_numerical(void)
{
 8001db4:	b598      	push	{r3, r4, r7, lr}
 8001db6:	af00      	add	r7, sp, #0
    //Time
    tmp_char[0] = gps_raw.time[0];
 8001db8:	4b8b      	ldr	r3, [pc, #556]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001dbe:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.time[1];
 8001dc0:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001dc2:	785a      	ldrb	r2, [r3, #1]
 8001dc4:	4b89      	ldr	r3, [pc, #548]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001dc6:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001dc8:	4b88      	ldr	r3, [pc, #544]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	709a      	strb	r2, [r3, #2]
    gps_num.hour = (uint8_t)atoi32(&tmp_char[0]);
 8001dce:	4887      	ldr	r0, [pc, #540]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001dd0:	f006 fcda 	bl	8008788 <atoi32>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b85      	ldr	r3, [pc, #532]	; (8001ff0 <gps_raw_convert_to_numerical+0x23c>)
 8001dda:	701a      	strb	r2, [r3, #0]

    tmp_char[0] = gps_raw.time[2];
 8001ddc:	4b82      	ldr	r3, [pc, #520]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001dde:	789a      	ldrb	r2, [r3, #2]
 8001de0:	4b82      	ldr	r3, [pc, #520]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001de2:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.time[3];
 8001de4:	4b80      	ldr	r3, [pc, #512]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001de6:	78da      	ldrb	r2, [r3, #3]
 8001de8:	4b80      	ldr	r3, [pc, #512]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001dea:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001dec:	4b7f      	ldr	r3, [pc, #508]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	709a      	strb	r2, [r3, #2]
    gps_num.minute = (uint8_t)atoi32(&tmp_char[0]);
 8001df2:	487e      	ldr	r0, [pc, #504]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001df4:	f006 fcc8 	bl	8008788 <atoi32>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b7c      	ldr	r3, [pc, #496]	; (8001ff0 <gps_raw_convert_to_numerical+0x23c>)
 8001dfe:	705a      	strb	r2, [r3, #1]

    tmp_char[0] = gps_raw.time[4];
 8001e00:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001e02:	791a      	ldrb	r2, [r3, #4]
 8001e04:	4b79      	ldr	r3, [pc, #484]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e06:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.time[5];
 8001e08:	4b77      	ldr	r3, [pc, #476]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001e0a:	795a      	ldrb	r2, [r3, #5]
 8001e0c:	4b77      	ldr	r3, [pc, #476]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e0e:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001e10:	4b76      	ldr	r3, [pc, #472]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	709a      	strb	r2, [r3, #2]
    gps_num.second = (uint8_t)atoi32(&tmp_char[0]);
 8001e16:	4875      	ldr	r0, [pc, #468]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e18:	f006 fcb6 	bl	8008788 <atoi32>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b73      	ldr	r3, [pc, #460]	; (8001ff0 <gps_raw_convert_to_numerical+0x23c>)
 8001e22:	709a      	strb	r2, [r3, #2]


    //Date
    tmp_char[0] = gps_raw.date[0];
 8001e24:	4b70      	ldr	r3, [pc, #448]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001e26:	7b1a      	ldrb	r2, [r3, #12]
 8001e28:	4b70      	ldr	r3, [pc, #448]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e2a:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.date[1];
 8001e2c:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001e2e:	7b5a      	ldrb	r2, [r3, #13]
 8001e30:	4b6e      	ldr	r3, [pc, #440]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e32:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001e34:	4b6d      	ldr	r3, [pc, #436]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	709a      	strb	r2, [r3, #2]
    gps_num.day = (uint8_t)atoi32(&tmp_char[0]);
 8001e3a:	486c      	ldr	r0, [pc, #432]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e3c:	f006 fca4 	bl	8008788 <atoi32>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <gps_raw_convert_to_numerical+0x23c>)
 8001e46:	70da      	strb	r2, [r3, #3]

    tmp_char[0] = gps_raw.date[2];
 8001e48:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001e4a:	7b9a      	ldrb	r2, [r3, #14]
 8001e4c:	4b67      	ldr	r3, [pc, #412]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e4e:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.date[3];
 8001e50:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001e52:	7bda      	ldrb	r2, [r3, #15]
 8001e54:	4b65      	ldr	r3, [pc, #404]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e56:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001e58:	4b64      	ldr	r3, [pc, #400]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	709a      	strb	r2, [r3, #2]
    gps_num.month = (uint8_t)atoi32(&tmp_char[0]);
 8001e5e:	4863      	ldr	r0, [pc, #396]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e60:	f006 fc92 	bl	8008788 <atoi32>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b61      	ldr	r3, [pc, #388]	; (8001ff0 <gps_raw_convert_to_numerical+0x23c>)
 8001e6a:	711a      	strb	r2, [r3, #4]

    tmp_char[0] = gps_raw.date[4];
 8001e6c:	4b5e      	ldr	r3, [pc, #376]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001e6e:	7c1a      	ldrb	r2, [r3, #16]
 8001e70:	4b5e      	ldr	r3, [pc, #376]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e72:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.date[5];
 8001e74:	4b5c      	ldr	r3, [pc, #368]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001e76:	7c5a      	ldrb	r2, [r3, #17]
 8001e78:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e7a:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001e7c:	4b5b      	ldr	r3, [pc, #364]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	709a      	strb	r2, [r3, #2]
    gps_num.year = (uint8_t)atoi32(&tmp_char[0]);
 8001e82:	485a      	ldr	r0, [pc, #360]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e84:	f006 fc80 	bl	8008788 <atoi32>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <gps_raw_convert_to_numerical+0x23c>)
 8001e8e:	715a      	strb	r2, [r3, #5]


    //Latitude
    tmp_char[0] = gps_raw.latitude[0];
 8001e90:	4b55      	ldr	r3, [pc, #340]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001e92:	7d5a      	ldrb	r2, [r3, #21]
 8001e94:	4b55      	ldr	r3, [pc, #340]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e96:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.latitude[1];
 8001e98:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001e9a:	7d9a      	ldrb	r2, [r3, #22]
 8001e9c:	4b53      	ldr	r3, [pc, #332]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001e9e:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001ea0:	4b52      	ldr	r3, [pc, #328]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	709a      	strb	r2, [r3, #2]
    tmp_uint8 = (uint8_t)atoi32(&tmp_char[0]);          //int part of lat
 8001ea6:	4851      	ldr	r0, [pc, #324]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001ea8:	f006 fc6e 	bl	8008788 <atoi32>
 8001eac:	4603      	mov	r3, r0
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b50      	ldr	r3, [pc, #320]	; (8001ff4 <gps_raw_convert_to_numerical+0x240>)
 8001eb2:	701a      	strb	r2, [r3, #0]
    tmp_float = atof32(&(gps_raw.latitude[2]));        //frac part of lat
 8001eb4:	4850      	ldr	r0, [pc, #320]	; (8001ff8 <gps_raw_convert_to_numerical+0x244>)
 8001eb6:	f006 fac7 	bl	8008448 <atof32>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001ebe:	601a      	str	r2, [r3, #0]

    tmp_float /= 60.0;                                  //convert ddmm.mmmm to dd.dddddd
 8001ec0:	4b4e      	ldr	r3, [pc, #312]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	494e      	ldr	r1, [pc, #312]	; (8002000 <gps_raw_convert_to_numerical+0x24c>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f818 	bl	8000efc <__aeabi_fdiv>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001ed2:	601a      	str	r2, [r3, #0]
    tmp_float += tmp_uint8;
 8001ed4:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <gps_raw_convert_to_numerical+0x240>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe ff07 	bl	8000cec <__aeabi_i2f>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	4b46      	ldr	r3, [pc, #280]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f7fe fe4c 	bl	8000b84 <__addsf3>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001ef2:	601a      	str	r2, [r3, #0]

    if (gps_raw.ns[0] == 'S')
 8001ef4:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001ef6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001efa:	2b53      	cmp	r3, #83	; 0x53
 8001efc:	d110      	bne.n	8001f20 <gps_raw_convert_to_numerical+0x16c>
    {
        gps_num.latitude.in_deg = tmp_float * -1.0;    //negative (southern) latitudes
 8001efe:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fa98 	bl	8000438 <__aeabi_f2d>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	4621      	mov	r1, r4
 8001f10:	f7fe fde2 	bl	8000ad8 <__aeabi_d2f>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f1a:	4a35      	ldr	r2, [pc, #212]	; (8001ff0 <gps_raw_convert_to_numerical+0x23c>)
 8001f1c:	6093      	str	r3, [r2, #8]
 8001f1e:	e003      	b.n	8001f28 <gps_raw_convert_to_numerical+0x174>
    }
    else
    {
        gps_num.latitude.in_deg = tmp_float;
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a32      	ldr	r2, [pc, #200]	; (8001ff0 <gps_raw_convert_to_numerical+0x23c>)
 8001f26:	6093      	str	r3, [r2, #8]
    }

    gps_num.latitude.in_rad = gps_num.latitude.in_deg * deg_to_rad;
 8001f28:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <gps_raw_convert_to_numerical+0x23c>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fa83 	bl	8000438 <__aeabi_f2d>
 8001f32:	4b34      	ldr	r3, [pc, #208]	; (8002004 <gps_raw_convert_to_numerical+0x250>)
 8001f34:	cb18      	ldmia	r3, {r3, r4}
 8001f36:	461a      	mov	r2, r3
 8001f38:	4623      	mov	r3, r4
 8001f3a:	f7fe fad5 	bl	80004e8 <__aeabi_dmul>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	460c      	mov	r4, r1
 8001f42:	4a2b      	ldr	r2, [pc, #172]	; (8001ff0 <gps_raw_convert_to_numerical+0x23c>)
 8001f44:	e9c2 3404 	strd	r3, r4, [r2, #16]


    //Longitude
    tmp_char[0] = gps_raw.longitude[0];
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001f4a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001f4e:	4b27      	ldr	r3, [pc, #156]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001f50:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.longitude[1];
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001f54:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001f5a:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = gps_raw.longitude[2];
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001f5e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001f64:	709a      	strb	r2, [r3, #2]
    tmp_char[3] = 0;
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	70da      	strb	r2, [r3, #3]
    tmp_uint8 = (uint8_t)atoi32(&tmp_char[0]);          //int part of lon
 8001f6c:	481f      	ldr	r0, [pc, #124]	; (8001fec <gps_raw_convert_to_numerical+0x238>)
 8001f6e:	f006 fc0b 	bl	8008788 <atoi32>
 8001f72:	4603      	mov	r3, r0
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <gps_raw_convert_to_numerical+0x240>)
 8001f78:	701a      	strb	r2, [r3, #0]
    tmp_float = atof32(&(gps_raw.longitude[3]));       //frac part of lon
 8001f7a:	4823      	ldr	r0, [pc, #140]	; (8002008 <gps_raw_convert_to_numerical+0x254>)
 8001f7c:	f006 fa64 	bl	8008448 <atof32>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001f84:	601a      	str	r2, [r3, #0]

    tmp_float /= 60.0;                                  //convert dddmm.mmmm to ddd.dddddd
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	491d      	ldr	r1, [pc, #116]	; (8002000 <gps_raw_convert_to_numerical+0x24c>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe ffb5 	bl	8000efc <__aeabi_fdiv>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001f98:	601a      	str	r2, [r3, #0]
    tmp_float += tmp_uint8;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <gps_raw_convert_to_numerical+0x240>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fea4 	bl	8000cec <__aeabi_i2f>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4619      	mov	r1, r3
 8001fac:	4610      	mov	r0, r2
 8001fae:	f7fe fde9 	bl	8000b84 <__addsf3>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001fb8:	601a      	str	r2, [r3, #0]

    if (gps_raw.ew[0] == 'W')
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <gps_raw_convert_to_numerical+0x234>)
 8001fbc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001fc0:	2b57      	cmp	r3, #87	; 0x57
 8001fc2:	d123      	bne.n	800200c <gps_raw_convert_to_numerical+0x258>
    {
        gps_num.longitude.in_deg = tmp_float * -1.0;   //negative (western) longitudes
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <gps_raw_convert_to_numerical+0x248>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa35 	bl	8000438 <__aeabi_f2d>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	460c      	mov	r4, r1
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	f7fe fd7f 	bl	8000ad8 <__aeabi_d2f>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <gps_raw_convert_to_numerical+0x23c>)
 8001fe2:	6193      	str	r3, [r2, #24]
 8001fe4:	e016      	b.n	8002014 <gps_raw_convert_to_numerical+0x260>
 8001fe6:	bf00      	nop
 8001fe8:	20000588 	.word	0x20000588
 8001fec:	20000178 	.word	0x20000178
 8001ff0:	20000138 	.word	0x20000138
 8001ff4:	200005f4 	.word	0x200005f4
 8001ff8:	2000059f 	.word	0x2000059f
 8001ffc:	20000130 	.word	0x20000130
 8002000:	42700000 	.word	0x42700000
 8002004:	0800cf40 	.word	0x0800cf40
 8002008:	200005b0 	.word	0x200005b0
    }
    else
    {
        gps_num.longitude.in_deg = tmp_float;
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <gps_raw_convert_to_numerical+0x310>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2d      	ldr	r2, [pc, #180]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 8002012:	6193      	str	r3, [r2, #24]
    }

    gps_num.longitude.in_rad = gps_num.longitude.in_deg * deg_to_rad;
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fa0d 	bl	8000438 <__aeabi_f2d>
 800201e:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <gps_raw_convert_to_numerical+0x318>)
 8002020:	cb18      	ldmia	r3, {r3, r4}
 8002022:	461a      	mov	r2, r3
 8002024:	4623      	mov	r3, r4
 8002026:	f7fe fa5f 	bl	80004e8 <__aeabi_dmul>
 800202a:	4603      	mov	r3, r0
 800202c:	460c      	mov	r4, r1
 800202e:	4a26      	ldr	r2, [pc, #152]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 8002030:	e9c2 3408 	strd	r3, r4, [r2, #32]


    //Speed
    gps_num.speed = atof32(&(gps_raw.speed[0])) * knots_to_kph;
 8002034:	4826      	ldr	r0, [pc, #152]	; (80020d0 <gps_raw_convert_to_numerical+0x31c>)
 8002036:	f006 fa07 	bl	8008448 <atof32>
 800203a:	4602      	mov	r2, r0
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <gps_raw_convert_to_numerical+0x320>)
 800203e:	4619      	mov	r1, r3
 8002040:	4610      	mov	r0, r2
 8002042:	f7fe fea7 	bl	8000d94 <__aeabi_fmul>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 800204c:	629a      	str	r2, [r3, #40]	; 0x28

    //Course
    gps_num.course = atof32(&(gps_raw.course[0]));
 800204e:	4822      	ldr	r0, [pc, #136]	; (80020d8 <gps_raw_convert_to_numerical+0x324>)
 8002050:	f006 f9fa 	bl	8008448 <atof32>
 8002054:	4602      	mov	r2, r0
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 8002058:	62da      	str	r2, [r3, #44]	; 0x2c

    //Altitude
    gps_num.altitude = atof32(&(gps_raw.altitude[0]));
 800205a:	4820      	ldr	r0, [pc, #128]	; (80020dc <gps_raw_convert_to_numerical+0x328>)
 800205c:	f006 f9f4 	bl	8008448 <atof32>
 8002060:	4602      	mov	r2, r0
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 8002064:	631a      	str	r2, [r3, #48]	; 0x30

    //Satellites
    gps_num.sat_view = (uint8_t)atoi32(&(gps_raw.sat_view[0]));
 8002066:	481e      	ldr	r0, [pc, #120]	; (80020e0 <gps_raw_convert_to_numerical+0x32c>)
 8002068:	f006 fb8e 	bl	8008788 <atoi32>
 800206c:	4603      	mov	r3, r0
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    gps_num.sat_used = (uint8_t)atoi32(&(gps_raw.sat_used[0]));
 8002076:	481b      	ldr	r0, [pc, #108]	; (80020e4 <gps_raw_convert_to_numerical+0x330>)
 8002078:	f006 fb86 	bl	8008788 <atoi32>
 800207c:	4603      	mov	r3, r0
 800207e:	b2da      	uxtb	r2, r3
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35


    //Status, Mode, PDOP
    if (gps_raw.status[0] == 'A')
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <gps_raw_convert_to_numerical+0x334>)
 8002088:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800208c:	2b41      	cmp	r3, #65	; 0x41
 800208e:	d104      	bne.n	800209a <gps_raw_convert_to_numerical+0x2e6>
    {
        gps_num.status = GPS_DATA_VALID;
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8002098:	e003      	b.n	80020a2 <gps_raw_convert_to_numerical+0x2ee>
    }
    else
    {
        gps_num.status = GPS_DATA_INVALID;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }

    gps_num.mode = (uint8_t)atoi32(&(gps_raw.mode[0]));
 80020a2:	4812      	ldr	r0, [pc, #72]	; (80020ec <gps_raw_convert_to_numerical+0x338>)
 80020a4:	f006 fb70 	bl	8008788 <atoi32>
 80020a8:	4603      	mov	r3, r0
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 80020ae:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

    gps_num.pdop = atof32(&(gps_raw.pdop[0]));
 80020b2:	480f      	ldr	r0, [pc, #60]	; (80020f0 <gps_raw_convert_to_numerical+0x33c>)
 80020b4:	f006 f9c8 	bl	8008448 <atof32>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <gps_raw_convert_to_numerical+0x314>)
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020be:	bf00      	nop
 80020c0:	bd98      	pop	{r3, r4, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000130 	.word	0x20000130
 80020c8:	20000138 	.word	0x20000138
 80020cc:	0800cf40 	.word	0x0800cf40
 80020d0:	200005be 	.word	0x200005be
 80020d4:	3fed0e56 	.word	0x3fed0e56
 80020d8:	200005c8 	.word	0x200005c8
 80020dc:	200005d4 	.word	0x200005d4
 80020e0:	200005de 	.word	0x200005de
 80020e4:	200005e3 	.word	0x200005e3
 80020e8:	20000588 	.word	0x20000588
 80020ec:	200005e8 	.word	0x200005e8
 80020f0:	200005ec 	.word	0x200005ec

080020f4 <parse_RMC>:



//Parse RMC sentence
uint8_t parse_RMC(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
    uint8_t comma = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	71fb      	strb	r3, [r7, #7]
    uint8_t sym = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	71bb      	strb	r3, [r7, #6]
    uint16_t pos = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	80bb      	strh	r3, [r7, #4]
    
    while (!((nmea_data[pos] == '$') &&
 8002106:	e002      	b.n	800210e <parse_RMC+0x1a>
            (nmea_data[pos + 3] == 'R') &&
            (nmea_data[pos + 4] == 'M') &&
            (nmea_data[pos + 5] == 'C')) && pos < UART_BUF_LEN)      //search for start pos
    {
    pos++;
 8002108:	88bb      	ldrh	r3, [r7, #4]
 800210a:	3301      	adds	r3, #1
 800210c:	80bb      	strh	r3, [r7, #4]
    while (!((nmea_data[pos] == '$') &&
 800210e:	88bb      	ldrh	r3, [r7, #4]
 8002110:	4a63      	ldr	r2, [pc, #396]	; (80022a0 <parse_RMC+0x1ac>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	2b24      	cmp	r3, #36	; 0x24
 8002116:	d111      	bne.n	800213c <parse_RMC+0x48>
            (nmea_data[pos + 3] == 'R') &&
 8002118:	88bb      	ldrh	r3, [r7, #4]
 800211a:	3303      	adds	r3, #3
 800211c:	4a60      	ldr	r2, [pc, #384]	; (80022a0 <parse_RMC+0x1ac>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 8002120:	2b52      	cmp	r3, #82	; 0x52
 8002122:	d10b      	bne.n	800213c <parse_RMC+0x48>
            (nmea_data[pos + 4] == 'M') &&
 8002124:	88bb      	ldrh	r3, [r7, #4]
 8002126:	3304      	adds	r3, #4
 8002128:	4a5d      	ldr	r2, [pc, #372]	; (80022a0 <parse_RMC+0x1ac>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
            (nmea_data[pos + 3] == 'R') &&
 800212c:	2b4d      	cmp	r3, #77	; 0x4d
 800212e:	d105      	bne.n	800213c <parse_RMC+0x48>
            (nmea_data[pos + 5] == 'C')) && pos < UART_BUF_LEN)      //search for start pos
 8002130:	88bb      	ldrh	r3, [r7, #4]
 8002132:	3305      	adds	r3, #5
 8002134:	4a5a      	ldr	r2, [pc, #360]	; (80022a0 <parse_RMC+0x1ac>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 8002138:	2b43      	cmp	r3, #67	; 0x43
 800213a:	d003      	beq.n	8002144 <parse_RMC+0x50>
            (nmea_data[pos + 5] == 'C')) && pos < UART_BUF_LEN)      //search for start pos
 800213c:	88bb      	ldrh	r3, [r7, #4]
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002142:	d3e1      	bcc.n	8002108 <parse_RMC+0x14>
    }
    
    if(nmea_checksum(pos) == 0)
 8002144:	88bb      	ldrh	r3, [r7, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fa02 	bl	8002550 <nmea_checksum>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <parse_RMC+0x62>
    {
        return 0;           //checksum error
 8002152:	2300      	movs	r3, #0
 8002154:	e0a0      	b.n	8002298 <parse_RMC+0x1a4>
    }
    
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 8002156:	88bb      	ldrh	r3, [r7, #4]
 8002158:	3306      	adds	r3, #6
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	e096      	b.n	800228c <parse_RMC+0x198>
    {
        if (nmea_data[i] == '*') return 1;       //end of the sentence
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	4a4f      	ldr	r2, [pc, #316]	; (80022a0 <parse_RMC+0x1ac>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	2b2a      	cmp	r3, #42	; 0x2a
 8002166:	d101      	bne.n	800216c <parse_RMC+0x78>
 8002168:	2301      	movs	r3, #1
 800216a:	e095      	b.n	8002298 <parse_RMC+0x1a4>
        
        if (nmea_data[i] == ',')
 800216c:	887b      	ldrh	r3, [r7, #2]
 800216e:	4a4c      	ldr	r2, [pc, #304]	; (80022a0 <parse_RMC+0x1ac>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	2b2c      	cmp	r3, #44	; 0x2c
 8002174:	d105      	bne.n	8002182 <parse_RMC+0x8e>
        {
            comma++;        //increase comma counter
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	3301      	adds	r3, #1
 800217a:	71fb      	strb	r3, [r7, #7]
            sym = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	71bb      	strb	r3, [r7, #6]
 8002180:	e081      	b.n	8002286 <parse_RMC+0x192>
        }
        else
        {
            switch (comma)  //surfing through RMC data fields
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	3b01      	subs	r3, #1
 8002186:	2b08      	cmp	r3, #8
 8002188:	d87c      	bhi.n	8002284 <parse_RMC+0x190>
 800218a:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <parse_RMC+0x9c>)
 800218c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002190:	080021b5 	.word	0x080021b5
 8002194:	080021c9 	.word	0x080021c9
 8002198:	080021e1 	.word	0x080021e1
 800219c:	080021f7 	.word	0x080021f7
 80021a0:	0800220f 	.word	0x0800220f
 80021a4:	08002227 	.word	0x08002227
 80021a8:	0800223f 	.word	0x0800223f
 80021ac:	08002257 	.word	0x08002257
 80021b0:	0800226f 	.word	0x0800226f
            {
                case 1:
                    gps_raw.time[sym++] = nmea_data[i];
 80021b4:	887a      	ldrh	r2, [r7, #2]
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	1c59      	adds	r1, r3, #1
 80021ba:	71b9      	strb	r1, [r7, #6]
 80021bc:	4619      	mov	r1, r3
 80021be:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <parse_RMC+0x1ac>)
 80021c0:	5c9a      	ldrb	r2, [r3, r2]
 80021c2:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <parse_RMC+0x1b0>)
 80021c4:	545a      	strb	r2, [r3, r1]
                    break;
 80021c6:	e05e      	b.n	8002286 <parse_RMC+0x192>
                case 2:
                    gps_raw.status[sym++] = nmea_data[i];
 80021c8:	887a      	ldrh	r2, [r7, #2]
 80021ca:	79bb      	ldrb	r3, [r7, #6]
 80021cc:	1c59      	adds	r1, r3, #1
 80021ce:	71b9      	strb	r1, [r7, #6]
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <parse_RMC+0x1ac>)
 80021d4:	5c9a      	ldrb	r2, [r3, r2]
 80021d6:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <parse_RMC+0x1b0>)
 80021d8:	440b      	add	r3, r1
 80021da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    break;
 80021de:	e052      	b.n	8002286 <parse_RMC+0x192>
                case 3:
                    gps_raw.latitude[sym++] = nmea_data[i];
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	79bb      	ldrb	r3, [r7, #6]
 80021e4:	1c59      	adds	r1, r3, #1
 80021e6:	71b9      	strb	r1, [r7, #6]
 80021e8:	4619      	mov	r1, r3
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <parse_RMC+0x1ac>)
 80021ec:	5c9a      	ldrb	r2, [r3, r2]
 80021ee:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <parse_RMC+0x1b0>)
 80021f0:	440b      	add	r3, r1
 80021f2:	755a      	strb	r2, [r3, #21]
                    break;
 80021f4:	e047      	b.n	8002286 <parse_RMC+0x192>
                case 4:
                    gps_raw.ns[sym++] = nmea_data[i];
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	1c59      	adds	r1, r3, #1
 80021fc:	71b9      	strb	r1, [r7, #6]
 80021fe:	4619      	mov	r1, r3
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <parse_RMC+0x1ac>)
 8002202:	5c9a      	ldrb	r2, [r3, r2]
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <parse_RMC+0x1b0>)
 8002206:	440b      	add	r3, r1
 8002208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    break;
 800220c:	e03b      	b.n	8002286 <parse_RMC+0x192>
                case 5:
                    gps_raw.longitude[sym++] = nmea_data[i];
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	79bb      	ldrb	r3, [r7, #6]
 8002212:	1c59      	adds	r1, r3, #1
 8002214:	71b9      	strb	r1, [r7, #6]
 8002216:	4619      	mov	r1, r3
 8002218:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <parse_RMC+0x1ac>)
 800221a:	5c9a      	ldrb	r2, [r3, r2]
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <parse_RMC+0x1b0>)
 800221e:	440b      	add	r3, r1
 8002220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    break;
 8002224:	e02f      	b.n	8002286 <parse_RMC+0x192>
                case 6:
                    gps_raw.ew[sym++] = nmea_data[i];
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	79bb      	ldrb	r3, [r7, #6]
 800222a:	1c59      	adds	r1, r3, #1
 800222c:	71b9      	strb	r1, [r7, #6]
 800222e:	4619      	mov	r1, r3
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <parse_RMC+0x1ac>)
 8002232:	5c9a      	ldrb	r2, [r3, r2]
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <parse_RMC+0x1b0>)
 8002236:	440b      	add	r3, r1
 8002238:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                    break;
 800223c:	e023      	b.n	8002286 <parse_RMC+0x192>
                case 7:
                    gps_raw.speed[sym++] = nmea_data[i];
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	79bb      	ldrb	r3, [r7, #6]
 8002242:	1c59      	adds	r1, r3, #1
 8002244:	71b9      	strb	r1, [r7, #6]
 8002246:	4619      	mov	r1, r3
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <parse_RMC+0x1ac>)
 800224a:	5c9a      	ldrb	r2, [r3, r2]
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <parse_RMC+0x1b0>)
 800224e:	440b      	add	r3, r1
 8002250:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                    break;
 8002254:	e017      	b.n	8002286 <parse_RMC+0x192>
                case 8:
                    gps_raw.course[sym++] = nmea_data[i];
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	79bb      	ldrb	r3, [r7, #6]
 800225a:	1c59      	adds	r1, r3, #1
 800225c:	71b9      	strb	r1, [r7, #6]
 800225e:	4619      	mov	r1, r3
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <parse_RMC+0x1ac>)
 8002262:	5c9a      	ldrb	r2, [r3, r2]
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <parse_RMC+0x1b0>)
 8002266:	440b      	add	r3, r1
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                    break;
 800226c:	e00b      	b.n	8002286 <parse_RMC+0x192>
                case 9:
                    gps_raw.date[sym++] = nmea_data[i];
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	79bb      	ldrb	r3, [r7, #6]
 8002272:	1c59      	adds	r1, r3, #1
 8002274:	71b9      	strb	r1, [r7, #6]
 8002276:	4619      	mov	r1, r3
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <parse_RMC+0x1ac>)
 800227a:	5c9a      	ldrb	r2, [r3, r2]
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <parse_RMC+0x1b0>)
 800227e:	440b      	add	r3, r1
 8002280:	731a      	strb	r2, [r3, #12]
                    break;
 8002282:	e000      	b.n	8002286 <parse_RMC+0x192>
                default:
                    break;
 8002284:	bf00      	nop
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	3301      	adds	r3, #1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002292:	f4ff af64 	bcc.w	800215e <parse_RMC+0x6a>
            }
        }
    }
    return 1;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000188 	.word	0x20000188
 80022a4:	20000588 	.word	0x20000588

080022a8 <parse_GGA>:



//Parse GGA sentence
uint8_t parse_GGA(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
    uint8_t comma = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	71fb      	strb	r3, [r7, #7]
    uint8_t sym = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	71bb      	strb	r3, [r7, #6]
    uint16_t pos = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	80bb      	strh	r3, [r7, #4]
    
    while (!((nmea_data[pos] == '$') &&
 80022ba:	e002      	b.n	80022c2 <parse_GGA+0x1a>
            (nmea_data[pos + 3] == 'G') &&
            (nmea_data[pos + 4] == 'G') &&
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
    {
    pos++;
 80022bc:	88bb      	ldrh	r3, [r7, #4]
 80022be:	3301      	adds	r3, #1
 80022c0:	80bb      	strh	r3, [r7, #4]
    while (!((nmea_data[pos] == '$') &&
 80022c2:	88bb      	ldrh	r3, [r7, #4]
 80022c4:	4a31      	ldr	r2, [pc, #196]	; (800238c <parse_GGA+0xe4>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	2b24      	cmp	r3, #36	; 0x24
 80022ca:	d111      	bne.n	80022f0 <parse_GGA+0x48>
            (nmea_data[pos + 3] == 'G') &&
 80022cc:	88bb      	ldrh	r3, [r7, #4]
 80022ce:	3303      	adds	r3, #3
 80022d0:	4a2e      	ldr	r2, [pc, #184]	; (800238c <parse_GGA+0xe4>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 80022d4:	2b47      	cmp	r3, #71	; 0x47
 80022d6:	d10b      	bne.n	80022f0 <parse_GGA+0x48>
            (nmea_data[pos + 4] == 'G') &&
 80022d8:	88bb      	ldrh	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	4a2b      	ldr	r2, [pc, #172]	; (800238c <parse_GGA+0xe4>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
            (nmea_data[pos + 3] == 'G') &&
 80022e0:	2b47      	cmp	r3, #71	; 0x47
 80022e2:	d105      	bne.n	80022f0 <parse_GGA+0x48>
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
 80022e4:	88bb      	ldrh	r3, [r7, #4]
 80022e6:	3305      	adds	r3, #5
 80022e8:	4a28      	ldr	r2, [pc, #160]	; (800238c <parse_GGA+0xe4>)
 80022ea:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 80022ec:	2b41      	cmp	r3, #65	; 0x41
 80022ee:	d003      	beq.n	80022f8 <parse_GGA+0x50>
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
 80022f0:	88bb      	ldrh	r3, [r7, #4]
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f6:	d3e1      	bcc.n	80022bc <parse_GGA+0x14>
    }
    
    if(nmea_checksum(pos) == 0)
 80022f8:	88bb      	ldrh	r3, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f928 	bl	8002550 <nmea_checksum>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <parse_GGA+0x62>
    {
        return 0;           //checksum error
 8002306:	2300      	movs	r3, #0
 8002308:	e03b      	b.n	8002382 <parse_GGA+0xda>
    }
    
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 800230a:	88bb      	ldrh	r3, [r7, #4]
 800230c:	3306      	adds	r3, #6
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	e032      	b.n	8002378 <parse_GGA+0xd0>
    {
        if (nmea_data[i] == '*') return 1;       //end of the sentence
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	4a1d      	ldr	r2, [pc, #116]	; (800238c <parse_GGA+0xe4>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	2b2a      	cmp	r3, #42	; 0x2a
 800231a:	d101      	bne.n	8002320 <parse_GGA+0x78>
 800231c:	2301      	movs	r3, #1
 800231e:	e030      	b.n	8002382 <parse_GGA+0xda>
        
        if (nmea_data[i] == ',')
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	4a1a      	ldr	r2, [pc, #104]	; (800238c <parse_GGA+0xe4>)
 8002324:	5cd3      	ldrb	r3, [r2, r3]
 8002326:	2b2c      	cmp	r3, #44	; 0x2c
 8002328:	d105      	bne.n	8002336 <parse_GGA+0x8e>
        {
            comma++;        //increase comma counter
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	3301      	adds	r3, #1
 800232e:	71fb      	strb	r3, [r7, #7]
            sym = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	71bb      	strb	r3, [r7, #6]
 8002334:	e01d      	b.n	8002372 <parse_GGA+0xca>
        }
        else
        {
            switch (comma)  //surfing through GGA data fields
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b07      	cmp	r3, #7
 800233a:	d002      	beq.n	8002342 <parse_GGA+0x9a>
 800233c:	2b09      	cmp	r3, #9
 800233e:	d00c      	beq.n	800235a <parse_GGA+0xb2>
                    break;
                case 9:
                    gps_raw.altitude[sym++] = nmea_data[i];
                    break;
                default:
                    break;
 8002340:	e017      	b.n	8002372 <parse_GGA+0xca>
                    gps_raw.sat_used[sym++] = nmea_data[i];
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	71b9      	strb	r1, [r7, #6]
 800234a:	4619      	mov	r1, r3
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <parse_GGA+0xe4>)
 800234e:	5c9a      	ldrb	r2, [r3, r2]
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <parse_GGA+0xe8>)
 8002352:	440b      	add	r3, r1
 8002354:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
                    break;
 8002358:	e00b      	b.n	8002372 <parse_GGA+0xca>
                    gps_raw.altitude[sym++] = nmea_data[i];
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	1c59      	adds	r1, r3, #1
 8002360:	71b9      	strb	r1, [r7, #6]
 8002362:	4619      	mov	r1, r3
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <parse_GGA+0xe4>)
 8002366:	5c9a      	ldrb	r2, [r3, r2]
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <parse_GGA+0xe8>)
 800236a:	440b      	add	r3, r1
 800236c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                    break;
 8002370:	bf00      	nop
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	3301      	adds	r3, #1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	887b      	ldrh	r3, [r7, #2]
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237e:	d3c8      	bcc.n	8002312 <parse_GGA+0x6a>
            }
        }
    }
    return 1;
 8002380:	2301      	movs	r3, #1
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000188 	.word	0x20000188
 8002390:	20000588 	.word	0x20000588

08002394 <parse_GSA>:



//Parse GSA sentence
uint8_t parse_GSA(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
    uint8_t comma = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	71fb      	strb	r3, [r7, #7]
    uint8_t sym = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	71bb      	strb	r3, [r7, #6]
    uint16_t pos = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	80bb      	strh	r3, [r7, #4]
    
    while (!((nmea_data[pos] == '$') &&
 80023a6:	e002      	b.n	80023ae <parse_GSA+0x1a>
            (nmea_data[pos + 3] == 'G') &&
            (nmea_data[pos + 4] == 'S') &&
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
    {
    pos++;
 80023a8:	88bb      	ldrh	r3, [r7, #4]
 80023aa:	3301      	adds	r3, #1
 80023ac:	80bb      	strh	r3, [r7, #4]
    while (!((nmea_data[pos] == '$') &&
 80023ae:	88bb      	ldrh	r3, [r7, #4]
 80023b0:	4a31      	ldr	r2, [pc, #196]	; (8002478 <parse_GSA+0xe4>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	2b24      	cmp	r3, #36	; 0x24
 80023b6:	d111      	bne.n	80023dc <parse_GSA+0x48>
            (nmea_data[pos + 3] == 'G') &&
 80023b8:	88bb      	ldrh	r3, [r7, #4]
 80023ba:	3303      	adds	r3, #3
 80023bc:	4a2e      	ldr	r2, [pc, #184]	; (8002478 <parse_GSA+0xe4>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 80023c0:	2b47      	cmp	r3, #71	; 0x47
 80023c2:	d10b      	bne.n	80023dc <parse_GSA+0x48>
            (nmea_data[pos + 4] == 'S') &&
 80023c4:	88bb      	ldrh	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <parse_GSA+0xe4>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
            (nmea_data[pos + 3] == 'G') &&
 80023cc:	2b53      	cmp	r3, #83	; 0x53
 80023ce:	d105      	bne.n	80023dc <parse_GSA+0x48>
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
 80023d0:	88bb      	ldrh	r3, [r7, #4]
 80023d2:	3305      	adds	r3, #5
 80023d4:	4a28      	ldr	r2, [pc, #160]	; (8002478 <parse_GSA+0xe4>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 80023d8:	2b41      	cmp	r3, #65	; 0x41
 80023da:	d003      	beq.n	80023e4 <parse_GSA+0x50>
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
 80023dc:	88bb      	ldrh	r3, [r7, #4]
 80023de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e2:	d3e1      	bcc.n	80023a8 <parse_GSA+0x14>
    }
    
    if(nmea_checksum(pos) == 0)
 80023e4:	88bb      	ldrh	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f8b2 	bl	8002550 <nmea_checksum>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <parse_GSA+0x62>
    {
        return 0;           //checksum error
 80023f2:	2300      	movs	r3, #0
 80023f4:	e03b      	b.n	800246e <parse_GSA+0xda>
    }
    
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 80023f6:	88bb      	ldrh	r3, [r7, #4]
 80023f8:	3306      	adds	r3, #6
 80023fa:	807b      	strh	r3, [r7, #2]
 80023fc:	e032      	b.n	8002464 <parse_GSA+0xd0>
    {
        if (nmea_data[i] == '*') return 1;       //end of the sentence
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <parse_GSA+0xe4>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	2b2a      	cmp	r3, #42	; 0x2a
 8002406:	d101      	bne.n	800240c <parse_GSA+0x78>
 8002408:	2301      	movs	r3, #1
 800240a:	e030      	b.n	800246e <parse_GSA+0xda>
        
        if (nmea_data[i] == ',')
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <parse_GSA+0xe4>)
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	2b2c      	cmp	r3, #44	; 0x2c
 8002414:	d105      	bne.n	8002422 <parse_GSA+0x8e>
        {
            comma++;        //increase comma counter
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	3301      	adds	r3, #1
 800241a:	71fb      	strb	r3, [r7, #7]
            sym = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	71bb      	strb	r3, [r7, #6]
 8002420:	e01d      	b.n	800245e <parse_GSA+0xca>
        }
        else
        {
            switch (comma)  //surfing through GSA data fields
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d002      	beq.n	800242e <parse_GSA+0x9a>
 8002428:	2b0f      	cmp	r3, #15
 800242a:	d00c      	beq.n	8002446 <parse_GSA+0xb2>
                    break;
                case 15:
                    gps_raw.pdop[sym++] = nmea_data[i];
                    break;
                default:
                    break;
 800242c:	e017      	b.n	800245e <parse_GSA+0xca>
                    gps_raw.mode[sym++] = nmea_data[i];
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	1c59      	adds	r1, r3, #1
 8002434:	71b9      	strb	r1, [r7, #6]
 8002436:	4619      	mov	r1, r3
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <parse_GSA+0xe4>)
 800243a:	5c9a      	ldrb	r2, [r3, r2]
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <parse_GSA+0xe8>)
 800243e:	440b      	add	r3, r1
 8002440:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    break;
 8002444:	e00b      	b.n	800245e <parse_GSA+0xca>
                    gps_raw.pdop[sym++] = nmea_data[i];
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	79bb      	ldrb	r3, [r7, #6]
 800244a:	1c59      	adds	r1, r3, #1
 800244c:	71b9      	strb	r1, [r7, #6]
 800244e:	4619      	mov	r1, r3
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <parse_GSA+0xe4>)
 8002452:	5c9a      	ldrb	r2, [r3, r2]
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <parse_GSA+0xe8>)
 8002456:	440b      	add	r3, r1
 8002458:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                    break;
 800245c:	bf00      	nop
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	3301      	adds	r3, #1
 8002462:	807b      	strh	r3, [r7, #2]
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246a:	d3c8      	bcc.n	80023fe <parse_GSA+0x6a>
            }
        }
    }
    return 1;
 800246c:	2301      	movs	r3, #1
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000188 	.word	0x20000188
 800247c:	20000588 	.word	0x20000588

08002480 <parse_GSV>:



//Parse GSV sentence
uint8_t parse_GSV(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
    uint8_t comma = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	71fb      	strb	r3, [r7, #7]
    uint8_t sym = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	71bb      	strb	r3, [r7, #6]
    uint16_t pos = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	80bb      	strh	r3, [r7, #4]
    
    while (!((nmea_data[pos] == '$') &&
 8002492:	e002      	b.n	800249a <parse_GSV+0x1a>
            (nmea_data[pos + 3] == 'G') &&
            (nmea_data[pos + 4] == 'S') &&
            (nmea_data[pos + 5] == 'V')) && pos < UART_BUF_LEN)      //search for start pos
    {
    pos++;
 8002494:	88bb      	ldrh	r3, [r7, #4]
 8002496:	3301      	adds	r3, #1
 8002498:	80bb      	strh	r3, [r7, #4]
    while (!((nmea_data[pos] == '$') &&
 800249a:	88bb      	ldrh	r3, [r7, #4]
 800249c:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <parse_GSV+0xc8>)
 800249e:	5cd3      	ldrb	r3, [r2, r3]
 80024a0:	2b24      	cmp	r3, #36	; 0x24
 80024a2:	d111      	bne.n	80024c8 <parse_GSV+0x48>
            (nmea_data[pos + 3] == 'G') &&
 80024a4:	88bb      	ldrh	r3, [r7, #4]
 80024a6:	3303      	adds	r3, #3
 80024a8:	4a27      	ldr	r2, [pc, #156]	; (8002548 <parse_GSV+0xc8>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 80024ac:	2b47      	cmp	r3, #71	; 0x47
 80024ae:	d10b      	bne.n	80024c8 <parse_GSV+0x48>
            (nmea_data[pos + 4] == 'S') &&
 80024b0:	88bb      	ldrh	r3, [r7, #4]
 80024b2:	3304      	adds	r3, #4
 80024b4:	4a24      	ldr	r2, [pc, #144]	; (8002548 <parse_GSV+0xc8>)
 80024b6:	5cd3      	ldrb	r3, [r2, r3]
            (nmea_data[pos + 3] == 'G') &&
 80024b8:	2b53      	cmp	r3, #83	; 0x53
 80024ba:	d105      	bne.n	80024c8 <parse_GSV+0x48>
            (nmea_data[pos + 5] == 'V')) && pos < UART_BUF_LEN)      //search for start pos
 80024bc:	88bb      	ldrh	r3, [r7, #4]
 80024be:	3305      	adds	r3, #5
 80024c0:	4a21      	ldr	r2, [pc, #132]	; (8002548 <parse_GSV+0xc8>)
 80024c2:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 80024c4:	2b56      	cmp	r3, #86	; 0x56
 80024c6:	d003      	beq.n	80024d0 <parse_GSV+0x50>
            (nmea_data[pos + 5] == 'V')) && pos < UART_BUF_LEN)      //search for start pos
 80024c8:	88bb      	ldrh	r3, [r7, #4]
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ce:	d3e1      	bcc.n	8002494 <parse_GSV+0x14>
    }
    
    if(nmea_checksum(pos) == 0)
 80024d0:	88bb      	ldrh	r3, [r7, #4]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f83c 	bl	8002550 <nmea_checksum>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <parse_GSV+0x62>
    {
        return 0;           //checksum error
 80024de:	2300      	movs	r3, #0
 80024e0:	e02d      	b.n	800253e <parse_GSV+0xbe>
    }
    
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 80024e2:	88bb      	ldrh	r3, [r7, #4]
 80024e4:	3306      	adds	r3, #6
 80024e6:	807b      	strh	r3, [r7, #2]
 80024e8:	e024      	b.n	8002534 <parse_GSV+0xb4>
    {
        if (nmea_data[i] == '*') return 1;       //end of the sentence
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	4a16      	ldr	r2, [pc, #88]	; (8002548 <parse_GSV+0xc8>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	2b2a      	cmp	r3, #42	; 0x2a
 80024f2:	d101      	bne.n	80024f8 <parse_GSV+0x78>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e022      	b.n	800253e <parse_GSV+0xbe>
        
        if (nmea_data[i] == ',')
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	4a13      	ldr	r2, [pc, #76]	; (8002548 <parse_GSV+0xc8>)
 80024fc:	5cd3      	ldrb	r3, [r2, r3]
 80024fe:	2b2c      	cmp	r3, #44	; 0x2c
 8002500:	d105      	bne.n	800250e <parse_GSV+0x8e>
        {
            comma++;        //increase comma counter
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	3301      	adds	r3, #1
 8002506:	71fb      	strb	r3, [r7, #7]
            sym = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	71bb      	strb	r3, [r7, #6]
 800250c:	e00f      	b.n	800252e <parse_GSV+0xae>
        }
        else
        {
            switch (comma)  //surfing through GSV data fields
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d000      	beq.n	8002516 <parse_GSV+0x96>
            {
                case 3:
                    gps_raw.sat_view[sym++] = nmea_data[i];
                    break;
                default:
                    break;
 8002514:	e00b      	b.n	800252e <parse_GSV+0xae>
                    gps_raw.sat_view[sym++] = nmea_data[i];
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	1c59      	adds	r1, r3, #1
 800251c:	71b9      	strb	r1, [r7, #6]
 800251e:	4619      	mov	r1, r3
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <parse_GSV+0xc8>)
 8002522:	5c9a      	ldrb	r2, [r3, r2]
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <parse_GSV+0xcc>)
 8002526:	440b      	add	r3, r1
 8002528:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
                    break;
 800252c:	bf00      	nop
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	3301      	adds	r3, #1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253a:	d3d6      	bcc.n	80024ea <parse_GSV+0x6a>
            }
        }
    }
    return 1;
 800253c:	2301      	movs	r3, #1
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000188 	.word	0x20000188
 800254c:	20000588 	.word	0x20000588

08002550 <nmea_checksum>:



//NMEA checksum
uint8_t nmea_checksum(uint16_t pos)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
    uint8_t CheckSum = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
    uint8_t MessageCheckSum = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	73bb      	strb	r3, [r7, #14]
    
    pos++;                                      //pick up symbol right after $
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	3301      	adds	r3, #1
 8002566:	80fb      	strh	r3, [r7, #6]
    while (nmea_data[pos] != '*')
 8002568:	e00e      	b.n	8002588 <nmea_checksum+0x38>
    {
        CheckSum ^= nmea_data[pos];
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	4a27      	ldr	r2, [pc, #156]	; (800260c <nmea_checksum+0xbc>)
 800256e:	5cd2      	ldrb	r2, [r2, r3]
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	4053      	eors	r3, r2
 8002574:	73fb      	strb	r3, [r7, #15]
        if (++pos >= UART_BUF_LEN) return 0;    //check sum not found
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	3301      	adds	r3, #1
 800257a:	80fb      	strh	r3, [r7, #6]
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002582:	d301      	bcc.n	8002588 <nmea_checksum+0x38>
 8002584:	2300      	movs	r3, #0
 8002586:	e03b      	b.n	8002600 <nmea_checksum+0xb0>
    while (nmea_data[pos] != '*')
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	4a20      	ldr	r2, [pc, #128]	; (800260c <nmea_checksum+0xbc>)
 800258c:	5cd3      	ldrb	r3, [r2, r3]
 800258e:	2b2a      	cmp	r3, #42	; 0x2a
 8002590:	d1eb      	bne.n	800256a <nmea_checksum+0x1a>
    }
    
    if (nmea_data[++pos] > 0x40)
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	3301      	adds	r3, #1
 8002596:	80fb      	strh	r3, [r7, #6]
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	4a1c      	ldr	r2, [pc, #112]	; (800260c <nmea_checksum+0xbc>)
 800259c:	5cd3      	ldrb	r3, [r2, r3]
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	d907      	bls.n	80025b2 <nmea_checksum+0x62>
    {
        MessageCheckSum = (nmea_data[pos] - 0x37) << 4;   //ascii hex to number
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	4a19      	ldr	r2, [pc, #100]	; (800260c <nmea_checksum+0xbc>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	3b37      	subs	r3, #55	; 0x37
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	73bb      	strb	r3, [r7, #14]
 80025b0:	e006      	b.n	80025c0 <nmea_checksum+0x70>
    }
    else
    {
        MessageCheckSum = (nmea_data[pos] - 0x30) << 4;
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	4a15      	ldr	r2, [pc, #84]	; (800260c <nmea_checksum+0xbc>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	3b30      	subs	r3, #48	; 0x30
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	73bb      	strb	r3, [r7, #14]
    }
    
    if (nmea_data[++pos] > 0x40)
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	3301      	adds	r3, #1
 80025c4:	80fb      	strh	r3, [r7, #6]
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	4a10      	ldr	r2, [pc, #64]	; (800260c <nmea_checksum+0xbc>)
 80025ca:	5cd3      	ldrb	r3, [r2, r3]
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	d908      	bls.n	80025e2 <nmea_checksum+0x92>
    {
        MessageCheckSum += (nmea_data[pos] - 0x37);       //ascii hex to number
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <nmea_checksum+0xbc>)
 80025d4:	5cd2      	ldrb	r2, [r2, r3]
 80025d6:	7bbb      	ldrb	r3, [r7, #14]
 80025d8:	4413      	add	r3, r2
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3b37      	subs	r3, #55	; 0x37
 80025de:	73bb      	strb	r3, [r7, #14]
 80025e0:	e007      	b.n	80025f2 <nmea_checksum+0xa2>
    }
    else
    {
        MessageCheckSum += (nmea_data[pos] - 0x30);
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	4a09      	ldr	r2, [pc, #36]	; (800260c <nmea_checksum+0xbc>)
 80025e6:	5cd2      	ldrb	r2, [r2, r3]
 80025e8:	7bbb      	ldrb	r3, [r7, #14]
 80025ea:	4413      	add	r3, r2
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3b30      	subs	r3, #48	; 0x30
 80025f0:	73bb      	strb	r3, [r7, #14]
    }
    
    if (MessageCheckSum == CheckSum)
 80025f2:	7bba      	ldrb	r2, [r7, #14]
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d101      	bne.n	80025fe <nmea_checksum+0xae>
    {
        return 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <nmea_checksum+0xb0>
    }
    else
    {
        return 0;
 80025fe:	2300      	movs	r3, #0
    }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000188 	.word	0x20000188

08002610 <get_gps_status>:



uint8_t get_gps_status(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
	return gps_num.status;
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <get_gps_status+0x14>)
 8002616:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000138 	.word	0x20000138

08002628 <get_nmea_buf>:



char *get_nmea_buf(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
	return &nmea_data[0];
 800262c:	4b02      	ldr	r3, [pc, #8]	; (8002638 <get_nmea_buf+0x10>)
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000188 	.word	0x20000188

0800263c <get_gps_raw>:



struct gps_raw_struct *get_gps_raw(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
	return &gps_raw;
 8002640:	4b02      	ldr	r3, [pc, #8]	; (800264c <get_gps_raw+0x10>)
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000588 	.word	0x20000588

08002650 <get_gps_num>:



struct gps_num_struct *get_gps_num(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
	return &gps_num;
 8002654:	4b02      	ldr	r3, [pc, #8]	; (8002660 <get_gps_num+0x10>)
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000138 	.word	0x20000138

08002664 <i2c_init>:
#define I2C_CLOCK_DELAY             (500)



void i2c_init(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
    //I2C config
    RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;     //enable i2c clock
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <i2c_init+0x68>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	4a17      	ldr	r2, [pc, #92]	; (80026cc <i2c_init+0x68>)
 800266e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002672:	61d3      	str	r3, [r2, #28]
    
    I2C2->CR2 &= ~I2C_CR2_FREQ;             //clear bits before set
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <i2c_init+0x6c>)
 8002676:	889b      	ldrh	r3, [r3, #4]
 8002678:	b29b      	uxth	r3, r3
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <i2c_init+0x6c>)
 800267c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002680:	b29b      	uxth	r3, r3
 8002682:	8093      	strh	r3, [r2, #4]
    I2C2->CR2 |= (uint16_t)10;              //10 MHz periph clock
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <i2c_init+0x6c>)
 8002686:	889b      	ldrh	r3, [r3, #4]
 8002688:	b29b      	uxth	r3, r3
 800268a:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <i2c_init+0x6c>)
 800268c:	f043 030a 	orr.w	r3, r3, #10
 8002690:	b29b      	uxth	r3, r3
 8002692:	8093      	strh	r3, [r2, #4]
    
    //Stndard mode
    I2C2->CCR |= (uint16_t)180;             //CCR = TSCL/(2 * TPCLK1); TSCL = 1 / 100kHz standard mode freq; TPCLK1 = 1 / APB1 clock 36 MHz
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <i2c_init+0x6c>)
 8002696:	8b9b      	ldrh	r3, [r3, #28]
 8002698:	b29b      	uxth	r3, r3
 800269a:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <i2c_init+0x6c>)
 800269c:	f043 03b4 	orr.w	r3, r3, #180	; 0xb4
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	8393      	strh	r3, [r2, #28]
    I2C2->TRISE |= (uint16_t)37;            //TRISE = (Tr max/TPCLK1)+1; Tr max = 1000nS for standard mode
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <i2c_init+0x6c>)
 80026a6:	8c1b      	ldrh	r3, [r3, #32]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <i2c_init+0x6c>)
 80026ac:	f043 0325 	orr.w	r3, r3, #37	; 0x25
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	8413      	strh	r3, [r2, #32]
    
    I2C2->CR1 |= I2C_CR1_PE;                //enable i2c2
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <i2c_init+0x6c>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <i2c_init+0x6c>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	8013      	strh	r3, [r2, #0]
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40005800 	.word	0x40005800

080026d4 <init_lrns>:
uint8_t device_number;



void init_lrns(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
	//Clear mem
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 80026da:	2301      	movs	r3, #1
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	e017      	b.n	8002710 <init_lrns+0x3c>
    {
        memset(&gps_air[dev], 0, sizeof(gps_air[dev]));
 80026e0:	79fa      	ldrb	r2, [r7, #7]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4a2d      	ldr	r2, [pc, #180]	; (80027a0 <init_lrns+0xcc>)
 80026ec:	4413      	add	r3, r2
 80026ee:	2214      	movs	r2, #20
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f007 f93b 	bl	800996e <memset>
        memset(&gps_rel[dev], 0, sizeof(gps_rel[dev]));
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4a29      	ldr	r2, [pc, #164]	; (80027a4 <init_lrns+0xd0>)
 80026fe:	4413      	add	r3, r2
 8002700:	2208      	movs	r2, #8
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f007 f932 	bl	800996e <memset>
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	3301      	adds	r3, #1
 800270e:	71fb      	strb	r3, [r7, #7]
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	2b06      	cmp	r3, #6
 8002714:	d9e4      	bls.n	80026e0 <init_lrns+0xc>
    }

	//Get external things
	p_settings = get_settings();
 8002716:	f006 f90f 	bl	8008938 <get_settings>
 800271a:	4602      	mov	r2, r0
 800271c:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <init_lrns+0xd4>)
 800271e:	601a      	str	r2, [r3, #0]
	p_gps_num = get_gps_num();
 8002720:	f7ff ff96 	bl	8002650 <get_gps_num>
 8002724:	4602      	mov	r2, r0
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <init_lrns+0xd8>)
 8002728:	601a      	str	r2, [r3, #0]
	p_air_packet_tx = get_air_packet_tx();
 800272a:	f006 fb6b 	bl	8008e04 <get_air_packet_tx>
 800272e:	4602      	mov	r2, r0
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <init_lrns+0xdc>)
 8002732:	601a      	str	r2, [r3, #0]
	p_air_packet_rx = get_air_packet_rx();
 8002734:	f006 fb70 	bl	8008e18 <get_air_packet_rx>
 8002738:	4602      	mov	r2, r0
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <init_lrns+0xe0>)
 800273c:	601a      	str	r2, [r3, #0]

	//This device number
	device_number = p_settings->device_number;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <init_lrns+0xd4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <init_lrns+0xe4>)
 8002746:	701a      	strb	r2, [r3, #0]

    //Exist flag
	dev_aux[device_number].exist_flag = 1;
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <init_lrns+0xe4>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <init_lrns+0xe8>)
 8002750:	460b      	mov	r3, r1
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	440b      	add	r3, r1
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
    
    //ID
    gps_air[device_number].device_id[0] = p_settings->device_id[0];		//note: ID loads only once at startup
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <init_lrns+0xd4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <init_lrns+0xe4>)
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	4611      	mov	r1, r2
 8002768:	7858      	ldrb	r0, [r3, #1]
 800276a:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <init_lrns+0xcc>)
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	4602      	mov	r2, r0
 8002778:	701a      	strb	r2, [r3, #0]
    gps_air[device_number].device_id[1] = p_settings->device_id[1];
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <init_lrns+0xd4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <init_lrns+0xe4>)
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	4611      	mov	r1, r2
 8002784:	7898      	ldrb	r0, [r3, #2]
 8002786:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <init_lrns+0xcc>)
 8002788:	460b      	mov	r3, r1
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	3301      	adds	r3, #1
 8002794:	4602      	mov	r2, r0
 8002796:	701a      	strb	r2, [r3, #0]
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000740 	.word	0x20000740
 80027a4:	20000700 	.word	0x20000700
 80027a8:	2000061c 	.word	0x2000061c
 80027ac:	20000614 	.word	0x20000614
 80027b0:	2000073c 	.word	0x2000073c
 80027b4:	20000618 	.word	0x20000618
 80027b8:	20000738 	.word	0x20000738
 80027bc:	20000620 	.word	0x20000620

080027c0 <set_device_flags>:



//Set this device flags
void set_device_flags(uint8_t parameter_to_set, uint8_t parameter_value)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	460a      	mov	r2, r1
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	4613      	mov	r3, r2
 80027ce:	71bb      	strb	r3, [r7, #6]
	uint8_t mask;
	uint8_t pos;

    switch (parameter_to_set)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d81f      	bhi.n	8002818 <set_device_flags+0x58>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <set_device_flags+0x20>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	080027fb 	.word	0x080027fb
 80027e8:	08002805 	.word	0x08002805
 80027ec:	0800280f 	.word	0x0800280f
    {
        case FLAGS_BATTERY:
        	mask = FLAGS_BATTERY_MASK;
 80027f0:	2307      	movs	r3, #7
 80027f2:	73fb      	strb	r3, [r7, #15]
            pos = FLAGS_BATTERY_POS;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73bb      	strb	r3, [r7, #14]
            break;
 80027f8:	e00e      	b.n	8002818 <set_device_flags+0x58>

        case FLAGS_GPS_FIX:
        	mask = FLAGS_GPS_FIX_MASK;
 80027fa:	2308      	movs	r3, #8
 80027fc:	73fb      	strb	r3, [r7, #15]
            pos = FLAGS_GPS_FIX_POS;
 80027fe:	2303      	movs	r3, #3
 8002800:	73bb      	strb	r3, [r7, #14]
            break;
 8002802:	e009      	b.n	8002818 <set_device_flags+0x58>

        case FLAGS_PDOP:
        	mask = FLAGS_PDOP_MASK;
 8002804:	2310      	movs	r3, #16
 8002806:	73fb      	strb	r3, [r7, #15]
            pos = FLAGS_PDOP_POS;
 8002808:	2304      	movs	r3, #4
 800280a:	73bb      	strb	r3, [r7, #14]
            break;
 800280c:	e004      	b.n	8002818 <set_device_flags+0x58>

        case FLAGS_ALARM:
        	mask = FLAGS_ALARM_MASK;
 800280e:	2320      	movs	r3, #32
 8002810:	73fb      	strb	r3, [r7, #15]
            pos = FLAGS_ALARM_POS;
 8002812:	2305      	movs	r3, #5
 8002814:	73bb      	strb	r3, [r7, #14]
            break;
 8002816:	bf00      	nop
    }

    gps_air[device_number].flags &= ~mask;             			//clear bits
 8002818:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <set_device_flags+0xf4>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4619      	mov	r1, r3
 800281e:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <set_device_flags+0xf8>)
 8002820:	460b      	mov	r3, r1
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	3302      	adds	r3, #2
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b25a      	sxtb	r2, r3
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002834:	43db      	mvns	r3, r3
 8002836:	b25b      	sxtb	r3, r3
 8002838:	4013      	ands	r3, r2
 800283a:	b25a      	sxtb	r2, r3
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <set_device_flags+0xf4>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	b2d0      	uxtb	r0, r2
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <set_device_flags+0xf8>)
 8002846:	460b      	mov	r3, r1
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	3302      	adds	r3, #2
 8002852:	4602      	mov	r2, r0
 8002854:	701a      	strb	r2, [r3, #0]
	parameter_value &= (mask >> pos);   							//clear non-masked bits
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	fa42 f303 	asr.w	r3, r2, r3
 800285e:	b25a      	sxtb	r2, r3
 8002860:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002864:	4013      	ands	r3, r2
 8002866:	b25b      	sxtb	r3, r3
 8002868:	71bb      	strb	r3, [r7, #6]
	gps_air[device_number].flags |= (parameter_value << pos);  	//add to flags
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <set_device_flags+0xf4>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	4619      	mov	r1, r3
 8002870:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <set_device_flags+0xf8>)
 8002872:	460b      	mov	r3, r1
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3302      	adds	r3, #2
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b25a      	sxtb	r2, r3
 8002882:	79b9      	ldrb	r1, [r7, #6]
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	b25b      	sxtb	r3, r3
 800288c:	4313      	orrs	r3, r2
 800288e:	b25a      	sxtb	r2, r3
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <set_device_flags+0xf4>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4619      	mov	r1, r3
 8002896:	b2d0      	uxtb	r0, r2
 8002898:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <set_device_flags+0xf8>)
 800289a:	460b      	mov	r3, r1
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3302      	adds	r3, #2
 80028a6:	4602      	mov	r2, r0
 80028a8:	701a      	strb	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	20000738 	.word	0x20000738
 80028b8:	20000740 	.word	0x20000740

080028bc <get_device_flags>:



//Get any device flags
uint8_t get_device_flags(uint8_t dev_num, uint8_t parameter_to_get)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	460a      	mov	r2, r1
 80028c6:	71fb      	strb	r3, [r7, #7]
 80028c8:	4613      	mov	r3, r2
 80028ca:	71bb      	strb	r3, [r7, #6]
	uint8_t mask;
	uint8_t pos;

    switch (parameter_to_get)
 80028cc:	79bb      	ldrb	r3, [r7, #6]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d81f      	bhi.n	8002914 <get_device_flags+0x58>
 80028d4:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <get_device_flags+0x20>)
 80028d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028da:	bf00      	nop
 80028dc:	080028ed 	.word	0x080028ed
 80028e0:	080028f7 	.word	0x080028f7
 80028e4:	08002901 	.word	0x08002901
 80028e8:	0800290b 	.word	0x0800290b
    {
		case FLAGS_BATTERY:
			mask = FLAGS_BATTERY_MASK;
 80028ec:	2307      	movs	r3, #7
 80028ee:	73fb      	strb	r3, [r7, #15]
			pos = FLAGS_BATTERY_POS;
 80028f0:	2300      	movs	r3, #0
 80028f2:	73bb      	strb	r3, [r7, #14]
			break;
 80028f4:	e00e      	b.n	8002914 <get_device_flags+0x58>

		case FLAGS_GPS_FIX:
			mask = FLAGS_GPS_FIX_MASK;
 80028f6:	2308      	movs	r3, #8
 80028f8:	73fb      	strb	r3, [r7, #15]
			pos = FLAGS_GPS_FIX_POS;
 80028fa:	2303      	movs	r3, #3
 80028fc:	73bb      	strb	r3, [r7, #14]
			break;
 80028fe:	e009      	b.n	8002914 <get_device_flags+0x58>

		case FLAGS_PDOP:
			mask = FLAGS_PDOP_MASK;
 8002900:	2310      	movs	r3, #16
 8002902:	73fb      	strb	r3, [r7, #15]
			pos = FLAGS_PDOP_POS;
 8002904:	2304      	movs	r3, #4
 8002906:	73bb      	strb	r3, [r7, #14]
			break;
 8002908:	e004      	b.n	8002914 <get_device_flags+0x58>

		case FLAGS_ALARM:
			mask = FLAGS_ALARM_MASK;
 800290a:	2320      	movs	r3, #32
 800290c:	73fb      	strb	r3, [r7, #15]
			pos = FLAGS_ALARM_POS;
 800290e:	2305      	movs	r3, #5
 8002910:	73bb      	strb	r3, [r7, #14]
			break;
 8002912:	bf00      	nop
    }

    return (gps_air[dev_num].flags & mask) >> pos;
 8002914:	79fa      	ldrb	r2, [r7, #7]
 8002916:	490a      	ldr	r1, [pc, #40]	; (8002940 <get_device_flags+0x84>)
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3302      	adds	r3, #2
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	4013      	ands	r3, r2
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	7bbb      	ldrb	r3, [r7, #14]
 8002930:	fa42 f303 	asr.w	r3, r2, r3
 8002934:	b2db      	uxtb	r3, r3
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	20000740 	.word	0x20000740

08002944 <check_alarms>:



//Check alarm status of each device and make red led on if any alarm exist
uint8_t check_alarms(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
    uint8_t led_status = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	71fb      	strb	r3, [r7, #7]

    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 800294e:	2301      	movs	r3, #1
 8002950:	71bb      	strb	r3, [r7, #6]
 8002952:	e00c      	b.n	800296e <check_alarms+0x2a>
    {
        if (get_device_flags(dev, FLAGS_ALARM) == FLAG_ALARM_ON)
 8002954:	79bb      	ldrb	r3, [r7, #6]
 8002956:	2104      	movs	r1, #4
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ffaf 	bl	80028bc <get_device_flags>
 800295e:	4603      	mov	r3, r0
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <check_alarms+0x24>
        {
            led_status = 1;
 8002964:	2301      	movs	r3, #1
 8002966:	71fb      	strb	r3, [r7, #7]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002968:	79bb      	ldrb	r3, [r7, #6]
 800296a:	3301      	adds	r3, #1
 800296c:	71bb      	strb	r3, [r7, #6]
 800296e:	79bb      	ldrb	r3, [r7, #6]
 8002970:	2b06      	cmp	r3, #6
 8002972:	d9ef      	bls.n	8002954 <check_alarms+0x10>
        }
    }

    if (led_status == 1)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d103      	bne.n	8002982 <check_alarms+0x3e>
    {
        led_red_on();
 800297a:	f7ff f917 	bl	8001bac <led_red_on>
        return 1;
 800297e:	2301      	movs	r3, #1
 8002980:	e002      	b.n	8002988 <check_alarms+0x44>
    }
    else
    {
        led_red_off();
 8002982:	f7ff f91f 	bl	8001bc4 <led_red_off>
        return 0;
 8002986:	2300      	movs	r3, #0
    }
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <calc_timeout>:



void calc_timeout(uint32_t current_uptime)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e020      	b.n	80029e0 <calc_timeout+0x50>
    {
        if (dev_aux[dev].exist_flag == 1)
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	4913      	ldr	r1, [pc, #76]	; (80029f0 <calc_timeout+0x60>)
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d113      	bne.n	80029da <calc_timeout+0x4a>
        {
        	dev_aux[dev].timeout = current_uptime - dev_aux[dev].timestamp;
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	490e      	ldr	r1, [pc, #56]	; (80029f0 <calc_timeout+0x60>)
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	440b      	add	r3, r1
 80029c0:	3304      	adds	r3, #4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	1ac9      	subs	r1, r1, r3
 80029ca:	4809      	ldr	r0, [pc, #36]	; (80029f0 <calc_timeout+0x60>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4403      	add	r3, r0
 80029d6:	3308      	adds	r3, #8
 80029d8:	6019      	str	r1, [r3, #0]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	3301      	adds	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d9db      	bls.n	800299e <calc_timeout+0xe>
        }
    }
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	20000620 	.word	0x20000620

080029f4 <check_timeout>:



//Check devices timeout and set flags if needed
uint8_t check_timeout(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
	uint8_t timeout_status = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	71fb      	strb	r3, [r7, #7]

    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 80029fe:	2301      	movs	r3, #1
 8002a00:	71bb      	strb	r3, [r7, #6]
 8002a02:	e037      	b.n	8002a74 <check_timeout+0x80>
    {
		if (dev_aux[dev].memory_point_flag == 0)	//no timeout alarm for memory points
 8002a04:	79ba      	ldrb	r2, [r7, #6]
 8002a06:	4922      	ldr	r1, [pc, #136]	; (8002a90 <check_timeout+0x9c>)
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	330e      	adds	r3, #14
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d129      	bne.n	8002a6e <check_timeout+0x7a>
		{
			if (p_settings->timeout_threshold.as_integer != TIMEOUT_ALARM_DISABLED)
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <check_timeout+0xa0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	88db      	ldrh	r3, [r3, #6]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d024      	beq.n	8002a6e <check_timeout+0x7a>
			{
				if (dev_aux[dev].timeout > p_settings->timeout_threshold.as_integer)
 8002a24:	79ba      	ldrb	r2, [r7, #6]
 8002a26:	491a      	ldr	r1, [pc, #104]	; (8002a90 <check_timeout+0x9c>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	3308      	adds	r3, #8
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <check_timeout+0xa0>)
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	88d2      	ldrh	r2, [r2, #6]
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d90c      	bls.n	8002a5a <check_timeout+0x66>
				{
					dev_aux[dev].timeout_flag = 1;
 8002a40:	79ba      	ldrb	r2, [r7, #6]
 8002a42:	4913      	ldr	r1, [pc, #76]	; (8002a90 <check_timeout+0x9c>)
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	330c      	adds	r3, #12
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
					timeout_status = 1;
 8002a54:	2301      	movs	r3, #1
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	e009      	b.n	8002a6e <check_timeout+0x7a>
				}
				else
				{
					dev_aux[dev].timeout_flag = 0;
 8002a5a:	79ba      	ldrb	r2, [r7, #6]
 8002a5c:	490c      	ldr	r1, [pc, #48]	; (8002a90 <check_timeout+0x9c>)
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	440b      	add	r3, r1
 8002a68:	330c      	adds	r3, #12
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002a6e:	79bb      	ldrb	r3, [r7, #6]
 8002a70:	3301      	adds	r3, #1
 8002a72:	71bb      	strb	r3, [r7, #6]
 8002a74:	79bb      	ldrb	r3, [r7, #6]
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d9c4      	bls.n	8002a04 <check_timeout+0x10>
				}
			}
		}
    }

    if (timeout_status == 1)
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <check_timeout+0x90>
    {
    	return 1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <check_timeout+0x92>
    }
    else
    {
    	return 0;
 8002a84:	2300      	movs	r3, #0
    }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	20000620 	.word	0x20000620
 8002a94:	2000061c 	.word	0x2000061c

08002a98 <check_fence>:



uint8_t check_fence(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
	uint8_t fence_status = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	71fb      	strb	r3, [r7, #7]

	for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	71bb      	strb	r3, [r7, #6]
 8002aa6:	e02c      	b.n	8002b02 <check_fence+0x6a>
	{
		if (dev_aux[dev].exist_flag)
 8002aa8:	79ba      	ldrb	r2, [r7, #6]
 8002aaa:	491d      	ldr	r1, [pc, #116]	; (8002b20 <check_fence+0x88>)
 8002aac:	4613      	mov	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01f      	beq.n	8002afc <check_fence+0x64>
		{
			if (gps_rel[dev].distance > p_settings->fence_threshold.as_integer)
 8002abc:	79bb      	ldrb	r3, [r7, #6]
 8002abe:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <check_fence+0x8c>)
 8002ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <check_fence+0x90>)
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	8912      	ldrh	r2, [r2, #8]
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d90c      	bls.n	8002ae8 <check_fence+0x50>
			{
				dev_aux[dev].fence_flag = 1;
 8002ace:	79ba      	ldrb	r2, [r7, #6]
 8002ad0:	4913      	ldr	r1, [pc, #76]	; (8002b20 <check_fence+0x88>)
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	330d      	adds	r3, #13
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
				fence_status = 1;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	71fb      	strb	r3, [r7, #7]
 8002ae6:	e009      	b.n	8002afc <check_fence+0x64>
			}
			else
			{
				dev_aux[dev].fence_flag = 0;
 8002ae8:	79ba      	ldrb	r2, [r7, #6]
 8002aea:	490d      	ldr	r1, [pc, #52]	; (8002b20 <check_fence+0x88>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	330d      	adds	r3, #13
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
	for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002afc:	79bb      	ldrb	r3, [r7, #6]
 8002afe:	3301      	adds	r3, #1
 8002b00:	71bb      	strb	r3, [r7, #6]
 8002b02:	79bb      	ldrb	r3, [r7, #6]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	d9cf      	bls.n	8002aa8 <check_fence+0x10>
			}
		}
	}

    if (fence_status == 1)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <check_fence+0x7a>
    {
    	return 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <check_fence+0x7c>
    }
    else
    {
    	return 0;
 8002b12:	2300      	movs	r3, #0
    }
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000620 	.word	0x20000620
 8002b24:	20000700 	.word	0x20000700
 8002b28:	2000061c 	.word	0x2000061c

08002b2c <process_all_devices>:



void process_all_devices(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
	for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002b32:	2301      	movs	r3, #1
 8002b34:	71fb      	strb	r3, [r7, #7]
 8002b36:	e010      	b.n	8002b5a <process_all_devices+0x2e>
	{
		if (dev_aux[dev].exist_flag == 1)	//process mem points too
 8002b38:	79fa      	ldrb	r2, [r7, #7]
 8002b3a:	490b      	ldr	r1, [pc, #44]	; (8002b68 <process_all_devices+0x3c>)
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d103      	bne.n	8002b54 <process_all_devices+0x28>
		{
			calc_relative_position(dev);
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 faa6 	bl	80030a0 <calc_relative_position>
	for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	3301      	adds	r3, #1
 8002b58:	71fb      	strb	r3, [r7, #7]
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b06      	cmp	r3, #6
 8002b5e:	d9eb      	bls.n	8002b38 <process_all_devices+0xc>
		}
	}
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000620 	.word	0x20000620

08002b6c <gps_air_update_my_data>:



//Update gps_air structure with coordinates of this device in order to transmit them further
void gps_air_update_my_data(uint32_t uptime)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

    //Timestamp
	dev_aux[device_number].timestamp = uptime;
 8002b74:	4b44      	ldr	r3, [pc, #272]	; (8002c88 <gps_air_update_my_data+0x11c>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4a44      	ldr	r2, [pc, #272]	; (8002c8c <gps_air_update_my_data+0x120>)
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	440b      	add	r3, r1
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	601a      	str	r2, [r3, #0]
    

    //Flags
    if (p_gps_num->mode == GPS_POSITION_3DFIX)
 8002b8c:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <gps_air_update_my_data+0x124>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d104      	bne.n	8002ba2 <gps_air_update_my_data+0x36>
    {
        set_device_flags(FLAGS_GPS_FIX, FLAG_GPS_FIX_3D);
 8002b98:	2101      	movs	r1, #1
 8002b9a:	2002      	movs	r0, #2
 8002b9c:	f7ff fe10 	bl	80027c0 <set_device_flags>
 8002ba0:	e003      	b.n	8002baa <gps_air_update_my_data+0x3e>
    }
    else
    {
        set_device_flags(FLAGS_GPS_FIX, FLAG_GPS_FIX_2D);
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	f7ff fe0b 	bl	80027c0 <set_device_flags>
    }
    
    if (p_gps_num->pdop <= PDOP_THRESHOLD)
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <gps_air_update_my_data+0x124>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	4938      	ldr	r1, [pc, #224]	; (8002c94 <gps_air_update_my_data+0x128>)
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe fa96 	bl	80010e4 <__aeabi_fcmple>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <gps_air_update_my_data+0x5c>
    {
        set_device_flags(FLAGS_PDOP, FLAG_PDOP_GOOD);
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f7ff fdfd 	bl	80027c0 <set_device_flags>
 8002bc6:	e003      	b.n	8002bd0 <gps_air_update_my_data+0x64>
    }
    else
    {
        set_device_flags(FLAGS_PDOP, FLAG_PDOP_BAD);
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2003      	movs	r0, #3
 8002bcc:	f7ff fdf8 	bl	80027c0 <set_device_flags>
    }
    
    //Latitude & Longitude
    gps_air[device_number].latitude.as_float = p_gps_num->latitude.in_deg;
 8002bd0:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <gps_air_update_my_data+0x124>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	; (8002c88 <gps_air_update_my_data+0x11c>)
 8002bd6:	7812      	ldrb	r2, [r2, #0]
 8002bd8:	4610      	mov	r0, r2
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	492e      	ldr	r1, [pc, #184]	; (8002c98 <gps_air_update_my_data+0x12c>)
 8002bde:	4603      	mov	r3, r0
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4403      	add	r3, r0
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3304      	adds	r3, #4
 8002bea:	601a      	str	r2, [r3, #0]
    gps_air[device_number].longitude.as_float = p_gps_num->longitude.in_deg;
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <gps_air_update_my_data+0x124>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a25      	ldr	r2, [pc, #148]	; (8002c88 <gps_air_update_my_data+0x11c>)
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	4927      	ldr	r1, [pc, #156]	; (8002c98 <gps_air_update_my_data+0x12c>)
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4403      	add	r3, r0
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	3308      	adds	r3, #8
 8002c06:	601a      	str	r2, [r3, #0]
    
    //Altitude
    gps_air[device_number].altitude.as_integer = (int16_t)p_gps_num->altitude;
 8002c08:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <gps_air_update_my_data+0x124>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <gps_air_update_my_data+0x11c>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461c      	mov	r4, r3
 8002c14:	4610      	mov	r0, r2
 8002c16:	f7fe fa83 	bl	8001120 <__aeabi_f2iz>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	b219      	sxth	r1, r3
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <gps_air_update_my_data+0x12c>)
 8002c20:	4623      	mov	r3, r4
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4423      	add	r3, r4
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	460a      	mov	r2, r1
 8002c2e:	801a      	strh	r2, [r3, #0]
    
    //Speed
    gps_air[device_number].speed = (uint8_t)p_gps_num->speed;
 8002c30:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <gps_air_update_my_data+0x124>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <gps_air_update_my_data+0x11c>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461c      	mov	r4, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f7fe fa95 	bl	800116c <__aeabi_f2uiz>
 8002c42:	4603      	mov	r3, r0
 8002c44:	b2d9      	uxtb	r1, r3
 8002c46:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <gps_air_update_my_data+0x12c>)
 8002c48:	4623      	mov	r3, r4
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4423      	add	r3, r4
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	330e      	adds	r3, #14
 8002c54:	460a      	mov	r2, r1
 8002c56:	701a      	strb	r2, [r3, #0]
    
    //Course
    gps_air[device_number].course.as_integer = (uint16_t)p_gps_num->course;
 8002c58:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <gps_air_update_my_data+0x124>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <gps_air_update_my_data+0x11c>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	461c      	mov	r4, r3
 8002c64:	4610      	mov	r0, r2
 8002c66:	f7fe fa81 	bl	800116c <__aeabi_f2uiz>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	b299      	uxth	r1, r3
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <gps_air_update_my_data+0x12c>)
 8002c70:	4623      	mov	r3, r4
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4423      	add	r3, r4
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	3310      	adds	r3, #16
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	801a      	strh	r2, [r3, #0]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}
 8002c88:	20000738 	.word	0x20000738
 8002c8c:	20000620 	.word	0x20000620
 8002c90:	20000614 	.word	0x20000614
 8002c94:	40c00000 	.word	0x40c00000
 8002c98:	20000740 	.word	0x20000740

08002c9c <fill_air_packet_with_struct_data>:



//Copy gps_air struct data to the TX air packet
void fill_air_packet_with_struct_data(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
	p_air_packet_tx[PACKET_DEVICE_NUMBER_POS] = 	device_number;             //this device number
 8002ca0:	4b80      	ldr	r3, [pc, #512]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002ca6:	7812      	ldrb	r2, [r2, #0]
 8002ca8:	701a      	strb	r2, [r3, #0]
	p_air_packet_tx[PACKET_DEVICE_ID_POS] = 		gps_air[device_number].device_id[0];
 8002caa:	4b7f      	ldr	r3, [pc, #508]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	4b7c      	ldr	r3, [pc, #496]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	497d      	ldr	r1, [pc, #500]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002cb8:	4603      	mov	r3, r0
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4403      	add	r3, r0
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_DEVICE_ID_POS + 1] = 	gps_air[device_number].device_id[1];
 8002cc6:	4b78      	ldr	r3, [pc, #480]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	4b75      	ldr	r3, [pc, #468]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	1c9a      	adds	r2, r3, #2
 8002cd2:	4976      	ldr	r1, [pc, #472]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4403      	add	r3, r0
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3301      	adds	r3, #1
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_FLAGS_POS] = 			gps_air[device_number].flags;
 8002ce4:	4b70      	ldr	r3, [pc, #448]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	4b6e      	ldr	r3, [pc, #440]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	1cda      	adds	r2, r3, #3
 8002cf0:	496e      	ldr	r1, [pc, #440]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4403      	add	r3, r0
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LATITUDE_POS] = 			gps_air[device_number].latitude.as_array[0];
 8002d02:	4b69      	ldr	r3, [pc, #420]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	4b66      	ldr	r3, [pc, #408]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1d1a      	adds	r2, r3, #4
 8002d0e:	4967      	ldr	r1, [pc, #412]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002d10:	4603      	mov	r3, r0
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4403      	add	r3, r0
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LATITUDE_POS + 1] = 		gps_air[device_number].latitude.as_array[1];
 8002d20:	4b61      	ldr	r3, [pc, #388]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	4b5f      	ldr	r3, [pc, #380]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	1d5a      	adds	r2, r3, #5
 8002d2c:	495f      	ldr	r1, [pc, #380]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002d2e:	4603      	mov	r3, r0
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4403      	add	r3, r0
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3305      	adds	r3, #5
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LATITUDE_POS + 2] = 		gps_air[device_number].latitude.as_array[2];
 8002d3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	4b57      	ldr	r3, [pc, #348]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	1d9a      	adds	r2, r3, #6
 8002d4a:	4958      	ldr	r1, [pc, #352]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4403      	add	r3, r0
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	3306      	adds	r3, #6
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LATITUDE_POS + 3] = 		gps_air[device_number].latitude.as_array[3];
 8002d5c:	4b52      	ldr	r3, [pc, #328]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	1dda      	adds	r2, r3, #7
 8002d68:	4950      	ldr	r1, [pc, #320]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4403      	add	r3, r0
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	3307      	adds	r3, #7
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LONGITUDE_POS] = 		gps_air[device_number].longitude.as_array[0];
 8002d7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4b48      	ldr	r3, [pc, #288]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f103 0208 	add.w	r2, r3, #8
 8002d88:	4948      	ldr	r1, [pc, #288]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4403      	add	r3, r0
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3308      	adds	r3, #8
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LONGITUDE_POS + 1] = 	gps_air[device_number].longitude.as_array[1];
 8002d9a:	4b43      	ldr	r3, [pc, #268]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	4b40      	ldr	r3, [pc, #256]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f103 0209 	add.w	r2, r3, #9
 8002da8:	4940      	ldr	r1, [pc, #256]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002daa:	4603      	mov	r3, r0
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4403      	add	r3, r0
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	3309      	adds	r3, #9
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LONGITUDE_POS + 2] = 	gps_air[device_number].longitude.as_array[2];
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f103 020a 	add.w	r2, r3, #10
 8002dc8:	4938      	ldr	r1, [pc, #224]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002dca:	4603      	mov	r3, r0
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4403      	add	r3, r0
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	330a      	adds	r3, #10
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LONGITUDE_POS + 3] = 	gps_air[device_number].longitude.as_array[3];
 8002dda:	4b33      	ldr	r3, [pc, #204]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f103 020b 	add.w	r2, r3, #11
 8002de8:	4930      	ldr	r1, [pc, #192]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002dea:	4603      	mov	r3, r0
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4403      	add	r3, r0
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	330b      	adds	r3, #11
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_ALTITUDE_POS] = 			gps_air[device_number].altitude.as_array[0];
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f103 020c 	add.w	r2, r3, #12
 8002e08:	4928      	ldr	r1, [pc, #160]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4403      	add	r3, r0
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	330c      	adds	r3, #12
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_ALTITUDE_POS + 1] = 		gps_air[device_number].altitude.as_array[1];
 8002e1a:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f103 020d 	add.w	r2, r3, #13
 8002e28:	4920      	ldr	r1, [pc, #128]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4403      	add	r3, r0
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	330d      	adds	r3, #13
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_SPEED_POS] = 			gps_air[device_number].speed;
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f103 020e 	add.w	r2, r3, #14
 8002e48:	4918      	ldr	r1, [pc, #96]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4403      	add	r3, r0
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	330e      	adds	r3, #14
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_COURSE_POS] = 			gps_air[device_number].course.as_array[0];
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f103 020f 	add.w	r2, r3, #15
 8002e68:	4910      	ldr	r1, [pc, #64]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4403      	add	r3, r0
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	3310      	adds	r3, #16
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_COURSE_POS + 1] = 		gps_air[device_number].course.as_array[1];
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <fill_air_packet_with_struct_data+0x20c>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <fill_air_packet_with_struct_data+0x208>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f103 0210 	add.w	r2, r3, #16
 8002e88:	4908      	ldr	r1, [pc, #32]	; (8002eac <fill_air_packet_with_struct_data+0x210>)
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4403      	add	r3, r0
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3311      	adds	r3, #17
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	7013      	strb	r3, [r2, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	2000073c 	.word	0x2000073c
 8002ea8:	20000738 	.word	0x20000738
 8002eac:	20000740 	.word	0x20000740

08002eb0 <fill_struct_with_air_packet_data>:



//Copy RX air packet data to the gps_air struct
uint8_t fill_struct_with_air_packet_data(uint32_t uptime)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	uint8_t rx_device = p_air_packet_rx[PACKET_DEVICE_NUMBER_POS]; //extract device number from received packet
 8002eb8:	4b76      	ldr	r3, [pc, #472]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	73fb      	strb	r3, [r7, #15]

	dev_aux[rx_device].exist_flag = 				1;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	4975      	ldr	r1, [pc, #468]	; (8003098 <fill_struct_with_air_packet_data+0x1e8>)
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	440b      	add	r3, r1
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
	dev_aux[rx_device].timestamp = 					uptime;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	4970      	ldr	r1, [pc, #448]	; (8003098 <fill_struct_with_air_packet_data+0x1e8>)
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	601a      	str	r2, [r3, #0]
    gps_air[rx_device].device_id[0] = 				p_air_packet_rx[PACKET_DEVICE_ID_POS];
 8002ee6:	4b6b      	ldr	r3, [pc, #428]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3301      	adds	r3, #1
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	7818      	ldrb	r0, [r3, #0]
 8002ef0:	496a      	ldr	r1, [pc, #424]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	4602      	mov	r2, r0
 8002efe:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].device_id[1] = 				p_air_packet_rx[PACKET_DEVICE_ID_POS + 1];
 8002f00:	4b64      	ldr	r3, [pc, #400]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3302      	adds	r3, #2
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	7818      	ldrb	r0, [r3, #0]
 8002f0a:	4964      	ldr	r1, [pc, #400]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	3301      	adds	r3, #1
 8002f18:	4602      	mov	r2, r0
 8002f1a:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].flags = 						p_air_packet_rx[PACKET_FLAGS_POS];
 8002f1c:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	7bfa      	ldrb	r2, [r7, #15]
 8002f22:	78d8      	ldrb	r0, [r3, #3]
 8002f24:	495d      	ldr	r1, [pc, #372]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3302      	adds	r3, #2
 8002f32:	4602      	mov	r2, r0
 8002f34:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].latitude.as_array[0] = 		p_air_packet_rx[PACKET_LATITUDE_POS];
 8002f36:	4b57      	ldr	r3, [pc, #348]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	7918      	ldrb	r0, [r3, #4]
 8002f3e:	4957      	ldr	r1, [pc, #348]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].latitude.as_array[1] = 		p_air_packet_rx[PACKET_LATITUDE_POS + 1];
 8002f50:	4b50      	ldr	r3, [pc, #320]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	7958      	ldrb	r0, [r3, #5]
 8002f58:	4950      	ldr	r1, [pc, #320]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3305      	adds	r3, #5
 8002f66:	4602      	mov	r2, r0
 8002f68:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].latitude.as_array[2] = 		p_air_packet_rx[PACKET_LATITUDE_POS + 2];
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	7998      	ldrb	r0, [r3, #6]
 8002f72:	494a      	ldr	r1, [pc, #296]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3306      	adds	r3, #6
 8002f80:	4602      	mov	r2, r0
 8002f82:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].latitude.as_array[3] = 		p_air_packet_rx[PACKET_LATITUDE_POS + 3];
 8002f84:	4b43      	ldr	r3, [pc, #268]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	79d8      	ldrb	r0, [r3, #7]
 8002f8c:	4943      	ldr	r1, [pc, #268]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3307      	adds	r3, #7
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].longitude.as_array[0] = 		p_air_packet_rx[PACKET_LONGITUDE_POS];
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	7a18      	ldrb	r0, [r3, #8]
 8002fa6:	493d      	ldr	r1, [pc, #244]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].longitude.as_array[1] = 		p_air_packet_rx[PACKET_LONGITUDE_POS + 1];
 8002fb8:	4b36      	ldr	r3, [pc, #216]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	7a58      	ldrb	r0, [r3, #9]
 8002fc0:	4936      	ldr	r1, [pc, #216]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3309      	adds	r3, #9
 8002fce:	4602      	mov	r2, r0
 8002fd0:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].longitude.as_array[2] = 		p_air_packet_rx[PACKET_LONGITUDE_POS + 2];
 8002fd2:	4b30      	ldr	r3, [pc, #192]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	7a98      	ldrb	r0, [r3, #10]
 8002fda:	4930      	ldr	r1, [pc, #192]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	330a      	adds	r3, #10
 8002fe8:	4602      	mov	r2, r0
 8002fea:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].longitude.as_array[3] = 		p_air_packet_rx[PACKET_LONGITUDE_POS + 3];
 8002fec:	4b29      	ldr	r3, [pc, #164]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	7ad8      	ldrb	r0, [r3, #11]
 8002ff4:	4929      	ldr	r1, [pc, #164]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	330b      	adds	r3, #11
 8003002:	4602      	mov	r2, r0
 8003004:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].altitude.as_array[0] =		p_air_packet_rx[PACKET_ALTITUDE_POS];
 8003006:	4b23      	ldr	r3, [pc, #140]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	7b18      	ldrb	r0, [r3, #12]
 800300e:	4923      	ldr	r1, [pc, #140]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	330c      	adds	r3, #12
 800301c:	4602      	mov	r2, r0
 800301e:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].altitude.as_array[1] = 		p_air_packet_rx[PACKET_ALTITUDE_POS + 1];
 8003020:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	7b58      	ldrb	r0, [r3, #13]
 8003028:	491c      	ldr	r1, [pc, #112]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	330d      	adds	r3, #13
 8003036:	4602      	mov	r2, r0
 8003038:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].speed = 						p_air_packet_rx[PACKET_SPEED_POS];
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	7b98      	ldrb	r0, [r3, #14]
 8003042:	4916      	ldr	r1, [pc, #88]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	330e      	adds	r3, #14
 8003050:	4602      	mov	r2, r0
 8003052:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].course.as_array[0] = 		p_air_packet_rx[PACKET_COURSE_POS];
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	7bd8      	ldrb	r0, [r3, #15]
 800305c:	490f      	ldr	r1, [pc, #60]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3310      	adds	r3, #16
 800306a:	4602      	mov	r2, r0
 800306c:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].course.as_array[1] = 		p_air_packet_rx[PACKET_COURSE_POS + 1];
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <fill_struct_with_air_packet_data+0x1e4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	7c18      	ldrb	r0, [r3, #16]
 8003076:	4909      	ldr	r1, [pc, #36]	; (800309c <fill_struct_with_air_packet_data+0x1ec>)
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3311      	adds	r3, #17
 8003084:	4602      	mov	r2, r0
 8003086:	701a      	strb	r2, [r3, #0]

    return rx_device;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	20000618 	.word	0x20000618
 8003098:	20000620 	.word	0x20000620
 800309c:	20000740 	.word	0x20000740

080030a0 <calc_relative_position>:
//  Heart of the device <3
//Calculates distance between two GPS points (using haversine formula)
//Calculates heading between two GPS points (loxodrome, or rhumb line)
//Calculates altitude difference
void calc_relative_position(uint8_t another_device)
{
 80030a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030a4:	b08f      	sub	sp, #60	; 0x3c
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	71fb      	strb	r3, [r7, #7]
    double lat1, lat2, lon1, lon2;
    double distance, heading;
    
    //my position
    lat1 = p_gps_num->latitude.in_rad;
 80030ac:	4bc6      	ldr	r3, [pc, #792]	; (80033c8 <calc_relative_position+0x328>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f103 0410 	add.w	r4, r3, #16
 80030b4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030b8:	e9c7 3406 	strd	r3, r4, [r7, #24]
    lon1 = p_gps_num->longitude.in_rad;
 80030bc:	4bc2      	ldr	r3, [pc, #776]	; (80033c8 <calc_relative_position+0x328>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f103 0420 	add.w	r4, r3, #32
 80030c4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    //position of the device to calculate relative position
    lat2 = gps_air[another_device].latitude.as_float * deg_to_rad;
 80030cc:	79fa      	ldrb	r2, [r7, #7]
 80030ce:	49bf      	ldr	r1, [pc, #764]	; (80033cc <calc_relative_position+0x32c>)
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	3304      	adds	r3, #4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f9aa 	bl	8000438 <__aeabi_f2d>
 80030e4:	a4ae      	add	r4, pc, #696	; (adr r4, 80033a0 <calc_relative_position+0x300>)
 80030e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80030ea:	461a      	mov	r2, r3
 80030ec:	4623      	mov	r3, r4
 80030ee:	f7fd f9fb 	bl	80004e8 <__aeabi_dmul>
 80030f2:	4603      	mov	r3, r0
 80030f4:	460c      	mov	r4, r1
 80030f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    lon2 = gps_air[another_device].longitude.as_float * deg_to_rad;
 80030fa:	79fa      	ldrb	r2, [r7, #7]
 80030fc:	49b3      	ldr	r1, [pc, #716]	; (80033cc <calc_relative_position+0x32c>)
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3308      	adds	r3, #8
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd f993 	bl	8000438 <__aeabi_f2d>
 8003112:	a4a3      	add	r4, pc, #652	; (adr r4, 80033a0 <calc_relative_position+0x300>)
 8003114:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003118:	461a      	mov	r2, r3
 800311a:	4623      	mov	r3, r4
 800311c:	f7fd f9e4 	bl	80004e8 <__aeabi_dmul>
 8003120:	4603      	mov	r3, r0
 8003122:	460c      	mov	r4, r1
 8003124:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    
    if (lat1 == lat2)
 8003128:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800312c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003130:	f7fd fc42 	bl	80009b8 <__aeabi_dcmpeq>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <calc_relative_position+0xb0>
    {
        lat2 += 0.00000001;       //slightly shift the position
 800313a:	a39b      	add	r3, pc, #620	; (adr r3, 80033a8 <calc_relative_position+0x308>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003144:	f7fd f81a 	bl	800017c <__adddf3>
 8003148:	4603      	mov	r3, r0
 800314a:	460c      	mov	r4, r1
 800314c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    }
    
    if (lon1 == lon2)
 8003150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003154:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003158:	f7fd fc2e 	bl	80009b8 <__aeabi_dcmpeq>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <calc_relative_position+0xd8>
    {
        lon2 += 0.00000001;       //slightly shift the position
 8003162:	a391      	add	r3, pc, #580	; (adr r3, 80033a8 <calc_relative_position+0x308>)
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800316c:	f7fd f806 	bl	800017c <__adddf3>
 8003170:	4603      	mov	r3, r0
 8003172:	460c      	mov	r4, r1
 8003174:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    }
    
    distance = twice_mean_earth_radius *
               asin( sqrt( pow(sin((lat2 - lat1) / 2), 2) +
 8003178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800317c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003180:	f7fc fffa 	bl	8000178 <__aeabi_dsub>
 8003184:	4603      	mov	r3, r0
 8003186:	460c      	mov	r4, r1
 8003188:	4618      	mov	r0, r3
 800318a:	4621      	mov	r1, r4
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003194:	f7fd fad2 	bl	800073c <__aeabi_ddiv>
 8003198:	4603      	mov	r3, r0
 800319a:	460c      	mov	r4, r1
 800319c:	4618      	mov	r0, r3
 800319e:	4621      	mov	r1, r4
 80031a0:	f006 fdb2 	bl	8009d08 <sin>
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031ac:	f006 fede 	bl	8009f6c <pow>
 80031b0:	4604      	mov	r4, r0
 80031b2:	460d      	mov	r5, r1
                           cos(lat2) * cos(lat1) * pow(sin((lon2 - lon1) / 2), 2)));
 80031b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80031b8:	f006 fd6c 	bl	8009c94 <cos>
 80031bc:	4680      	mov	r8, r0
 80031be:	4689      	mov	r9, r1
 80031c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031c4:	f006 fd66 	bl	8009c94 <cos>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4640      	mov	r0, r8
 80031ce:	4649      	mov	r1, r9
 80031d0:	f7fd f98a 	bl	80004e8 <__aeabi_dmul>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4690      	mov	r8, r2
 80031da:	4699      	mov	r9, r3
 80031dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031e4:	f7fc ffc8 	bl	8000178 <__aeabi_dsub>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031f8:	f7fd faa0 	bl	800073c <__aeabi_ddiv>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	f006 fd80 	bl	8009d08 <sin>
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003210:	f006 feac 	bl	8009f6c <pow>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4640      	mov	r0, r8
 800321a:	4649      	mov	r1, r9
 800321c:	f7fd f964 	bl	80004e8 <__aeabi_dmul>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
               asin( sqrt( pow(sin((lat2 - lat1) / 2), 2) +
 8003224:	4620      	mov	r0, r4
 8003226:	4629      	mov	r1, r5
 8003228:	f7fc ffa8 	bl	800017c <__adddf3>
 800322c:	4603      	mov	r3, r0
 800322e:	460c      	mov	r4, r1
 8003230:	4618      	mov	r0, r3
 8003232:	4621      	mov	r1, r4
 8003234:	f006 fff6 	bl	800a224 <sqrt>
 8003238:	4603      	mov	r3, r0
 800323a:	460c      	mov	r4, r1
 800323c:	4618      	mov	r0, r3
 800323e:	4621      	mov	r1, r4
 8003240:	f006 fdc6 	bl	8009dd0 <asin>
    distance = twice_mean_earth_radius *
 8003244:	a45a      	add	r4, pc, #360	; (adr r4, 80033b0 <calc_relative_position+0x310>)
 8003246:	e9d4 3400 	ldrd	r3, r4, [r4]
 800324a:	461a      	mov	r2, r3
 800324c:	4623      	mov	r3, r4
 800324e:	f7fd f94b 	bl	80004e8 <__aeabi_dmul>
 8003252:	4603      	mov	r3, r0
 8003254:	460c      	mov	r4, r1
 8003256:	e9c7 3402 	strd	r3, r4, [r7, #8]
    
    heading = atan((lon2 - lon1) /
 800325a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800325e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003262:	f7fc ff89 	bl	8000178 <__aeabi_dsub>
 8003266:	4603      	mov	r3, r0
 8003268:	460c      	mov	r4, r1
 800326a:	461d      	mov	r5, r3
 800326c:	4626      	mov	r6, r4
                    log(tan(pi_div_by_4 + lat2 / 2) / tan(pi_div_by_4 + lat1 / 2)));
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003276:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800327a:	f7fd fa5f 	bl	800073c <__aeabi_ddiv>
 800327e:	4603      	mov	r3, r0
 8003280:	460c      	mov	r4, r1
 8003282:	4618      	mov	r0, r3
 8003284:	4621      	mov	r1, r4
 8003286:	a44c      	add	r4, pc, #304	; (adr r4, 80033b8 <calc_relative_position+0x318>)
 8003288:	e9d4 3400 	ldrd	r3, r4, [r4]
 800328c:	461a      	mov	r2, r3
 800328e:	4623      	mov	r3, r4
 8003290:	f7fc ff74 	bl	800017c <__adddf3>
 8003294:	4603      	mov	r3, r0
 8003296:	460c      	mov	r4, r1
 8003298:	4618      	mov	r0, r3
 800329a:	4621      	mov	r1, r4
 800329c:	f006 fd6e 	bl	8009d7c <tan>
 80032a0:	4680      	mov	r8, r0
 80032a2:	4689      	mov	r9, r1
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032b0:	f7fd fa44 	bl	800073c <__aeabi_ddiv>
 80032b4:	4603      	mov	r3, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	4618      	mov	r0, r3
 80032ba:	4621      	mov	r1, r4
 80032bc:	a43e      	add	r4, pc, #248	; (adr r4, 80033b8 <calc_relative_position+0x318>)
 80032be:	e9d4 3400 	ldrd	r3, r4, [r4]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4623      	mov	r3, r4
 80032c6:	f7fc ff59 	bl	800017c <__adddf3>
 80032ca:	4603      	mov	r3, r0
 80032cc:	460c      	mov	r4, r1
 80032ce:	4618      	mov	r0, r3
 80032d0:	4621      	mov	r1, r4
 80032d2:	f006 fd53 	bl	8009d7c <tan>
 80032d6:	4603      	mov	r3, r0
 80032d8:	460c      	mov	r4, r1
 80032da:	461a      	mov	r2, r3
 80032dc:	4623      	mov	r3, r4
 80032de:	4640      	mov	r0, r8
 80032e0:	4649      	mov	r1, r9
 80032e2:	f7fd fa2b 	bl	800073c <__aeabi_ddiv>
 80032e6:	4603      	mov	r3, r0
 80032e8:	460c      	mov	r4, r1
 80032ea:	4618      	mov	r0, r3
 80032ec:	4621      	mov	r1, r4
 80032ee:	f006 fdc3 	bl	8009e78 <log>
 80032f2:	4603      	mov	r3, r0
 80032f4:	460c      	mov	r4, r1
    heading = atan((lon2 - lon1) /
 80032f6:	461a      	mov	r2, r3
 80032f8:	4623      	mov	r3, r4
 80032fa:	4628      	mov	r0, r5
 80032fc:	4631      	mov	r1, r6
 80032fe:	f7fd fa1d 	bl	800073c <__aeabi_ddiv>
 8003302:	4603      	mov	r3, r0
 8003304:	460c      	mov	r4, r1
 8003306:	4618      	mov	r0, r3
 8003308:	4621      	mov	r1, r4
 800330a:	f006 fb39 	bl	8009980 <atan>
 800330e:	e9c7 0108 	strd	r0, r1, [r7, #32]
    
    
    if ((lat2 > lat1) && (lon2 > lon1))
 8003312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003316:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800331a:	f7fd fb75 	bl	8000a08 <__aeabi_dcmpgt>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d016      	beq.n	8003352 <calc_relative_position+0x2b2>
 8003324:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003328:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800332c:	f7fd fb6c 	bl	8000a08 <__aeabi_dcmpgt>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <calc_relative_position+0x2b2>
    {
        heading *= rad_to_deg;
 8003336:	a422      	add	r4, pc, #136	; (adr r4, 80033c0 <calc_relative_position+0x320>)
 8003338:	e9d4 3400 	ldrd	r3, r4, [r4]
 800333c:	461a      	mov	r2, r3
 800333e:	4623      	mov	r3, r4
 8003340:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003344:	f7fd f8d0 	bl	80004e8 <__aeabi_dmul>
 8003348:	4603      	mov	r3, r0
 800334a:	460c      	mov	r4, r1
 800334c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8003350:	e05d      	b.n	800340e <calc_relative_position+0x36e>
    }
    else if ((lat2 > lat1) && (lon2 < lon1))
 8003352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003356:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800335a:	f7fd fb55 	bl	8000a08 <__aeabi_dcmpgt>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d037      	beq.n	80033d4 <calc_relative_position+0x334>
 8003364:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003368:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800336c:	f7fd fb2e 	bl	80009cc <__aeabi_dcmplt>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d02e      	beq.n	80033d4 <calc_relative_position+0x334>
    {
        heading = 360.0 + heading * rad_to_deg;
 8003376:	a112      	add	r1, pc, #72	; (adr r1, 80033c0 <calc_relative_position+0x320>)
 8003378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800337c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003380:	f7fd f8b2 	bl	80004e8 <__aeabi_dmul>
 8003384:	4603      	mov	r3, r0
 8003386:	460c      	mov	r4, r1
 8003388:	4618      	mov	r0, r3
 800338a:	4621      	mov	r1, r4
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <calc_relative_position+0x330>)
 8003392:	f7fc fef3 	bl	800017c <__adddf3>
 8003396:	4603      	mov	r3, r0
 8003398:	460c      	mov	r4, r1
 800339a:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800339e:	e036      	b.n	800340e <calc_relative_position+0x36e>
 80033a0:	a2529d3a 	.word	0xa2529d3a
 80033a4:	3f91df46 	.word	0x3f91df46
 80033a8:	e2308c3a 	.word	0xe2308c3a
 80033ac:	3e45798e 	.word	0x3e45798e
 80033b0:	00000000 	.word	0x00000000
 80033b4:	41684db0 	.word	0x41684db0
 80033b8:	54442d18 	.word	0x54442d18
 80033bc:	3fe921fb 	.word	0x3fe921fb
 80033c0:	1a63c1f8 	.word	0x1a63c1f8
 80033c4:	404ca5dc 	.word	0x404ca5dc
 80033c8:	20000614 	.word	0x20000614
 80033cc:	20000740 	.word	0x20000740
 80033d0:	40768000 	.word	0x40768000
    }
    else if (lat2 < lat1)
 80033d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033dc:	f7fd faf6 	bl	80009cc <__aeabi_dcmplt>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d013      	beq.n	800340e <calc_relative_position+0x36e>
    {
        heading = 180.0 + heading * rad_to_deg;
 80033e6:	a12c      	add	r1, pc, #176	; (adr r1, 8003498 <calc_relative_position+0x3f8>)
 80033e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033f0:	f7fd f87a 	bl	80004e8 <__aeabi_dmul>
 80033f4:	4603      	mov	r3, r0
 80033f6:	460c      	mov	r4, r1
 80033f8:	4618      	mov	r0, r3
 80033fa:	4621      	mov	r1, r4
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <calc_relative_position+0x400>)
 8003402:	f7fc febb 	bl	800017c <__adddf3>
 8003406:	4603      	mov	r3, r0
 8003408:	460c      	mov	r4, r1
 800340a:	e9c7 3408 	strd	r3, r4, [r7, #32]
    }
    
    gps_rel[another_device].distance = (uint32_t)distance;
 800340e:	79fc      	ldrb	r4, [r7, #7]
 8003410:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003414:	f7fd fb40 	bl	8000a98 <__aeabi_d2uiz>
 8003418:	4602      	mov	r2, r0
 800341a:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <calc_relative_position+0x404>)
 800341c:	f843 2034 	str.w	r2, [r3, r4, lsl #3]

    if (gps_rel[another_device].distance == 0)
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	4a20      	ldr	r2, [pc, #128]	; (80034a4 <calc_relative_position+0x404>)
 8003424:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <calc_relative_position+0x39a>
    {
    	gps_rel[another_device].heading = 0;	//if distance is zero then make heading equals zero too
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <calc_relative_position+0x404>)
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	2200      	movs	r2, #0
 8003436:	809a      	strh	r2, [r3, #4]
 8003438:	e00b      	b.n	8003452 <calc_relative_position+0x3b2>
    }
    else
    {
    	gps_rel[another_device].heading = (uint16_t)heading;
 800343a:	79fc      	ldrb	r4, [r7, #7]
 800343c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003440:	f7fd fb2a 	bl	8000a98 <__aeabi_d2uiz>
 8003444:	4603      	mov	r3, r0
 8003446:	b299      	uxth	r1, r3
 8003448:	4a16      	ldr	r2, [pc, #88]	; (80034a4 <calc_relative_position+0x404>)
 800344a:	00e3      	lsls	r3, r4, #3
 800344c:	4413      	add	r3, r2
 800344e:	460a      	mov	r2, r1
 8003450:	809a      	strh	r2, [r3, #4]
    }

    gps_rel[another_device].altitude_diff = gps_air[another_device].altitude.as_integer - (int16_t)p_gps_num->altitude;
 8003452:	79fa      	ldrb	r2, [r7, #7]
 8003454:	4914      	ldr	r1, [pc, #80]	; (80034a8 <calc_relative_position+0x408>)
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	330c      	adds	r3, #12
 8003462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003466:	b29c      	uxth	r4, r3
 8003468:	4b10      	ldr	r3, [pc, #64]	; (80034ac <calc_relative_position+0x40c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fe56 	bl	8001120 <__aeabi_f2iz>
 8003474:	4603      	mov	r3, r0
 8003476:	b21b      	sxth	r3, r3
 8003478:	b29b      	uxth	r3, r3
 800347a:	1ae3      	subs	r3, r4, r3
 800347c:	b29a      	uxth	r2, r3
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	b211      	sxth	r1, r2
 8003482:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <calc_relative_position+0x404>)
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	460a      	mov	r2, r1
 800348a:	80da      	strh	r2, [r3, #6]
}
 800348c:	bf00      	nop
 800348e:	373c      	adds	r7, #60	; 0x3c
 8003490:	46bd      	mov	sp, r7
 8003492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003496:	bf00      	nop
 8003498:	1a63c1f8 	.word	0x1a63c1f8
 800349c:	404ca5dc 	.word	0x404ca5dc
 80034a0:	40668000 	.word	0x40668000
 80034a4:	20000700 	.word	0x20000700
 80034a8:	20000740 	.word	0x20000740
 80034ac:	20000614 	.word	0x20000614

080034b0 <get_gps_air>:



struct gps_air_struct **get_gps_air(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	71fb      	strb	r3, [r7, #7]
 80034ba:	e00d      	b.n	80034d8 <get_gps_air+0x28>
	{
		p_gps_air[i] = &gps_air[i];
 80034bc:	79fa      	ldrb	r2, [r7, #7]
 80034be:	79f9      	ldrb	r1, [r7, #7]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4a08      	ldr	r2, [pc, #32]	; (80034ec <get_gps_air+0x3c>)
 80034ca:	4413      	add	r3, r2
 80034cc:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <get_gps_air+0x40>)
 80034ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	3301      	adds	r3, #1
 80034d6:	71fb      	strb	r3, [r7, #7]
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d9ee      	bls.n	80034bc <get_gps_air+0xc>
	}

	return &p_gps_air[0];
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <get_gps_air+0x40>)
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000740 	.word	0x20000740
 80034f0:	200006e4 	.word	0x200006e4

080034f4 <get_gps_rel>:



struct gps_rel_struct **get_gps_rel(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	71fb      	strb	r3, [r7, #7]
 80034fe:	e00a      	b.n	8003516 <get_gps_rel+0x22>
	{
		p_gps_rel[i] = &gps_rel[i];
 8003500:	79fa      	ldrb	r2, [r7, #7]
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	00d2      	lsls	r2, r2, #3
 8003506:	4908      	ldr	r1, [pc, #32]	; (8003528 <get_gps_rel+0x34>)
 8003508:	440a      	add	r2, r1
 800350a:	4908      	ldr	r1, [pc, #32]	; (800352c <get_gps_rel+0x38>)
 800350c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	3301      	adds	r3, #1
 8003514:	71fb      	strb	r3, [r7, #7]
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2b06      	cmp	r3, #6
 800351a:	d9f1      	bls.n	8003500 <get_gps_rel+0xc>
	}

	return &p_gps_rel[0];
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <get_gps_rel+0x38>)
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	20000700 	.word	0x20000700
 800352c:	200006c8 	.word	0x200006c8

08003530 <get_dev_aux>:



struct dev_aux_struct **get_dev_aux(void)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 8003536:	2300      	movs	r3, #0
 8003538:	71fb      	strb	r3, [r7, #7]
 800353a:	e00d      	b.n	8003558 <get_dev_aux+0x28>
	{
		p_dev_aux[i] = &dev_aux[i];
 800353c:	79fa      	ldrb	r2, [r7, #7]
 800353e:	79f9      	ldrb	r1, [r7, #7]
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4a08      	ldr	r2, [pc, #32]	; (800356c <get_dev_aux+0x3c>)
 800354a:	4413      	add	r3, r2
 800354c:	4a08      	ldr	r2, [pc, #32]	; (8003570 <get_dev_aux+0x40>)
 800354e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	3301      	adds	r3, #1
 8003556:	71fb      	strb	r3, [r7, #7]
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	2b06      	cmp	r3, #6
 800355c:	d9ee      	bls.n	800353c <get_dev_aux+0xc>
	}

	return &p_dev_aux[0];
 800355e:	4b04      	ldr	r3, [pc, #16]	; (8003570 <get_dev_aux+0x40>)
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000620 	.word	0x20000620
 8003570:	200005f8 	.word	0x200005f8

08003574 <m24c64_poll>:
#define M24C64_PAGES_TOTAL              (256)



uint8_t m24c64_poll(void)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
    uint16_t SR1_tmp;
    uint16_t SR2_tmp;
    uint8_t attempts = M24C64_POLL_ATTEMPTS;
 800357a:	2364      	movs	r3, #100	; 0x64
 800357c:	717b      	strb	r3, [r7, #5]
    
    while (attempts)
 800357e:	e047      	b.n	8003610 <m24c64_poll+0x9c>
    {
        //Start
        I2C2->CR1 |= I2C_CR1_START;
 8003580:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <m24c64_poll+0xc4>)
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	4a2c      	ldr	r2, [pc, #176]	; (8003638 <m24c64_poll+0xc4>)
 8003588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358c:	b29b      	uxth	r3, r3
 800358e:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 8003590:	bf00      	nop
 8003592:	4b29      	ldr	r3, [pc, #164]	; (8003638 <m24c64_poll+0xc4>)
 8003594:	8a9b      	ldrh	r3, [r3, #20]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f8      	beq.n	8003592 <m24c64_poll+0x1e>
        {
        }
        //Clear
        SR1_tmp = I2C2->SR1;
 80035a0:	4b25      	ldr	r3, [pc, #148]	; (8003638 <m24c64_poll+0xc4>)
 80035a2:	8a9b      	ldrh	r3, [r3, #20]
 80035a4:	807b      	strh	r3, [r7, #2]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_WRITE_MODE;
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <m24c64_poll+0xc4>)
 80035a8:	22a0      	movs	r2, #160	; 0xa0
 80035aa:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission or NAK reception
        do
        {
            SR1_tmp = I2C2->SR1;
 80035ac:	4b22      	ldr	r3, [pc, #136]	; (8003638 <m24c64_poll+0xc4>)
 80035ae:	8a9b      	ldrh	r3, [r3, #20]
 80035b0:	807b      	strh	r3, [r7, #2]
        }
        while (!(SR1_tmp & I2C_SR1_ADDR) && !(SR1_tmp & I2C_SR1_AF));    //"ADDR is not set after a NACK reception"
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <m24c64_poll+0x52>
 80035bc:	887b      	ldrh	r3, [r7, #2]
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f2      	beq.n	80035ac <m24c64_poll+0x38>
        //Clear
        SR1_tmp = I2C2->SR1;
 80035c6:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <m24c64_poll+0xc4>)
 80035c8:	8a9b      	ldrh	r3, [r3, #20]
 80035ca:	807b      	strh	r3, [r7, #2]
        SR2_tmp = I2C2->SR2;
 80035cc:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <m24c64_poll+0xc4>)
 80035ce:	8b1b      	ldrh	r3, [r3, #24]
 80035d0:	80fb      	strh	r3, [r7, #6]
        
        //Check acknowledge failure
        if (SR1_tmp & I2C_SR1_AF)
 80035d2:	887b      	ldrh	r3, [r7, #2]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <m24c64_poll+0x78>
        {
            //no acknowledge is returned, slave is busy
            I2C2->SR1 = ~(I2C_SR1_AF);   //write 0 to clear AF bit
 80035dc:	4b16      	ldr	r3, [pc, #88]	; (8003638 <m24c64_poll+0xc4>)
 80035de:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80035e2:	829a      	strh	r2, [r3, #20]
            
            attempts--;   //slave is not ready, decrement attmepts counter
 80035e4:	797b      	ldrb	r3, [r7, #5]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	717b      	strb	r3, [r7, #5]
 80035ea:	e011      	b.n	8003610 <m24c64_poll+0x9c>
        }
        else if (SR1_tmp & I2C_SR1_ADDR)
 80035ec:	887b      	ldrh	r3, [r7, #2]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <m24c64_poll+0x96>
        {
            //Stop
            I2C2->CR1 |= I2C_CR1_STOP;
 80035f6:	4b10      	ldr	r3, [pc, #64]	; (8003638 <m24c64_poll+0xc4>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <m24c64_poll+0xc4>)
 80035fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003602:	b29b      	uxth	r3, r3
 8003604:	8013      	strh	r3, [r2, #0]
            
            return 1;   //slave is ready
 8003606:	2301      	movs	r3, #1
 8003608:	e011      	b.n	800362e <m24c64_poll+0xba>
        }
        else
        {
            attempts--; //???
 800360a:	797b      	ldrb	r3, [r7, #5]
 800360c:	3b01      	subs	r3, #1
 800360e:	717b      	strb	r3, [r7, #5]
    while (attempts)
 8003610:	797b      	ldrb	r3, [r7, #5]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1b4      	bne.n	8003580 <m24c64_poll+0xc>
        }
    }

    SR2_tmp = SR2_tmp + 1;
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	3301      	adds	r3, #1
 800361a:	80fb      	strh	r3, [r7, #6]
    
    //Stop before end
    I2C2->CR1 |= I2C_CR1_STOP;
 800361c:	4b06      	ldr	r3, [pc, #24]	; (8003638 <m24c64_poll+0xc4>)
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	b29b      	uxth	r3, r3
 8003622:	4a05      	ldr	r2, [pc, #20]	; (8003638 <m24c64_poll+0xc4>)
 8003624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003628:	b29b      	uxth	r3, r3
 800362a:	8013      	strh	r3, [r2, #0]
    
    return 0;       //end of attmepts, slave is busy or absent
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	40005800 	.word	0x40005800

0800363c <m24c64_read_byte>:



uint8_t m24c64_read_byte(uint16_t memory_address)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	80fb      	strh	r3, [r7, #6]
    uint8_t result = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
    
    if (m24c64_poll())
 800364a:	f7ff ff93 	bl	8003574 <m24c64_poll>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8084 	beq.w	800375e <m24c64_read_byte+0x122>
    {
        uint16_t SR_tmp;
        
        //Start
        I2C2->CR1 |= I2C_CR1_START;
 8003656:	4b45      	ldr	r3, [pc, #276]	; (800376c <m24c64_read_byte+0x130>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	4a43      	ldr	r2, [pc, #268]	; (800376c <m24c64_read_byte+0x130>)
 800365e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003662:	b29b      	uxth	r3, r3
 8003664:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 8003666:	bf00      	nop
 8003668:	4b40      	ldr	r3, [pc, #256]	; (800376c <m24c64_read_byte+0x130>)
 800366a:	8a9b      	ldrh	r3, [r3, #20]
 800366c:	b29b      	uxth	r3, r3
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f8      	beq.n	8003668 <m24c64_read_byte+0x2c>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 8003676:	4b3d      	ldr	r3, [pc, #244]	; (800376c <m24c64_read_byte+0x130>)
 8003678:	8a9b      	ldrh	r3, [r3, #20]
 800367a:	81bb      	strh	r3, [r7, #12]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_WRITE_MODE;
 800367c:	4b3b      	ldr	r3, [pc, #236]	; (800376c <m24c64_read_byte+0x130>)
 800367e:	22a0      	movs	r2, #160	; 0xa0
 8003680:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission
        while (!(I2C2->SR1 & I2C_SR1_ADDR))
 8003682:	bf00      	nop
 8003684:	4b39      	ldr	r3, [pc, #228]	; (800376c <m24c64_read_byte+0x130>)
 8003686:	8a9b      	ldrh	r3, [r3, #20]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f8      	beq.n	8003684 <m24c64_read_byte+0x48>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 8003692:	4b36      	ldr	r3, [pc, #216]	; (800376c <m24c64_read_byte+0x130>)
 8003694:	8a9b      	ldrh	r3, [r3, #20]
 8003696:	81bb      	strh	r3, [r7, #12]
        SR_tmp = I2C2->SR2;
 8003698:	4b34      	ldr	r3, [pc, #208]	; (800376c <m24c64_read_byte+0x130>)
 800369a:	8b1b      	ldrh	r3, [r3, #24]
 800369c:	81bb      	strh	r3, [r7, #12]
        
        //Memory address high byte
        I2C2->DR = (uint8_t)(memory_address >> 8);
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4b31      	ldr	r3, [pc, #196]	; (800376c <m24c64_read_byte+0x130>)
 80036a8:	b292      	uxth	r2, r2
 80036aa:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 80036ac:	bf00      	nop
 80036ae:	4b2f      	ldr	r3, [pc, #188]	; (800376c <m24c64_read_byte+0x130>)
 80036b0:	8a9b      	ldrh	r3, [r3, #20]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f8      	beq.n	80036ae <m24c64_read_byte+0x72>
        {
        }
        
        //Memory address low byte
        I2C2->DR = (uint8_t)memory_address;
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b2a      	ldr	r3, [pc, #168]	; (800376c <m24c64_read_byte+0x130>)
 80036c2:	b292      	uxth	r2, r2
 80036c4:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 80036c6:	bf00      	nop
 80036c8:	4b28      	ldr	r3, [pc, #160]	; (800376c <m24c64_read_byte+0x130>)
 80036ca:	8a9b      	ldrh	r3, [r3, #20]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f8      	beq.n	80036c8 <m24c64_read_byte+0x8c>
        {
        }
        
        
        //Start (restart actually)
        I2C2->CR1 |= I2C_CR1_START;
 80036d6:	4b25      	ldr	r3, [pc, #148]	; (800376c <m24c64_read_byte+0x130>)
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	4a23      	ldr	r2, [pc, #140]	; (800376c <m24c64_read_byte+0x130>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 80036e6:	bf00      	nop
 80036e8:	4b20      	ldr	r3, [pc, #128]	; (800376c <m24c64_read_byte+0x130>)
 80036ea:	8a9b      	ldrh	r3, [r3, #20]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f8      	beq.n	80036e8 <m24c64_read_byte+0xac>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <m24c64_read_byte+0x130>)
 80036f8:	8a9b      	ldrh	r3, [r3, #20]
 80036fa:	81bb      	strh	r3, [r7, #12]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_READ_MODE;
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <m24c64_read_byte+0x130>)
 80036fe:	22a1      	movs	r2, #161	; 0xa1
 8003700:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission
        while (!(I2C2->SR1 & I2C_SR1_ADDR))
 8003702:	bf00      	nop
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <m24c64_read_byte+0x130>)
 8003706:	8a9b      	ldrh	r3, [r3, #20]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f8      	beq.n	8003704 <m24c64_read_byte+0xc8>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <m24c64_read_byte+0x130>)
 8003714:	8a9b      	ldrh	r3, [r3, #20]
 8003716:	81bb      	strh	r3, [r7, #12]
        SR_tmp = I2C2->SR2;
 8003718:	4b14      	ldr	r3, [pc, #80]	; (800376c <m24c64_read_byte+0x130>)
 800371a:	8b1b      	ldrh	r3, [r3, #24]
 800371c:	81bb      	strh	r3, [r7, #12]
        
        //NACK next byte
        I2C2->CR1 &= ~I2C_CR1_ACK;
 800371e:	4b13      	ldr	r3, [pc, #76]	; (800376c <m24c64_read_byte+0x130>)
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	4a11      	ldr	r2, [pc, #68]	; (800376c <m24c64_read_byte+0x130>)
 8003726:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800372a:	b29b      	uxth	r3, r3
 800372c:	8013      	strh	r3, [r2, #0]
        //Stop
        I2C2->CR1 |= I2C_CR1_STOP;
 800372e:	4b0f      	ldr	r3, [pc, #60]	; (800376c <m24c64_read_byte+0x130>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	4a0d      	ldr	r2, [pc, #52]	; (800376c <m24c64_read_byte+0x130>)
 8003736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800373a:	b29b      	uxth	r3, r3
 800373c:	8013      	strh	r3, [r2, #0]
        //Wait for data register not empty
        while (!(I2C2->SR1 & I2C_SR1_RXNE))
 800373e:	bf00      	nop
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <m24c64_read_byte+0x130>)
 8003742:	8a9b      	ldrh	r3, [r3, #20]
 8003744:	b29b      	uxth	r3, r3
 8003746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f8      	beq.n	8003740 <m24c64_read_byte+0x104>
        {
        }

        SR_tmp = SR_tmp + 1;
 800374e:	89bb      	ldrh	r3, [r7, #12]
 8003750:	3301      	adds	r3, #1
 8003752:	81bb      	strh	r3, [r7, #12]
        
        //Read requested byte
        result = I2C2->DR;
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <m24c64_read_byte+0x130>)
 8003756:	8a1b      	ldrh	r3, [r3, #16]
 8003758:	b29b      	uxth	r3, r3
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	e001      	b.n	8003762 <m24c64_read_byte+0x126>
    }
    else
    {
        result = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
    }
    
    return result;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40005800 	.word	0x40005800

08003770 <m24c64_read_page>:
}



void m24c64_read_page(uint8_t data_array[], uint8_t page_address)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
    if (m24c64_poll())
 800377c:	f7ff fefa 	bl	8003574 <m24c64_poll>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80b1 	beq.w	80038ea <m24c64_read_page+0x17a>
    {
        uint8_t SR_tmp;
        uint16_t memory_address = page_address * M24C64_PAGE_SIZE;
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	b29b      	uxth	r3, r3
 800378c:	015b      	lsls	r3, r3, #5
 800378e:	81bb      	strh	r3, [r7, #12]
        
        //Start
        I2C2->CR1 |= I2C_CR1_START;
 8003790:	4b58      	ldr	r3, [pc, #352]	; (80038f4 <m24c64_read_page+0x184>)
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	4a57      	ldr	r2, [pc, #348]	; (80038f4 <m24c64_read_page+0x184>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379c:	b29b      	uxth	r3, r3
 800379e:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 80037a0:	bf00      	nop
 80037a2:	4b54      	ldr	r3, [pc, #336]	; (80038f4 <m24c64_read_page+0x184>)
 80037a4:	8a9b      	ldrh	r3, [r3, #20]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f8      	beq.n	80037a2 <m24c64_read_page+0x32>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 80037b0:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <m24c64_read_page+0x184>)
 80037b2:	8a9b      	ldrh	r3, [r3, #20]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	72fb      	strb	r3, [r7, #11]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_WRITE_MODE;
 80037b8:	4b4e      	ldr	r3, [pc, #312]	; (80038f4 <m24c64_read_page+0x184>)
 80037ba:	22a0      	movs	r2, #160	; 0xa0
 80037bc:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission
        while (!(I2C2->SR1 & I2C_SR1_ADDR))
 80037be:	bf00      	nop
 80037c0:	4b4c      	ldr	r3, [pc, #304]	; (80038f4 <m24c64_read_page+0x184>)
 80037c2:	8a9b      	ldrh	r3, [r3, #20]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f8      	beq.n	80037c0 <m24c64_read_page+0x50>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 80037ce:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <m24c64_read_page+0x184>)
 80037d0:	8a9b      	ldrh	r3, [r3, #20]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	72fb      	strb	r3, [r7, #11]
        SR_tmp = I2C2->SR2;
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <m24c64_read_page+0x184>)
 80037d8:	8b1b      	ldrh	r3, [r3, #24]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	72fb      	strb	r3, [r7, #11]
        
        //Memory address high byte
        I2C2->DR = (uint8_t)(memory_address >> 8);
 80037de:	89bb      	ldrh	r3, [r7, #12]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <m24c64_read_page+0x184>)
 80037e8:	b292      	uxth	r2, r2
 80037ea:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 80037ec:	bf00      	nop
 80037ee:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <m24c64_read_page+0x184>)
 80037f0:	8a9b      	ldrh	r3, [r3, #20]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f8      	beq.n	80037ee <m24c64_read_page+0x7e>
        {
        }
        
        //Memory address low byte
        I2C2->DR = (uint8_t)memory_address;
 80037fc:	89bb      	ldrh	r3, [r7, #12]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	4b3c      	ldr	r3, [pc, #240]	; (80038f4 <m24c64_read_page+0x184>)
 8003802:	b292      	uxth	r2, r2
 8003804:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 8003806:	bf00      	nop
 8003808:	4b3a      	ldr	r3, [pc, #232]	; (80038f4 <m24c64_read_page+0x184>)
 800380a:	8a9b      	ldrh	r3, [r3, #20]
 800380c:	b29b      	uxth	r3, r3
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f8      	beq.n	8003808 <m24c64_read_page+0x98>
        {
        }
        
        
        //Start (restart actually)
        I2C2->CR1 |= I2C_CR1_START;
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <m24c64_read_page+0x184>)
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29b      	uxth	r3, r3
 800381c:	4a35      	ldr	r2, [pc, #212]	; (80038f4 <m24c64_read_page+0x184>)
 800381e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003822:	b29b      	uxth	r3, r3
 8003824:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 8003826:	bf00      	nop
 8003828:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <m24c64_read_page+0x184>)
 800382a:	8a9b      	ldrh	r3, [r3, #20]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f8      	beq.n	8003828 <m24c64_read_page+0xb8>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 8003836:	4b2f      	ldr	r3, [pc, #188]	; (80038f4 <m24c64_read_page+0x184>)
 8003838:	8a9b      	ldrh	r3, [r3, #20]
 800383a:	b29b      	uxth	r3, r3
 800383c:	72fb      	strb	r3, [r7, #11]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_READ_MODE;
 800383e:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <m24c64_read_page+0x184>)
 8003840:	22a1      	movs	r2, #161	; 0xa1
 8003842:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission
        while (!(I2C2->SR1 & I2C_SR1_ADDR))
 8003844:	bf00      	nop
 8003846:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <m24c64_read_page+0x184>)
 8003848:	8a9b      	ldrh	r3, [r3, #20]
 800384a:	b29b      	uxth	r3, r3
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f8      	beq.n	8003846 <m24c64_read_page+0xd6>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 8003854:	4b27      	ldr	r3, [pc, #156]	; (80038f4 <m24c64_read_page+0x184>)
 8003856:	8a9b      	ldrh	r3, [r3, #20]
 8003858:	b29b      	uxth	r3, r3
 800385a:	72fb      	strb	r3, [r7, #11]
        SR_tmp = I2C2->SR2;
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <m24c64_read_page+0x184>)
 800385e:	8b1b      	ldrh	r3, [r3, #24]
 8003860:	b29b      	uxth	r3, r3
 8003862:	72fb      	strb	r3, [r7, #11]
        
        for (uint8_t i = 0; i < M24C64_PAGE_SIZE - 1; i++)
 8003864:	2300      	movs	r3, #0
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	e01a      	b.n	80038a0 <m24c64_read_page+0x130>
        {
            //ACK next byte
            I2C2->CR1 |= I2C_CR1_ACK;
 800386a:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <m24c64_read_page+0x184>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	4a20      	ldr	r2, [pc, #128]	; (80038f4 <m24c64_read_page+0x184>)
 8003872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003876:	b29b      	uxth	r3, r3
 8003878:	8013      	strh	r3, [r2, #0]
            //Wait for data register not empty
            while (!(I2C2->SR1 & I2C_SR1_RXNE))
 800387a:	bf00      	nop
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <m24c64_read_page+0x184>)
 800387e:	8a9b      	ldrh	r3, [r3, #20]
 8003880:	b29b      	uxth	r3, r3
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f8      	beq.n	800387c <m24c64_read_page+0x10c>
            {
            }
            
            //Read byte
            data_array[i] = I2C2->DR;
 800388a:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <m24c64_read_page+0x184>)
 800388c:	8a1b      	ldrh	r3, [r3, #16]
 800388e:	b299      	uxth	r1, r3
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	b2ca      	uxtb	r2, r1
 8003898:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < M24C64_PAGE_SIZE - 1; i++)
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	3301      	adds	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b1e      	cmp	r3, #30
 80038a4:	d9e1      	bls.n	800386a <m24c64_read_page+0xfa>
        }
        
        //NACK last byte
        I2C2->CR1 &= ~I2C_CR1_ACK;
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <m24c64_read_page+0x184>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4a11      	ldr	r2, [pc, #68]	; (80038f4 <m24c64_read_page+0x184>)
 80038ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	8013      	strh	r3, [r2, #0]
        //Stop
        I2C2->CR1 |= I2C_CR1_STOP;
 80038b6:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <m24c64_read_page+0x184>)
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	4a0d      	ldr	r2, [pc, #52]	; (80038f4 <m24c64_read_page+0x184>)
 80038be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	8013      	strh	r3, [r2, #0]
        //Wait for data register not empty
        while (!(I2C2->SR1 & I2C_SR1_RXNE))
 80038c6:	bf00      	nop
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <m24c64_read_page+0x184>)
 80038ca:	8a9b      	ldrh	r3, [r3, #20]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f8      	beq.n	80038c8 <m24c64_read_page+0x158>
        {
        }
        
        //Read last byte
        data_array[M24C64_PAGE_SIZE - 1] = I2C2->DR;
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <m24c64_read_page+0x184>)
 80038d8:	8a1b      	ldrh	r3, [r3, #16]
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	331f      	adds	r3, #31
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]

        SR_tmp = SR_tmp + 1;
 80038e4:	7afb      	ldrb	r3, [r7, #11]
 80038e6:	3301      	adds	r3, #1
 80038e8:	72fb      	strb	r3, [r7, #11]
    }
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40005800 	.word	0x40005800

080038f8 <m24c64_write_page>:



void m24c64_write_page(uint8_t data_array[], uint8_t page_address)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
    if (m24c64_poll())
 8003904:	f7ff fe36 	bl	8003574 <m24c64_poll>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d06b      	beq.n	80039e6 <m24c64_write_page+0xee>
    {
        uint8_t SR_tmp = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	73bb      	strb	r3, [r7, #14]
        uint16_t memory_address = page_address * M24C64_PAGE_SIZE;
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	b29b      	uxth	r3, r3
 8003916:	015b      	lsls	r3, r3, #5
 8003918:	81bb      	strh	r3, [r7, #12]
        
        //Start
        I2C2->CR1 |= I2C_CR1_START;
 800391a:	4b35      	ldr	r3, [pc, #212]	; (80039f0 <m24c64_write_page+0xf8>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	b29b      	uxth	r3, r3
 8003920:	4a33      	ldr	r2, [pc, #204]	; (80039f0 <m24c64_write_page+0xf8>)
 8003922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003926:	b29b      	uxth	r3, r3
 8003928:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 800392a:	bf00      	nop
 800392c:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <m24c64_write_page+0xf8>)
 800392e:	8a9b      	ldrh	r3, [r3, #20]
 8003930:	b29b      	uxth	r3, r3
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f8      	beq.n	800392c <m24c64_write_page+0x34>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 800393a:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <m24c64_write_page+0xf8>)
 800393c:	8a9b      	ldrh	r3, [r3, #20]
 800393e:	b29b      	uxth	r3, r3
 8003940:	73bb      	strb	r3, [r7, #14]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_WRITE_MODE;
 8003942:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <m24c64_write_page+0xf8>)
 8003944:	22a0      	movs	r2, #160	; 0xa0
 8003946:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission
        while (!(I2C2->SR1 & I2C_SR1_ADDR))
 8003948:	bf00      	nop
 800394a:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <m24c64_write_page+0xf8>)
 800394c:	8a9b      	ldrh	r3, [r3, #20]
 800394e:	b29b      	uxth	r3, r3
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f8      	beq.n	800394a <m24c64_write_page+0x52>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 8003958:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <m24c64_write_page+0xf8>)
 800395a:	8a9b      	ldrh	r3, [r3, #20]
 800395c:	b29b      	uxth	r3, r3
 800395e:	73bb      	strb	r3, [r7, #14]
        SR_tmp = I2C2->SR2;
 8003960:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <m24c64_write_page+0xf8>)
 8003962:	8b1b      	ldrh	r3, [r3, #24]
 8003964:	b29b      	uxth	r3, r3
 8003966:	73bb      	strb	r3, [r7, #14]
        
        //Memory address high byte
        I2C2->DR = (uint8_t)(memory_address >> 8);
 8003968:	89bb      	ldrh	r3, [r7, #12]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	b29b      	uxth	r3, r3
 800396e:	b2da      	uxtb	r2, r3
 8003970:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <m24c64_write_page+0xf8>)
 8003972:	b292      	uxth	r2, r2
 8003974:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 8003976:	bf00      	nop
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <m24c64_write_page+0xf8>)
 800397a:	8a9b      	ldrh	r3, [r3, #20]
 800397c:	b29b      	uxth	r3, r3
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f8      	beq.n	8003978 <m24c64_write_page+0x80>
        {
        }
        
        //Memory address low byte
        I2C2->DR = (uint8_t)memory_address;
 8003986:	89bb      	ldrh	r3, [r7, #12]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <m24c64_write_page+0xf8>)
 800398c:	b292      	uxth	r2, r2
 800398e:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 8003990:	bf00      	nop
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <m24c64_write_page+0xf8>)
 8003994:	8a9b      	ldrh	r3, [r3, #20]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f8      	beq.n	8003992 <m24c64_write_page+0x9a>
        {
        }
        
        for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]
 80039a4:	e011      	b.n	80039ca <m24c64_write_page+0xd2>
        {
            //Write byte
            I2C2->DR = data_array[i];
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <m24c64_write_page+0xf8>)
 80039b0:	b292      	uxth	r2, r2
 80039b2:	821a      	strh	r2, [r3, #16]
            //Wait byte transfer finish
            while (!(I2C2->SR1 & I2C_SR1_BTF))
 80039b4:	bf00      	nop
 80039b6:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <m24c64_write_page+0xf8>)
 80039b8:	8a9b      	ldrh	r3, [r3, #20]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f8      	beq.n	80039b6 <m24c64_write_page+0xbe>
        for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	3301      	adds	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	2b1f      	cmp	r3, #31
 80039ce:	d9ea      	bls.n	80039a6 <m24c64_write_page+0xae>
            {
            }
        }

        SR_tmp = SR_tmp + 1;
 80039d0:	7bbb      	ldrb	r3, [r7, #14]
 80039d2:	3301      	adds	r3, #1
 80039d4:	73bb      	strb	r3, [r7, #14]
        
        //Stop
        I2C2->CR1 |= I2C_CR1_STOP;
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <m24c64_write_page+0xf8>)
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <m24c64_write_page+0xf8>)
 80039de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	8013      	strh	r3, [r2, #0]
    }
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40005800 	.word	0x40005800

080039f4 <m24c64_erase_page>:



void m24c64_erase_page(uint8_t page_address)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08c      	sub	sp, #48	; 0x30
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
    uint8_t empty_page[M24C64_PAGE_SIZE];
    
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a04:	e00c      	b.n	8003a20 <m24c64_erase_page+0x2c>
    {
        empty_page[i] = M24C64_EMPTY_CELL_VALUE;
 8003a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a0e:	4413      	add	r3, r2
 8003a10:	22ff      	movs	r2, #255	; 0xff
 8003a12:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 8003a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a24:	2b1f      	cmp	r3, #31
 8003a26:	d9ee      	bls.n	8003a06 <m24c64_erase_page+0x12>
    }
    
    m24c64_write_page(&empty_page[0], page_address);
 8003a28:	79fa      	ldrb	r2, [r7, #7]
 8003a2a:	f107 030c 	add.w	r3, r7, #12
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff61 	bl	80038f8 <m24c64_write_page>
}
 8003a36:	bf00      	nop
 8003a38:	3730      	adds	r7, #48	; 0x30
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <m24c64_erase_all>:



void m24c64_erase_all(void)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
    for (uint16_t page = 0; page < M24C64_PAGES_TOTAL; page++)
 8003a44:	2300      	movs	r3, #0
 8003a46:	80fb      	strh	r3, [r7, #6]
 8003a48:	e007      	b.n	8003a5a <m24c64_erase_all+0x1c>
    {
        m24c64_erase_page(page);
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ffd0 	bl	80039f4 <m24c64_erase_page>
    for (uint16_t page = 0; page < M24C64_PAGES_TOTAL; page++)
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	3301      	adds	r3, #1
 8003a58:	80fb      	strh	r3, [r7, #6]
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2bff      	cmp	r3, #255	; 0xff
 8003a5e:	d9f4      	bls.n	8003a4a <m24c64_erase_all+0xc>
    }
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <__enable_irq>:
static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	b662      	cpsie	i
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
	...

08003a78 <main>:



//PROGRAM
int main(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
    gpio_init();
 8003a7e:	f7fd fe51 	bl	8001724 <gpio_init>
    timers_init();
 8003a82:	f005 fd03 	bl	800948c <timers_init>
    spi1_init();
 8003a86:	f005 f9d1 	bl	8008e2c <spi1_init>
    spi2_init();
 8003a8a:	f005 fa2b 	bl	8008ee4 <spi2_init>
    i2c_init();
 8003a8e:	f7fe fde9 	bl	8002664 <i2c_init>
    uart_dma_init();
 8003a92:	f005 fe67 	bl	8009764 <uart_dma_init>
    settings_load();
 8003a96:	f004 ff59 	bl	800894c <settings_load>
    ssd1306_init();
 8003a9a:	f005 fab3 	bl	8009004 <ssd1306_init>
    si4463_init();
 8003a9e:	f005 f819 	bl	8008ad4 <si4463_init>
    ext_int_init();
 8003aa2:	f7fe f845 	bl	8001b30 <ext_int_init>
    adc_init();
 8003aa6:	f7fd fc3b 	bl	8001320 <adc_init>
    adc_get_bat_voltage();
 8003aaa:	f7fd fc85 	bl	80013b8 <adc_get_bat_voltage>
    init_lrns();
 8003aae:	f7fe fe11 	bl	80026d4 <init_lrns>
    init_menu();
 8003ab2:	f000 f9cb 	bl	8003e4c <init_menu>
    init_points();
 8003ab6:	f004 f8d3 	bl	8007c60 <init_points>

    p_settings = get_settings();
 8003aba:	f004 ff3d 	bl	8008938 <get_settings>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	4b46      	ldr	r3, [pc, #280]	; (8003bdc <main+0x164>)
 8003ac2:	601a      	str	r2, [r3, #0]
    p_gps_num = get_gps_num();
 8003ac4:	f7fe fdc4 	bl	8002650 <get_gps_num>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b45      	ldr	r3, [pc, #276]	; (8003be0 <main+0x168>)
 8003acc:	601a      	str	r2, [r3, #0]
    p_send_interval_values = get_send_interval_values();
 8003ace:	f004 ff1f 	bl	8008910 <get_send_interval_values>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <main+0x16c>)
 8003ad6:	601a      	str	r2, [r3, #0]

    ssd1306_bitmap(&startup_screen[0]);
 8003ad8:	4843      	ldr	r0, [pc, #268]	; (8003be8 <main+0x170>)
 8003ada:	f005 fc77 	bl	80093cc <ssd1306_bitmap>
    ssd1306_update();
 8003ade:	f005 fad7 	bl	8009090 <ssd1306_update>
    delay_cyc(5000000);
 8003ae2:	4842      	ldr	r0, [pc, #264]	; (8003bec <main+0x174>)
 8003ae4:	f004 fca0 	bl	8008428 <delay_cyc>
    draw_current_menu();
 8003ae8:	f000 fbfe 	bl	80042e8 <draw_current_menu>

    __enable_irq();
 8003aec:	f7ff ffbc 	bl	8003a68 <__enable_irq>
    make_a_beep();
 8003af0:	f005 fcd8 	bl	80094a4 <make_a_beep>
    
    while (1)
    {
    	//Scan Keys
        change_menu(scan_buttons());
 8003af4:	f7fd fd12 	bl	800151c <scan_buttons>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fa0a 	bl	8003f14 <change_menu>
        
        
        //Parse GPS after PPS interrupt or UART DMA overflow
        if (main_flags.gps_ready == 1)
 8003b00:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <main+0x178>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d123      	bne.n	8003b50 <main+0xd8>
        {
            main_flags.gps_ready = 0;
 8003b08:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <main+0x178>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
            

            if (parse_gps() == 1)
 8003b0e:	f7fe f925 	bl	8001d5c <parse_gps>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d115      	bne.n	8003b44 <main+0xcc>
            {
                if (main_flags.gps_sync == 1)
 8003b18:	4b35      	ldr	r3, [pc, #212]	; (8003bf0 <main+0x178>)
 8003b1a:	785b      	ldrb	r3, [r3, #1]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10e      	bne.n	8003b3e <main+0xc6>
                {
                    if (get_gps_status() == GPS_DATA_VALID)
 8003b20:	f7fe fd76 	bl	8002610 <get_gps_status>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d107      	bne.n	8003b3a <main+0xc2>
                    {
                        gps_air_update_my_data(uptime);
 8003b2a:	4b32      	ldr	r3, [pc, #200]	; (8003bf4 <main+0x17c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff f81c 	bl	8002b6c <gps_air_update_my_data>
                        fill_air_packet_with_struct_data();    	//fill air data with coordinates of this device (this occur before first time slot interrupt)
 8003b34:	f7ff f8b2 	bl	8002c9c <fill_air_packet_with_struct_data>
 8003b38:	e001      	b.n	8003b3e <main+0xc6>
                    }
                    else                            			//if PPS exist but data is invalid (rare situation)
                    {
                        timer1_stop_reload();       			//stop time slot timer due to nothing to transmitt
 8003b3a:	f005 fd43 	bl	80095c4 <timer1_stop_reload>
                    }
                }
                
                draw_current_menu();
 8003b3e:	f000 fbd3 	bl	80042e8 <draw_current_menu>
 8003b42:	e005      	b.n	8003b50 <main+0xd8>
            }
            else if (main_flags.gps_sync == 1)
 8003b44:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <main+0x178>)
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <main+0xd8>
            {
            	timer1_stop_reload();       					//stop time slot timer due to nothing to transmitt
 8003b4c:	f005 fd3a 	bl	80095c4 <timer1_stop_reload>
            }
        }
        
        
        //Extract received packet
        if (main_flags.rx_ready == 1)
 8003b50:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <main+0x178>)
 8003b52:	789b      	ldrb	r3, [r3, #2]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10c      	bne.n	8003b72 <main+0xfa>
        {
            main_flags.rx_ready = 0;
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <main+0x178>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	709a      	strb	r2, [r3, #2]
            
            if (si4463_get_rx_packet())
 8003b5e:	f005 f8e7 	bl	8008d30 <si4463_get_rx_packet>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <main+0xfa>
            {
            	fill_struct_with_air_packet_data(uptime);   	//parse air data from another device (which has ended TX in the current time_slot)
 8003b68:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <main+0x17c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff f99f 	bl	8002eb0 <fill_struct_with_air_packet_data>
            }
        }
        
        
        //Checks after receiving packets from all devices; performing beep
        if (main_flags.time_slots_end == 1)
 8003b72:	4b1f      	ldr	r3, [pc, #124]	; (8003bf0 <main+0x178>)
 8003b74:	78db      	ldrb	r3, [r3, #3]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d121      	bne.n	8003bbe <main+0x146>
        {
        	main_flags.time_slots_end = 0;
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <main+0x178>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	70da      	strb	r2, [r3, #3]

        	process_all_devices();								//calculate relative position for each active device
 8003b80:	f7fe ffd4 	bl	8002b2c <process_all_devices>

        	uint8_t any_alarm_status = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	71fb      	strb	r3, [r7, #7]
        	any_alarm_status += check_alarms();
 8003b88:	f7fe fedc 	bl	8002944 <check_alarms>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	461a      	mov	r2, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	4413      	add	r3, r2
 8003b94:	71fb      	strb	r3, [r7, #7]
        	any_alarm_status += check_timeout();				//check timeout flags and get the result only after the end of the TRX sequence
 8003b96:	f7fe ff2d 	bl	80029f4 <check_timeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
        	any_alarm_status += check_fence();
 8003ba4:	f7fe ff78 	bl	8002a98 <check_fence>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461a      	mov	r2, r3
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	4413      	add	r3, r2
 8003bb0:	71fb      	strb	r3, [r7, #7]

        	if (any_alarm_status > 0)
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d09d      	beq.n	8003af4 <main+0x7c>
        	{
        		make_a_beep();
 8003bb8:	f005 fc74 	bl	80094a4 <make_a_beep>
 8003bbc:	e79a      	b.n	8003af4 <main+0x7c>
        	}

        }
        else if ((main_flags.battery_low == 1) && (main_flags.gps_sync == 0))	//else check battery low flag
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <main+0x178>)
 8003bc0:	791b      	ldrb	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d196      	bne.n	8003af4 <main+0x7c>
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <main+0x178>)
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d192      	bne.n	8003af4 <main+0x7c>
        {
        	make_a_beep();
 8003bce:	f005 fc69 	bl	80094a4 <make_a_beep>
        	main_flags.battery_low = 0;
 8003bd2:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <main+0x178>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	711a      	strb	r2, [r3, #4]
        change_menu(scan_buttons());
 8003bd8:	e78c      	b.n	8003af4 <main+0x7c>
 8003bda:	bf00      	nop
 8003bdc:	2000061c 	.word	0x2000061c
 8003be0:	20000614 	.word	0x20000614
 8003be4:	200007cc 	.word	0x200007cc
 8003be8:	0800d544 	.word	0x0800d544
 8003bec:	004c4b40 	.word	0x004c4b40
 8003bf0:	20000118 	.word	0x20000118
 8003bf4:	2000010c 	.word	0x2000010c

08003bf8 <DMA1_Channel5_IRQHandler>:



//DMA UART RX overflow
void DMA1_Channel5_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
    DMA1->IFCR = DMA_IFCR_CGIF5;               	//clear all interrupt flags for DMA channel 5
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <DMA1_Channel5_IRQHandler+0x34>)
 8003bfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c02:	605a      	str	r2, [r3, #4]
    
    uart_dma_stop();
 8003c04:	f005 fe18 	bl	8009838 <uart_dma_stop>
    backup_and_clear_uart_buffer();
 8003c08:	f005 fe36 	bl	8009878 <backup_and_clear_uart_buffer>
    uart_dma_restart();
 8003c0c:	f005 fe22 	bl	8009854 <uart_dma_restart>
    
    main_flags.gps_ready = 1;
 8003c10:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <DMA1_Channel5_IRQHandler+0x38>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
    main_flags.gps_sync = 0;   					//no pps signal
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <DMA1_Channel5_IRQHandler+0x38>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	705a      	strb	r2, [r3, #1]
    pps_counter = 0;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <DMA1_Channel5_IRQHandler+0x3c>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
    led_green_off();
 8003c22:	f7fd ffe7 	bl	8001bf4 <led_green_off>
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40020000 	.word	0x40020000
 8003c30:	20000118 	.word	0x20000118
 8003c34:	20000110 	.word	0x20000110

08003c38 <EXTI15_10_IRQHandler>:



//GPS PPS interrupt
void EXTI15_10_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
	EXTI->PR = EXTI_PR_PR11;        			//clear interrupt
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <EXTI15_10_IRQHandler+0x9c>)
 8003c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c42:	615a      	str	r2, [r3, #20]
	timer1_start();                 			//the first thing to do is start time slot timer right after PPS
 8003c44:	f005 fcae 	bl	80095a4 <timer1_start>

	uart_dma_stop();							//fix the data
 8003c48:	f005 fdf6 	bl	8009838 <uart_dma_stop>
	backup_and_clear_uart_buffer();
 8003c4c:	f005 fe14 	bl	8009878 <backup_and_clear_uart_buffer>
	uart_dma_restart();
 8003c50:	f005 fe00 	bl	8009854 <uart_dma_restart>

	pps_counter++;
 8003c54:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <EXTI15_10_IRQHandler+0xa0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	4a1f      	ldr	r2, [pc, #124]	; (8003cd8 <EXTI15_10_IRQHandler+0xa0>)
 8003c5c:	6013      	str	r3, [r2, #0]
	switch (pps_counter)
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <EXTI15_10_IRQHandler+0xa0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d002      	beq.n	8003c6c <EXTI15_10_IRQHandler+0x34>
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d009      	beq.n	8003c7e <EXTI15_10_IRQHandler+0x46>
 8003c6a:	e011      	b.n	8003c90 <EXTI15_10_IRQHandler+0x58>
	{
		case 1:									//skip first PPS, ignore previous nmea data
			timer1_stop_reload();
 8003c6c:	f005 fcaa 	bl	80095c4 <timer1_stop_reload>
			main_flags.gps_ready = 0;
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <EXTI15_10_IRQHandler+0xa4>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
			main_flags.gps_sync = 0;
 8003c76:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <EXTI15_10_IRQHandler+0xa4>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	705a      	strb	r2, [r3, #1]
			break;
 8003c7c:	e027      	b.n	8003cce <EXTI15_10_IRQHandler+0x96>

		case 2:									//skip second PPS, but fix the nmea data acquired after first PPS
			timer1_stop_reload();
 8003c7e:	f005 fca1 	bl	80095c4 <timer1_stop_reload>
			main_flags.gps_ready = 1;
 8003c82:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <EXTI15_10_IRQHandler+0xa4>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
			main_flags.gps_sync = 0;
 8003c88:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <EXTI15_10_IRQHandler+0xa4>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	705a      	strb	r2, [r3, #1]
			break;
 8003c8e:	e01e      	b.n	8003cce <EXTI15_10_IRQHandler+0x96>

		default:								//at the moment, the nmea data, captured after first PPS, is parsed
			main_flags.gps_ready = 1;
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <EXTI15_10_IRQHandler+0xa4>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]
			main_flags.gps_sync = 1;
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <EXTI15_10_IRQHandler+0xa4>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	705a      	strb	r2, [r3, #1]

			if ((p_gps_num->second % p_send_interval_values[p_settings->send_interval_opt]) == 0) //calc division remainder
 8003c9c:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <EXTI15_10_IRQHandler+0xa8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	789b      	ldrb	r3, [r3, #2]
 8003ca2:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <EXTI15_10_IRQHandler+0xac>)
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	4910      	ldr	r1, [pc, #64]	; (8003ce8 <EXTI15_10_IRQHandler+0xb0>)
 8003ca8:	6809      	ldr	r1, [r1, #0]
 8003caa:	7949      	ldrb	r1, [r1, #5]
 8003cac:	440a      	add	r2, r1
 8003cae:	7812      	ldrb	r2, [r2, #0]
 8003cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cb4:	fb02 f201 	mul.w	r2, r2, r1
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <EXTI15_10_IRQHandler+0x90>
			{
				main_flags.act_status = 1; 		//we are ready to show we are in act
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <EXTI15_10_IRQHandler+0xa4>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	715a      	strb	r2, [r3, #5]
			else
			{
				timer1_stop_reload();
			}

			break;
 8003cc6:	e001      	b.n	8003ccc <EXTI15_10_IRQHandler+0x94>
				timer1_stop_reload();
 8003cc8:	f005 fc7c 	bl	80095c4 <timer1_stop_reload>
			break;
 8003ccc:	bf00      	nop
	}
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40010400 	.word	0x40010400
 8003cd8:	20000110 	.word	0x20000110
 8003cdc:	20000118 	.word	0x20000118
 8003ce0:	20000614 	.word	0x20000614
 8003ce4:	200007cc 	.word	0x200007cc
 8003ce8:	2000061c 	.word	0x2000061c

08003cec <EXTI9_5_IRQHandler>:



//SI4463 RX interrupt (RX valid or CRC error)
void EXTI9_5_IRQHandler(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
    EXTI->PR = EXTI_PR_PR6;         //clear interrupt
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <EXTI9_5_IRQHandler+0x18>)
 8003cf2:	2240      	movs	r2, #64	; 0x40
 8003cf4:	615a      	str	r2, [r3, #20]
    
    main_flags.rx_ready = 1;
 8003cf6:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <EXTI9_5_IRQHandler+0x1c>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	709a      	strb	r2, [r3, #2]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr
 8003d04:	40010400 	.word	0x40010400
 8003d08:	20000118 	.word	0x20000118

08003d0c <TIM1_UP_IRQHandler>:
		+--------------------------------------------------------+											PPS Interrupt, Start Timer1
*/

//Time slot interrupt
void TIM1_UP_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
    TIM1->SR &= ~TIM_SR_UIF;                    		//clear interrupt
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <TIM1_UP_IRQHandler+0x74>)
 8003d12:	8a1b      	ldrh	r3, [r3, #16]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <TIM1_UP_IRQHandler+0x74>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	8213      	strh	r3, [r2, #16]
    
    overflow_counter++;             					//increment ovf counter (starts from 1)
 8003d20:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <TIM1_UP_IRQHandler+0x78>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <TIM1_UP_IRQHandler+0x78>)
 8003d2a:	701a      	strb	r2, [r3, #0]
    
    if(overflow_counter == (DEVICES_IN_GROUP + 1))    	//if interrupt at the end of the last time slot
 8003d2c:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <TIM1_UP_IRQHandler+0x78>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b07      	cmp	r3, #7
 8003d32:	d10a      	bne.n	8003d4a <TIM1_UP_IRQHandler+0x3e>
    {
        timer1_stop_reload();
 8003d34:	f005 fc46 	bl	80095c4 <timer1_stop_reload>
        overflow_counter = 0;
 8003d38:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <TIM1_UP_IRQHandler+0x78>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
        main_flags.time_slots_end = 1;
 8003d3e:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <TIM1_UP_IRQHandler+0x7c>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	70da      	strb	r2, [r3, #3]
        led_green_off();
 8003d44:	f7fd ff56 	bl	8001bf4 <led_green_off>
 8003d48:	e00f      	b.n	8003d6a <TIM1_UP_IRQHandler+0x5e>
    }
    else
    {
    	time_slot = overflow_counter;
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <TIM1_UP_IRQHandler+0x78>)
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <TIM1_UP_IRQHandler+0x80>)
 8003d50:	701a      	strb	r2, [r3, #0]

		if (time_slot == p_settings->device_number)
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <TIM1_UP_IRQHandler+0x84>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <TIM1_UP_IRQHandler+0x80>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d102      	bne.n	8003d66 <TIM1_UP_IRQHandler+0x5a>
		{
			si4463_tx_packet();
 8003d60:	f004 ff76 	bl	8008c50 <si4463_tx_packet>
 8003d64:	e001      	b.n	8003d6a <TIM1_UP_IRQHandler+0x5e>
		}
		else
		{
			si4463_start_rx();
 8003d66:	f004 ffbb 	bl	8008ce0 <si4463_start_rx>
		}
    }

    if (main_flags.act_status == 1)
 8003d6a:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <TIM1_UP_IRQHandler+0x7c>)
 8003d6c:	795b      	ldrb	r3, [r3, #5]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d104      	bne.n	8003d7c <TIM1_UP_IRQHandler+0x70>
    {
    	main_flags.act_status = 0;
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <TIM1_UP_IRQHandler+0x7c>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	715a      	strb	r2, [r3, #5]
    	led_green_on();						//make ACT led on only here, after we are shure that gps data is valid (otherwise we would never reach this interrupt)
 8003d78:	f7fd ff30 	bl	8001bdc <led_green_on>
    }
}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	20000114 	.word	0x20000114
 8003d88:	20000118 	.word	0x20000118
 8003d8c:	20000115 	.word	0x20000115
 8003d90:	2000061c 	.word	0x2000061c

08003d94 <SysTick_Handler>:



//Uptime counter (every 1 second)
void SysTick_Handler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
    uptime++;
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <SysTick_Handler+0x2c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a08      	ldr	r2, [pc, #32]	; (8003dc0 <SysTick_Handler+0x2c>)
 8003da0:	6013      	str	r3, [r2, #0]

    main_flags.battery_low = adc_get_bat_voltage();
 8003da2:	f7fd fb09 	bl	80013b8 <adc_get_bat_voltage>
 8003da6:	4603      	mov	r3, r0
 8003da8:	461a      	mov	r2, r3
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <SysTick_Handler+0x30>)
 8003dac:	711a      	strb	r2, [r3, #4]
    
    calc_timeout(uptime);			//always calculate timeout for each device, even if this function is disabled
 8003dae:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <SysTick_Handler+0x2c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fdec 	bl	8002990 <calc_timeout>
    check_timeout(); 				//also check timeout in order to set/reset timeout flags
 8003db8:	f7fe fe1c 	bl	80029f4 <check_timeout>
}
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	2000010c 	.word	0x2000010c
 8003dc4:	20000118 	.word	0x20000118

08003dc8 <TIM2_IRQHandler>:



//End of "beep"
void TIM2_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
	timer2_stop();
 8003dcc:	f005 fc34 	bl	8009638 <timer2_stop>
	TIM2->SR &= ~TIM_SR_UIF;        //clear gating timer int
 8003dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dd4:	8a1b      	ldrh	r3, [r3, #16]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	8213      	strh	r3, [r2, #16]

	timer3_stop();
 8003de4:	f005 fc82 	bl	80096ec <timer3_stop>
	led_board_off();
 8003de8:	f7fd ff1c 	bl	8001c24 <led_board_off>
}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <get_uptime>:



uint32_t get_uptime(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
	return uptime;
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <get_uptime+0x10>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	2000010c 	.word	0x2000010c

08003e04 <get_main_flags>:



struct main_flags_struct *get_main_flags(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
	return &main_flags;
 8003e08:	4b02      	ldr	r3, [pc, #8]	; (8003e14 <get_main_flags+0x10>)
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000118 	.word	0x20000118

08003e18 <__DSB>:
static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <NVIC_SystemReset>:
 * @brief  Initiate a system reset request.
 *
 * Initiate a system reset request to reset the MCU
 */
static __INLINE void NVIC_SystemReset(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | 
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <NVIC_SystemReset+0x1c>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
 8003e34:	4903      	ldr	r1, [pc, #12]	; (8003e44 <NVIC_SystemReset+0x1c>)
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | 
 8003e36:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <NVIC_SystemReset+0x20>)
 8003e38:	4313      	orrs	r3, r2
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
 8003e3a:	60cb      	str	r3, [r1, #12]
                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
  __DSB();                                                     /* Ensure completion of memory access */              
 8003e3c:	f7ff ffec 	bl	8003e18 <__DSB>
  while(1);                                                    /* wait until reset */
 8003e40:	e7fe      	b.n	8003e40 <NVIC_SystemReset+0x18>
 8003e42:	bf00      	nop
 8003e44:	e000ed00 	.word	0xe000ed00
 8003e48:	05fa0004 	.word	0x05fa0004

08003e4c <init_menu>:



//Init and show MAIN menu
void init_menu(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
	p_gps_raw = get_gps_raw();
 8003e50:	f7fe fbf4 	bl	800263c <get_gps_raw>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <init_menu+0x94>)
 8003e58:	601a      	str	r2, [r3, #0]
	p_gps_num = get_gps_num();
 8003e5a:	f7fe fbf9 	bl	8002650 <get_gps_num>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <init_menu+0x98>)
 8003e62:	601a      	str	r2, [r3, #0]
	pp_gps_air = get_gps_air();
 8003e64:	f7ff fb24 	bl	80034b0 <get_gps_air>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <init_menu+0x9c>)
 8003e6c:	601a      	str	r2, [r3, #0]
	pp_gps_rel = get_gps_rel();
 8003e6e:	f7ff fb41 	bl	80034f4 <get_gps_rel>
 8003e72:	4602      	mov	r2, r0
 8003e74:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <init_menu+0xa0>)
 8003e76:	601a      	str	r2, [r3, #0]
	pp_dev_aux = get_dev_aux();
 8003e78:	f7ff fb5a 	bl	8003530 <get_dev_aux>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <init_menu+0xa4>)
 8003e80:	601a      	str	r2, [r3, #0]

	pp_memory_slot = get_memory_slot();
 8003e82:	f003 fecd 	bl	8007c20 <get_memory_slot>
 8003e86:	4602      	mov	r2, r0
 8003e88:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <init_menu+0xa8>)
 8003e8a:	601a      	str	r2, [r3, #0]

	p_settings = get_settings();
 8003e8c:	f004 fd54 	bl	8008938 <get_settings>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <init_menu+0xac>)
 8003e94:	601a      	str	r2, [r3, #0]
	settings_copy = *p_settings;
 8003e96:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <init_menu+0xac>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b18      	ldr	r3, [pc, #96]	; (8003efc <init_menu+0xb0>)
 8003e9c:	6810      	ldr	r0, [r2, #0]
 8003e9e:	6851      	ldr	r1, [r2, #4]
 8003ea0:	6018      	str	r0, [r3, #0]
 8003ea2:	6059      	str	r1, [r3, #4]
 8003ea4:	8912      	ldrh	r2, [r2, #8]
 8003ea6:	811a      	strh	r2, [r3, #8]

	device_number = p_settings->device_number;
 8003ea8:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <init_menu+0xac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <init_menu+0xb4>)
 8003eb0:	701a      	strb	r2, [r3, #0]

	p_send_interval_values = get_send_interval_values();
 8003eb2:	f004 fd2d 	bl	8008910 <get_send_interval_values>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <init_menu+0xb8>)
 8003eba:	601a      	str	r2, [r3, #0]
	p_get_tx_power_values = get_tx_power_values();
 8003ebc:	f004 fd32 	bl	8008924 <get_tx_power_values>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <init_menu+0xbc>)
 8003ec4:	601a      	str	r2, [r3, #0]

    //init variables
    current_each_device = device_number;   //set me current
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <init_menu+0xb4>)
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <init_menu+0xc0>)
 8003ecc:	701a      	strb	r2, [r3, #0]
    current_menu = M_MAIN;
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <init_menu+0xc4>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
    set_current_item(M_MAIN_I_DEVICES);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f000 f9a5 	bl	8004224 <set_current_item>
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000808 	.word	0x20000808
 8003ee4:	20000614 	.word	0x20000614
 8003ee8:	20000804 	.word	0x20000804
 8003eec:	200007d0 	.word	0x200007d0
 8003ef0:	2000083c 	.word	0x2000083c
 8003ef4:	200007d4 	.word	0x200007d4
 8003ef8:	2000061c 	.word	0x2000061c
 8003efc:	200007e0 	.word	0x200007e0
 8003f00:	20000738 	.word	0x20000738
 8003f04:	200007cc 	.word	0x200007cc
 8003f08:	2000080c 	.word	0x2000080c
 8003f0c:	20000032 	.word	0x20000032
 8003f10:	200007fa 	.word	0x200007fa

08003f14 <change_menu>:



//Check for buttons and change menu if needed
void change_menu(uint8_t button_code)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
    if (button_code)
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d051      	beq.n	8003fc8 <change_menu+0xb4>
    {

        //search for exclusive operation for this case
        for (uint8_t i = 0; menu_exclusive_table[i].current_menu; i++)     //until end marker
 8003f24:	2300      	movs	r3, #0
 8003f26:	73fb      	strb	r3, [r7, #15]
 8003f28:	e019      	b.n	8003f5e <change_menu+0x4a>
        {
            if (current_menu == menu_exclusive_table[i].current_menu &&
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	4a28      	ldr	r2, [pc, #160]	; (8003fd0 <change_menu+0xbc>)
 8003f2e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8003f32:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <change_menu+0xc0>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d10e      	bne.n	8003f58 <change_menu+0x44>
                button_code == menu_exclusive_table[i].button_pressed)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	4a24      	ldr	r2, [pc, #144]	; (8003fd0 <change_menu+0xbc>)
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4413      	add	r3, r2
 8003f42:	785b      	ldrb	r3, [r3, #1]
            if (current_menu == menu_exclusive_table[i].current_menu &&
 8003f44:	79fa      	ldrb	r2, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d106      	bne.n	8003f58 <change_menu+0x44>
            {
                menu_exclusive_table[i].execute_function();
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <change_menu+0xbc>)
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4798      	blx	r3
                return;         //exit
 8003f56:	e037      	b.n	8003fc8 <change_menu+0xb4>
        for (uint8_t i = 0; menu_exclusive_table[i].current_menu; i++)     //until end marker
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <change_menu+0xbc>)
 8003f62:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1df      	bne.n	8003f2a <change_menu+0x16>
            }
        }
        
        //well, there is no exclusive operations for that case, perform default action
        switch (button_code)
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	2b09      	cmp	r3, #9
 8003f70:	d82a      	bhi.n	8003fc8 <change_menu+0xb4>
 8003f72:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <change_menu+0x64>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003fa1 	.word	0x08003fa1
 8003f7c:	08003fc9 	.word	0x08003fc9
 8003f80:	08003fa7 	.word	0x08003fa7
 8003f84:	08003fc9 	.word	0x08003fc9
 8003f88:	08003fad 	.word	0x08003fad
 8003f8c:	08003fc9 	.word	0x08003fc9
 8003f90:	08003fc9 	.word	0x08003fc9
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fb3 	.word	0x08003fb3
 8003f9c:	08003fbf 	.word	0x08003fbf
        {
            case BTN_UP:
                scroll_up();
 8003fa0:	f000 f836 	bl	8004010 <scroll_up>
                break;
 8003fa4:	e010      	b.n	8003fc8 <change_menu+0xb4>
            
            case BTN_DOWN:
                scroll_down();
 8003fa6:	f000 f852 	bl	800404e <scroll_down>
                break;
 8003faa:	e00d      	b.n	8003fc8 <change_menu+0xb4>
            
            case BTN_OK:
                switch_forward();
 8003fac:	f000 f86e 	bl	800408c <switch_forward>
                break;
 8003fb0:	e00a      	b.n	8003fc8 <change_menu+0xb4>
            
            case BTN_ESC:
                switch_backward();
 8003fb2:	f000 f8ab 	bl	800410c <switch_backward>
                break;
 8003fb6:	e007      	b.n	8003fc8 <change_menu+0xb4>
            
            case BTN_PWR_LONG:
                toggle_alarm();
 8003fb8:	f000 f80e 	bl	8003fd8 <toggle_alarm>
                break;
 8003fbc:	e004      	b.n	8003fc8 <change_menu+0xb4>

            case BTN_ESC_LONG:
            	toggle_mute();
 8003fbe:	f005 fa81 	bl	80094c4 <toggle_mute>
            	draw_current_menu();
 8003fc2:	f000 f991 	bl	80042e8 <draw_current_menu>
            	break;
 8003fc6:	bf00      	nop
        }
        
    }
}
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	0800cf48 	.word	0x0800cf48
 8003fd4:	200007fa 	.word	0x200007fa

08003fd8 <toggle_alarm>:



//Switch alarm status
void toggle_alarm(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
    if (get_device_flags(device_number, FLAGS_ALARM) == FLAG_ALARM_OFF)
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <toggle_alarm+0x34>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2104      	movs	r1, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fc6a 	bl	80028bc <get_device_flags>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d104      	bne.n	8003ff8 <toggle_alarm+0x20>
    {
        set_device_flags(FLAGS_ALARM, FLAG_ALARM_ON);
 8003fee:	2101      	movs	r1, #1
 8003ff0:	2004      	movs	r0, #4
 8003ff2:	f7fe fbe5 	bl	80027c0 <set_device_flags>
 8003ff6:	e003      	b.n	8004000 <toggle_alarm+0x28>
    }
    else
    {
        set_device_flags(FLAGS_ALARM, FLAG_ALARM_OFF);
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	2004      	movs	r0, #4
 8003ffc:	f7fe fbe0 	bl	80027c0 <set_device_flags>
    }
    
    check_alarms();	//immediately update alarm indication
 8004000:	f7fe fca0 	bl	8002944 <check_alarms>
    draw_current_menu();
 8004004:	f000 f970 	bl	80042e8 <draw_current_menu>
}
 8004008:	bf00      	nop
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20000738 	.word	0x20000738

08004010 <scroll_up>:



//Scroll current menu Up
void scroll_up(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
    uint8_t current = get_current_item();
 8004016:	f000 f8a5 	bl	8004164 <get_current_item>
 800401a:	4603      	mov	r3, r0
 800401c:	71fb      	strb	r3, [r7, #7]
    uint8_t last = get_last_item();
 800401e:	f000 f8d1 	bl	80041c4 <get_last_item>
 8004022:	4603      	mov	r3, r0
 8004024:	71bb      	strb	r3, [r7, #6]
    
    if (current == M_ALL_I_FIRST)
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d104      	bne.n	8004036 <scroll_up+0x26>
    {
        set_current_item(last);
 800402c:	79bb      	ldrb	r3, [r7, #6]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f8f8 	bl	8004224 <set_current_item>
 8004034:	e005      	b.n	8004042 <scroll_up+0x32>
    }
    else
    {
        set_current_item(current - 1);
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	3b01      	subs	r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f8f1 	bl	8004224 <set_current_item>
    }
    
    draw_current_menu();
 8004042:	f000 f951 	bl	80042e8 <draw_current_menu>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <scroll_down>:



//Scroll current menu Down
void scroll_down(void)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
    uint8_t current = get_current_item();
 8004054:	f000 f886 	bl	8004164 <get_current_item>
 8004058:	4603      	mov	r3, r0
 800405a:	71fb      	strb	r3, [r7, #7]
    uint8_t last = get_last_item();
 800405c:	f000 f8b2 	bl	80041c4 <get_last_item>
 8004060:	4603      	mov	r3, r0
 8004062:	71bb      	strb	r3, [r7, #6]
    
    if (current == last)
 8004064:	79fa      	ldrb	r2, [r7, #7]
 8004066:	79bb      	ldrb	r3, [r7, #6]
 8004068:	429a      	cmp	r2, r3
 800406a:	d103      	bne.n	8004074 <scroll_down+0x26>
    {
        set_current_item(M_ALL_I_FIRST);
 800406c:	2000      	movs	r0, #0
 800406e:	f000 f8d9 	bl	8004224 <set_current_item>
 8004072:	e005      	b.n	8004080 <scroll_down+0x32>
    }
    else
    {
        set_current_item(current + 1);
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	3301      	adds	r3, #1
 8004078:	b2db      	uxtb	r3, r3
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f8d2 	bl	8004224 <set_current_item>
    }
    
    draw_current_menu();
 8004080:	f000 f932 	bl	80042e8 <draw_current_menu>
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <switch_forward>:



//Switch menu forward by default
void switch_forward(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; menu_forward_table[i].current_menu; i++)
 8004092:	2300      	movs	r3, #0
 8004094:	71fb      	strb	r3, [r7, #7]
 8004096:	e026      	b.n	80040e6 <switch_forward+0x5a>
    {
        if (current_menu == menu_forward_table[i].current_menu &&
 8004098:	79fa      	ldrb	r2, [r7, #7]
 800409a:	491a      	ldr	r1, [pc, #104]	; (8004104 <switch_forward+0x78>)
 800409c:	4613      	mov	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4413      	add	r3, r2
 80040a2:	440b      	add	r3, r1
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	4b18      	ldr	r3, [pc, #96]	; (8004108 <switch_forward+0x7c>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d118      	bne.n	80040e0 <switch_forward+0x54>
            get_current_item() == menu_forward_table[i].current_item)
 80040ae:	f000 f859 	bl	8004164 <get_current_item>
 80040b2:	4603      	mov	r3, r0
 80040b4:	4618      	mov	r0, r3
 80040b6:	79fa      	ldrb	r2, [r7, #7]
 80040b8:	4912      	ldr	r1, [pc, #72]	; (8004104 <switch_forward+0x78>)
 80040ba:	4613      	mov	r3, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	4413      	add	r3, r2
 80040c0:	440b      	add	r3, r1
 80040c2:	3301      	adds	r3, #1
 80040c4:	781b      	ldrb	r3, [r3, #0]
        if (current_menu == menu_forward_table[i].current_menu &&
 80040c6:	4298      	cmp	r0, r3
 80040c8:	d10a      	bne.n	80040e0 <switch_forward+0x54>
        {
            current_menu = menu_forward_table[i].next_menu;
 80040ca:	79fa      	ldrb	r2, [r7, #7]
 80040cc:	490d      	ldr	r1, [pc, #52]	; (8004104 <switch_forward+0x78>)
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	440b      	add	r3, r1
 80040d6:	3302      	adds	r3, #2
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <switch_forward+0x7c>)
 80040dc:	701a      	strb	r2, [r3, #0]
            break;
 80040de:	e00b      	b.n	80040f8 <switch_forward+0x6c>
    for (uint8_t i = 0; menu_forward_table[i].current_menu; i++)
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	3301      	adds	r3, #1
 80040e4:	71fb      	strb	r3, [r7, #7]
 80040e6:	79fa      	ldrb	r2, [r7, #7]
 80040e8:	4906      	ldr	r1, [pc, #24]	; (8004104 <switch_forward+0x78>)
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	440b      	add	r3, r1
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1cf      	bne.n	8004098 <switch_forward+0xc>
        }
    }
    draw_current_menu();
 80040f8:	f000 f8f6 	bl	80042e8 <draw_current_menu>
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	0800d130 	.word	0x0800d130
 8004108:	200007fa 	.word	0x200007fa

0800410c <switch_backward>:



//Switch menu backward by default
void switch_backward(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; menu_backward_table[i].current_menu; i++)
 8004112:	2300      	movs	r3, #0
 8004114:	71fb      	strb	r3, [r7, #7]
 8004116:	e015      	b.n	8004144 <switch_backward+0x38>
    {
        if (current_menu == menu_backward_table[i].current_menu)
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	4a10      	ldr	r2, [pc, #64]	; (800415c <switch_backward+0x50>)
 800411c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <switch_backward+0x54>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d10a      	bne.n	800413e <switch_backward+0x32>
        {
            set_current_item(M_ALL_I_FIRST);        //reset current item before exit
 8004128:	2000      	movs	r0, #0
 800412a:	f000 f87b 	bl	8004224 <set_current_item>
            current_menu = menu_backward_table[i].next_menu;
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	4a0a      	ldr	r2, [pc, #40]	; (800415c <switch_backward+0x50>)
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4413      	add	r3, r2
 8004136:	785a      	ldrb	r2, [r3, #1]
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <switch_backward+0x54>)
 800413a:	701a      	strb	r2, [r3, #0]
            break;
 800413c:	e008      	b.n	8004150 <switch_backward+0x44>
    for (uint8_t i = 0; menu_backward_table[i].current_menu; i++)
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	3301      	adds	r3, #1
 8004142:	71fb      	strb	r3, [r7, #7]
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	4a05      	ldr	r2, [pc, #20]	; (800415c <switch_backward+0x50>)
 8004148:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e3      	bne.n	8004118 <switch_backward+0xc>
        }
    }
    draw_current_menu();
 8004150:	f000 f8ca 	bl	80042e8 <draw_current_menu>
}
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	0800d16c 	.word	0x0800d16c
 8004160:	200007fa 	.word	0x200007fa

08004164 <get_current_item>:



//Get currently selected item in current menu
uint8_t get_current_item(void)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 800416a:	2300      	movs	r3, #0
 800416c:	71fb      	strb	r3, [r7, #7]
 800416e:	e016      	b.n	800419e <get_current_item+0x3a>
    {
        if (current_menu == item_table[i].curent_menu)
 8004170:	79fa      	ldrb	r2, [r7, #7]
 8004172:	4912      	ldr	r1, [pc, #72]	; (80041bc <get_current_item+0x58>)
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	440b      	add	r3, r1
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <get_current_item+0x5c>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d108      	bne.n	8004198 <get_current_item+0x34>
        {
            return item_table[i].cur_item;
 8004186:	79fa      	ldrb	r2, [r7, #7]
 8004188:	490c      	ldr	r1, [pc, #48]	; (80041bc <get_current_item+0x58>)
 800418a:	4613      	mov	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	440b      	add	r3, r1
 8004192:	3301      	adds	r3, #1
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	e00c      	b.n	80041b2 <get_current_item+0x4e>
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	3301      	adds	r3, #1
 800419c:	71fb      	strb	r3, [r7, #7]
 800419e:	79fa      	ldrb	r2, [r7, #7]
 80041a0:	4906      	ldr	r1, [pc, #24]	; (80041bc <get_current_item+0x58>)
 80041a2:	4613      	mov	r3, r2
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	4413      	add	r3, r2
 80041a8:	440b      	add	r3, r1
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1df      	bne.n	8004170 <get_current_item+0xc>
        }
    }
    return 0;       //automatically return 0 if item not found in item_table[]
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	20000020 	.word	0x20000020
 80041c0:	200007fa 	.word	0x200007fa

080041c4 <get_last_item>:



//Get last item in current menu
uint8_t get_last_item(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 80041ca:	2300      	movs	r3, #0
 80041cc:	71fb      	strb	r3, [r7, #7]
 80041ce:	e016      	b.n	80041fe <get_last_item+0x3a>
    {
        if (current_menu == item_table[i].curent_menu)
 80041d0:	79fa      	ldrb	r2, [r7, #7]
 80041d2:	4912      	ldr	r1, [pc, #72]	; (800421c <get_last_item+0x58>)
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	440b      	add	r3, r1
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	4b10      	ldr	r3, [pc, #64]	; (8004220 <get_last_item+0x5c>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d108      	bne.n	80041f8 <get_last_item+0x34>
        {
            return item_table[i].last_item;
 80041e6:	79fa      	ldrb	r2, [r7, #7]
 80041e8:	490c      	ldr	r1, [pc, #48]	; (800421c <get_last_item+0x58>)
 80041ea:	4613      	mov	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4413      	add	r3, r2
 80041f0:	440b      	add	r3, r1
 80041f2:	3302      	adds	r3, #2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	e00c      	b.n	8004212 <get_last_item+0x4e>
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	3301      	adds	r3, #1
 80041fc:	71fb      	strb	r3, [r7, #7]
 80041fe:	79fa      	ldrb	r2, [r7, #7]
 8004200:	4906      	ldr	r1, [pc, #24]	; (800421c <get_last_item+0x58>)
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	440b      	add	r3, r1
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1df      	bne.n	80041d0 <get_last_item+0xc>
        }
    }
    return 0;       //automatically return 0 if item not found in item_table[]
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	20000020 	.word	0x20000020
 8004220:	200007fa 	.word	0x200007fa

08004224 <set_current_item>:



//Set item to be current in current menu
void set_current_item(uint8_t new_value)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 800422e:	2300      	movs	r3, #0
 8004230:	73fb      	strb	r3, [r7, #15]
 8004232:	e017      	b.n	8004264 <set_current_item+0x40>
    {
        if (current_menu == item_table[i].curent_menu)
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	4912      	ldr	r1, [pc, #72]	; (8004280 <set_current_item+0x5c>)
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	440b      	add	r3, r1
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <set_current_item+0x60>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d109      	bne.n	800425e <set_current_item+0x3a>
        {
            item_table[i].cur_item = new_value;
 800424a:	7bfa      	ldrb	r2, [r7, #15]
 800424c:	490c      	ldr	r1, [pc, #48]	; (8004280 <set_current_item+0x5c>)
 800424e:	4613      	mov	r3, r2
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	4413      	add	r3, r2
 8004254:	440b      	add	r3, r1
 8004256:	3301      	adds	r3, #1
 8004258:	79fa      	ldrb	r2, [r7, #7]
 800425a:	701a      	strb	r2, [r3, #0]
            break;
 800425c:	e00b      	b.n	8004276 <set_current_item+0x52>
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	3301      	adds	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	4906      	ldr	r1, [pc, #24]	; (8004280 <set_current_item+0x5c>)
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	440b      	add	r3, r1
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1de      	bne.n	8004234 <set_current_item+0x10>
        }
    }
}
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	20000020 	.word	0x20000020
 8004284:	200007fa 	.word	0x200007fa

08004288 <reset_current_item_in_menu>:



//Reset item in any menu
void reset_current_item_in_menu(uint8_t menu)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	e016      	b.n	80042c6 <reset_current_item_in_menu+0x3e>
    {
        if (menu == item_table[i].curent_menu)
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	4912      	ldr	r1, [pc, #72]	; (80042e4 <reset_current_item_in_menu+0x5c>)
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	440b      	add	r3, r1
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	79fa      	ldrb	r2, [r7, #7]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d109      	bne.n	80042c0 <reset_current_item_in_menu+0x38>
        {
            item_table[i].cur_item = M_ALL_I_FIRST;
 80042ac:	7bfa      	ldrb	r2, [r7, #15]
 80042ae:	490d      	ldr	r1, [pc, #52]	; (80042e4 <reset_current_item_in_menu+0x5c>)
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	440b      	add	r3, r1
 80042b8:	3301      	adds	r3, #1
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
            break;
 80042be:	e00b      	b.n	80042d8 <reset_current_item_in_menu+0x50>
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	3301      	adds	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
 80042c6:	7bfa      	ldrb	r2, [r7, #15]
 80042c8:	4906      	ldr	r1, [pc, #24]	; (80042e4 <reset_current_item_in_menu+0x5c>)
 80042ca:	4613      	mov	r3, r2
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4413      	add	r3, r2
 80042d0:	440b      	add	r3, r1
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1df      	bne.n	8004298 <reset_current_item_in_menu+0x10>
        }
    }
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000020 	.word	0x20000020

080042e8 <draw_current_menu>:



//Draw current menu (after scroll)
void draw_current_menu(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; menu_draw_table[i].current; i++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	71fb      	strb	r3, [r7, #7]
 80042f2:	e011      	b.n	8004318 <draw_current_menu+0x30>
    {
        if (current_menu == menu_draw_table[i].current)
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	4a0d      	ldr	r2, [pc, #52]	; (800432c <draw_current_menu+0x44>)
 80042f8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <draw_current_menu+0x48>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d106      	bne.n	8004312 <draw_current_menu+0x2a>
        {
            menu_draw_table[i].action();
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <draw_current_menu+0x44>)
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4798      	blx	r3
            break;
 8004310:	e008      	b.n	8004324 <draw_current_menu+0x3c>
    for (uint8_t i = 0; menu_draw_table[i].current; i++)
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	3301      	adds	r3, #1
 8004316:	71fb      	strb	r3, [r7, #7]
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	4a04      	ldr	r2, [pc, #16]	; (800432c <draw_current_menu+0x44>)
 800431c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e7      	bne.n	80042f4 <draw_current_menu+0xc>
        }
    }
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	0800d188 	.word	0x0800d188
 8004330:	200007fa 	.word	0x200007fa

08004334 <draw_main>:



//MAIN
void draw_main(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
    #define MAIN_ROW               (2)
    #define MAIN_COL               (1)
    
    ssd1306_clear();
 8004338:	f004 feca 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, MAIN_COL, "MENU", 0);
 800433c:	2300      	movs	r3, #0
 800433e:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <draw_main+0x90>)
 8004340:	2101      	movs	r1, #1
 8004342:	2000      	movs	r0, #0
 8004344:	f004 ffcb 	bl	80092de <ssd1306_print>
    ssd1306_print(MAIN_ROW, MAIN_COL, "Devices", 0);
 8004348:	2300      	movs	r3, #0
 800434a:	4a1f      	ldr	r2, [pc, #124]	; (80043c8 <draw_main+0x94>)
 800434c:	2101      	movs	r1, #1
 800434e:	2002      	movs	r0, #2
 8004350:	f004 ffc5 	bl	80092de <ssd1306_print>
    ssd1306_print(MAIN_ROW + 1, MAIN_COL, "Radar", 0);
 8004354:	2300      	movs	r3, #0
 8004356:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <draw_main+0x98>)
 8004358:	2101      	movs	r1, #1
 800435a:	2003      	movs	r0, #3
 800435c:	f004 ffbf 	bl	80092de <ssd1306_print>
    ssd1306_print(MAIN_ROW + 2, MAIN_COL, "Points", 0);
 8004360:	2300      	movs	r3, #0
 8004362:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <draw_main+0x9c>)
 8004364:	2101      	movs	r1, #1
 8004366:	2004      	movs	r0, #4
 8004368:	f004 ffb9 	bl	80092de <ssd1306_print>
    ssd1306_print(MAIN_ROW + 3, MAIN_COL, "Settings", 0);
 800436c:	2300      	movs	r3, #0
 800436e:	4a19      	ldr	r2, [pc, #100]	; (80043d4 <draw_main+0xa0>)
 8004370:	2101      	movs	r1, #1
 8004372:	2005      	movs	r0, #5
 8004374:	f004 ffb3 	bl	80092de <ssd1306_print>
    ssd1306_print(MAIN_ROW + 4, MAIN_COL, "Info", 0);
 8004378:	2300      	movs	r3, #0
 800437a:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <draw_main+0xa4>)
 800437c:	2101      	movs	r1, #1
 800437e:	2006      	movs	r0, #6
 8004380:	f004 ffad 	bl	80092de <ssd1306_print>
    ssd1306_print(MAIN_ROW + get_current_item(), MAIN_COL - 1, ">", 0);
 8004384:	f7ff feee 	bl	8004164 <get_current_item>
 8004388:	4603      	mov	r3, r0
 800438a:	3302      	adds	r3, #2
 800438c:	b2d8      	uxtb	r0, r3
 800438e:	2300      	movs	r3, #0
 8004390:	4a12      	ldr	r2, [pc, #72]	; (80043dc <draw_main+0xa8>)
 8004392:	2100      	movs	r1, #0
 8004394:	f004 ffa3 	bl	80092de <ssd1306_print>

    ssd1306_char_pos(0, 20, SYMB_NOTE, 0);
 8004398:	2300      	movs	r3, #0
 800439a:	228f      	movs	r2, #143	; 0x8f
 800439c:	2114      	movs	r1, #20
 800439e:	2000      	movs	r0, #0
 80043a0:	f004 ff7e 	bl	80092a0 <ssd1306_char_pos>
    if (get_mute_flag() == 1)
 80043a4:	f005 f89e 	bl	80094e4 <get_mute_flag>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d105      	bne.n	80043ba <draw_main+0x86>
    {
    	ssd1306_char_pos(0, 19, '!', 0);
 80043ae:	2300      	movs	r3, #0
 80043b0:	2221      	movs	r2, #33	; 0x21
 80043b2:	2113      	movs	r1, #19
 80043b4:	2000      	movs	r0, #0
 80043b6:	f004 ff73 	bl	80092a0 <ssd1306_char_pos>
    }

    ssd1306_update();
 80043ba:	f004 fe69 	bl	8009090 <ssd1306_update>
}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	0800c9e0 	.word	0x0800c9e0
 80043c8:	0800c9e8 	.word	0x0800c9e8
 80043cc:	0800c9f0 	.word	0x0800c9f0
 80043d0:	0800c9f8 	.word	0x0800c9f8
 80043d4:	0800ca00 	.word	0x0800ca00
 80043d8:	0800ca0c 	.word	0x0800ca0c
 80043dc:	0800ca14 	.word	0x0800ca14

080043e0 <draw_devices>:



//DEVICES
void draw_devices(void)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
    ssd1306_clear();
 80043e6:	f004 fe73 	bl	80090d0 <ssd1306_clear>
    ssd1306_bitmap(&devices_blank[0]);
 80043ea:	48b8      	ldr	r0, [pc, #736]	; (80046cc <draw_devices+0x2ec>)
 80043ec:	f004 ffee 	bl	80093cc <ssd1306_bitmap>
    
    //TRX
    if (get_main_flags()->gps_sync)
 80043f0:	f7ff fd08 	bl	8003e04 <get_main_flags>
 80043f4:	4603      	mov	r3, r0
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <draw_devices+0x34>
    {
        ssd1306_char_pos(0, 18, SYMB_ARROW_UP, 0);
 80043fc:	2300      	movs	r3, #0
 80043fe:	2280      	movs	r2, #128	; 0x80
 8004400:	2112      	movs	r1, #18
 8004402:	2000      	movs	r0, #0
 8004404:	f004 ff4c 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_char_pos(0, 19, SYMB_ARROW_DOWN, 0);
 8004408:	2300      	movs	r3, #0
 800440a:	2281      	movs	r2, #129	; 0x81
 800440c:	2113      	movs	r1, #19
 800440e:	2000      	movs	r0, #0
 8004410:	f004 ff46 	bl	80092a0 <ssd1306_char_pos>
    }
    
    //Sattelites
    if (p_gps_raw->time[0] == 0)                           //if no time received then no sattelites at all
 8004414:	4bae      	ldr	r3, [pc, #696]	; (80046d0 <draw_devices+0x2f0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <draw_devices+0x4c>
    {
        ssd1306_char_pos(0, 20, SYMB_NO_SATT, 0);
 800441e:	2300      	movs	r3, #0
 8004420:	2282      	movs	r2, #130	; 0x82
 8004422:	2114      	movs	r1, #20
 8004424:	2000      	movs	r0, #0
 8004426:	f004 ff3b 	bl	80092a0 <ssd1306_char_pos>
 800442a:	e02b      	b.n	8004484 <draw_devices+0xa4>
    }
    else
    {
        if (p_gps_num->mode == GPS_POSITION_3DFIX && p_gps_num->status == GPS_DATA_VALID)
 800442c:	4ba9      	ldr	r3, [pc, #676]	; (80046d4 <draw_devices+0x2f4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004434:	2b03      	cmp	r3, #3
 8004436:	d10c      	bne.n	8004452 <draw_devices+0x72>
 8004438:	4ba6      	ldr	r3, [pc, #664]	; (80046d4 <draw_devices+0x2f4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <draw_devices+0x72>
        {
            ssd1306_char_pos(0, 20, SYMB_SATT_3D, 0);   //3D when data is valid
 8004444:	2300      	movs	r3, #0
 8004446:	2285      	movs	r2, #133	; 0x85
 8004448:	2114      	movs	r1, #20
 800444a:	2000      	movs	r0, #0
 800444c:	f004 ff28 	bl	80092a0 <ssd1306_char_pos>
 8004450:	e018      	b.n	8004484 <draw_devices+0xa4>
        }
        else if (p_gps_num->mode == GPS_POSITION_2DFIX && p_gps_num->status == GPS_DATA_VALID)
 8004452:	4ba0      	ldr	r3, [pc, #640]	; (80046d4 <draw_devices+0x2f4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800445a:	2b02      	cmp	r3, #2
 800445c:	d10c      	bne.n	8004478 <draw_devices+0x98>
 800445e:	4b9d      	ldr	r3, [pc, #628]	; (80046d4 <draw_devices+0x2f4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004466:	2b01      	cmp	r3, #1
 8004468:	d106      	bne.n	8004478 <draw_devices+0x98>
        {
            ssd1306_char_pos(0, 20, SYMB_SATT_2D, 0);   //2D when data is valid
 800446a:	2300      	movs	r3, #0
 800446c:	2284      	movs	r2, #132	; 0x84
 800446e:	2114      	movs	r1, #20
 8004470:	2000      	movs	r0, #0
 8004472:	f004 ff15 	bl	80092a0 <ssd1306_char_pos>
 8004476:	e005      	b.n	8004484 <draw_devices+0xa4>
        }
        else
        {
            ssd1306_char_pos(0, 20, SYMB_SATT_1D, 0);   //if not 2D or 3D then only time is avaliable
 8004478:	2300      	movs	r3, #0
 800447a:	2283      	movs	r2, #131	; 0x83
 800447c:	2114      	movs	r1, #20
 800447e:	2000      	movs	r0, #0
 8004480:	f004 ff0e 	bl	80092a0 <ssd1306_char_pos>
        }
    }
    
    uint8_t icon_col = LCD_LAST_COL;
 8004484:	2314      	movs	r3, #20
 8004486:	71fb      	strb	r3, [r7, #7]
    
    //Battery
    switch (get_device_flags(device_number, FLAGS_BATTERY))
 8004488:	4b93      	ldr	r3, [pc, #588]	; (80046d8 <draw_devices+0x2f8>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe fa14 	bl	80028bc <get_device_flags>
 8004494:	4603      	mov	r3, r0
 8004496:	2b04      	cmp	r3, #4
 8004498:	d839      	bhi.n	800450e <draw_devices+0x12e>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <draw_devices+0xc0>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044fd 	.word	0x080044fd
 80044a4:	080044eb 	.word	0x080044eb
 80044a8:	080044d9 	.word	0x080044d9
 80044ac:	080044c7 	.word	0x080044c7
 80044b0:	080044b5 	.word	0x080044b5
    {
        case FLAG_BATTERY_75_TO_100:
            ssd1306_char_pos(1, icon_col--, SYMB_BAT_4OF4, 0);
 80044b4:	79f9      	ldrb	r1, [r7, #7]
 80044b6:	1e4b      	subs	r3, r1, #1
 80044b8:	71fb      	strb	r3, [r7, #7]
 80044ba:	2300      	movs	r3, #0
 80044bc:	228c      	movs	r2, #140	; 0x8c
 80044be:	2001      	movs	r0, #1
 80044c0:	f004 feee 	bl	80092a0 <ssd1306_char_pos>
            break;
 80044c4:	e023      	b.n	800450e <draw_devices+0x12e>
        
        case FLAG_BATTERY_50_TO_75:
            ssd1306_char_pos(1, icon_col--, SYMB_BAT_3OF4, 0);
 80044c6:	79f9      	ldrb	r1, [r7, #7]
 80044c8:	1e4b      	subs	r3, r1, #1
 80044ca:	71fb      	strb	r3, [r7, #7]
 80044cc:	2300      	movs	r3, #0
 80044ce:	228b      	movs	r2, #139	; 0x8b
 80044d0:	2001      	movs	r0, #1
 80044d2:	f004 fee5 	bl	80092a0 <ssd1306_char_pos>
            break;
 80044d6:	e01a      	b.n	800450e <draw_devices+0x12e>
        
        case FLAG_BATTERY_25_TO_50:
            ssd1306_char_pos(1, icon_col--, SYMB_BAT_2OF4, 0);
 80044d8:	79f9      	ldrb	r1, [r7, #7]
 80044da:	1e4b      	subs	r3, r1, #1
 80044dc:	71fb      	strb	r3, [r7, #7]
 80044de:	2300      	movs	r3, #0
 80044e0:	228a      	movs	r2, #138	; 0x8a
 80044e2:	2001      	movs	r0, #1
 80044e4:	f004 fedc 	bl	80092a0 <ssd1306_char_pos>
            break;
 80044e8:	e011      	b.n	800450e <draw_devices+0x12e>
        
        case FLAG_BATTERY_10_TO_25:
            ssd1306_char_pos(1, icon_col--, SYMB_BAT_1OF4, 0);
 80044ea:	79f9      	ldrb	r1, [r7, #7]
 80044ec:	1e4b      	subs	r3, r1, #1
 80044ee:	71fb      	strb	r3, [r7, #7]
 80044f0:	2300      	movs	r3, #0
 80044f2:	2289      	movs	r2, #137	; 0x89
 80044f4:	2001      	movs	r0, #1
 80044f6:	f004 fed3 	bl	80092a0 <ssd1306_char_pos>
            break;
 80044fa:	e008      	b.n	800450e <draw_devices+0x12e>
        
        case FLAG_BATTERY_0_TO_10:
            ssd1306_char_pos(1, icon_col--, SYMB_BAT_0OF4, 0);
 80044fc:	79f9      	ldrb	r1, [r7, #7]
 80044fe:	1e4b      	subs	r3, r1, #1
 8004500:	71fb      	strb	r3, [r7, #7]
 8004502:	2300      	movs	r3, #0
 8004504:	2288      	movs	r2, #136	; 0x88
 8004506:	2001      	movs	r0, #1
 8004508:	f004 feca 	bl	80092a0 <ssd1306_char_pos>
            break;
 800450c:	bf00      	nop
    }
    
    

    //Timeout
    if (pp_dev_aux[device_number]->timeout_flag)
 800450e:	4b73      	ldr	r3, [pc, #460]	; (80046dc <draw_devices+0x2fc>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b71      	ldr	r3, [pc, #452]	; (80046d8 <draw_devices+0x2f8>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	7b1b      	ldrb	r3, [r3, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <draw_devices+0x152>
    {
        ssd1306_char_pos(1, icon_col--, SYMB_TIMEOUT, 0);
 8004522:	79f9      	ldrb	r1, [r7, #7]
 8004524:	1e4b      	subs	r3, r1, #1
 8004526:	71fb      	strb	r3, [r7, #7]
 8004528:	2300      	movs	r3, #0
 800452a:	2286      	movs	r2, #134	; 0x86
 800452c:	2001      	movs	r0, #1
 800452e:	f004 feb7 	bl	80092a0 <ssd1306_char_pos>
    }



    //Alarm
    if (get_device_flags(device_number, FLAGS_ALARM) == FLAG_ALARM_ON)
 8004532:	4b69      	ldr	r3, [pc, #420]	; (80046d8 <draw_devices+0x2f8>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2104      	movs	r1, #4
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe f9bf 	bl	80028bc <get_device_flags>
 800453e:	4603      	mov	r3, r0
 8004540:	2b01      	cmp	r3, #1
 8004542:	d107      	bne.n	8004554 <draw_devices+0x174>
    {
        ssd1306_char_pos(1, icon_col--, SYMB_ALARM, 0);
 8004544:	79f9      	ldrb	r1, [r7, #7]
 8004546:	1e4b      	subs	r3, r1, #1
 8004548:	71fb      	strb	r3, [r7, #7]
 800454a:	2300      	movs	r3, #0
 800454c:	2287      	movs	r2, #135	; 0x87
 800454e:	2001      	movs	r0, #1
 8004550:	f004 fea6 	bl	80092a0 <ssd1306_char_pos>
    }



    //Devices
    uint8_t another_dev_row = ANOTHER_DEVICE_START_ROW;    //start to print another devices from row 3
 8004554:	2303      	movs	r3, #3
 8004556:	71bb      	strb	r3, [r7, #6]
    
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8004558:	2301      	movs	r3, #1
 800455a:	717b      	strb	r3, [r7, #5]
 800455c:	e28f      	b.n	8004a7e <draw_devices+0x69e>
    {
        if (dev == device_number)      //if me
 800455e:	4b5e      	ldr	r3, [pc, #376]	; (80046d8 <draw_devices+0x2f8>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	797a      	ldrb	r2, [r7, #5]
 8004564:	429a      	cmp	r2, r3
 8004566:	d168      	bne.n	800463a <draw_devices+0x25a>
        {
            //Number
            itoa32(dev, &buf[0]);
 8004568:	797b      	ldrb	r3, [r7, #5]
 800456a:	495d      	ldr	r1, [pc, #372]	; (80046e0 <draw_devices+0x300>)
 800456c:	4618      	mov	r0, r3
 800456e:	f004 f953 	bl	8008818 <itoa32>
            ssd1306_print(1, 0, &buf[0], 0);
 8004572:	2300      	movs	r3, #0
 8004574:	4a5a      	ldr	r2, [pc, #360]	; (80046e0 <draw_devices+0x300>)
 8004576:	2100      	movs	r1, #0
 8004578:	2001      	movs	r0, #1
 800457a:	f004 feb0 	bl	80092de <ssd1306_print>
            
            //ID
            ssd1306_char_pos(1, 2, p_settings->device_id[0], 0);
 800457e:	4b59      	ldr	r3, [pc, #356]	; (80046e4 <draw_devices+0x304>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	785a      	ldrb	r2, [r3, #1]
 8004584:	2300      	movs	r3, #0
 8004586:	2102      	movs	r1, #2
 8004588:	2001      	movs	r0, #1
 800458a:	f004 fe89 	bl	80092a0 <ssd1306_char_pos>
            ssd1306_char_pos(1, 3, p_settings->device_id[1], 0);
 800458e:	4b55      	ldr	r3, [pc, #340]	; (80046e4 <draw_devices+0x304>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	789a      	ldrb	r2, [r3, #2]
 8004594:	2300      	movs	r3, #0
 8004596:	2103      	movs	r1, #3
 8004598:	2001      	movs	r0, #1
 800459a:	f004 fe81 	bl	80092a0 <ssd1306_char_pos>
            
            //Speed
            if (p_gps_num->speed < 10.0)   //if speed is small show x.x format
 800459e:	4b4d      	ldr	r3, [pc, #308]	; (80046d4 <draw_devices+0x2f4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	4950      	ldr	r1, [pc, #320]	; (80046e8 <draw_devices+0x308>)
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fc fd92 	bl	80010d0 <__aeabi_fcmplt>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00e      	beq.n	80045d0 <draw_devices+0x1f0>
            {
                ftoa32(p_gps_num->speed, 1, &buf[0]);
 80045b2:	4b48      	ldr	r3, [pc, #288]	; (80046d4 <draw_devices+0x2f4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	4a49      	ldr	r2, [pc, #292]	; (80046e0 <draw_devices+0x300>)
 80045ba:	2101      	movs	r1, #1
 80045bc:	4618      	mov	r0, r3
 80045be:	f003 ffdb 	bl	8008578 <ftoa32>
                ssd1306_print_viceversa(1, 7, &buf[0], 0);
 80045c2:	2300      	movs	r3, #0
 80045c4:	4a46      	ldr	r2, [pc, #280]	; (80046e0 <draw_devices+0x300>)
 80045c6:	2107      	movs	r1, #7
 80045c8:	2001      	movs	r0, #1
 80045ca:	f004 feab 	bl	8009324 <ssd1306_print_viceversa>
 80045ce:	e010      	b.n	80045f2 <draw_devices+0x212>
            }
            else    //else show int format
            {
                itoa32(pp_gps_air[dev]->speed, &buf[0]);
 80045d0:	4b46      	ldr	r3, [pc, #280]	; (80046ec <draw_devices+0x30c>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	797b      	ldrb	r3, [r7, #5]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	7b9b      	ldrb	r3, [r3, #14]
 80045de:	4940      	ldr	r1, [pc, #256]	; (80046e0 <draw_devices+0x300>)
 80045e0:	4618      	mov	r0, r3
 80045e2:	f004 f919 	bl	8008818 <itoa32>
                ssd1306_print_viceversa(1, 7, &buf[0], 0);
 80045e6:	2300      	movs	r3, #0
 80045e8:	4a3d      	ldr	r2, [pc, #244]	; (80046e0 <draw_devices+0x300>)
 80045ea:	2107      	movs	r1, #7
 80045ec:	2001      	movs	r0, #1
 80045ee:	f004 fe99 	bl	8009324 <ssd1306_print_viceversa>
            }
            
            //Course
            itoa32(pp_gps_air[dev]->course.as_integer, &buf[0]);
 80045f2:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <draw_devices+0x30c>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	797b      	ldrb	r3, [r7, #5]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	8a1b      	ldrh	r3, [r3, #16]
 8004600:	4937      	ldr	r1, [pc, #220]	; (80046e0 <draw_devices+0x300>)
 8004602:	4618      	mov	r0, r3
 8004604:	f004 f908 	bl	8008818 <itoa32>
            ssd1306_print_viceversa(1, 11, &buf[0], 0);
 8004608:	2300      	movs	r3, #0
 800460a:	4a35      	ldr	r2, [pc, #212]	; (80046e0 <draw_devices+0x300>)
 800460c:	210b      	movs	r1, #11
 800460e:	2001      	movs	r0, #1
 8004610:	f004 fe88 	bl	8009324 <ssd1306_print_viceversa>
            
            //Altitude
            itoa32(pp_gps_air[dev]->altitude.as_integer, &buf[0]);
 8004614:	4b35      	ldr	r3, [pc, #212]	; (80046ec <draw_devices+0x30c>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	797b      	ldrb	r3, [r7, #5]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004624:	492e      	ldr	r1, [pc, #184]	; (80046e0 <draw_devices+0x300>)
 8004626:	4618      	mov	r0, r3
 8004628:	f004 f8f6 	bl	8008818 <itoa32>
            ssd1306_print_viceversa(1, 16, &buf[0], 0);
 800462c:	2300      	movs	r3, #0
 800462e:	4a2c      	ldr	r2, [pc, #176]	; (80046e0 <draw_devices+0x300>)
 8004630:	2110      	movs	r1, #16
 8004632:	2001      	movs	r0, #1
 8004634:	f004 fe76 	bl	8009324 <ssd1306_print_viceversa>
 8004638:	e21e      	b.n	8004a78 <draw_devices+0x698>
        }
        else
        {
            if (pp_dev_aux[dev]->exist_flag == 1)        //if not me & exist
 800463a:	4b28      	ldr	r3, [pc, #160]	; (80046dc <draw_devices+0x2fc>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	797b      	ldrb	r3, [r7, #5]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b01      	cmp	r3, #1
 800464a:	f040 8215 	bne.w	8004a78 <draw_devices+0x698>
            {
                //Number
                itoa32(dev, &buf[0]);
 800464e:	797b      	ldrb	r3, [r7, #5]
 8004650:	4923      	ldr	r1, [pc, #140]	; (80046e0 <draw_devices+0x300>)
 8004652:	4618      	mov	r0, r3
 8004654:	f004 f8e0 	bl	8008818 <itoa32>
                ssd1306_print(another_dev_row, 0, &buf[0], 0);
 8004658:	79b8      	ldrb	r0, [r7, #6]
 800465a:	2300      	movs	r3, #0
 800465c:	4a20      	ldr	r2, [pc, #128]	; (80046e0 <draw_devices+0x300>)
 800465e:	2100      	movs	r1, #0
 8004660:	f004 fe3d 	bl	80092de <ssd1306_print>
                
                //ID
                ssd1306_char_pos(another_dev_row, 2, pp_gps_air[dev]->device_id[0], 0);
 8004664:	4b21      	ldr	r3, [pc, #132]	; (80046ec <draw_devices+0x30c>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	797b      	ldrb	r3, [r7, #5]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	781a      	ldrb	r2, [r3, #0]
 8004672:	79b8      	ldrb	r0, [r7, #6]
 8004674:	2300      	movs	r3, #0
 8004676:	2102      	movs	r1, #2
 8004678:	f004 fe12 	bl	80092a0 <ssd1306_char_pos>
                ssd1306_char_pos(another_dev_row, 3, pp_gps_air[dev]->device_id[1], 0);
 800467c:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <draw_devices+0x30c>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	797b      	ldrb	r3, [r7, #5]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	785a      	ldrb	r2, [r3, #1]
 800468a:	79b8      	ldrb	r0, [r7, #6]
 800468c:	2300      	movs	r3, #0
 800468e:	2103      	movs	r1, #3
 8004690:	f004 fe06 	bl	80092a0 <ssd1306_char_pos>
                
                //Distance
                if (pp_gps_rel[dev]->distance < 1000)           //1-999 m
 8004694:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <draw_devices+0x310>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	797b      	ldrb	r3, [r7, #5]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046a6:	d225      	bcs.n	80046f4 <draw_devices+0x314>
                {
                    itoa32(pp_gps_rel[dev]->distance, &buf[0]);
 80046a8:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <draw_devices+0x310>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	797b      	ldrb	r3, [r7, #5]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	490a      	ldr	r1, [pc, #40]	; (80046e0 <draw_devices+0x300>)
 80046b8:	4618      	mov	r0, r3
 80046ba:	f004 f8ad 	bl	8008818 <itoa32>
                    ssd1306_print_viceversa(another_dev_row, 7, &buf[0], 0);
 80046be:	79b8      	ldrb	r0, [r7, #6]
 80046c0:	2300      	movs	r3, #0
 80046c2:	4a07      	ldr	r2, [pc, #28]	; (80046e0 <draw_devices+0x300>)
 80046c4:	2107      	movs	r1, #7
 80046c6:	f004 fe2d 	bl	8009324 <ssd1306_print_viceversa>
 80046ca:	e083      	b.n	80047d4 <draw_devices+0x3f4>
 80046cc:	0800d944 	.word	0x0800d944
 80046d0:	20000808 	.word	0x20000808
 80046d4:	20000614 	.word	0x20000614
 80046d8:	20000738 	.word	0x20000738
 80046dc:	2000083c 	.word	0x2000083c
 80046e0:	20000810 	.word	0x20000810
 80046e4:	2000061c 	.word	0x2000061c
 80046e8:	41200000 	.word	0x41200000
 80046ec:	20000804 	.word	0x20000804
 80046f0:	200007d0 	.word	0x200007d0
                }
                else if (pp_gps_rel[dev]->distance < 10000)     //1.0-9.9 km
 80046f4:	4bb0      	ldr	r3, [pc, #704]	; (80049b8 <draw_devices+0x5d8>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	797b      	ldrb	r3, [r7, #5]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f242 720f 	movw	r2, #9999	; 0x270f
 8004706:	4293      	cmp	r3, r2
 8004708:	d825      	bhi.n	8004756 <draw_devices+0x376>
                {
                    tmpf = pp_gps_rel[dev]->distance / 1000.0;
 800470a:	4bab      	ldr	r3, [pc, #684]	; (80049b8 <draw_devices+0x5d8>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	797b      	ldrb	r3, [r7, #5]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7fb fe6b 	bl	80003f4 <__aeabi_ui2d>
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	4ba6      	ldr	r3, [pc, #664]	; (80049bc <draw_devices+0x5dc>)
 8004724:	f7fc f80a 	bl	800073c <__aeabi_ddiv>
 8004728:	4603      	mov	r3, r0
 800472a:	460c      	mov	r4, r1
 800472c:	4618      	mov	r0, r3
 800472e:	4621      	mov	r1, r4
 8004730:	f7fc f9d2 	bl	8000ad8 <__aeabi_d2f>
 8004734:	4602      	mov	r2, r0
 8004736:	4ba2      	ldr	r3, [pc, #648]	; (80049c0 <draw_devices+0x5e0>)
 8004738:	601a      	str	r2, [r3, #0]
                    ftoa32(tmpf, 1, &buf[0]);
 800473a:	4ba1      	ldr	r3, [pc, #644]	; (80049c0 <draw_devices+0x5e0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4aa1      	ldr	r2, [pc, #644]	; (80049c4 <draw_devices+0x5e4>)
 8004740:	2101      	movs	r1, #1
 8004742:	4618      	mov	r0, r3
 8004744:	f003 ff18 	bl	8008578 <ftoa32>
                    ssd1306_print_viceversa(another_dev_row, 7, &buf[0], 0);
 8004748:	79b8      	ldrb	r0, [r7, #6]
 800474a:	2300      	movs	r3, #0
 800474c:	4a9d      	ldr	r2, [pc, #628]	; (80049c4 <draw_devices+0x5e4>)
 800474e:	2107      	movs	r1, #7
 8004750:	f004 fde8 	bl	8009324 <ssd1306_print_viceversa>
 8004754:	e03e      	b.n	80047d4 <draw_devices+0x3f4>
                }
                else if (pp_gps_rel[dev]->distance < 100000)    //10.-99. km
 8004756:	4b98      	ldr	r3, [pc, #608]	; (80049b8 <draw_devices+0x5d8>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	797b      	ldrb	r3, [r7, #5]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a98      	ldr	r2, [pc, #608]	; (80049c8 <draw_devices+0x5e8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d82e      	bhi.n	80047c8 <draw_devices+0x3e8>
                {
                    tmpf = pp_gps_rel[dev]->distance / 1000.0;
 800476a:	4b93      	ldr	r3, [pc, #588]	; (80049b8 <draw_devices+0x5d8>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	797b      	ldrb	r3, [r7, #5]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f7fb fe3b 	bl	80003f4 <__aeabi_ui2d>
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	4b8e      	ldr	r3, [pc, #568]	; (80049bc <draw_devices+0x5dc>)
 8004784:	f7fb ffda 	bl	800073c <__aeabi_ddiv>
 8004788:	4603      	mov	r3, r0
 800478a:	460c      	mov	r4, r1
 800478c:	4618      	mov	r0, r3
 800478e:	4621      	mov	r1, r4
 8004790:	f7fc f9a2 	bl	8000ad8 <__aeabi_d2f>
 8004794:	4602      	mov	r2, r0
 8004796:	4b8a      	ldr	r3, [pc, #552]	; (80049c0 <draw_devices+0x5e0>)
 8004798:	601a      	str	r2, [r3, #0]
                    itoa32((uint32_t)tmpf, &buf[0]);
 800479a:	4b89      	ldr	r3, [pc, #548]	; (80049c0 <draw_devices+0x5e0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fc fce4 	bl	800116c <__aeabi_f2uiz>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4987      	ldr	r1, [pc, #540]	; (80049c4 <draw_devices+0x5e4>)
 80047a8:	4618      	mov	r0, r3
 80047aa:	f004 f835 	bl	8008818 <itoa32>
                    ssd1306_print_viceversa(another_dev_row, 6, &buf[0], 0);
 80047ae:	79b8      	ldrb	r0, [r7, #6]
 80047b0:	2300      	movs	r3, #0
 80047b2:	4a84      	ldr	r2, [pc, #528]	; (80049c4 <draw_devices+0x5e4>)
 80047b4:	2106      	movs	r1, #6
 80047b6:	f004 fdb5 	bl	8009324 <ssd1306_print_viceversa>
                    ssd1306_char_pos(another_dev_row, 7, '.', 0);
 80047ba:	79b8      	ldrb	r0, [r7, #6]
 80047bc:	2300      	movs	r3, #0
 80047be:	222e      	movs	r2, #46	; 0x2e
 80047c0:	2107      	movs	r1, #7
 80047c2:	f004 fd6d 	bl	80092a0 <ssd1306_char_pos>
 80047c6:	e005      	b.n	80047d4 <draw_devices+0x3f4>
                }
                else                                        // >100 km
                {
                    ssd1306_print(another_dev_row, 5, "...", 0);
 80047c8:	79b8      	ldrb	r0, [r7, #6]
 80047ca:	2300      	movs	r3, #0
 80047cc:	4a7f      	ldr	r2, [pc, #508]	; (80049cc <draw_devices+0x5ec>)
 80047ce:	2105      	movs	r1, #5
 80047d0:	f004 fd85 	bl	80092de <ssd1306_print>
                }
                
                //Heading
                itoa32(pp_gps_rel[dev]->heading, &buf[0]);
 80047d4:	4b78      	ldr	r3, [pc, #480]	; (80049b8 <draw_devices+0x5d8>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	797b      	ldrb	r3, [r7, #5]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	889b      	ldrh	r3, [r3, #4]
 80047e2:	4978      	ldr	r1, [pc, #480]	; (80049c4 <draw_devices+0x5e4>)
 80047e4:	4618      	mov	r0, r3
 80047e6:	f004 f817 	bl	8008818 <itoa32>
                ssd1306_print_viceversa(another_dev_row, 11, &buf[0], 0);
 80047ea:	79b8      	ldrb	r0, [r7, #6]
 80047ec:	2300      	movs	r3, #0
 80047ee:	4a75      	ldr	r2, [pc, #468]	; (80049c4 <draw_devices+0x5e4>)
 80047f0:	210b      	movs	r1, #11
 80047f2:	f004 fd97 	bl	8009324 <ssd1306_print_viceversa>
                
                //Delta Altitude
                tmpi16 = pp_gps_rel[dev]->altitude_diff;
 80047f6:	4b70      	ldr	r3, [pc, #448]	; (80049b8 <draw_devices+0x5d8>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	797b      	ldrb	r3, [r7, #5]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004806:	4b72      	ldr	r3, [pc, #456]	; (80049d0 <draw_devices+0x5f0>)
 8004808:	801a      	strh	r2, [r3, #0]
                if (tmpi16 < 0)
 800480a:	4b71      	ldr	r3, [pc, #452]	; (80049d0 <draw_devices+0x5f0>)
 800480c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004810:	2b00      	cmp	r3, #0
 8004812:	da08      	bge.n	8004826 <draw_devices+0x446>
                {
                    tmpi16 *= -1;
 8004814:	4b6e      	ldr	r3, [pc, #440]	; (80049d0 <draw_devices+0x5f0>)
 8004816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800481a:	b29b      	uxth	r3, r3
 800481c:	425b      	negs	r3, r3
 800481e:	b29b      	uxth	r3, r3
 8004820:	b21a      	sxth	r2, r3
 8004822:	4b6b      	ldr	r3, [pc, #428]	; (80049d0 <draw_devices+0x5f0>)
 8004824:	801a      	strh	r2, [r3, #0]
                }
                
                if (tmpi16 < 1000)           //1-999 m
 8004826:	4b6a      	ldr	r3, [pc, #424]	; (80049d0 <draw_devices+0x5f0>)
 8004828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800482c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004830:	da12      	bge.n	8004858 <draw_devices+0x478>
                {
                    itoa32(pp_gps_rel[dev]->altitude_diff, &buf[0]);
 8004832:	4b61      	ldr	r3, [pc, #388]	; (80049b8 <draw_devices+0x5d8>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	797b      	ldrb	r3, [r7, #5]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004842:	4960      	ldr	r1, [pc, #384]	; (80049c4 <draw_devices+0x5e4>)
 8004844:	4618      	mov	r0, r3
 8004846:	f003 ffe7 	bl	8008818 <itoa32>
                    ssd1306_print_viceversa(another_dev_row, 16, &buf[0], 0);
 800484a:	79b8      	ldrb	r0, [r7, #6]
 800484c:	2300      	movs	r3, #0
 800484e:	4a5d      	ldr	r2, [pc, #372]	; (80049c4 <draw_devices+0x5e4>)
 8004850:	2110      	movs	r1, #16
 8004852:	f004 fd67 	bl	8009324 <ssd1306_print_viceversa>
 8004856:	e05c      	b.n	8004912 <draw_devices+0x532>
                }
                else if (tmpi16 < 10000)     //1.0-9.9 km
 8004858:	4b5d      	ldr	r3, [pc, #372]	; (80049d0 <draw_devices+0x5f0>)
 800485a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800485e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004862:	4293      	cmp	r3, r2
 8004864:	dc26      	bgt.n	80048b4 <draw_devices+0x4d4>
                {
                    tmpf = pp_gps_rel[dev]->altitude_diff / 1000.0;
 8004866:	4b54      	ldr	r3, [pc, #336]	; (80049b8 <draw_devices+0x5d8>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	797b      	ldrb	r3, [r7, #5]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fb fdcc 	bl	8000414 <__aeabi_i2d>
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	4b4e      	ldr	r3, [pc, #312]	; (80049bc <draw_devices+0x5dc>)
 8004882:	f7fb ff5b 	bl	800073c <__aeabi_ddiv>
 8004886:	4603      	mov	r3, r0
 8004888:	460c      	mov	r4, r1
 800488a:	4618      	mov	r0, r3
 800488c:	4621      	mov	r1, r4
 800488e:	f7fc f923 	bl	8000ad8 <__aeabi_d2f>
 8004892:	4602      	mov	r2, r0
 8004894:	4b4a      	ldr	r3, [pc, #296]	; (80049c0 <draw_devices+0x5e0>)
 8004896:	601a      	str	r2, [r3, #0]
                    ftoa32(tmpf, 1, &buf[0]);
 8004898:	4b49      	ldr	r3, [pc, #292]	; (80049c0 <draw_devices+0x5e0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a49      	ldr	r2, [pc, #292]	; (80049c4 <draw_devices+0x5e4>)
 800489e:	2101      	movs	r1, #1
 80048a0:	4618      	mov	r0, r3
 80048a2:	f003 fe69 	bl	8008578 <ftoa32>
                    ssd1306_print_viceversa(another_dev_row, 16, &buf[0], 0);
 80048a6:	79b8      	ldrb	r0, [r7, #6]
 80048a8:	2300      	movs	r3, #0
 80048aa:	4a46      	ldr	r2, [pc, #280]	; (80049c4 <draw_devices+0x5e4>)
 80048ac:	2110      	movs	r1, #16
 80048ae:	f004 fd39 	bl	8009324 <ssd1306_print_viceversa>
 80048b2:	e02e      	b.n	8004912 <draw_devices+0x532>
                }
                else                         //10.-99. km
                {
                    tmpf = pp_gps_rel[dev]->altitude_diff / 1000.0;
 80048b4:	4b40      	ldr	r3, [pc, #256]	; (80049b8 <draw_devices+0x5d8>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	797b      	ldrb	r3, [r7, #5]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fb fda5 	bl	8000414 <__aeabi_i2d>
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <draw_devices+0x5dc>)
 80048d0:	f7fb ff34 	bl	800073c <__aeabi_ddiv>
 80048d4:	4603      	mov	r3, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	4618      	mov	r0, r3
 80048da:	4621      	mov	r1, r4
 80048dc:	f7fc f8fc 	bl	8000ad8 <__aeabi_d2f>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b37      	ldr	r3, [pc, #220]	; (80049c0 <draw_devices+0x5e0>)
 80048e4:	601a      	str	r2, [r3, #0]
                    itoa32((int32_t)tmpf, &buf[0]);
 80048e6:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <draw_devices+0x5e0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fc fc18 	bl	8001120 <__aeabi_f2iz>
 80048f0:	4603      	mov	r3, r0
 80048f2:	4934      	ldr	r1, [pc, #208]	; (80049c4 <draw_devices+0x5e4>)
 80048f4:	4618      	mov	r0, r3
 80048f6:	f003 ff8f 	bl	8008818 <itoa32>
                    ssd1306_char_pos(another_dev_row, 16, '.', 0);
 80048fa:	79b8      	ldrb	r0, [r7, #6]
 80048fc:	2300      	movs	r3, #0
 80048fe:	222e      	movs	r2, #46	; 0x2e
 8004900:	2110      	movs	r1, #16
 8004902:	f004 fccd 	bl	80092a0 <ssd1306_char_pos>
                    ssd1306_print_viceversa(another_dev_row, 15, &buf[0], 0);
 8004906:	79b8      	ldrb	r0, [r7, #6]
 8004908:	2300      	movs	r3, #0
 800490a:	4a2e      	ldr	r2, [pc, #184]	; (80049c4 <draw_devices+0x5e4>)
 800490c:	210f      	movs	r1, #15
 800490e:	f004 fd09 	bl	8009324 <ssd1306_print_viceversa>
                }
                
                if (pp_gps_rel[dev]->altitude_diff > 0)
 8004912:	4b29      	ldr	r3, [pc, #164]	; (80049b8 <draw_devices+0x5d8>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	797b      	ldrb	r3, [r7, #5]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004922:	2b00      	cmp	r3, #0
 8004924:	dd03      	ble.n	800492e <draw_devices+0x54e>
                {
                    ssd1306_char('+', 0);
 8004926:	2100      	movs	r1, #0
 8004928:	202b      	movs	r0, #43	; 0x2b
 800492a:	f004 fc75 	bl	8009218 <ssd1306_char>
                }
                
                
                
                uint8_t icon_col = LCD_LAST_COL;
 800492e:	2314      	movs	r3, #20
 8004930:	713b      	strb	r3, [r7, #4]
                
                //Battery
                if (pp_dev_aux[dev]->memory_point_flag == 0) //dont show battery icon for memory points
 8004932:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <draw_devices+0x5f4>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	797b      	ldrb	r3, [r7, #5]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	7b9b      	ldrb	r3, [r3, #14]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d152      	bne.n	80049ea <draw_devices+0x60a>
                {
					switch (get_device_flags(dev, FLAGS_BATTERY))
 8004944:	797b      	ldrb	r3, [r7, #5]
 8004946:	2101      	movs	r1, #1
 8004948:	4618      	mov	r0, r3
 800494a:	f7fd ffb7 	bl	80028bc <get_device_flags>
 800494e:	4603      	mov	r3, r0
 8004950:	2b04      	cmp	r3, #4
 8004952:	d84a      	bhi.n	80049ea <draw_devices+0x60a>
 8004954:	a201      	add	r2, pc, #4	; (adr r2, 800495c <draw_devices+0x57c>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	080049d9 	.word	0x080049d9
 8004960:	080049a7 	.word	0x080049a7
 8004964:	08004995 	.word	0x08004995
 8004968:	08004983 	.word	0x08004983
 800496c:	08004971 	.word	0x08004971
					{
						case FLAG_BATTERY_75_TO_100:
							ssd1306_char_pos(another_dev_row, icon_col--, SYMB_BAT_4OF4, 0);
 8004970:	7939      	ldrb	r1, [r7, #4]
 8004972:	1e4b      	subs	r3, r1, #1
 8004974:	713b      	strb	r3, [r7, #4]
 8004976:	79b8      	ldrb	r0, [r7, #6]
 8004978:	2300      	movs	r3, #0
 800497a:	228c      	movs	r2, #140	; 0x8c
 800497c:	f004 fc90 	bl	80092a0 <ssd1306_char_pos>
							break;
 8004980:	e033      	b.n	80049ea <draw_devices+0x60a>

						case FLAG_BATTERY_50_TO_75:
							ssd1306_char_pos(another_dev_row, icon_col--, SYMB_BAT_3OF4, 0);
 8004982:	7939      	ldrb	r1, [r7, #4]
 8004984:	1e4b      	subs	r3, r1, #1
 8004986:	713b      	strb	r3, [r7, #4]
 8004988:	79b8      	ldrb	r0, [r7, #6]
 800498a:	2300      	movs	r3, #0
 800498c:	228b      	movs	r2, #139	; 0x8b
 800498e:	f004 fc87 	bl	80092a0 <ssd1306_char_pos>
							break;
 8004992:	e02a      	b.n	80049ea <draw_devices+0x60a>

						case FLAG_BATTERY_25_TO_50:
							ssd1306_char_pos(another_dev_row, icon_col--, SYMB_BAT_2OF4, 0);
 8004994:	7939      	ldrb	r1, [r7, #4]
 8004996:	1e4b      	subs	r3, r1, #1
 8004998:	713b      	strb	r3, [r7, #4]
 800499a:	79b8      	ldrb	r0, [r7, #6]
 800499c:	2300      	movs	r3, #0
 800499e:	228a      	movs	r2, #138	; 0x8a
 80049a0:	f004 fc7e 	bl	80092a0 <ssd1306_char_pos>
							break;
 80049a4:	e021      	b.n	80049ea <draw_devices+0x60a>

						case FLAG_BATTERY_10_TO_25:
							ssd1306_char_pos(another_dev_row, icon_col--, SYMB_BAT_1OF4, 0);
 80049a6:	7939      	ldrb	r1, [r7, #4]
 80049a8:	1e4b      	subs	r3, r1, #1
 80049aa:	713b      	strb	r3, [r7, #4]
 80049ac:	79b8      	ldrb	r0, [r7, #6]
 80049ae:	2300      	movs	r3, #0
 80049b0:	2289      	movs	r2, #137	; 0x89
 80049b2:	f004 fc75 	bl	80092a0 <ssd1306_char_pos>
							break;
 80049b6:	e018      	b.n	80049ea <draw_devices+0x60a>
 80049b8:	200007d0 	.word	0x200007d0
 80049bc:	408f4000 	.word	0x408f4000
 80049c0:	200007f4 	.word	0x200007f4
 80049c4:	20000810 	.word	0x20000810
 80049c8:	0001869f 	.word	0x0001869f
 80049cc:	0800ca18 	.word	0x0800ca18
 80049d0:	200007f8 	.word	0x200007f8
 80049d4:	2000083c 	.word	0x2000083c

						case FLAG_BATTERY_0_TO_10:
							ssd1306_char_pos(another_dev_row, icon_col--, SYMB_BAT_0OF4, 0);
 80049d8:	7939      	ldrb	r1, [r7, #4]
 80049da:	1e4b      	subs	r3, r1, #1
 80049dc:	713b      	strb	r3, [r7, #4]
 80049de:	79b8      	ldrb	r0, [r7, #6]
 80049e0:	2300      	movs	r3, #0
 80049e2:	2288      	movs	r2, #136	; 0x88
 80049e4:	f004 fc5c 	bl	80092a0 <ssd1306_char_pos>
							break;
 80049e8:	bf00      	nop
					}
                }


                //Timeout
                if (pp_dev_aux[dev]->memory_point_flag == 0) //dont show timeout icon for memory points
 80049ea:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <draw_devices+0x6b4>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	797b      	ldrb	r3, [r7, #5]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	7b9b      	ldrb	r3, [r3, #14]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d110      	bne.n	8004a1e <draw_devices+0x63e>
                {
					if (pp_dev_aux[dev]->timeout_flag)
 80049fc:	4b25      	ldr	r3, [pc, #148]	; (8004a94 <draw_devices+0x6b4>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	797b      	ldrb	r3, [r7, #5]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	7b1b      	ldrb	r3, [r3, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <draw_devices+0x63e>
					{
						ssd1306_char_pos(another_dev_row, icon_col--, SYMB_TIMEOUT, 0);
 8004a0e:	7939      	ldrb	r1, [r7, #4]
 8004a10:	1e4b      	subs	r3, r1, #1
 8004a12:	713b      	strb	r3, [r7, #4]
 8004a14:	79b8      	ldrb	r0, [r7, #6]
 8004a16:	2300      	movs	r3, #0
 8004a18:	2286      	movs	r2, #134	; 0x86
 8004a1a:	f004 fc41 	bl	80092a0 <ssd1306_char_pos>
					}
                }


                //Fence
                if (pp_dev_aux[dev]->fence_flag)
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <draw_devices+0x6b4>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	797b      	ldrb	r3, [r7, #5]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	7b5b      	ldrb	r3, [r3, #13]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <draw_devices+0x660>
                {
                	ssd1306_char_pos(another_dev_row, icon_col--, SYMB_FENCE, 0);
 8004a30:	7939      	ldrb	r1, [r7, #4]
 8004a32:	1e4b      	subs	r3, r1, #1
 8004a34:	713b      	strb	r3, [r7, #4]
 8004a36:	79b8      	ldrb	r0, [r7, #6]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	228e      	movs	r2, #142	; 0x8e
 8004a3c:	f004 fc30 	bl	80092a0 <ssd1306_char_pos>
                }


                //Alarm
                if (pp_dev_aux[dev]->memory_point_flag == 0) //dont show alarm icon for memory points
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <draw_devices+0x6b4>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	797b      	ldrb	r3, [r7, #5]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	7b9b      	ldrb	r3, [r3, #14]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <draw_devices+0x692>
                {
					if (get_device_flags(dev, FLAGS_ALARM) == FLAG_ALARM_ON)
 8004a52:	797b      	ldrb	r3, [r7, #5]
 8004a54:	2104      	movs	r1, #4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fd ff30 	bl	80028bc <get_device_flags>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d107      	bne.n	8004a72 <draw_devices+0x692>
					{
						ssd1306_char_pos(another_dev_row, icon_col--, SYMB_ALARM, 0);
 8004a62:	7939      	ldrb	r1, [r7, #4]
 8004a64:	1e4b      	subs	r3, r1, #1
 8004a66:	713b      	strb	r3, [r7, #4]
 8004a68:	79b8      	ldrb	r0, [r7, #6]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2287      	movs	r2, #135	; 0x87
 8004a6e:	f004 fc17 	bl	80092a0 <ssd1306_char_pos>
					}
                }

                
                another_dev_row++;      //set next row
 8004a72:	79bb      	ldrb	r3, [r7, #6]
 8004a74:	3301      	adds	r3, #1
 8004a76:	71bb      	strb	r3, [r7, #6]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8004a78:	797b      	ldrb	r3, [r7, #5]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	717b      	strb	r3, [r7, #5]
 8004a7e:	797b      	ldrb	r3, [r7, #5]
 8004a80:	2b06      	cmp	r3, #6
 8004a82:	f67f ad6c 	bls.w	800455e <draw_devices+0x17e>
            }
        }
    }
    
    ssd1306_update();
 8004a86:	f004 fb03 	bl	8009090 <ssd1306_update>
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd90      	pop	{r4, r7, pc}
 8004a92:	bf00      	nop
 8004a94:	2000083c 	.word	0x2000083c

08004a98 <draw_each_device>:



//EACH DEVICE
void draw_each_device(void)
{
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
    ssd1306_clear();
 8004a9e:	f004 fb17 	bl	80090d0 <ssd1306_clear>
    
    //My status row
    uint8_t icon_col = LCD_LAST_COL;
 8004aa2:	2314      	movs	r3, #20
 8004aa4:	71fb      	strb	r3, [r7, #7]

    //Battery
    switch (get_device_flags(device_number, FLAGS_BATTERY))
 8004aa6:	4b3e      	ldr	r3, [pc, #248]	; (8004ba0 <draw_each_device+0x108>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2101      	movs	r1, #1
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fd ff05 	bl	80028bc <get_device_flags>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d83a      	bhi.n	8004b2e <draw_each_device+0x96>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <draw_each_device+0x28>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004b1d 	.word	0x08004b1d
 8004ac4:	08004b0b 	.word	0x08004b0b
 8004ac8:	08004af9 	.word	0x08004af9
 8004acc:	08004ae7 	.word	0x08004ae7
 8004ad0:	08004ad5 	.word	0x08004ad5
    {
        case FLAG_BATTERY_75_TO_100:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_4OF4, 0);
 8004ad4:	79f9      	ldrb	r1, [r7, #7]
 8004ad6:	1e4b      	subs	r3, r1, #1
 8004ad8:	71fb      	strb	r3, [r7, #7]
 8004ada:	2300      	movs	r3, #0
 8004adc:	228c      	movs	r2, #140	; 0x8c
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f004 fbde 	bl	80092a0 <ssd1306_char_pos>
            break;
 8004ae4:	e023      	b.n	8004b2e <draw_each_device+0x96>

        case FLAG_BATTERY_50_TO_75:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_3OF4, 0);
 8004ae6:	79f9      	ldrb	r1, [r7, #7]
 8004ae8:	1e4b      	subs	r3, r1, #1
 8004aea:	71fb      	strb	r3, [r7, #7]
 8004aec:	2300      	movs	r3, #0
 8004aee:	228b      	movs	r2, #139	; 0x8b
 8004af0:	2000      	movs	r0, #0
 8004af2:	f004 fbd5 	bl	80092a0 <ssd1306_char_pos>
            break;
 8004af6:	e01a      	b.n	8004b2e <draw_each_device+0x96>

        case FLAG_BATTERY_25_TO_50:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_2OF4, 0);
 8004af8:	79f9      	ldrb	r1, [r7, #7]
 8004afa:	1e4b      	subs	r3, r1, #1
 8004afc:	71fb      	strb	r3, [r7, #7]
 8004afe:	2300      	movs	r3, #0
 8004b00:	228a      	movs	r2, #138	; 0x8a
 8004b02:	2000      	movs	r0, #0
 8004b04:	f004 fbcc 	bl	80092a0 <ssd1306_char_pos>
            break;
 8004b08:	e011      	b.n	8004b2e <draw_each_device+0x96>

        case FLAG_BATTERY_10_TO_25:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_1OF4, 0);
 8004b0a:	79f9      	ldrb	r1, [r7, #7]
 8004b0c:	1e4b      	subs	r3, r1, #1
 8004b0e:	71fb      	strb	r3, [r7, #7]
 8004b10:	2300      	movs	r3, #0
 8004b12:	2289      	movs	r2, #137	; 0x89
 8004b14:	2000      	movs	r0, #0
 8004b16:	f004 fbc3 	bl	80092a0 <ssd1306_char_pos>
            break;
 8004b1a:	e008      	b.n	8004b2e <draw_each_device+0x96>

        case FLAG_BATTERY_0_TO_10:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_0OF4, 0);
 8004b1c:	79f9      	ldrb	r1, [r7, #7]
 8004b1e:	1e4b      	subs	r3, r1, #1
 8004b20:	71fb      	strb	r3, [r7, #7]
 8004b22:	2300      	movs	r3, #0
 8004b24:	2288      	movs	r2, #136	; 0x88
 8004b26:	2000      	movs	r0, #0
 8004b28:	f004 fbba 	bl	80092a0 <ssd1306_char_pos>
            break;
 8004b2c:	bf00      	nop
    }



    //Sattelites
    if (p_gps_raw->time[0] == 0)                           //if no time received then no sattelites at all
 8004b2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <draw_each_device+0x10c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d108      	bne.n	8004b4a <draw_each_device+0xb2>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_NO_SATT, 0);
 8004b38:	79f9      	ldrb	r1, [r7, #7]
 8004b3a:	1e4b      	subs	r3, r1, #1
 8004b3c:	71fb      	strb	r3, [r7, #7]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	2282      	movs	r2, #130	; 0x82
 8004b42:	2000      	movs	r0, #0
 8004b44:	f004 fbac 	bl	80092a0 <ssd1306_char_pos>
 8004b48:	e038      	b.n	8004bbc <draw_each_device+0x124>
    }
    else
    {
        if (p_gps_num->mode == GPS_POSITION_3DFIX && p_gps_num->status == GPS_DATA_VALID)
 8004b4a:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <draw_each_device+0x110>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d10e      	bne.n	8004b74 <draw_each_device+0xdc>
 8004b56:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <draw_each_device+0x110>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d108      	bne.n	8004b74 <draw_each_device+0xdc>
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_3D, 0);   //3D when data is valid
 8004b62:	79f9      	ldrb	r1, [r7, #7]
 8004b64:	1e4b      	subs	r3, r1, #1
 8004b66:	71fb      	strb	r3, [r7, #7]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2285      	movs	r2, #133	; 0x85
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	f004 fb97 	bl	80092a0 <ssd1306_char_pos>
 8004b72:	e023      	b.n	8004bbc <draw_each_device+0x124>
        }
        else if (p_gps_num->mode == GPS_POSITION_2DFIX && p_gps_num->status == GPS_DATA_VALID)
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <draw_each_device+0x110>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d115      	bne.n	8004bac <draw_each_device+0x114>
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <draw_each_device+0x110>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d10f      	bne.n	8004bac <draw_each_device+0x114>
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_2D, 0);   //2D when data is valid
 8004b8c:	79f9      	ldrb	r1, [r7, #7]
 8004b8e:	1e4b      	subs	r3, r1, #1
 8004b90:	71fb      	strb	r3, [r7, #7]
 8004b92:	2300      	movs	r3, #0
 8004b94:	2284      	movs	r2, #132	; 0x84
 8004b96:	2000      	movs	r0, #0
 8004b98:	f004 fb82 	bl	80092a0 <ssd1306_char_pos>
 8004b9c:	e00e      	b.n	8004bbc <draw_each_device+0x124>
 8004b9e:	bf00      	nop
 8004ba0:	20000738 	.word	0x20000738
 8004ba4:	20000808 	.word	0x20000808
 8004ba8:	20000614 	.word	0x20000614
        }
        else
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_1D, 0);   //if not 2D or 3D then only time is avaliable
 8004bac:	79f9      	ldrb	r1, [r7, #7]
 8004bae:	1e4b      	subs	r3, r1, #1
 8004bb0:	71fb      	strb	r3, [r7, #7]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2283      	movs	r2, #131	; 0x83
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f004 fb72 	bl	80092a0 <ssd1306_char_pos>
        }
    }
    

    //TRX
    if (get_main_flags()->gps_sync)
 8004bbc:	f7ff f922 	bl	8003e04 <get_main_flags>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00f      	beq.n	8004be8 <draw_each_device+0x150>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_ARROW_DOWN, 0);
 8004bc8:	79f9      	ldrb	r1, [r7, #7]
 8004bca:	1e4b      	subs	r3, r1, #1
 8004bcc:	71fb      	strb	r3, [r7, #7]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2281      	movs	r2, #129	; 0x81
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f004 fb64 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_char_pos(0, icon_col--, SYMB_ARROW_UP, 0);
 8004bd8:	79f9      	ldrb	r1, [r7, #7]
 8004bda:	1e4b      	subs	r3, r1, #1
 8004bdc:	71fb      	strb	r3, [r7, #7]
 8004bde:	2300      	movs	r3, #0
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	2000      	movs	r0, #0
 8004be4:	f004 fb5c 	bl	80092a0 <ssd1306_char_pos>
    }

    
    //Timeout
    if (pp_dev_aux[device_number]->timeout_flag)
 8004be8:	4bbe      	ldr	r3, [pc, #760]	; (8004ee4 <draw_each_device+0x44c>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4bbe      	ldr	r3, [pc, #760]	; (8004ee8 <draw_each_device+0x450>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	7b1b      	ldrb	r3, [r3, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <draw_each_device+0x174>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_TIMEOUT, 0);
 8004bfc:	79f9      	ldrb	r1, [r7, #7]
 8004bfe:	1e4b      	subs	r3, r1, #1
 8004c00:	71fb      	strb	r3, [r7, #7]
 8004c02:	2300      	movs	r3, #0
 8004c04:	2286      	movs	r2, #134	; 0x86
 8004c06:	2000      	movs	r0, #0
 8004c08:	f004 fb4a 	bl	80092a0 <ssd1306_char_pos>
    }
    

    //Alarm
    if (get_device_flags(device_number, FLAGS_ALARM) == FLAG_ALARM_ON)
 8004c0c:	4bb6      	ldr	r3, [pc, #728]	; (8004ee8 <draw_each_device+0x450>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2104      	movs	r1, #4
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fd fe52 	bl	80028bc <get_device_flags>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <draw_each_device+0x196>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_ALARM, 0);
 8004c1e:	79f9      	ldrb	r1, [r7, #7]
 8004c20:	1e4b      	subs	r3, r1, #1
 8004c22:	71fb      	strb	r3, [r7, #7]
 8004c24:	2300      	movs	r3, #0
 8004c26:	2287      	movs	r2, #135	; 0x87
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f004 fb39 	bl	80092a0 <ssd1306_char_pos>
    }
    
    
    
    if (current_each_device == device_number)      //if me
 8004c2e:	4baf      	ldr	r3, [pc, #700]	; (8004eec <draw_each_device+0x454>)
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	4bad      	ldr	r3, [pc, #692]	; (8004ee8 <draw_each_device+0x450>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	f040 8256 	bne.w	80050e8 <draw_each_device+0x650>
    {
        ssd1306_print(0, 0, "#", 0);
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4aac      	ldr	r2, [pc, #688]	; (8004ef0 <draw_each_device+0x458>)
 8004c40:	2100      	movs	r1, #0
 8004c42:	2000      	movs	r0, #0
 8004c44:	f004 fb4b 	bl	80092de <ssd1306_print>
        itoa32(current_each_device, &buf[0]);
 8004c48:	4ba8      	ldr	r3, [pc, #672]	; (8004eec <draw_each_device+0x454>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	49a9      	ldr	r1, [pc, #676]	; (8004ef4 <draw_each_device+0x45c>)
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f003 fde2 	bl	8008818 <itoa32>
        ssd1306_print(0, 1, &buf[0], 0);
 8004c54:	2300      	movs	r3, #0
 8004c56:	4aa7      	ldr	r2, [pc, #668]	; (8004ef4 <draw_each_device+0x45c>)
 8004c58:	2101      	movs	r1, #1
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	f004 fb3f 	bl	80092de <ssd1306_print>
        
        ssd1306_char_pos(0, 3, p_settings->device_id[0], 0);
 8004c60:	4ba5      	ldr	r3, [pc, #660]	; (8004ef8 <draw_each_device+0x460>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	785a      	ldrb	r2, [r3, #1]
 8004c66:	2300      	movs	r3, #0
 8004c68:	2103      	movs	r1, #3
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f004 fb18 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_char_pos(0, 4, p_settings->device_id[1], 0);
 8004c70:	4ba1      	ldr	r3, [pc, #644]	; (8004ef8 <draw_each_device+0x460>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	789a      	ldrb	r2, [r3, #2]
 8004c76:	2300      	movs	r3, #0
 8004c78:	2104      	movs	r1, #4
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f004 fb10 	bl	80092a0 <ssd1306_char_pos>
        
        ssd1306_print(0, 6, "(me)", 0);
 8004c80:	2300      	movs	r3, #0
 8004c82:	4a9e      	ldr	r2, [pc, #632]	; (8004efc <draw_each_device+0x464>)
 8004c84:	2106      	movs	r1, #6
 8004c86:	2000      	movs	r0, #0
 8004c88:	f004 fb29 	bl	80092de <ssd1306_print>
        
        ssd1306_char_pos(1, 0, p_gps_raw->date[0], 0);
 8004c8c:	4b9c      	ldr	r3, [pc, #624]	; (8004f00 <draw_each_device+0x468>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	7b1a      	ldrb	r2, [r3, #12]
 8004c92:	2300      	movs	r3, #0
 8004c94:	2100      	movs	r1, #0
 8004c96:	2001      	movs	r0, #1
 8004c98:	f004 fb02 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_char_pos(1, 1, p_gps_raw->date[1], 0);
 8004c9c:	4b98      	ldr	r3, [pc, #608]	; (8004f00 <draw_each_device+0x468>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	7b5a      	ldrb	r2, [r3, #13]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f004 fafa 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_print(1, 2, ".", 0);
 8004cac:	2300      	movs	r3, #0
 8004cae:	4a95      	ldr	r2, [pc, #596]	; (8004f04 <draw_each_device+0x46c>)
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	f004 fb13 	bl	80092de <ssd1306_print>
        
        ssd1306_char_pos(1, 3, p_gps_raw->date[2], 0);
 8004cb8:	4b91      	ldr	r3, [pc, #580]	; (8004f00 <draw_each_device+0x468>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	7b9a      	ldrb	r2, [r3, #14]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f004 faec 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_char_pos(1, 4, p_gps_raw->date[3], 0);
 8004cc8:	4b8d      	ldr	r3, [pc, #564]	; (8004f00 <draw_each_device+0x468>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	7bda      	ldrb	r2, [r3, #15]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2104      	movs	r1, #4
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	f004 fae4 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_print(1, 5, ".", 0);
 8004cd8:	2300      	movs	r3, #0
 8004cda:	4a8a      	ldr	r2, [pc, #552]	; (8004f04 <draw_each_device+0x46c>)
 8004cdc:	2105      	movs	r1, #5
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f004 fafd 	bl	80092de <ssd1306_print>
        
        ssd1306_char_pos(1, 6, p_gps_raw->date[4], 0);
 8004ce4:	4b86      	ldr	r3, [pc, #536]	; (8004f00 <draw_each_device+0x468>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	7c1a      	ldrb	r2, [r3, #16]
 8004cea:	2300      	movs	r3, #0
 8004cec:	2106      	movs	r1, #6
 8004cee:	2001      	movs	r0, #1
 8004cf0:	f004 fad6 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_char_pos(1, 7, p_gps_raw->date[5], 0);
 8004cf4:	4b82      	ldr	r3, [pc, #520]	; (8004f00 <draw_each_device+0x468>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	7c5a      	ldrb	r2, [r3, #17]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2107      	movs	r1, #7
 8004cfe:	2001      	movs	r0, #1
 8004d00:	f004 face 	bl	80092a0 <ssd1306_char_pos>
        
        ssd1306_char_pos(1, 9, p_gps_raw->time[0], 0);
 8004d04:	4b7e      	ldr	r3, [pc, #504]	; (8004f00 <draw_each_device+0x468>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	781a      	ldrb	r2, [r3, #0]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2109      	movs	r1, #9
 8004d0e:	2001      	movs	r0, #1
 8004d10:	f004 fac6 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_char_pos(1, 10, p_gps_raw->time[1], 0);
 8004d14:	4b7a      	ldr	r3, [pc, #488]	; (8004f00 <draw_each_device+0x468>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	785a      	ldrb	r2, [r3, #1]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	210a      	movs	r1, #10
 8004d1e:	2001      	movs	r0, #1
 8004d20:	f004 fabe 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_print(1, 11, ":", 0);
 8004d24:	2300      	movs	r3, #0
 8004d26:	4a78      	ldr	r2, [pc, #480]	; (8004f08 <draw_each_device+0x470>)
 8004d28:	210b      	movs	r1, #11
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	f004 fad7 	bl	80092de <ssd1306_print>
        
        ssd1306_char_pos(1, 12, p_gps_raw->time[2], 0);
 8004d30:	4b73      	ldr	r3, [pc, #460]	; (8004f00 <draw_each_device+0x468>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	789a      	ldrb	r2, [r3, #2]
 8004d36:	2300      	movs	r3, #0
 8004d38:	210c      	movs	r1, #12
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	f004 fab0 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_char_pos(1, 13, p_gps_raw->time[3], 0);
 8004d40:	4b6f      	ldr	r3, [pc, #444]	; (8004f00 <draw_each_device+0x468>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	78da      	ldrb	r2, [r3, #3]
 8004d46:	2300      	movs	r3, #0
 8004d48:	210d      	movs	r1, #13
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	f004 faa8 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_print(1, 14, ":", 0);
 8004d50:	2300      	movs	r3, #0
 8004d52:	4a6d      	ldr	r2, [pc, #436]	; (8004f08 <draw_each_device+0x470>)
 8004d54:	210e      	movs	r1, #14
 8004d56:	2001      	movs	r0, #1
 8004d58:	f004 fac1 	bl	80092de <ssd1306_print>
        
        ssd1306_char_pos(1, 15, p_gps_raw->time[4], 0);
 8004d5c:	4b68      	ldr	r3, [pc, #416]	; (8004f00 <draw_each_device+0x468>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	791a      	ldrb	r2, [r3, #4]
 8004d62:	2300      	movs	r3, #0
 8004d64:	210f      	movs	r1, #15
 8004d66:	2001      	movs	r0, #1
 8004d68:	f004 fa9a 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_char_pos(1, 16, p_gps_raw->time[5], 0);
 8004d6c:	4b64      	ldr	r3, [pc, #400]	; (8004f00 <draw_each_device+0x468>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	795a      	ldrb	r2, [r3, #5]
 8004d72:	2300      	movs	r3, #0
 8004d74:	2110      	movs	r1, #16
 8004d76:	2001      	movs	r0, #1
 8004d78:	f004 fa92 	bl	80092a0 <ssd1306_char_pos>
        
        ssd1306_print(1, 18, "GMT", 0);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	4a63      	ldr	r2, [pc, #396]	; (8004f0c <draw_each_device+0x474>)
 8004d80:	2112      	movs	r1, #18
 8004d82:	2001      	movs	r0, #1
 8004d84:	f004 faab 	bl	80092de <ssd1306_print>
        
        ssd1306_print(2, 0, "LAT", 0);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4a61      	ldr	r2, [pc, #388]	; (8004f10 <draw_each_device+0x478>)
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	2002      	movs	r0, #2
 8004d90:	f004 faa5 	bl	80092de <ssd1306_print>
        ftoa32(p_gps_num->latitude.in_deg, 6, &buf[0]);
 8004d94:	4b5f      	ldr	r3, [pc, #380]	; (8004f14 <draw_each_device+0x47c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	4a56      	ldr	r2, [pc, #344]	; (8004ef4 <draw_each_device+0x45c>)
 8004d9c:	2106      	movs	r1, #6
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f003 fbea 	bl	8008578 <ftoa32>
        ssd1306_print_viceversa(2, 14, &buf[0], 0);
 8004da4:	2300      	movs	r3, #0
 8004da6:	4a53      	ldr	r2, [pc, #332]	; (8004ef4 <draw_each_device+0x45c>)
 8004da8:	210e      	movs	r1, #14
 8004daa:	2002      	movs	r0, #2
 8004dac:	f004 faba 	bl	8009324 <ssd1306_print_viceversa>
        if (p_gps_num->latitude.in_deg >= 0)
 8004db0:	4b58      	ldr	r3, [pc, #352]	; (8004f14 <draw_each_device+0x47c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fc f99c 	bl	80010f8 <__aeabi_fcmpge>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <draw_each_device+0x344>
        {
            ssd1306_char('+', 0);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	202b      	movs	r0, #43	; 0x2b
 8004dca:	f004 fa25 	bl	8009218 <ssd1306_char>
            ssd1306_print(2, 16, "(N)", 0);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	4a51      	ldr	r2, [pc, #324]	; (8004f18 <draw_each_device+0x480>)
 8004dd2:	2110      	movs	r1, #16
 8004dd4:	2002      	movs	r0, #2
 8004dd6:	f004 fa82 	bl	80092de <ssd1306_print>
 8004dda:	e005      	b.n	8004de8 <draw_each_device+0x350>
        }
        else
        {
            ssd1306_print(2, 16, "(S)", 0);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4a4f      	ldr	r2, [pc, #316]	; (8004f1c <draw_each_device+0x484>)
 8004de0:	2110      	movs	r1, #16
 8004de2:	2002      	movs	r0, #2
 8004de4:	f004 fa7b 	bl	80092de <ssd1306_print>
        }
        
        ssd1306_print(3, 0, "LON", 0);
 8004de8:	2300      	movs	r3, #0
 8004dea:	4a4d      	ldr	r2, [pc, #308]	; (8004f20 <draw_each_device+0x488>)
 8004dec:	2100      	movs	r1, #0
 8004dee:	2003      	movs	r0, #3
 8004df0:	f004 fa75 	bl	80092de <ssd1306_print>
        ftoa32(p_gps_num->longitude.in_deg, 6, &buf[0]);
 8004df4:	4b47      	ldr	r3, [pc, #284]	; (8004f14 <draw_each_device+0x47c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	4a3e      	ldr	r2, [pc, #248]	; (8004ef4 <draw_each_device+0x45c>)
 8004dfc:	2106      	movs	r1, #6
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f003 fbba 	bl	8008578 <ftoa32>
        ssd1306_print_viceversa(3, 14, &buf[0], 0);
 8004e04:	2300      	movs	r3, #0
 8004e06:	4a3b      	ldr	r2, [pc, #236]	; (8004ef4 <draw_each_device+0x45c>)
 8004e08:	210e      	movs	r1, #14
 8004e0a:	2003      	movs	r0, #3
 8004e0c:	f004 fa8a 	bl	8009324 <ssd1306_print_viceversa>
        if (p_gps_num->longitude.in_deg >= 0)
 8004e10:	4b40      	ldr	r3, [pc, #256]	; (8004f14 <draw_each_device+0x47c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fc f96c 	bl	80010f8 <__aeabi_fcmpge>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <draw_each_device+0x3a4>
        {
            ssd1306_char('+', 0);
 8004e26:	2100      	movs	r1, #0
 8004e28:	202b      	movs	r0, #43	; 0x2b
 8004e2a:	f004 f9f5 	bl	8009218 <ssd1306_char>
            ssd1306_print(3, 16, "(E)", 0);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	4a3c      	ldr	r2, [pc, #240]	; (8004f24 <draw_each_device+0x48c>)
 8004e32:	2110      	movs	r1, #16
 8004e34:	2003      	movs	r0, #3
 8004e36:	f004 fa52 	bl	80092de <ssd1306_print>
 8004e3a:	e005      	b.n	8004e48 <draw_each_device+0x3b0>
        }
        else
        {
            ssd1306_print(3, 16, "(W)", 0);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	4a3a      	ldr	r2, [pc, #232]	; (8004f28 <draw_each_device+0x490>)
 8004e40:	2110      	movs	r1, #16
 8004e42:	2003      	movs	r0, #3
 8004e44:	f004 fa4b 	bl	80092de <ssd1306_print>
        }
        
        ssd1306_print(4, 0, "ALT", 0);
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4a38      	ldr	r2, [pc, #224]	; (8004f2c <draw_each_device+0x494>)
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	2004      	movs	r0, #4
 8004e50:	f004 fa45 	bl	80092de <ssd1306_print>
        itoa32(p_gps_num->altitude, &buf[0]);
 8004e54:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <draw_each_device+0x47c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fc f960 	bl	8001120 <__aeabi_f2iz>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4924      	ldr	r1, [pc, #144]	; (8004ef4 <draw_each_device+0x45c>)
 8004e64:	4618      	mov	r0, r3
 8004e66:	f003 fcd7 	bl	8008818 <itoa32>
        ssd1306_print(4, 4, &buf[0], 0);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <draw_each_device+0x45c>)
 8004e6e:	2104      	movs	r1, #4
 8004e70:	2004      	movs	r0, #4
 8004e72:	f004 fa34 	bl	80092de <ssd1306_print>
        ssd1306_print_next("m", 0);
 8004e76:	2100      	movs	r1, #0
 8004e78:	482d      	ldr	r0, [pc, #180]	; (8004f30 <draw_each_device+0x498>)
 8004e7a:	f004 fa8f 	bl	800939c <ssd1306_print_next>
        
        ssd1306_print(4, 11, "FIX", 0);
 8004e7e:	2300      	movs	r3, #0
 8004e80:	4a2c      	ldr	r2, [pc, #176]	; (8004f34 <draw_each_device+0x49c>)
 8004e82:	210b      	movs	r1, #11
 8004e84:	2004      	movs	r0, #4
 8004e86:	f004 fa2a 	bl	80092de <ssd1306_print>
        if (p_gps_num->status == GPS_DATA_VALID)
 8004e8a:	4b22      	ldr	r3, [pc, #136]	; (8004f14 <draw_each_device+0x47c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d106      	bne.n	8004ea4 <draw_each_device+0x40c>
        {
            ssd1306_print(4, 15, "A/", 0);
 8004e96:	2300      	movs	r3, #0
 8004e98:	4a27      	ldr	r2, [pc, #156]	; (8004f38 <draw_each_device+0x4a0>)
 8004e9a:	210f      	movs	r1, #15
 8004e9c:	2004      	movs	r0, #4
 8004e9e:	f004 fa1e 	bl	80092de <ssd1306_print>
 8004ea2:	e005      	b.n	8004eb0 <draw_each_device+0x418>
        }
        else
        {
            ssd1306_print(4, 15, "V/", 0);
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	4a25      	ldr	r2, [pc, #148]	; (8004f3c <draw_each_device+0x4a4>)
 8004ea8:	210f      	movs	r1, #15
 8004eaa:	2004      	movs	r0, #4
 8004eac:	f004 fa17 	bl	80092de <ssd1306_print>
        }
        
        if (p_gps_num->mode == GPS_POSITION_2DFIX)
 8004eb0:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <draw_each_device+0x47c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d106      	bne.n	8004eca <draw_each_device+0x432>
        {
            ssd1306_print(4, 17, "2D", 0);
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <draw_each_device+0x4a8>)
 8004ec0:	2111      	movs	r1, #17
 8004ec2:	2004      	movs	r0, #4
 8004ec4:	f004 fa0b 	bl	80092de <ssd1306_print>
 8004ec8:	e044      	b.n	8004f54 <draw_each_device+0x4bc>
        }
        else if (p_gps_num->mode == GPS_POSITION_3DFIX)
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <draw_each_device+0x47c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d138      	bne.n	8004f48 <draw_each_device+0x4b0>
        {
            ssd1306_print(4, 17, "3D", 0);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <draw_each_device+0x4ac>)
 8004eda:	2111      	movs	r1, #17
 8004edc:	2004      	movs	r0, #4
 8004ede:	f004 f9fe 	bl	80092de <ssd1306_print>
 8004ee2:	e037      	b.n	8004f54 <draw_each_device+0x4bc>
 8004ee4:	2000083c 	.word	0x2000083c
 8004ee8:	20000738 	.word	0x20000738
 8004eec:	20000032 	.word	0x20000032
 8004ef0:	0800ca1c 	.word	0x0800ca1c
 8004ef4:	20000810 	.word	0x20000810
 8004ef8:	2000061c 	.word	0x2000061c
 8004efc:	0800ca20 	.word	0x0800ca20
 8004f00:	20000808 	.word	0x20000808
 8004f04:	0800ca28 	.word	0x0800ca28
 8004f08:	0800ca2c 	.word	0x0800ca2c
 8004f0c:	0800ca30 	.word	0x0800ca30
 8004f10:	0800ca34 	.word	0x0800ca34
 8004f14:	20000614 	.word	0x20000614
 8004f18:	0800ca38 	.word	0x0800ca38
 8004f1c:	0800ca3c 	.word	0x0800ca3c
 8004f20:	0800ca40 	.word	0x0800ca40
 8004f24:	0800ca44 	.word	0x0800ca44
 8004f28:	0800ca48 	.word	0x0800ca48
 8004f2c:	0800ca4c 	.word	0x0800ca4c
 8004f30:	0800ca50 	.word	0x0800ca50
 8004f34:	0800ca54 	.word	0x0800ca54
 8004f38:	0800ca58 	.word	0x0800ca58
 8004f3c:	0800ca5c 	.word	0x0800ca5c
 8004f40:	0800ca60 	.word	0x0800ca60
 8004f44:	0800ca64 	.word	0x0800ca64
        }
        else
        {
            ssd1306_print(4, 17, "NO", 0);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	4aa3      	ldr	r2, [pc, #652]	; (80051d8 <draw_each_device+0x740>)
 8004f4c:	2111      	movs	r1, #17
 8004f4e:	2004      	movs	r0, #4
 8004f50:	f004 f9c5 	bl	80092de <ssd1306_print>
        }
        
        ssd1306_print(5, 0, "COG", 0);
 8004f54:	2300      	movs	r3, #0
 8004f56:	4aa1      	ldr	r2, [pc, #644]	; (80051dc <draw_each_device+0x744>)
 8004f58:	2100      	movs	r1, #0
 8004f5a:	2005      	movs	r0, #5
 8004f5c:	f004 f9bf 	bl	80092de <ssd1306_print>
        itoa32(p_gps_num->course, &buf[0]);
 8004f60:	4b9f      	ldr	r3, [pc, #636]	; (80051e0 <draw_each_device+0x748>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fc f8da 	bl	8001120 <__aeabi_f2iz>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	499d      	ldr	r1, [pc, #628]	; (80051e4 <draw_each_device+0x74c>)
 8004f70:	4618      	mov	r0, r3
 8004f72:	f003 fc51 	bl	8008818 <itoa32>
        ssd1306_print(5, 4, &buf[0], 0);
 8004f76:	2300      	movs	r3, #0
 8004f78:	4a9a      	ldr	r2, [pc, #616]	; (80051e4 <draw_each_device+0x74c>)
 8004f7a:	2104      	movs	r1, #4
 8004f7c:	2005      	movs	r0, #5
 8004f7e:	f004 f9ae 	bl	80092de <ssd1306_print>
        ssd1306_char(SYMB_DEGREE, 0);
 8004f82:	2100      	movs	r1, #0
 8004f84:	208d      	movs	r0, #141	; 0x8d
 8004f86:	f004 f947 	bl	8009218 <ssd1306_char>
        
        ssd1306_print(5, 11, "DOP", 0);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	4a96      	ldr	r2, [pc, #600]	; (80051e8 <draw_each_device+0x750>)
 8004f8e:	210b      	movs	r1, #11
 8004f90:	2005      	movs	r0, #5
 8004f92:	f004 f9a4 	bl	80092de <ssd1306_print>
        ftoa32(p_gps_num->pdop, 2, &buf[0]);
 8004f96:	4b92      	ldr	r3, [pc, #584]	; (80051e0 <draw_each_device+0x748>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	4a91      	ldr	r2, [pc, #580]	; (80051e4 <draw_each_device+0x74c>)
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f003 fae9 	bl	8008578 <ftoa32>
        ssd1306_print(5, 15, &buf[0], 0);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	4a8e      	ldr	r2, [pc, #568]	; (80051e4 <draw_each_device+0x74c>)
 8004faa:	210f      	movs	r1, #15
 8004fac:	2005      	movs	r0, #5
 8004fae:	f004 f996 	bl	80092de <ssd1306_print>
        
        ssd1306_print(6, 0, "SOG", 0);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	4a8d      	ldr	r2, [pc, #564]	; (80051ec <draw_each_device+0x754>)
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	2006      	movs	r0, #6
 8004fba:	f004 f990 	bl	80092de <ssd1306_print>
        if (p_gps_num->speed < 10.0)   //if speed is small show x.x format
 8004fbe:	4b88      	ldr	r3, [pc, #544]	; (80051e0 <draw_each_device+0x748>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	498a      	ldr	r1, [pc, #552]	; (80051f0 <draw_each_device+0x758>)
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fc f882 	bl	80010d0 <__aeabi_fcmplt>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00e      	beq.n	8004ff0 <draw_each_device+0x558>
        {
            ftoa32(p_gps_num->speed, 1, &buf[0]);
 8004fd2:	4b83      	ldr	r3, [pc, #524]	; (80051e0 <draw_each_device+0x748>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	4a82      	ldr	r2, [pc, #520]	; (80051e4 <draw_each_device+0x74c>)
 8004fda:	2101      	movs	r1, #1
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f003 facb 	bl	8008578 <ftoa32>
            ssd1306_print(6, 4, &buf[0], 0);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	4a7f      	ldr	r2, [pc, #508]	; (80051e4 <draw_each_device+0x74c>)
 8004fe6:	2104      	movs	r1, #4
 8004fe8:	2006      	movs	r0, #6
 8004fea:	f004 f978 	bl	80092de <ssd1306_print>
 8004fee:	e011      	b.n	8005014 <draw_each_device+0x57c>
        }
        else    //else show int format
        {
            itoa32((int16_t)p_gps_num->speed, &buf[0]);
 8004ff0:	4b7b      	ldr	r3, [pc, #492]	; (80051e0 <draw_each_device+0x748>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fc f892 	bl	8001120 <__aeabi_f2iz>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	b21b      	sxth	r3, r3
 8005000:	4978      	ldr	r1, [pc, #480]	; (80051e4 <draw_each_device+0x74c>)
 8005002:	4618      	mov	r0, r3
 8005004:	f003 fc08 	bl	8008818 <itoa32>
            ssd1306_print(6, 4, &buf[0], 0);
 8005008:	2300      	movs	r3, #0
 800500a:	4a76      	ldr	r2, [pc, #472]	; (80051e4 <draw_each_device+0x74c>)
 800500c:	2104      	movs	r1, #4
 800500e:	2006      	movs	r0, #6
 8005010:	f004 f965 	bl	80092de <ssd1306_print>
        }
        ssd1306_print_next("kph", 0);
 8005014:	2100      	movs	r1, #0
 8005016:	4877      	ldr	r0, [pc, #476]	; (80051f4 <draw_each_device+0x75c>)
 8005018:	f004 f9c0 	bl	800939c <ssd1306_print_next>
        
        ssd1306_print(6, 11, "SAT", 0);
 800501c:	2300      	movs	r3, #0
 800501e:	4a76      	ldr	r2, [pc, #472]	; (80051f8 <draw_each_device+0x760>)
 8005020:	210b      	movs	r1, #11
 8005022:	2006      	movs	r0, #6
 8005024:	f004 f95b 	bl	80092de <ssd1306_print>
        itoa32(p_gps_num->sat_used, &buf[0]);
 8005028:	4b6d      	ldr	r3, [pc, #436]	; (80051e0 <draw_each_device+0x748>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005030:	496c      	ldr	r1, [pc, #432]	; (80051e4 <draw_each_device+0x74c>)
 8005032:	4618      	mov	r0, r3
 8005034:	f003 fbf0 	bl	8008818 <itoa32>
        ssd1306_print(6, 15, &buf[0], 0);
 8005038:	2300      	movs	r3, #0
 800503a:	4a6a      	ldr	r2, [pc, #424]	; (80051e4 <draw_each_device+0x74c>)
 800503c:	210f      	movs	r1, #15
 800503e:	2006      	movs	r0, #6
 8005040:	f004 f94d 	bl	80092de <ssd1306_print>
        ssd1306_print_next("/", 0);
 8005044:	2100      	movs	r1, #0
 8005046:	486d      	ldr	r0, [pc, #436]	; (80051fc <draw_each_device+0x764>)
 8005048:	f004 f9a8 	bl	800939c <ssd1306_print_next>
        itoa32(p_gps_num->sat_view, &buf[0]);
 800504c:	4b64      	ldr	r3, [pc, #400]	; (80051e0 <draw_each_device+0x748>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005054:	4963      	ldr	r1, [pc, #396]	; (80051e4 <draw_each_device+0x74c>)
 8005056:	4618      	mov	r0, r3
 8005058:	f003 fbde 	bl	8008818 <itoa32>
        ssd1306_print_next(&buf[0], 0);
 800505c:	2100      	movs	r1, #0
 800505e:	4861      	ldr	r0, [pc, #388]	; (80051e4 <draw_each_device+0x74c>)
 8005060:	f004 f99c 	bl	800939c <ssd1306_print_next>
        
        if (pp_dev_aux[device_number]->timeout_flag == 1)
 8005064:	4b66      	ldr	r3, [pc, #408]	; (8005200 <draw_each_device+0x768>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4b66      	ldr	r3, [pc, #408]	; (8005204 <draw_each_device+0x76c>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	7b1b      	ldrb	r3, [r3, #12]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d106      	bne.n	8005086 <draw_each_device+0x5ee>
        {
        	ssd1306_print(7, 0, "TOC", 1);
 8005078:	2301      	movs	r3, #1
 800507a:	4a63      	ldr	r2, [pc, #396]	; (8005208 <draw_each_device+0x770>)
 800507c:	2100      	movs	r1, #0
 800507e:	2007      	movs	r0, #7
 8005080:	f004 f92d 	bl	80092de <ssd1306_print>
 8005084:	e005      	b.n	8005092 <draw_each_device+0x5fa>
        }
        else
        {
        	ssd1306_print(7, 0, "TOC", 0);
 8005086:	2300      	movs	r3, #0
 8005088:	4a5f      	ldr	r2, [pc, #380]	; (8005208 <draw_each_device+0x770>)
 800508a:	2100      	movs	r1, #0
 800508c:	2007      	movs	r0, #7
 800508e:	f004 f926 	bl	80092de <ssd1306_print>
        }
        convert_timeout(pp_dev_aux[device_number]->timeout, &buf[0]);
 8005092:	4b5b      	ldr	r3, [pc, #364]	; (8005200 <draw_each_device+0x768>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b5b      	ldr	r3, [pc, #364]	; (8005204 <draw_each_device+0x76c>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4950      	ldr	r1, [pc, #320]	; (80051e4 <draw_each_device+0x74c>)
 80050a4:	4618      	mov	r0, r3
 80050a6:	f003 f893 	bl	80081d0 <convert_timeout>
        ssd1306_print(7, 4, &buf[0], 0);
 80050aa:	2300      	movs	r3, #0
 80050ac:	4a4d      	ldr	r2, [pc, #308]	; (80051e4 <draw_each_device+0x74c>)
 80050ae:	2104      	movs	r1, #4
 80050b0:	2007      	movs	r0, #7
 80050b2:	f004 f914 	bl	80092de <ssd1306_print>
        
        ssd1306_print(7, 11, "BAT", 0);
 80050b6:	2300      	movs	r3, #0
 80050b8:	4a54      	ldr	r2, [pc, #336]	; (800520c <draw_each_device+0x774>)
 80050ba:	210b      	movs	r1, #11
 80050bc:	2007      	movs	r0, #7
 80050be:	f004 f90e 	bl	80092de <ssd1306_print>
        ftoa32(get_bat_voltage(), 2, &buf[0]);
 80050c2:	f7fc fa21 	bl	8001508 <get_bat_voltage>
 80050c6:	4603      	mov	r3, r0
 80050c8:	4a46      	ldr	r2, [pc, #280]	; (80051e4 <draw_each_device+0x74c>)
 80050ca:	2102      	movs	r1, #2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f003 fa53 	bl	8008578 <ftoa32>
        ssd1306_print(7, 15, &buf[0], 0);
 80050d2:	2300      	movs	r3, #0
 80050d4:	4a43      	ldr	r2, [pc, #268]	; (80051e4 <draw_each_device+0x74c>)
 80050d6:	210f      	movs	r1, #15
 80050d8:	2007      	movs	r0, #7
 80050da:	f004 f900 	bl	80092de <ssd1306_print>
        ssd1306_char('V', 0);
 80050de:	2100      	movs	r1, #0
 80050e0:	2056      	movs	r0, #86	; 0x56
 80050e2:	f004 f899 	bl	8009218 <ssd1306_char>
 80050e6:	e37a      	b.n	80057de <draw_each_device+0xd46>
    }
    else                                    //if not me
    {
        ssd1306_print(0, 1, "#", 0);
 80050e8:	2300      	movs	r3, #0
 80050ea:	4a49      	ldr	r2, [pc, #292]	; (8005210 <draw_each_device+0x778>)
 80050ec:	2101      	movs	r1, #1
 80050ee:	2000      	movs	r0, #0
 80050f0:	f004 f8f5 	bl	80092de <ssd1306_print>
        itoa32(current_each_device, &buf[0]);
 80050f4:	4b47      	ldr	r3, [pc, #284]	; (8005214 <draw_each_device+0x77c>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	493a      	ldr	r1, [pc, #232]	; (80051e4 <draw_each_device+0x74c>)
 80050fa:	4618      	mov	r0, r3
 80050fc:	f003 fb8c 	bl	8008818 <itoa32>
        ssd1306_print(0, 2, &buf[0], 0);
 8005100:	2300      	movs	r3, #0
 8005102:	4a38      	ldr	r2, [pc, #224]	; (80051e4 <draw_each_device+0x74c>)
 8005104:	2102      	movs	r1, #2
 8005106:	2000      	movs	r0, #0
 8005108:	f004 f8e9 	bl	80092de <ssd1306_print>
        
        ssd1306_char_pos(0, 4, pp_gps_air[current_each_device]->device_id[0], 0);
 800510c:	4b42      	ldr	r3, [pc, #264]	; (8005218 <draw_each_device+0x780>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b40      	ldr	r3, [pc, #256]	; (8005214 <draw_each_device+0x77c>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	781a      	ldrb	r2, [r3, #0]
 800511c:	2300      	movs	r3, #0
 800511e:	2104      	movs	r1, #4
 8005120:	2000      	movs	r0, #0
 8005122:	f004 f8bd 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_char_pos(0, 5, pp_gps_air[current_each_device]->device_id[1], 0);
 8005126:	4b3c      	ldr	r3, [pc, #240]	; (8005218 <draw_each_device+0x780>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4b3a      	ldr	r3, [pc, #232]	; (8005214 <draw_each_device+0x77c>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	785a      	ldrb	r2, [r3, #1]
 8005136:	2300      	movs	r3, #0
 8005138:	2105      	movs	r1, #5
 800513a:	2000      	movs	r0, #0
 800513c:	f004 f8b0 	bl	80092a0 <ssd1306_char_pos>
        
        if (pp_dev_aux[current_each_device]->memory_point_flag == 1) //print memory point name
 8005140:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <draw_each_device+0x768>)
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	4b33      	ldr	r3, [pc, #204]	; (8005214 <draw_each_device+0x77c>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	7b9b      	ldrb	r3, [r3, #14]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d10d      	bne.n	8005170 <draw_each_device+0x6d8>
        {
        	ssd1306_print(0, 7, pp_dev_aux[current_each_device]->point_name, 0);
 8005154:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <draw_each_device+0x768>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b2e      	ldr	r3, [pc, #184]	; (8005214 <draw_each_device+0x77c>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f103 020f 	add.w	r2, r3, #15
 8005166:	2300      	movs	r3, #0
 8005168:	2107      	movs	r1, #7
 800516a:	2000      	movs	r0, #0
 800516c:	f004 f8b7 	bl	80092de <ssd1306_print>
        }

        ssd1306_print(1, 0, "LAT", 0);
 8005170:	2300      	movs	r3, #0
 8005172:	4a2a      	ldr	r2, [pc, #168]	; (800521c <draw_each_device+0x784>)
 8005174:	2100      	movs	r1, #0
 8005176:	2001      	movs	r0, #1
 8005178:	f004 f8b1 	bl	80092de <ssd1306_print>
        ftoa32(pp_gps_air[current_each_device]->latitude.as_float, 6, &buf[0]);
 800517c:	4b26      	ldr	r3, [pc, #152]	; (8005218 <draw_each_device+0x780>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <draw_each_device+0x77c>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <draw_each_device+0x74c>)
 800518e:	2106      	movs	r1, #6
 8005190:	4618      	mov	r0, r3
 8005192:	f003 f9f1 	bl	8008578 <ftoa32>
        ssd1306_print_viceversa(1, 14, &buf[0], 0);
 8005196:	2300      	movs	r3, #0
 8005198:	4a12      	ldr	r2, [pc, #72]	; (80051e4 <draw_each_device+0x74c>)
 800519a:	210e      	movs	r1, #14
 800519c:	2001      	movs	r0, #1
 800519e:	f004 f8c1 	bl	8009324 <ssd1306_print_viceversa>
        if (pp_gps_air[current_each_device]->latitude.as_float >= 0)
 80051a2:	4b1d      	ldr	r3, [pc, #116]	; (8005218 <draw_each_device+0x780>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <draw_each_device+0x77c>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fb ff9e 	bl	80010f8 <__aeabi_fcmpge>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d030      	beq.n	8005224 <draw_each_device+0x78c>
        {
            ssd1306_char('+', 0);
 80051c2:	2100      	movs	r1, #0
 80051c4:	202b      	movs	r0, #43	; 0x2b
 80051c6:	f004 f827 	bl	8009218 <ssd1306_char>
            ssd1306_print(1, 16, "(N)", 0);
 80051ca:	2300      	movs	r3, #0
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <draw_each_device+0x788>)
 80051ce:	2110      	movs	r1, #16
 80051d0:	2001      	movs	r0, #1
 80051d2:	f004 f884 	bl	80092de <ssd1306_print>
 80051d6:	e02b      	b.n	8005230 <draw_each_device+0x798>
 80051d8:	0800ca68 	.word	0x0800ca68
 80051dc:	0800ca6c 	.word	0x0800ca6c
 80051e0:	20000614 	.word	0x20000614
 80051e4:	20000810 	.word	0x20000810
 80051e8:	0800ca70 	.word	0x0800ca70
 80051ec:	0800ca74 	.word	0x0800ca74
 80051f0:	41200000 	.word	0x41200000
 80051f4:	0800ca78 	.word	0x0800ca78
 80051f8:	0800ca7c 	.word	0x0800ca7c
 80051fc:	0800ca80 	.word	0x0800ca80
 8005200:	2000083c 	.word	0x2000083c
 8005204:	20000738 	.word	0x20000738
 8005208:	0800ca84 	.word	0x0800ca84
 800520c:	0800ca88 	.word	0x0800ca88
 8005210:	0800ca1c 	.word	0x0800ca1c
 8005214:	20000032 	.word	0x20000032
 8005218:	20000804 	.word	0x20000804
 800521c:	0800ca34 	.word	0x0800ca34
 8005220:	0800ca38 	.word	0x0800ca38
        }
        else
        {
            ssd1306_print(1, 16, "(S)", 0);
 8005224:	2300      	movs	r3, #0
 8005226:	4ab5      	ldr	r2, [pc, #724]	; (80054fc <draw_each_device+0xa64>)
 8005228:	2110      	movs	r1, #16
 800522a:	2001      	movs	r0, #1
 800522c:	f004 f857 	bl	80092de <ssd1306_print>
        }
        
        ssd1306_print(2, 0, "LON", 0);
 8005230:	2300      	movs	r3, #0
 8005232:	4ab3      	ldr	r2, [pc, #716]	; (8005500 <draw_each_device+0xa68>)
 8005234:	2100      	movs	r1, #0
 8005236:	2002      	movs	r0, #2
 8005238:	f004 f851 	bl	80092de <ssd1306_print>
        ftoa32(pp_gps_air[current_each_device]->longitude.as_float, 6, &buf[0]);
 800523c:	4bb1      	ldr	r3, [pc, #708]	; (8005504 <draw_each_device+0xa6c>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	4bb1      	ldr	r3, [pc, #708]	; (8005508 <draw_each_device+0xa70>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	4aaf      	ldr	r2, [pc, #700]	; (800550c <draw_each_device+0xa74>)
 800524e:	2106      	movs	r1, #6
 8005250:	4618      	mov	r0, r3
 8005252:	f003 f991 	bl	8008578 <ftoa32>
        ssd1306_print_viceversa(2, 14, &buf[0], 0);
 8005256:	2300      	movs	r3, #0
 8005258:	4aac      	ldr	r2, [pc, #688]	; (800550c <draw_each_device+0xa74>)
 800525a:	210e      	movs	r1, #14
 800525c:	2002      	movs	r0, #2
 800525e:	f004 f861 	bl	8009324 <ssd1306_print_viceversa>
        if (pp_gps_air[current_each_device]->longitude.as_float >= 0)
 8005262:	4ba8      	ldr	r3, [pc, #672]	; (8005504 <draw_each_device+0xa6c>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	4ba8      	ldr	r3, [pc, #672]	; (8005508 <draw_each_device+0xa70>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f04f 0100 	mov.w	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f7fb ff3e 	bl	80010f8 <__aeabi_fcmpge>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <draw_each_device+0x800>
        {
            ssd1306_char('+', 0);
 8005282:	2100      	movs	r1, #0
 8005284:	202b      	movs	r0, #43	; 0x2b
 8005286:	f003 ffc7 	bl	8009218 <ssd1306_char>
            ssd1306_print(2, 16, "(E)", 0);
 800528a:	2300      	movs	r3, #0
 800528c:	4aa0      	ldr	r2, [pc, #640]	; (8005510 <draw_each_device+0xa78>)
 800528e:	2110      	movs	r1, #16
 8005290:	2002      	movs	r0, #2
 8005292:	f004 f824 	bl	80092de <ssd1306_print>
 8005296:	e005      	b.n	80052a4 <draw_each_device+0x80c>
        }
        else
        {
            ssd1306_print(2, 16, "(W)", 0);
 8005298:	2300      	movs	r3, #0
 800529a:	4a9e      	ldr	r2, [pc, #632]	; (8005514 <draw_each_device+0xa7c>)
 800529c:	2110      	movs	r1, #16
 800529e:	2002      	movs	r0, #2
 80052a0:	f004 f81d 	bl	80092de <ssd1306_print>
        }
        
        ssd1306_print(3, 0, "ALT", 0);
 80052a4:	2300      	movs	r3, #0
 80052a6:	4a9c      	ldr	r2, [pc, #624]	; (8005518 <draw_each_device+0xa80>)
 80052a8:	2100      	movs	r1, #0
 80052aa:	2003      	movs	r0, #3
 80052ac:	f004 f817 	bl	80092de <ssd1306_print>
        itoa32(pp_gps_air[current_each_device]->altitude.as_integer, &buf[0]);
 80052b0:	4b94      	ldr	r3, [pc, #592]	; (8005504 <draw_each_device+0xa6c>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b94      	ldr	r3, [pc, #592]	; (8005508 <draw_each_device+0xa70>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80052c2:	4992      	ldr	r1, [pc, #584]	; (800550c <draw_each_device+0xa74>)
 80052c4:	4618      	mov	r0, r3
 80052c6:	f003 faa7 	bl	8008818 <itoa32>
        ssd1306_print(3, 4, &buf[0], 0);
 80052ca:	2300      	movs	r3, #0
 80052cc:	4a8f      	ldr	r2, [pc, #572]	; (800550c <draw_each_device+0xa74>)
 80052ce:	2104      	movs	r1, #4
 80052d0:	2003      	movs	r0, #3
 80052d2:	f004 f804 	bl	80092de <ssd1306_print>
        ssd1306_print_next("m", 0);
 80052d6:	2100      	movs	r1, #0
 80052d8:	4890      	ldr	r0, [pc, #576]	; (800551c <draw_each_device+0xa84>)
 80052da:	f004 f85f 	bl	800939c <ssd1306_print_next>
        
        
        ssd1306_print(3, 11, "DLT", 0);
 80052de:	2300      	movs	r3, #0
 80052e0:	4a8f      	ldr	r2, [pc, #572]	; (8005520 <draw_each_device+0xa88>)
 80052e2:	210b      	movs	r1, #11
 80052e4:	2003      	movs	r0, #3
 80052e6:	f003 fffa 	bl	80092de <ssd1306_print>
        tmpi16 = pp_gps_rel[current_each_device]->altitude_diff;
 80052ea:	4b8e      	ldr	r3, [pc, #568]	; (8005524 <draw_each_device+0xa8c>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b86      	ldr	r3, [pc, #536]	; (8005508 <draw_each_device+0xa70>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80052fc:	4b8a      	ldr	r3, [pc, #552]	; (8005528 <draw_each_device+0xa90>)
 80052fe:	801a      	strh	r2, [r3, #0]
        
        if (tmpi16 < 0)
 8005300:	4b89      	ldr	r3, [pc, #548]	; (8005528 <draw_each_device+0xa90>)
 8005302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005306:	2b00      	cmp	r3, #0
 8005308:	da0f      	bge.n	800532a <draw_each_device+0x892>
        {
            tmpi16 *= -1;
 800530a:	4b87      	ldr	r3, [pc, #540]	; (8005528 <draw_each_device+0xa90>)
 800530c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005310:	b29b      	uxth	r3, r3
 8005312:	425b      	negs	r3, r3
 8005314:	b29b      	uxth	r3, r3
 8005316:	b21a      	sxth	r2, r3
 8005318:	4b83      	ldr	r3, [pc, #524]	; (8005528 <draw_each_device+0xa90>)
 800531a:	801a      	strh	r2, [r3, #0]
            ssd1306_char_pos(3, 14, ' ', 0);
 800531c:	2300      	movs	r3, #0
 800531e:	2220      	movs	r2, #32
 8005320:	210e      	movs	r1, #14
 8005322:	2003      	movs	r0, #3
 8005324:	f003 ffbc 	bl	80092a0 <ssd1306_char_pos>
 8005328:	e011      	b.n	800534e <draw_each_device+0x8b6>
        }
        else if (tmpi16 > 0)
 800532a:	4b7f      	ldr	r3, [pc, #508]	; (8005528 <draw_each_device+0xa90>)
 800532c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005330:	2b00      	cmp	r3, #0
 8005332:	dd06      	ble.n	8005342 <draw_each_device+0x8aa>
        {
            ssd1306_char_pos(3, 15, '+', 0);
 8005334:	2300      	movs	r3, #0
 8005336:	222b      	movs	r2, #43	; 0x2b
 8005338:	210f      	movs	r1, #15
 800533a:	2003      	movs	r0, #3
 800533c:	f003 ffb0 	bl	80092a0 <ssd1306_char_pos>
 8005340:	e005      	b.n	800534e <draw_each_device+0x8b6>
        }
        else
        {
            ssd1306_char_pos(3, 14, ' ', 0);
 8005342:	2300      	movs	r3, #0
 8005344:	2220      	movs	r2, #32
 8005346:	210e      	movs	r1, #14
 8005348:	2003      	movs	r0, #3
 800534a:	f003 ffa9 	bl	80092a0 <ssd1306_char_pos>
        }
        
        if (tmpi16 < 10000)           //0-9999 m
 800534e:	4b76      	ldr	r3, [pc, #472]	; (8005528 <draw_each_device+0xa90>)
 8005350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005354:	f242 720f 	movw	r2, #9999	; 0x270f
 8005358:	4293      	cmp	r3, r2
 800535a:	dc15      	bgt.n	8005388 <draw_each_device+0x8f0>
        {
            itoa32(pp_gps_rel[current_each_device]->altitude_diff, &buf[0]);
 800535c:	4b71      	ldr	r3, [pc, #452]	; (8005524 <draw_each_device+0xa8c>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4b69      	ldr	r3, [pc, #420]	; (8005508 <draw_each_device+0xa70>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800536e:	4967      	ldr	r1, [pc, #412]	; (800550c <draw_each_device+0xa74>)
 8005370:	4618      	mov	r0, r3
 8005372:	f003 fa51 	bl	8008818 <itoa32>
            ssd1306_print_next(&buf[0], 0);
 8005376:	2100      	movs	r1, #0
 8005378:	4864      	ldr	r0, [pc, #400]	; (800550c <draw_each_device+0xa74>)
 800537a:	f004 f80f 	bl	800939c <ssd1306_print_next>
            ssd1306_print_next("m", 0);
 800537e:	2100      	movs	r1, #0
 8005380:	4866      	ldr	r0, [pc, #408]	; (800551c <draw_each_device+0xa84>)
 8005382:	f004 f80b 	bl	800939c <ssd1306_print_next>
 8005386:	e028      	b.n	80053da <draw_each_device+0x942>
        }
        else                          // >=10000 km
        {
            tmpf = pp_gps_rel[current_each_device]->altitude_diff / 1000.0;
 8005388:	4b66      	ldr	r3, [pc, #408]	; (8005524 <draw_each_device+0xa8c>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b5e      	ldr	r3, [pc, #376]	; (8005508 <draw_each_device+0xa70>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fb f83a 	bl	8000414 <__aeabi_i2d>
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	4b61      	ldr	r3, [pc, #388]	; (800552c <draw_each_device+0xa94>)
 80053a6:	f7fb f9c9 	bl	800073c <__aeabi_ddiv>
 80053aa:	4603      	mov	r3, r0
 80053ac:	460c      	mov	r4, r1
 80053ae:	4618      	mov	r0, r3
 80053b0:	4621      	mov	r1, r4
 80053b2:	f7fb fb91 	bl	8000ad8 <__aeabi_d2f>
 80053b6:	4602      	mov	r2, r0
 80053b8:	4b5d      	ldr	r3, [pc, #372]	; (8005530 <draw_each_device+0xa98>)
 80053ba:	601a      	str	r2, [r3, #0]
            ftoa32(tmpf, 1, &buf[0]);
 80053bc:	4b5c      	ldr	r3, [pc, #368]	; (8005530 <draw_each_device+0xa98>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a52      	ldr	r2, [pc, #328]	; (800550c <draw_each_device+0xa74>)
 80053c2:	2101      	movs	r1, #1
 80053c4:	4618      	mov	r0, r3
 80053c6:	f003 f8d7 	bl	8008578 <ftoa32>
            ssd1306_print_next(&buf[0], 0);
 80053ca:	2100      	movs	r1, #0
 80053cc:	484f      	ldr	r0, [pc, #316]	; (800550c <draw_each_device+0xa74>)
 80053ce:	f003 ffe5 	bl	800939c <ssd1306_print_next>
            ssd1306_print_next("k", 0);
 80053d2:	2100      	movs	r1, #0
 80053d4:	4857      	ldr	r0, [pc, #348]	; (8005534 <draw_each_device+0xa9c>)
 80053d6:	f003 ffe1 	bl	800939c <ssd1306_print_next>
        }
        
        if (pp_dev_aux[current_each_device]->memory_point_flag == 0)
 80053da:	4b57      	ldr	r3, [pc, #348]	; (8005538 <draw_each_device+0xaa0>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b4a      	ldr	r3, [pc, #296]	; (8005508 <draw_each_device+0xa70>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	7b9b      	ldrb	r3, [r3, #14]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d11b      	bne.n	8005426 <draw_each_device+0x98e>
        {
			ssd1306_print(4, 0, "COG", 0);
 80053ee:	2300      	movs	r3, #0
 80053f0:	4a52      	ldr	r2, [pc, #328]	; (800553c <draw_each_device+0xaa4>)
 80053f2:	2100      	movs	r1, #0
 80053f4:	2004      	movs	r0, #4
 80053f6:	f003 ff72 	bl	80092de <ssd1306_print>
			itoa32(pp_gps_air[current_each_device]->course.as_integer, &buf[0]);
 80053fa:	4b42      	ldr	r3, [pc, #264]	; (8005504 <draw_each_device+0xa6c>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4b42      	ldr	r3, [pc, #264]	; (8005508 <draw_each_device+0xa70>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	8a1b      	ldrh	r3, [r3, #16]
 800540a:	4940      	ldr	r1, [pc, #256]	; (800550c <draw_each_device+0xa74>)
 800540c:	4618      	mov	r0, r3
 800540e:	f003 fa03 	bl	8008818 <itoa32>
			ssd1306_print(4, 4, &buf[0], 0);
 8005412:	2300      	movs	r3, #0
 8005414:	4a3d      	ldr	r2, [pc, #244]	; (800550c <draw_each_device+0xa74>)
 8005416:	2104      	movs	r1, #4
 8005418:	2004      	movs	r0, #4
 800541a:	f003 ff60 	bl	80092de <ssd1306_print>
			ssd1306_char(SYMB_DEGREE, 0);
 800541e:	2100      	movs	r1, #0
 8005420:	208d      	movs	r0, #141	; 0x8d
 8005422:	f003 fef9 	bl	8009218 <ssd1306_char>
        }
        
        ssd1306_print(4, 11, "BRG", 0);
 8005426:	2300      	movs	r3, #0
 8005428:	4a45      	ldr	r2, [pc, #276]	; (8005540 <draw_each_device+0xaa8>)
 800542a:	210b      	movs	r1, #11
 800542c:	2004      	movs	r0, #4
 800542e:	f003 ff56 	bl	80092de <ssd1306_print>
        itoa32(pp_gps_rel[current_each_device]->heading, &buf[0]);
 8005432:	4b3c      	ldr	r3, [pc, #240]	; (8005524 <draw_each_device+0xa8c>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b34      	ldr	r3, [pc, #208]	; (8005508 <draw_each_device+0xa70>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	889b      	ldrh	r3, [r3, #4]
 8005442:	4932      	ldr	r1, [pc, #200]	; (800550c <draw_each_device+0xa74>)
 8005444:	4618      	mov	r0, r3
 8005446:	f003 f9e7 	bl	8008818 <itoa32>
        ssd1306_print(4, 15, &buf[0], 0);
 800544a:	2300      	movs	r3, #0
 800544c:	4a2f      	ldr	r2, [pc, #188]	; (800550c <draw_each_device+0xa74>)
 800544e:	210f      	movs	r1, #15
 8005450:	2004      	movs	r0, #4
 8005452:	f003 ff44 	bl	80092de <ssd1306_print>
        ssd1306_char(SYMB_DEGREE, 0);
 8005456:	2100      	movs	r1, #0
 8005458:	208d      	movs	r0, #141	; 0x8d
 800545a:	f003 fedd 	bl	8009218 <ssd1306_char>
        
        if (pp_dev_aux[current_each_device]->memory_point_flag == 0)
 800545e:	4b36      	ldr	r3, [pc, #216]	; (8005538 <draw_each_device+0xaa0>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4b29      	ldr	r3, [pc, #164]	; (8005508 <draw_each_device+0xa70>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	7b9b      	ldrb	r3, [r3, #14]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d11b      	bne.n	80054aa <draw_each_device+0xa12>
        {
			ssd1306_print(5, 0, "SOG", 0);
 8005472:	2300      	movs	r3, #0
 8005474:	4a33      	ldr	r2, [pc, #204]	; (8005544 <draw_each_device+0xaac>)
 8005476:	2100      	movs	r1, #0
 8005478:	2005      	movs	r0, #5
 800547a:	f003 ff30 	bl	80092de <ssd1306_print>
			itoa32(pp_gps_air[current_each_device]->speed, &buf[0]);
 800547e:	4b21      	ldr	r3, [pc, #132]	; (8005504 <draw_each_device+0xa6c>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4b21      	ldr	r3, [pc, #132]	; (8005508 <draw_each_device+0xa70>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	7b9b      	ldrb	r3, [r3, #14]
 800548e:	491f      	ldr	r1, [pc, #124]	; (800550c <draw_each_device+0xa74>)
 8005490:	4618      	mov	r0, r3
 8005492:	f003 f9c1 	bl	8008818 <itoa32>
			ssd1306_print(5, 4, &buf[0], 0);
 8005496:	2300      	movs	r3, #0
 8005498:	4a1c      	ldr	r2, [pc, #112]	; (800550c <draw_each_device+0xa74>)
 800549a:	2104      	movs	r1, #4
 800549c:	2005      	movs	r0, #5
 800549e:	f003 ff1e 	bl	80092de <ssd1306_print>
			ssd1306_print_next("kph", 0);
 80054a2:	2100      	movs	r1, #0
 80054a4:	4828      	ldr	r0, [pc, #160]	; (8005548 <draw_each_device+0xab0>)
 80054a6:	f003 ff79 	bl	800939c <ssd1306_print_next>
        }
        
        
        ssd1306_print(5, 11, "DST", 0);
 80054aa:	2300      	movs	r3, #0
 80054ac:	4a27      	ldr	r2, [pc, #156]	; (800554c <draw_each_device+0xab4>)
 80054ae:	210b      	movs	r1, #11
 80054b0:	2005      	movs	r0, #5
 80054b2:	f003 ff14 	bl	80092de <ssd1306_print>
        
        if (pp_gps_rel[current_each_device]->distance < 100000)           // 0-99999 m
 80054b6:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <draw_each_device+0xa8c>)
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <draw_each_device+0xa70>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a22      	ldr	r2, [pc, #136]	; (8005550 <draw_each_device+0xab8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d843      	bhi.n	8005554 <draw_each_device+0xabc>
        {
            itoa32(pp_gps_rel[current_each_device]->distance, &buf[0]);
 80054cc:	4b15      	ldr	r3, [pc, #84]	; (8005524 <draw_each_device+0xa8c>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <draw_each_device+0xa70>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	490b      	ldr	r1, [pc, #44]	; (800550c <draw_each_device+0xa74>)
 80054de:	4618      	mov	r0, r3
 80054e0:	f003 f99a 	bl	8008818 <itoa32>
            ssd1306_print(5, 15, &buf[0], 0);
 80054e4:	2300      	movs	r3, #0
 80054e6:	4a09      	ldr	r2, [pc, #36]	; (800550c <draw_each_device+0xa74>)
 80054e8:	210f      	movs	r1, #15
 80054ea:	2005      	movs	r0, #5
 80054ec:	f003 fef7 	bl	80092de <ssd1306_print>
            ssd1306_print_next("m", 0);
 80054f0:	2100      	movs	r1, #0
 80054f2:	480a      	ldr	r0, [pc, #40]	; (800551c <draw_each_device+0xa84>)
 80054f4:	f003 ff52 	bl	800939c <ssd1306_print_next>
 80054f8:	e08c      	b.n	8005614 <draw_each_device+0xb7c>
 80054fa:	bf00      	nop
 80054fc:	0800ca3c 	.word	0x0800ca3c
 8005500:	0800ca40 	.word	0x0800ca40
 8005504:	20000804 	.word	0x20000804
 8005508:	20000032 	.word	0x20000032
 800550c:	20000810 	.word	0x20000810
 8005510:	0800ca44 	.word	0x0800ca44
 8005514:	0800ca48 	.word	0x0800ca48
 8005518:	0800ca4c 	.word	0x0800ca4c
 800551c:	0800ca50 	.word	0x0800ca50
 8005520:	0800ca8c 	.word	0x0800ca8c
 8005524:	200007d0 	.word	0x200007d0
 8005528:	200007f8 	.word	0x200007f8
 800552c:	408f4000 	.word	0x408f4000
 8005530:	200007f4 	.word	0x200007f4
 8005534:	0800ca90 	.word	0x0800ca90
 8005538:	2000083c 	.word	0x2000083c
 800553c:	0800ca6c 	.word	0x0800ca6c
 8005540:	0800ca94 	.word	0x0800ca94
 8005544:	0800ca74 	.word	0x0800ca74
 8005548:	0800ca78 	.word	0x0800ca78
 800554c:	0800ca98 	.word	0x0800ca98
 8005550:	0001869f 	.word	0x0001869f
        }
        else if (pp_gps_rel[current_each_device]->distance < 1000000)     // 100-999.9 km
 8005554:	4ba8      	ldr	r3, [pc, #672]	; (80057f8 <draw_each_device+0xd60>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4ba8      	ldr	r3, [pc, #672]	; (80057fc <draw_each_device+0xd64>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4aa6      	ldr	r2, [pc, #664]	; (8005800 <draw_each_device+0xd68>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d82a      	bhi.n	80055c0 <draw_each_device+0xb28>
        {
            tmpf = pp_gps_rel[current_each_device]->distance / 1000.0;
 800556a:	4ba3      	ldr	r3, [pc, #652]	; (80057f8 <draw_each_device+0xd60>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4ba3      	ldr	r3, [pc, #652]	; (80057fc <draw_each_device+0xd64>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7fa ff3a 	bl	80003f4 <__aeabi_ui2d>
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	4b9f      	ldr	r3, [pc, #636]	; (8005804 <draw_each_device+0xd6c>)
 8005586:	f7fb f8d9 	bl	800073c <__aeabi_ddiv>
 800558a:	4603      	mov	r3, r0
 800558c:	460c      	mov	r4, r1
 800558e:	4618      	mov	r0, r3
 8005590:	4621      	mov	r1, r4
 8005592:	f7fb faa1 	bl	8000ad8 <__aeabi_d2f>
 8005596:	4602      	mov	r2, r0
 8005598:	4b9b      	ldr	r3, [pc, #620]	; (8005808 <draw_each_device+0xd70>)
 800559a:	601a      	str	r2, [r3, #0]
            ftoa32(tmpf, 1, &buf[0]);
 800559c:	4b9a      	ldr	r3, [pc, #616]	; (8005808 <draw_each_device+0xd70>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a9a      	ldr	r2, [pc, #616]	; (800580c <draw_each_device+0xd74>)
 80055a2:	2101      	movs	r1, #1
 80055a4:	4618      	mov	r0, r3
 80055a6:	f002 ffe7 	bl	8008578 <ftoa32>
            ssd1306_print(5, 15, &buf[0], 0);
 80055aa:	2300      	movs	r3, #0
 80055ac:	4a97      	ldr	r2, [pc, #604]	; (800580c <draw_each_device+0xd74>)
 80055ae:	210f      	movs	r1, #15
 80055b0:	2005      	movs	r0, #5
 80055b2:	f003 fe94 	bl	80092de <ssd1306_print>
            ssd1306_print_next("k", 0);
 80055b6:	2100      	movs	r1, #0
 80055b8:	4895      	ldr	r0, [pc, #596]	; (8005810 <draw_each_device+0xd78>)
 80055ba:	f003 feef 	bl	800939c <ssd1306_print_next>
 80055be:	e029      	b.n	8005614 <draw_each_device+0xb7c>
        }
        else                                                          // 1000-... km
        {
            tmpf = pp_gps_rel[current_each_device]->distance / 1000000.0;
 80055c0:	4b8d      	ldr	r3, [pc, #564]	; (80057f8 <draw_each_device+0xd60>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b8d      	ldr	r3, [pc, #564]	; (80057fc <draw_each_device+0xd64>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fa ff0f 	bl	80003f4 <__aeabi_ui2d>
 80055d6:	a386      	add	r3, pc, #536	; (adr r3, 80057f0 <draw_each_device+0xd58>)
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f7fb f8ae 	bl	800073c <__aeabi_ddiv>
 80055e0:	4603      	mov	r3, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	4618      	mov	r0, r3
 80055e6:	4621      	mov	r1, r4
 80055e8:	f7fb fa76 	bl	8000ad8 <__aeabi_d2f>
 80055ec:	4602      	mov	r2, r0
 80055ee:	4b86      	ldr	r3, [pc, #536]	; (8005808 <draw_each_device+0xd70>)
 80055f0:	601a      	str	r2, [r3, #0]
            ftoa32(tmpf, 1, &buf[0]);
 80055f2:	4b85      	ldr	r3, [pc, #532]	; (8005808 <draw_each_device+0xd70>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a85      	ldr	r2, [pc, #532]	; (800580c <draw_each_device+0xd74>)
 80055f8:	2101      	movs	r1, #1
 80055fa:	4618      	mov	r0, r3
 80055fc:	f002 ffbc 	bl	8008578 <ftoa32>
            ssd1306_print(5, 15, &buf[0], 0);
 8005600:	2300      	movs	r3, #0
 8005602:	4a82      	ldr	r2, [pc, #520]	; (800580c <draw_each_device+0xd74>)
 8005604:	210f      	movs	r1, #15
 8005606:	2005      	movs	r0, #5
 8005608:	f003 fe69 	bl	80092de <ssd1306_print>
            ssd1306_print_next("M", 0);
 800560c:	2100      	movs	r1, #0
 800560e:	4881      	ldr	r0, [pc, #516]	; (8005814 <draw_each_device+0xd7c>)
 8005610:	f003 fec4 	bl	800939c <ssd1306_print_next>
        }
        
        
        if (pp_dev_aux[current_each_device]->memory_point_flag == 0)
 8005614:	4b80      	ldr	r3, [pc, #512]	; (8005818 <draw_each_device+0xd80>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	4b78      	ldr	r3, [pc, #480]	; (80057fc <draw_each_device+0xd64>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	7b9b      	ldrb	r3, [r3, #14]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d131      	bne.n	800568c <draw_each_device+0xbf4>
        {
			ssd1306_print(6, 0, "FIX", 0);
 8005628:	2300      	movs	r3, #0
 800562a:	4a7c      	ldr	r2, [pc, #496]	; (800581c <draw_each_device+0xd84>)
 800562c:	2100      	movs	r1, #0
 800562e:	2006      	movs	r0, #6
 8005630:	f003 fe55 	bl	80092de <ssd1306_print>
			if (get_device_flags(current_each_device, FLAGS_GPS_FIX) == FLAG_GPS_FIX_3D)
 8005634:	4b71      	ldr	r3, [pc, #452]	; (80057fc <draw_each_device+0xd64>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2102      	movs	r1, #2
 800563a:	4618      	mov	r0, r3
 800563c:	f7fd f93e 	bl	80028bc <get_device_flags>
 8005640:	4603      	mov	r3, r0
 8005642:	2b01      	cmp	r3, #1
 8005644:	d106      	bne.n	8005654 <draw_each_device+0xbbc>
			{
				ssd1306_print(6, 4, "3D/", 0);
 8005646:	2300      	movs	r3, #0
 8005648:	4a75      	ldr	r2, [pc, #468]	; (8005820 <draw_each_device+0xd88>)
 800564a:	2104      	movs	r1, #4
 800564c:	2006      	movs	r0, #6
 800564e:	f003 fe46 	bl	80092de <ssd1306_print>
 8005652:	e005      	b.n	8005660 <draw_each_device+0xbc8>
			}
			else
			{
				ssd1306_print(6, 4, "2D/", 0);
 8005654:	2300      	movs	r3, #0
 8005656:	4a73      	ldr	r2, [pc, #460]	; (8005824 <draw_each_device+0xd8c>)
 8005658:	2104      	movs	r1, #4
 800565a:	2006      	movs	r0, #6
 800565c:	f003 fe3f 	bl	80092de <ssd1306_print>
			}

			if (get_device_flags(current_each_device, FLAGS_PDOP) == FLAG_PDOP_GOOD)
 8005660:	4b66      	ldr	r3, [pc, #408]	; (80057fc <draw_each_device+0xd64>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2103      	movs	r1, #3
 8005666:	4618      	mov	r0, r3
 8005668:	f7fd f928 	bl	80028bc <get_device_flags>
 800566c:	4603      	mov	r3, r0
 800566e:	2b01      	cmp	r3, #1
 8005670:	d106      	bne.n	8005680 <draw_each_device+0xbe8>
			{
				ssd1306_print(6, 7, "HI", 0);
 8005672:	2300      	movs	r3, #0
 8005674:	4a6c      	ldr	r2, [pc, #432]	; (8005828 <draw_each_device+0xd90>)
 8005676:	2107      	movs	r1, #7
 8005678:	2006      	movs	r0, #6
 800567a:	f003 fe30 	bl	80092de <ssd1306_print>
 800567e:	e005      	b.n	800568c <draw_each_device+0xbf4>
			}
			else
			{
				ssd1306_print(6, 7, "LO", 0);
 8005680:	2300      	movs	r3, #0
 8005682:	4a6a      	ldr	r2, [pc, #424]	; (800582c <draw_each_device+0xd94>)
 8005684:	2107      	movs	r1, #7
 8005686:	2006      	movs	r0, #6
 8005688:	f003 fe29 	bl	80092de <ssd1306_print>
			}
        }
        

        if (pp_dev_aux[current_each_device]->memory_point_flag == 0)
 800568c:	4b62      	ldr	r3, [pc, #392]	; (8005818 <draw_each_device+0xd80>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	4b5a      	ldr	r3, [pc, #360]	; (80057fc <draw_each_device+0xd64>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	7b9b      	ldrb	r3, [r3, #14]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d13e      	bne.n	800571e <draw_each_device+0xc86>
        {
			ssd1306_print(6, 11, "BAT", 0);
 80056a0:	2300      	movs	r3, #0
 80056a2:	4a63      	ldr	r2, [pc, #396]	; (8005830 <draw_each_device+0xd98>)
 80056a4:	210b      	movs	r1, #11
 80056a6:	2006      	movs	r0, #6
 80056a8:	f003 fe19 	bl	80092de <ssd1306_print>
			switch (get_device_flags(current_each_device, FLAGS_BATTERY))
 80056ac:	4b53      	ldr	r3, [pc, #332]	; (80057fc <draw_each_device+0xd64>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2101      	movs	r1, #1
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fd f902 	bl	80028bc <get_device_flags>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d82f      	bhi.n	800571e <draw_each_device+0xc86>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <draw_each_device+0xc2c>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	08005711 	.word	0x08005711
 80056c8:	08005703 	.word	0x08005703
 80056cc:	080056f5 	.word	0x080056f5
 80056d0:	080056e7 	.word	0x080056e7
 80056d4:	080056d9 	.word	0x080056d9
			{
				case FLAG_BATTERY_75_TO_100:
					ssd1306_print(6, 15, "4/4", 0);
 80056d8:	2300      	movs	r3, #0
 80056da:	4a56      	ldr	r2, [pc, #344]	; (8005834 <draw_each_device+0xd9c>)
 80056dc:	210f      	movs	r1, #15
 80056de:	2006      	movs	r0, #6
 80056e0:	f003 fdfd 	bl	80092de <ssd1306_print>
					break;
 80056e4:	e01b      	b.n	800571e <draw_each_device+0xc86>

				case FLAG_BATTERY_50_TO_75:
					ssd1306_print(6, 15, "3/4", 0);
 80056e6:	2300      	movs	r3, #0
 80056e8:	4a53      	ldr	r2, [pc, #332]	; (8005838 <draw_each_device+0xda0>)
 80056ea:	210f      	movs	r1, #15
 80056ec:	2006      	movs	r0, #6
 80056ee:	f003 fdf6 	bl	80092de <ssd1306_print>
					break;
 80056f2:	e014      	b.n	800571e <draw_each_device+0xc86>

				case FLAG_BATTERY_25_TO_50:
					ssd1306_print(6, 15, "2/4", 0);
 80056f4:	2300      	movs	r3, #0
 80056f6:	4a51      	ldr	r2, [pc, #324]	; (800583c <draw_each_device+0xda4>)
 80056f8:	210f      	movs	r1, #15
 80056fa:	2006      	movs	r0, #6
 80056fc:	f003 fdef 	bl	80092de <ssd1306_print>
					break;
 8005700:	e00d      	b.n	800571e <draw_each_device+0xc86>

				case FLAG_BATTERY_10_TO_25:
					ssd1306_print(6, 15, "1/4", 0);
 8005702:	2300      	movs	r3, #0
 8005704:	4a4e      	ldr	r2, [pc, #312]	; (8005840 <draw_each_device+0xda8>)
 8005706:	210f      	movs	r1, #15
 8005708:	2006      	movs	r0, #6
 800570a:	f003 fde8 	bl	80092de <ssd1306_print>
					break;
 800570e:	e006      	b.n	800571e <draw_each_device+0xc86>

				case FLAG_BATTERY_0_TO_10:
					ssd1306_print(6, 15, "0/4", 0);
 8005710:	2300      	movs	r3, #0
 8005712:	4a4c      	ldr	r2, [pc, #304]	; (8005844 <draw_each_device+0xdac>)
 8005714:	210f      	movs	r1, #15
 8005716:	2006      	movs	r0, #6
 8005718:	f003 fde1 	bl	80092de <ssd1306_print>
					break;
 800571c:	bf00      	nop
			}
        }
        
        if (pp_dev_aux[current_each_device]->timeout_flag == 1)
 800571e:	4b3e      	ldr	r3, [pc, #248]	; (8005818 <draw_each_device+0xd80>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4b36      	ldr	r3, [pc, #216]	; (80057fc <draw_each_device+0xd64>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	7b1b      	ldrb	r3, [r3, #12]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d106      	bne.n	8005740 <draw_each_device+0xca8>
        {
        	ssd1306_print(7, 0, "TOC", 1);
 8005732:	2301      	movs	r3, #1
 8005734:	4a44      	ldr	r2, [pc, #272]	; (8005848 <draw_each_device+0xdb0>)
 8005736:	2100      	movs	r1, #0
 8005738:	2007      	movs	r0, #7
 800573a:	f003 fdd0 	bl	80092de <ssd1306_print>
 800573e:	e005      	b.n	800574c <draw_each_device+0xcb4>
        }
        else
        {
        	ssd1306_print(7, 0, "TOC", 0);
 8005740:	2300      	movs	r3, #0
 8005742:	4a41      	ldr	r2, [pc, #260]	; (8005848 <draw_each_device+0xdb0>)
 8005744:	2100      	movs	r1, #0
 8005746:	2007      	movs	r0, #7
 8005748:	f003 fdc9 	bl	80092de <ssd1306_print>
        }
        convert_timeout(pp_dev_aux[current_each_device]->timeout, &buf[0]);
 800574c:	4b32      	ldr	r3, [pc, #200]	; (8005818 <draw_each_device+0xd80>)
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <draw_each_device+0xd64>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	492b      	ldr	r1, [pc, #172]	; (800580c <draw_each_device+0xd74>)
 800575e:	4618      	mov	r0, r3
 8005760:	f002 fd36 	bl	80081d0 <convert_timeout>
        ssd1306_print(7, 4, &buf[0], 0);
 8005764:	2300      	movs	r3, #0
 8005766:	4a29      	ldr	r2, [pc, #164]	; (800580c <draw_each_device+0xd74>)
 8005768:	2104      	movs	r1, #4
 800576a:	2007      	movs	r0, #7
 800576c:	f003 fdb7 	bl	80092de <ssd1306_print>
        
        

		if (pp_dev_aux[current_each_device]->fence_flag)
 8005770:	4b29      	ldr	r3, [pc, #164]	; (8005818 <draw_each_device+0xd80>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4b21      	ldr	r3, [pc, #132]	; (80057fc <draw_each_device+0xd64>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	7b5b      	ldrb	r3, [r3, #13]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d006      	beq.n	8005792 <draw_each_device+0xcfa>
		{
			ssd1306_print(7, 11, "FNC", 1);		//print inverted
 8005784:	2301      	movs	r3, #1
 8005786:	4a31      	ldr	r2, [pc, #196]	; (800584c <draw_each_device+0xdb4>)
 8005788:	210b      	movs	r1, #11
 800578a:	2007      	movs	r0, #7
 800578c:	f003 fda7 	bl	80092de <ssd1306_print>
 8005790:	e005      	b.n	800579e <draw_each_device+0xd06>
		}
		else
		{
			ssd1306_print(7, 11, "FNC", 0);
 8005792:	2300      	movs	r3, #0
 8005794:	4a2d      	ldr	r2, [pc, #180]	; (800584c <draw_each_device+0xdb4>)
 8005796:	210b      	movs	r1, #11
 8005798:	2007      	movs	r0, #7
 800579a:	f003 fda0 	bl	80092de <ssd1306_print>
		}


        if (pp_dev_aux[current_each_device]->memory_point_flag == 0)
 800579e:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <draw_each_device+0xd80>)
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b16      	ldr	r3, [pc, #88]	; (80057fc <draw_each_device+0xd64>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	7b9b      	ldrb	r3, [r3, #14]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d115      	bne.n	80057de <draw_each_device+0xd46>
        {
			if (get_device_flags(current_each_device, FLAGS_ALARM) == FLAG_ALARM_ON)
 80057b2:	4b12      	ldr	r3, [pc, #72]	; (80057fc <draw_each_device+0xd64>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2104      	movs	r1, #4
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fd f87f 	bl	80028bc <get_device_flags>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d106      	bne.n	80057d2 <draw_each_device+0xd3a>
			{
				ssd1306_print(7, 15, "ALR", 1);		//print inverted
 80057c4:	2301      	movs	r3, #1
 80057c6:	4a22      	ldr	r2, [pc, #136]	; (8005850 <draw_each_device+0xdb8>)
 80057c8:	210f      	movs	r1, #15
 80057ca:	2007      	movs	r0, #7
 80057cc:	f003 fd87 	bl	80092de <ssd1306_print>
 80057d0:	e005      	b.n	80057de <draw_each_device+0xd46>
			}
			else
			{
				ssd1306_print(7, 15, "ALR", 0);
 80057d2:	2300      	movs	r3, #0
 80057d4:	4a1e      	ldr	r2, [pc, #120]	; (8005850 <draw_each_device+0xdb8>)
 80057d6:	210f      	movs	r1, #15
 80057d8:	2007      	movs	r0, #7
 80057da:	f003 fd80 	bl	80092de <ssd1306_print>
        }



    }
    ssd1306_update();
 80057de:	f003 fc57 	bl	8009090 <ssd1306_update>
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd90      	pop	{r4, r7, pc}
 80057ea:	bf00      	nop
 80057ec:	f3af 8000 	nop.w
 80057f0:	00000000 	.word	0x00000000
 80057f4:	412e8480 	.word	0x412e8480
 80057f8:	200007d0 	.word	0x200007d0
 80057fc:	20000032 	.word	0x20000032
 8005800:	000f423f 	.word	0x000f423f
 8005804:	408f4000 	.word	0x408f4000
 8005808:	200007f4 	.word	0x200007f4
 800580c:	20000810 	.word	0x20000810
 8005810:	0800ca90 	.word	0x0800ca90
 8005814:	0800ca9c 	.word	0x0800ca9c
 8005818:	2000083c 	.word	0x2000083c
 800581c:	0800ca54 	.word	0x0800ca54
 8005820:	0800caa0 	.word	0x0800caa0
 8005824:	0800caa4 	.word	0x0800caa4
 8005828:	0800caa8 	.word	0x0800caa8
 800582c:	0800caac 	.word	0x0800caac
 8005830:	0800ca88 	.word	0x0800ca88
 8005834:	0800cab0 	.word	0x0800cab0
 8005838:	0800cab4 	.word	0x0800cab4
 800583c:	0800cab8 	.word	0x0800cab8
 8005840:	0800cabc 	.word	0x0800cabc
 8005844:	0800cac0 	.word	0x0800cac0
 8005848:	0800ca84 	.word	0x0800ca84
 800584c:	0800cac4 	.word	0x0800cac4
 8005850:	0800cac8 	.word	0x0800cac8

08005854 <draw_each_device_submenu>:



void draw_each_device_submenu(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
	#define EACH_DEV_SM_ROW               (2)
	#define EACH_DEV_SM_COL               (1)

	ssd1306_clear();
 8005858:	f003 fc3a 	bl	80090d0 <ssd1306_clear>

	ssd1306_print(0, EACH_DEV_SM_COL, "DEVICE", 0);
 800585c:	2300      	movs	r3, #0
 800585e:	4a25      	ldr	r2, [pc, #148]	; (80058f4 <draw_each_device_submenu+0xa0>)
 8005860:	2101      	movs	r1, #1
 8005862:	2000      	movs	r0, #0
 8005864:	f003 fd3b 	bl	80092de <ssd1306_print>

	ssd1306_print(0, EACH_DEV_SM_COL + 7, "#", 0);
 8005868:	2300      	movs	r3, #0
 800586a:	4a23      	ldr	r2, [pc, #140]	; (80058f8 <draw_each_device_submenu+0xa4>)
 800586c:	2108      	movs	r1, #8
 800586e:	2000      	movs	r0, #0
 8005870:	f003 fd35 	bl	80092de <ssd1306_print>
    itoa32(current_each_device, &buf[0]);
 8005874:	4b21      	ldr	r3, [pc, #132]	; (80058fc <draw_each_device_submenu+0xa8>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	4921      	ldr	r1, [pc, #132]	; (8005900 <draw_each_device_submenu+0xac>)
 800587a:	4618      	mov	r0, r3
 800587c:	f002 ffcc 	bl	8008818 <itoa32>
    ssd1306_print(0, EACH_DEV_SM_COL + 8, &buf[0], 0);
 8005880:	2300      	movs	r3, #0
 8005882:	4a1f      	ldr	r2, [pc, #124]	; (8005900 <draw_each_device_submenu+0xac>)
 8005884:	2109      	movs	r1, #9
 8005886:	2000      	movs	r0, #0
 8005888:	f003 fd29 	bl	80092de <ssd1306_print>

    ssd1306_char_pos(0, EACH_DEV_SM_COL + 10, pp_gps_air[current_each_device]->device_id[0], 0);
 800588c:	4b1d      	ldr	r3, [pc, #116]	; (8005904 <draw_each_device_submenu+0xb0>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <draw_each_device_submenu+0xa8>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	781a      	ldrb	r2, [r3, #0]
 800589c:	2300      	movs	r3, #0
 800589e:	210b      	movs	r1, #11
 80058a0:	2000      	movs	r0, #0
 80058a2:	f003 fcfd 	bl	80092a0 <ssd1306_char_pos>
    ssd1306_char_pos(0, EACH_DEV_SM_COL + 11, pp_gps_air[current_each_device]->device_id[1], 0);
 80058a6:	4b17      	ldr	r3, [pc, #92]	; (8005904 <draw_each_device_submenu+0xb0>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b14      	ldr	r3, [pc, #80]	; (80058fc <draw_each_device_submenu+0xa8>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	785a      	ldrb	r2, [r3, #1]
 80058b6:	2300      	movs	r3, #0
 80058b8:	210c      	movs	r1, #12
 80058ba:	2000      	movs	r0, #0
 80058bc:	f003 fcf0 	bl	80092a0 <ssd1306_char_pos>

	ssd1306_print(EACH_DEV_SM_ROW, EACH_DEV_SM_COL, "Save", 0);
 80058c0:	2300      	movs	r3, #0
 80058c2:	4a11      	ldr	r2, [pc, #68]	; (8005908 <draw_each_device_submenu+0xb4>)
 80058c4:	2101      	movs	r1, #1
 80058c6:	2002      	movs	r0, #2
 80058c8:	f003 fd09 	bl	80092de <ssd1306_print>
	ssd1306_print(EACH_DEV_SM_ROW + 1, EACH_DEV_SM_COL, "Delete", 0);
 80058cc:	2300      	movs	r3, #0
 80058ce:	4a0f      	ldr	r2, [pc, #60]	; (800590c <draw_each_device_submenu+0xb8>)
 80058d0:	2101      	movs	r1, #1
 80058d2:	2003      	movs	r0, #3
 80058d4:	f003 fd03 	bl	80092de <ssd1306_print>
	ssd1306_print(EACH_DEV_SM_ROW + get_current_item(), EACH_DEV_SM_COL - 1, ">", 0);
 80058d8:	f7fe fc44 	bl	8004164 <get_current_item>
 80058dc:	4603      	mov	r3, r0
 80058de:	3302      	adds	r3, #2
 80058e0:	b2d8      	uxtb	r0, r3
 80058e2:	2300      	movs	r3, #0
 80058e4:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <draw_each_device_submenu+0xbc>)
 80058e6:	2100      	movs	r1, #0
 80058e8:	f003 fcf9 	bl	80092de <ssd1306_print>

	ssd1306_update();
 80058ec:	f003 fbd0 	bl	8009090 <ssd1306_update>
}
 80058f0:	bf00      	nop
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	0800cacc 	.word	0x0800cacc
 80058f8:	0800ca1c 	.word	0x0800ca1c
 80058fc:	20000032 	.word	0x20000032
 8005900:	20000810 	.word	0x20000810
 8005904:	20000804 	.word	0x20000804
 8005908:	0800cad4 	.word	0x0800cad4
 800590c:	0800cadc 	.word	0x0800cadc
 8005910:	0800ca14 	.word	0x0800ca14

08005914 <draw_delete_device>:



void draw_delete_device(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
    ssd1306_clear();
 8005918:	f003 fbda 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, 1, "Delete device", 0);
 800591c:	2300      	movs	r3, #0
 800591e:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <draw_delete_device+0xb0>)
 8005920:	2101      	movs	r1, #1
 8005922:	2000      	movs	r0, #0
 8005924:	f003 fcdb 	bl	80092de <ssd1306_print>

	ssd1306_print(0, 15, "#", 0);
 8005928:	2300      	movs	r3, #0
 800592a:	4a27      	ldr	r2, [pc, #156]	; (80059c8 <draw_delete_device+0xb4>)
 800592c:	210f      	movs	r1, #15
 800592e:	2000      	movs	r0, #0
 8005930:	f003 fcd5 	bl	80092de <ssd1306_print>
    itoa32(current_each_device, &buf[0]);
 8005934:	4b25      	ldr	r3, [pc, #148]	; (80059cc <draw_delete_device+0xb8>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	4925      	ldr	r1, [pc, #148]	; (80059d0 <draw_delete_device+0xbc>)
 800593a:	4618      	mov	r0, r3
 800593c:	f002 ff6c 	bl	8008818 <itoa32>
    ssd1306_print(0, 16, &buf[0], 0);
 8005940:	2300      	movs	r3, #0
 8005942:	4a23      	ldr	r2, [pc, #140]	; (80059d0 <draw_delete_device+0xbc>)
 8005944:	2110      	movs	r1, #16
 8005946:	2000      	movs	r0, #0
 8005948:	f003 fcc9 	bl	80092de <ssd1306_print>

    ssd1306_char_pos(0, 18, pp_gps_air[current_each_device]->device_id[0], 0);
 800594c:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <draw_delete_device+0xc0>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	4b1e      	ldr	r3, [pc, #120]	; (80059cc <draw_delete_device+0xb8>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	781a      	ldrb	r2, [r3, #0]
 800595c:	2300      	movs	r3, #0
 800595e:	2112      	movs	r1, #18
 8005960:	2000      	movs	r0, #0
 8005962:	f003 fc9d 	bl	80092a0 <ssd1306_char_pos>
    ssd1306_char_pos(0, 19, pp_gps_air[current_each_device]->device_id[1], 0);
 8005966:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <draw_delete_device+0xc0>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b18      	ldr	r3, [pc, #96]	; (80059cc <draw_delete_device+0xb8>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	785a      	ldrb	r2, [r3, #1]
 8005976:	2300      	movs	r3, #0
 8005978:	2113      	movs	r1, #19
 800597a:	2000      	movs	r0, #0
 800597c:	f003 fc90 	bl	80092a0 <ssd1306_char_pos>

    ssd1306_print_next("?", 0);
 8005980:	2100      	movs	r1, #0
 8005982:	4815      	ldr	r0, [pc, #84]	; (80059d8 <draw_delete_device+0xc4>)
 8005984:	f003 fd0a 	bl	800939c <ssd1306_print_next>


    if (current_each_device == device_number)
 8005988:	4b10      	ldr	r3, [pc, #64]	; (80059cc <draw_delete_device+0xb8>)
 800598a:	781a      	ldrb	r2, [r3, #0]
 800598c:	4b13      	ldr	r3, [pc, #76]	; (80059dc <draw_delete_device+0xc8>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d106      	bne.n	80059a2 <draw_delete_device+0x8e>
    {
    	ssd1306_print(3, 1, "Can't del yourself", 0);
 8005994:	2300      	movs	r3, #0
 8005996:	4a12      	ldr	r2, [pc, #72]	; (80059e0 <draw_delete_device+0xcc>)
 8005998:	2101      	movs	r1, #1
 800599a:	2003      	movs	r0, #3
 800599c:	f003 fc9f 	bl	80092de <ssd1306_print>
 80059a0:	e005      	b.n	80059ae <draw_delete_device+0x9a>
    }
    else
    {
		ssd1306_print(3, 1, "OK - delete", 0);
 80059a2:	2300      	movs	r3, #0
 80059a4:	4a0f      	ldr	r2, [pc, #60]	; (80059e4 <draw_delete_device+0xd0>)
 80059a6:	2101      	movs	r1, #1
 80059a8:	2003      	movs	r0, #3
 80059aa:	f003 fc98 	bl	80092de <ssd1306_print>
    }

    ssd1306_print(4, 1, "ESC - cancel", 0);
 80059ae:	2300      	movs	r3, #0
 80059b0:	4a0d      	ldr	r2, [pc, #52]	; (80059e8 <draw_delete_device+0xd4>)
 80059b2:	2101      	movs	r1, #1
 80059b4:	2004      	movs	r0, #4
 80059b6:	f003 fc92 	bl	80092de <ssd1306_print>

    ssd1306_update();
 80059ba:	f003 fb69 	bl	8009090 <ssd1306_update>
}
 80059be:	bf00      	nop
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	0800cae4 	.word	0x0800cae4
 80059c8:	0800ca1c 	.word	0x0800ca1c
 80059cc:	20000032 	.word	0x20000032
 80059d0:	20000810 	.word	0x20000810
 80059d4:	20000804 	.word	0x20000804
 80059d8:	0800caf4 	.word	0x0800caf4
 80059dc:	20000738 	.word	0x20000738
 80059e0:	0800caf8 	.word	0x0800caf8
 80059e4:	0800cb0c 	.word	0x0800cb0c
 80059e8:	0800cb18 	.word	0x0800cb18

080059ec <delete_device_ok>:



void delete_device_ok(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
	if (current_each_device != device_number)
 80059f0:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <delete_device_ok+0x50>)
 80059f2:	781a      	ldrb	r2, [r3, #0]
 80059f4:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <delete_device_ok+0x54>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d01d      	beq.n	8005a38 <delete_device_ok+0x4c>
	{
		pp_dev_aux[current_each_device]->exist_flag = 0;	//delete device just by resetting exist flag
 80059fc:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <delete_device_ok+0x58>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <delete_device_ok+0x50>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	701a      	strb	r2, [r3, #0]
		current_each_device = device_number;	//also reset the current device
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <delete_device_ok+0x54>)
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <delete_device_ok+0x50>)
 8005a14:	701a      	strb	r2, [r3, #0]
		current_radar_device = 0;				//reset current dev in radar menu
 8005a16:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <delete_device_ok+0x5c>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
		radar_list_hide[current_each_device] = 0;//reset hide flag
 8005a1c:	4b07      	ldr	r3, [pc, #28]	; (8005a3c <delete_device_ok+0x50>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	461a      	mov	r2, r3
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <delete_device_ok+0x60>)
 8005a24:	2100      	movs	r1, #0
 8005a26:	5499      	strb	r1, [r3, r2]

		reset_current_item_in_menu(M_EACH_DEVICE_SUBMENU);
 8005a28:	2004      	movs	r0, #4
 8005a2a:	f7fe fc2d 	bl	8004288 <reset_current_item_in_menu>
		current_menu = M_DEVICES;
 8005a2e:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <delete_device_ok+0x64>)
 8005a30:	2202      	movs	r2, #2
 8005a32:	701a      	strb	r2, [r3, #0]
		draw_current_menu();
 8005a34:	f7fe fc58 	bl	80042e8 <draw_current_menu>
	}
}
 8005a38:	bf00      	nop
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000032 	.word	0x20000032
 8005a40:	20000738 	.word	0x20000738
 8005a44:	2000083c 	.word	0x2000083c
 8005a48:	20000121 	.word	0x20000121
 8005a4c:	20000830 	.word	0x20000830
 8005a50:	200007fa 	.word	0x200007fa

08005a54 <draw_save_device>:



void draw_save_device(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
	#define SAVE_DEVICE_ROW               (2)
	#define SAVE_DEVICE_COL               (1)

	memcpy(point_to_save_name, point_to_save_default_name, sizeof(point_to_save_default_name)); //init default name here
 8005a5a:	4b48      	ldr	r3, [pc, #288]	; (8005b7c <draw_save_device+0x128>)
 8005a5c:	4a48      	ldr	r2, [pc, #288]	; (8005b80 <draw_save_device+0x12c>)
 8005a5e:	6810      	ldr	r0, [r2, #0]
 8005a60:	6018      	str	r0, [r3, #0]
 8005a62:	8892      	ldrh	r2, [r2, #4]
 8005a64:	809a      	strh	r2, [r3, #4]

	ssd1306_clear();
 8005a66:	f003 fb33 	bl	80090d0 <ssd1306_clear>

	ssd1306_print(0, SAVE_DEVICE_COL, "Where to save", 0);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	4a45      	ldr	r2, [pc, #276]	; (8005b84 <draw_save_device+0x130>)
 8005a6e:	2101      	movs	r1, #1
 8005a70:	2000      	movs	r0, #0
 8005a72:	f003 fc34 	bl	80092de <ssd1306_print>

	ssd1306_print(0, SAVE_DEVICE_COL + 14, "#", 0);
 8005a76:	2300      	movs	r3, #0
 8005a78:	4a43      	ldr	r2, [pc, #268]	; (8005b88 <draw_save_device+0x134>)
 8005a7a:	210f      	movs	r1, #15
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	f003 fc2e 	bl	80092de <ssd1306_print>
    itoa32(current_each_device, &buf[0]);
 8005a82:	4b42      	ldr	r3, [pc, #264]	; (8005b8c <draw_save_device+0x138>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	4942      	ldr	r1, [pc, #264]	; (8005b90 <draw_save_device+0x13c>)
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f002 fec5 	bl	8008818 <itoa32>
    ssd1306_print(0, SAVE_DEVICE_COL + 15, &buf[0], 0);
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4a3f      	ldr	r2, [pc, #252]	; (8005b90 <draw_save_device+0x13c>)
 8005a92:	2110      	movs	r1, #16
 8005a94:	2000      	movs	r0, #0
 8005a96:	f003 fc22 	bl	80092de <ssd1306_print>

    ssd1306_char_pos(0, SAVE_DEVICE_COL + 17, pp_gps_air[current_each_device]->device_id[0], 0);
 8005a9a:	4b3e      	ldr	r3, [pc, #248]	; (8005b94 <draw_save_device+0x140>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4b3b      	ldr	r3, [pc, #236]	; (8005b8c <draw_save_device+0x138>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2112      	movs	r1, #18
 8005aae:	2000      	movs	r0, #0
 8005ab0:	f003 fbf6 	bl	80092a0 <ssd1306_char_pos>
    ssd1306_char_pos(0, SAVE_DEVICE_COL + 18, pp_gps_air[current_each_device]->device_id[1], 0);
 8005ab4:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <draw_save_device+0x140>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4b34      	ldr	r3, [pc, #208]	; (8005b8c <draw_save_device+0x138>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	785a      	ldrb	r2, [r3, #1]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2113      	movs	r1, #19
 8005ac8:	2000      	movs	r0, #0
 8005aca:	f003 fbe9 	bl	80092a0 <ssd1306_char_pos>

    ssd1306_print_next("?", 0);
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4831      	ldr	r0, [pc, #196]	; (8005b98 <draw_save_device+0x144>)
 8005ad2:	f003 fc63 	bl	800939c <ssd1306_print_next>

    read_memory_slots();
 8005ad6:	f002 f911 	bl	8007cfc <read_memory_slots>

    uint8_t another_point_to_save_row = SAVE_DEVICE_ROW;
 8005ada:	2302      	movs	r3, #2
 8005adc:	71fb      	strb	r3, [r7, #7]
    uint8_t points_enlisted_cntr = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	71bb      	strb	r3, [r7, #6]

    for (uint8_t s = 1; s <= MEMORY_SLOTS_TOTAL; s++)
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	717b      	strb	r3, [r7, #5]
 8005ae6:	e027      	b.n	8005b38 <draw_save_device+0xe4>
    {
		if (pp_memory_slot[s]->exist_flag == 0)
 8005ae8:	4b2c      	ldr	r3, [pc, #176]	; (8005b9c <draw_save_device+0x148>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	797b      	ldrb	r3, [r7, #5]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d11b      	bne.n	8005b32 <draw_save_device+0xde>
		{
			point_to_save_list[s] = points_enlisted_cntr++; 		//first nonexisting point will get index 0
 8005afa:	79bb      	ldrb	r3, [r7, #6]
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	71ba      	strb	r2, [r7, #6]
 8005b00:	797a      	ldrb	r2, [r7, #5]
 8005b02:	4927      	ldr	r1, [pc, #156]	; (8005ba0 <draw_save_device+0x14c>)
 8005b04:	548b      	strb	r3, [r1, r2]

			if (current_slot_to_save == 0) //if for the first time
 8005b06:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <draw_save_device+0x150>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <draw_save_device+0xc0>
			{
				current_slot_to_save = s;
 8005b0e:	4a25      	ldr	r2, [pc, #148]	; (8005ba4 <draw_save_device+0x150>)
 8005b10:	797b      	ldrb	r3, [r7, #5]
 8005b12:	7013      	strb	r3, [r2, #0]
			}

			//Slot name
			ssd1306_print(another_point_to_save_row, SAVE_DEVICE_COL, pp_memory_slot[s]->slot_name, 0);
 8005b14:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <draw_save_device+0x148>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	797b      	ldrb	r3, [r7, #5]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	79f8      	ldrb	r0, [r7, #7]
 8005b24:	2300      	movs	r3, #0
 8005b26:	2101      	movs	r1, #1
 8005b28:	f003 fbd9 	bl	80092de <ssd1306_print>

			another_point_to_save_row++;
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	71fb      	strb	r3, [r7, #7]
    for (uint8_t s = 1; s <= MEMORY_SLOTS_TOTAL; s++)
 8005b32:	797b      	ldrb	r3, [r7, #5]
 8005b34:	3301      	adds	r3, #1
 8005b36:	717b      	strb	r3, [r7, #5]
 8005b38:	797b      	ldrb	r3, [r7, #5]
 8005b3a:	2b05      	cmp	r3, #5
 8005b3c:	d9d4      	bls.n	8005ae8 <draw_save_device+0x94>
		}
    }

    if (points_enlisted_cntr > 0)
 8005b3e:	79bb      	ldrb	r3, [r7, #6]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <draw_save_device+0x10a>
    {
    	ssd1306_print(SAVE_DEVICE_ROW + point_to_save_list[current_slot_to_save], SAVE_DEVICE_COL - 1, ">", 0);
 8005b44:	4b17      	ldr	r3, [pc, #92]	; (8005ba4 <draw_save_device+0x150>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <draw_save_device+0x14c>)
 8005b4c:	5c9b      	ldrb	r3, [r3, r2]
 8005b4e:	3302      	adds	r3, #2
 8005b50:	b2d8      	uxtb	r0, r3
 8005b52:	2300      	movs	r3, #0
 8005b54:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <draw_save_device+0x154>)
 8005b56:	2100      	movs	r1, #0
 8005b58:	f003 fbc1 	bl	80092de <ssd1306_print>
 8005b5c:	e008      	b.n	8005b70 <draw_save_device+0x11c>
    }
    else
    {
    	ssd1306_print(SAVE_DEVICE_ROW, SAVE_DEVICE_COL, "no empty slots", 0);
 8005b5e:	2300      	movs	r3, #0
 8005b60:	4a12      	ldr	r2, [pc, #72]	; (8005bac <draw_save_device+0x158>)
 8005b62:	2101      	movs	r1, #1
 8005b64:	2002      	movs	r0, #2
 8005b66:	f003 fbba 	bl	80092de <ssd1306_print>
    	current_slot_to_save = 0;
 8005b6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <draw_save_device+0x150>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	701a      	strb	r2, [r3, #0]
    }

    ssd1306_update();
 8005b70:	f003 fa8e 	bl	8009090 <ssd1306_update>
}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000828 	.word	0x20000828
 8005b80:	0800d260 	.word	0x0800d260
 8005b84:	0800cb28 	.word	0x0800cb28
 8005b88:	0800ca1c 	.word	0x0800ca1c
 8005b8c:	20000032 	.word	0x20000032
 8005b90:	20000810 	.word	0x20000810
 8005b94:	20000804 	.word	0x20000804
 8005b98:	0800caf4 	.word	0x0800caf4
 8005b9c:	200007d4 	.word	0x200007d4
 8005ba0:	200007fc 	.word	0x200007fc
 8005ba4:	20000123 	.word	0x20000123
 8005ba8:	0800ca14 	.word	0x0800ca14
 8005bac:	0800cb38 	.word	0x0800cb38

08005bb0 <draw_save_device_as>:



void draw_save_device_as(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
	#define SAVE_DEV_AS_ROW                 (2)
	#define SAVE_DEV_AS_COL                 (1)
	#define SAVE_DEV_AS_PARAM_COL           (11)

	ssd1306_clear();
 8005bb4:	f003 fa8c 	bl	80090d0 <ssd1306_clear>
	ssd1306_print(0, SAVE_DEV_AS_COL, "Set point name", 0);
 8005bb8:	2300      	movs	r3, #0
 8005bba:	4a12      	ldr	r2, [pc, #72]	; (8005c04 <draw_save_device_as+0x54>)
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	f003 fb8d 	bl	80092de <ssd1306_print>

	ssd1306_print(SAVE_DEV_AS_ROW, SAVE_DEV_AS_COL, "Name", 0);
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4a10      	ldr	r2, [pc, #64]	; (8005c08 <draw_save_device_as+0x58>)
 8005bc8:	2101      	movs	r1, #1
 8005bca:	2002      	movs	r0, #2
 8005bcc:	f003 fb87 	bl	80092de <ssd1306_print>
	ssd1306_print(SAVE_DEV_AS_ROW, SAVE_DEV_AS_PARAM_COL, point_to_save_name, 0);
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4a0e      	ldr	r2, [pc, #56]	; (8005c0c <draw_save_device_as+0x5c>)
 8005bd4:	210b      	movs	r1, #11
 8005bd6:	2002      	movs	r0, #2
 8005bd8:	f003 fb81 	bl	80092de <ssd1306_print>
	ssd1306_print(SAVE_DEV_AS_ROW + 1, SAVE_DEV_AS_PARAM_COL + point_name_current_symbol, "^", 0);
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <draw_save_device_as+0x60>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	330b      	adds	r3, #11
 8005be2:	b2d9      	uxtb	r1, r3
 8005be4:	2300      	movs	r3, #0
 8005be6:	4a0b      	ldr	r2, [pc, #44]	; (8005c14 <draw_save_device_as+0x64>)
 8005be8:	2003      	movs	r0, #3
 8005bea:	f003 fb78 	bl	80092de <ssd1306_print>
	ssd1306_print(SAVE_DEV_AS_ROW + 3, SAVE_DEV_AS_COL, "Long OK - save", 0);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <draw_save_device_as+0x68>)
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	2005      	movs	r0, #5
 8005bf6:	f003 fb72 	bl	80092de <ssd1306_print>
	ssd1306_update();
 8005bfa:	f003 fa49 	bl	8009090 <ssd1306_update>
}
 8005bfe:	bf00      	nop
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	0800cb48 	.word	0x0800cb48
 8005c08:	0800cb58 	.word	0x0800cb58
 8005c0c:	20000828 	.word	0x20000828
 8005c10:	20000120 	.word	0x20000120
 8005c14:	0800cb60 	.word	0x0800cb60
 8005c18:	0800cb64 	.word	0x0800cb64

08005c1c <draw_saved_popup>:



void draw_saved_popup(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
	ssd1306_clear();
 8005c20:	f003 fa56 	bl	80090d0 <ssd1306_clear>
	ssd1306_print(0, 1, "Saved!", 0);
 8005c24:	2300      	movs	r3, #0
 8005c26:	4a04      	ldr	r2, [pc, #16]	; (8005c38 <draw_saved_popup+0x1c>)
 8005c28:	2101      	movs	r1, #1
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	f003 fb57 	bl	80092de <ssd1306_print>
	ssd1306_update();
 8005c30:	f003 fa2e 	bl	8009090 <ssd1306_update>
}
 8005c34:	bf00      	nop
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	0800cb74 	.word	0x0800cb74
 8005c3c:	00000000 	.word	0x00000000

08005c40 <draw_radar>:



//RADAR
void draw_radar(void)
{
 8005c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c44:	b08d      	sub	sp, #52	; 0x34
 8005c46:	af00      	add	r7, sp, #0
	ssd1306_clear();
 8005c48:	f003 fa42 	bl	80090d0 <ssd1306_clear>
    ssd1306_bitmap(&radar_blank[0]);
 8005c4c:	48b9      	ldr	r0, [pc, #740]	; (8005f34 <draw_radar+0x2f4>)
 8005c4e:	f003 fbbd 	bl	80093cc <ssd1306_bitmap>

    //My status row
    uint8_t icon_col = LCD_LAST_COL;
 8005c52:	2314      	movs	r3, #20
 8005c54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


    //Battery
    switch (get_device_flags(device_number, FLAGS_BATTERY))
 8005c58:	4bb7      	ldr	r3, [pc, #732]	; (8005f38 <draw_radar+0x2f8>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fc fe2c 	bl	80028bc <get_device_flags>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d843      	bhi.n	8005cf2 <draw_radar+0xb2>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <draw_radar+0x30>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005cdd 	.word	0x08005cdd
 8005c74:	08005cc7 	.word	0x08005cc7
 8005c78:	08005cb1 	.word	0x08005cb1
 8005c7c:	08005c9b 	.word	0x08005c9b
 8005c80:	08005c85 	.word	0x08005c85
    {
        case FLAG_BATTERY_75_TO_100:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_4OF4, 0);
 8005c84:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005c88:	1e4b      	subs	r3, r1, #1
 8005c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005c8e:	2300      	movs	r3, #0
 8005c90:	228c      	movs	r2, #140	; 0x8c
 8005c92:	2000      	movs	r0, #0
 8005c94:	f003 fb04 	bl	80092a0 <ssd1306_char_pos>
            break;
 8005c98:	e02b      	b.n	8005cf2 <draw_radar+0xb2>

        case FLAG_BATTERY_50_TO_75:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_3OF4, 0);
 8005c9a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005c9e:	1e4b      	subs	r3, r1, #1
 8005ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	228b      	movs	r2, #139	; 0x8b
 8005ca8:	2000      	movs	r0, #0
 8005caa:	f003 faf9 	bl	80092a0 <ssd1306_char_pos>
            break;
 8005cae:	e020      	b.n	8005cf2 <draw_radar+0xb2>

        case FLAG_BATTERY_25_TO_50:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_2OF4, 0);
 8005cb0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005cb4:	1e4b      	subs	r3, r1, #1
 8005cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005cba:	2300      	movs	r3, #0
 8005cbc:	228a      	movs	r2, #138	; 0x8a
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	f003 faee 	bl	80092a0 <ssd1306_char_pos>
            break;
 8005cc4:	e015      	b.n	8005cf2 <draw_radar+0xb2>

        case FLAG_BATTERY_10_TO_25:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_1OF4, 0);
 8005cc6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005cca:	1e4b      	subs	r3, r1, #1
 8005ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	2289      	movs	r2, #137	; 0x89
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	f003 fae3 	bl	80092a0 <ssd1306_char_pos>
            break;
 8005cda:	e00a      	b.n	8005cf2 <draw_radar+0xb2>

        case FLAG_BATTERY_0_TO_10:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_0OF4, 0);
 8005cdc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005ce0:	1e4b      	subs	r3, r1, #1
 8005ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2288      	movs	r2, #136	; 0x88
 8005cea:	2000      	movs	r0, #0
 8005cec:	f003 fad8 	bl	80092a0 <ssd1306_char_pos>
            break;
 8005cf0:	bf00      	nop
    }


    //Sattelites
    if (p_gps_raw->time[0] == 0)                           //if no time received then no sattelites at all
 8005cf2:	4b92      	ldr	r3, [pc, #584]	; (8005f3c <draw_radar+0x2fc>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <draw_radar+0xd2>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_NO_SATT, 0);
 8005cfc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005d00:	1e4b      	subs	r3, r1, #1
 8005d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d06:	2300      	movs	r3, #0
 8005d08:	2282      	movs	r2, #130	; 0x82
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	f003 fac8 	bl	80092a0 <ssd1306_char_pos>
 8005d10:	e037      	b.n	8005d82 <draw_radar+0x142>
    }
    else
    {
        if (p_gps_num->mode == GPS_POSITION_3DFIX && p_gps_num->status == GPS_DATA_VALID)
 8005d12:	4b8b      	ldr	r3, [pc, #556]	; (8005f40 <draw_radar+0x300>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d110      	bne.n	8005d40 <draw_radar+0x100>
 8005d1e:	4b88      	ldr	r3, [pc, #544]	; (8005f40 <draw_radar+0x300>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d10a      	bne.n	8005d40 <draw_radar+0x100>
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_3D, 0);   //3D when data is valid
 8005d2a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005d2e:	1e4b      	subs	r3, r1, #1
 8005d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d34:	2300      	movs	r3, #0
 8005d36:	2285      	movs	r2, #133	; 0x85
 8005d38:	2000      	movs	r0, #0
 8005d3a:	f003 fab1 	bl	80092a0 <ssd1306_char_pos>
 8005d3e:	e020      	b.n	8005d82 <draw_radar+0x142>
        }
        else if (p_gps_num->mode == GPS_POSITION_2DFIX && p_gps_num->status == GPS_DATA_VALID)
 8005d40:	4b7f      	ldr	r3, [pc, #508]	; (8005f40 <draw_radar+0x300>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d110      	bne.n	8005d6e <draw_radar+0x12e>
 8005d4c:	4b7c      	ldr	r3, [pc, #496]	; (8005f40 <draw_radar+0x300>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d10a      	bne.n	8005d6e <draw_radar+0x12e>
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_2D, 0);   //2D when data is valid
 8005d58:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005d5c:	1e4b      	subs	r3, r1, #1
 8005d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d62:	2300      	movs	r3, #0
 8005d64:	2284      	movs	r2, #132	; 0x84
 8005d66:	2000      	movs	r0, #0
 8005d68:	f003 fa9a 	bl	80092a0 <ssd1306_char_pos>
 8005d6c:	e009      	b.n	8005d82 <draw_radar+0x142>
        }
        else
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_1D, 0);   //if not 2D or 3D then only time is avaliable
 8005d6e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005d72:	1e4b      	subs	r3, r1, #1
 8005d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2283      	movs	r2, #131	; 0x83
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	f003 fa8f 	bl	80092a0 <ssd1306_char_pos>
        }
    }

    //TRX
    if (get_main_flags()->gps_sync)
 8005d82:	f7fe f83f 	bl	8003e04 <get_main_flags>
 8005d86:	4603      	mov	r3, r0
 8005d88:	785b      	ldrb	r3, [r3, #1]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d013      	beq.n	8005db6 <draw_radar+0x176>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_ARROW_DOWN, 0);
 8005d8e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005d92:	1e4b      	subs	r3, r1, #1
 8005d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2281      	movs	r2, #129	; 0x81
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f003 fa7f 	bl	80092a0 <ssd1306_char_pos>
        ssd1306_char_pos(0, icon_col--, SYMB_ARROW_UP, 0);
 8005da2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005da6:	1e4b      	subs	r3, r1, #1
 8005da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005dac:	2300      	movs	r3, #0
 8005dae:	2280      	movs	r2, #128	; 0x80
 8005db0:	2000      	movs	r0, #0
 8005db2:	f003 fa75 	bl	80092a0 <ssd1306_char_pos>
    }



    //Timeout
    if (pp_dev_aux[device_number]->timeout_flag)
 8005db6:	4b63      	ldr	r3, [pc, #396]	; (8005f44 <draw_radar+0x304>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4b5f      	ldr	r3, [pc, #380]	; (8005f38 <draw_radar+0x2f8>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	7b1b      	ldrb	r3, [r3, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d009      	beq.n	8005dde <draw_radar+0x19e>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_TIMEOUT, 0);
 8005dca:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005dce:	1e4b      	subs	r3, r1, #1
 8005dd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	2286      	movs	r2, #134	; 0x86
 8005dd8:	2000      	movs	r0, #0
 8005dda:	f003 fa61 	bl	80092a0 <ssd1306_char_pos>
    }

    //Alarm
    if (get_device_flags(device_number, FLAGS_ALARM) == FLAG_ALARM_ON)
 8005dde:	4b56      	ldr	r3, [pc, #344]	; (8005f38 <draw_radar+0x2f8>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2104      	movs	r1, #4
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fc fd69 	bl	80028bc <get_device_flags>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d109      	bne.n	8005e04 <draw_radar+0x1c4>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_ALARM, 0);
 8005df0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005df4:	1e4b      	subs	r3, r1, #1
 8005df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2287      	movs	r2, #135	; 0x87
 8005dfe:	2000      	movs	r0, #0
 8005e00:	f003 fa4e 	bl	80092a0 <ssd1306_char_pos>
    }



    //COG
    itoa32(pp_gps_air[device_number]->course.as_integer, &buf[0]);
 8005e04:	4b50      	ldr	r3, [pc, #320]	; (8005f48 <draw_radar+0x308>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	4b4b      	ldr	r3, [pc, #300]	; (8005f38 <draw_radar+0x2f8>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	8a1b      	ldrh	r3, [r3, #16]
 8005e14:	494d      	ldr	r1, [pc, #308]	; (8005f4c <draw_radar+0x30c>)
 8005e16:	4618      	mov	r0, r3
 8005e18:	f002 fcfe 	bl	8008818 <itoa32>
    ssd1306_print_viceversa(0, 7, &buf[0], 0);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4a4b      	ldr	r2, [pc, #300]	; (8005f4c <draw_radar+0x30c>)
 8005e20:	2107      	movs	r1, #7
 8005e22:	2000      	movs	r0, #0
 8005e24:	f003 fa7e 	bl	8009324 <ssd1306_print_viceversa>



    uint8_t another_radar_dev_row = ANOTHER_RADAR_DEVICE_START_ROW;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint32_t max_distance = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t devices_enlisted_cntr = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e3e:	e168      	b.n	8006112 <draw_radar+0x4d2>
    {
    	if (dev != device_number)
 8005e40:	4b3d      	ldr	r3, [pc, #244]	; (8005f38 <draw_radar+0x2f8>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	f000 815d 	beq.w	8006108 <draw_radar+0x4c8>
    	{
    		if (pp_dev_aux[dev]->exist_flag == 1)
 8005e4e:	4b3d      	ldr	r3, [pc, #244]	; (8005f44 <draw_radar+0x304>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	f040 814d 	bne.w	80060fe <draw_radar+0x4be>
    		{
    			radar_list[dev] = devices_enlisted_cntr++; //first existing device will get index 0
 8005e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8005e6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005e72:	4937      	ldr	r1, [pc, #220]	; (8005f50 <draw_radar+0x310>)
 8005e74:	548b      	strb	r3, [r1, r2]

    			if (current_radar_device == 0) //if for the first time
 8005e76:	4b37      	ldr	r3, [pc, #220]	; (8005f54 <draw_radar+0x314>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <draw_radar+0x246>
    			{
    				current_radar_device = dev;
 8005e7e:	4a35      	ldr	r2, [pc, #212]	; (8005f54 <draw_radar+0x314>)
 8005e80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e84:	7013      	strb	r3, [r2, #0]
    			}

                //Number
    			itoa32(dev, &buf[0]);
 8005e86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e8a:	4930      	ldr	r1, [pc, #192]	; (8005f4c <draw_radar+0x30c>)
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f002 fcc3 	bl	8008818 <itoa32>
    			if (radar_list_hide[dev] == 1)
 8005e92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e96:	4a30      	ldr	r2, [pc, #192]	; (8005f58 <draw_radar+0x318>)
 8005e98:	5cd3      	ldrb	r3, [r2, r3]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d107      	bne.n	8005eae <draw_radar+0x26e>
    			{
					ssd1306_print(another_radar_dev_row, 9, &buf[0], 1);
 8005e9e:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4a29      	ldr	r2, [pc, #164]	; (8005f4c <draw_radar+0x30c>)
 8005ea6:	2109      	movs	r1, #9
 8005ea8:	f003 fa19 	bl	80092de <ssd1306_print>
 8005eac:	e006      	b.n	8005ebc <draw_radar+0x27c>
    			}
    			else
    			{
					ssd1306_print(another_radar_dev_row, 9, &buf[0], 0);
 8005eae:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4a25      	ldr	r2, [pc, #148]	; (8005f4c <draw_radar+0x30c>)
 8005eb6:	2109      	movs	r1, #9
 8005eb8:	f003 fa11 	bl	80092de <ssd1306_print>
    			}

                //ID
                ssd1306_char_pos(another_radar_dev_row, 11, pp_gps_air[dev]->device_id[0], 0);
 8005ebc:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <draw_radar+0x308>)
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	210b      	movs	r1, #11
 8005ed4:	f003 f9e4 	bl	80092a0 <ssd1306_char_pos>
                ssd1306_char_pos(another_radar_dev_row, 12, pp_gps_air[dev]->device_id[1], 0);
 8005ed8:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <draw_radar+0x308>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	785a      	ldrb	r2, [r3, #1]
 8005ee8:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8005eec:	2300      	movs	r3, #0
 8005eee:	210c      	movs	r1, #12
 8005ef0:	f003 f9d6 	bl	80092a0 <ssd1306_char_pos>

                //Distance
                if (pp_gps_rel[dev]->distance < 1000)           //1-999 m
 8005ef4:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <draw_radar+0x31c>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f08:	d22a      	bcs.n	8005f60 <draw_radar+0x320>
                {
                    itoa32(pp_gps_rel[dev]->distance, &buf[0]);
 8005f0a:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <draw_radar+0x31c>)
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	490c      	ldr	r1, [pc, #48]	; (8005f4c <draw_radar+0x30c>)
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f002 fc7b 	bl	8008818 <itoa32>
                    ssd1306_print_viceversa(another_radar_dev_row, 16, &buf[0], 0);
 8005f22:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8005f26:	2300      	movs	r3, #0
 8005f28:	4a08      	ldr	r2, [pc, #32]	; (8005f4c <draw_radar+0x30c>)
 8005f2a:	2110      	movs	r1, #16
 8005f2c:	f003 f9fa 	bl	8009324 <ssd1306_print_viceversa>
 8005f30:	e08e      	b.n	8006050 <draw_radar+0x410>
 8005f32:	bf00      	nop
 8005f34:	0800dd44 	.word	0x0800dd44
 8005f38:	20000738 	.word	0x20000738
 8005f3c:	20000808 	.word	0x20000808
 8005f40:	20000614 	.word	0x20000614
 8005f44:	2000083c 	.word	0x2000083c
 8005f48:	20000804 	.word	0x20000804
 8005f4c:	20000810 	.word	0x20000810
 8005f50:	200007d8 	.word	0x200007d8
 8005f54:	20000121 	.word	0x20000121
 8005f58:	20000830 	.word	0x20000830
 8005f5c:	200007d0 	.word	0x200007d0
                }
                else if (pp_gps_rel[dev]->distance < 10000)     //1.0-9.9 km
 8005f60:	4b9e      	ldr	r3, [pc, #632]	; (80061dc <draw_radar+0x59c>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f242 720f 	movw	r2, #9999	; 0x270f
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d827      	bhi.n	8005fc8 <draw_radar+0x388>
                {
                    tmpf = pp_gps_rel[dev]->distance / 1000.0;
 8005f78:	4b98      	ldr	r3, [pc, #608]	; (80061dc <draw_radar+0x59c>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fa fa33 	bl	80003f4 <__aeabi_ui2d>
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	4b93      	ldr	r3, [pc, #588]	; (80061e0 <draw_radar+0x5a0>)
 8005f94:	f7fa fbd2 	bl	800073c <__aeabi_ddiv>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	f7fa fd9a 	bl	8000ad8 <__aeabi_d2f>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	4b8f      	ldr	r3, [pc, #572]	; (80061e4 <draw_radar+0x5a4>)
 8005fa8:	601a      	str	r2, [r3, #0]
                    ftoa32(tmpf, 1, &buf[0]);
 8005faa:	4b8e      	ldr	r3, [pc, #568]	; (80061e4 <draw_radar+0x5a4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a8e      	ldr	r2, [pc, #568]	; (80061e8 <draw_radar+0x5a8>)
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f002 fae0 	bl	8008578 <ftoa32>
                    ssd1306_print_viceversa(another_radar_dev_row, 16, &buf[0], 0);
 8005fb8:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	4a8a      	ldr	r2, [pc, #552]	; (80061e8 <draw_radar+0x5a8>)
 8005fc0:	2110      	movs	r1, #16
 8005fc2:	f003 f9af 	bl	8009324 <ssd1306_print_viceversa>
 8005fc6:	e043      	b.n	8006050 <draw_radar+0x410>
                }
                else if (pp_gps_rel[dev]->distance < 100000)    //10.-99. km
 8005fc8:	4b84      	ldr	r3, [pc, #528]	; (80061dc <draw_radar+0x59c>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a84      	ldr	r2, [pc, #528]	; (80061ec <draw_radar+0x5ac>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d831      	bhi.n	8006042 <draw_radar+0x402>
                {
                    tmpf = pp_gps_rel[dev]->distance / 1000.0;
 8005fde:	4b7f      	ldr	r3, [pc, #508]	; (80061dc <draw_radar+0x59c>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fa fa00 	bl	80003f4 <__aeabi_ui2d>
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	4b79      	ldr	r3, [pc, #484]	; (80061e0 <draw_radar+0x5a0>)
 8005ffa:	f7fa fb9f 	bl	800073c <__aeabi_ddiv>
 8005ffe:	4603      	mov	r3, r0
 8006000:	460c      	mov	r4, r1
 8006002:	4618      	mov	r0, r3
 8006004:	4621      	mov	r1, r4
 8006006:	f7fa fd67 	bl	8000ad8 <__aeabi_d2f>
 800600a:	4602      	mov	r2, r0
 800600c:	4b75      	ldr	r3, [pc, #468]	; (80061e4 <draw_radar+0x5a4>)
 800600e:	601a      	str	r2, [r3, #0]
                    itoa32((uint32_t)tmpf, &buf[0]);
 8006010:	4b74      	ldr	r3, [pc, #464]	; (80061e4 <draw_radar+0x5a4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f7fb f8a9 	bl	800116c <__aeabi_f2uiz>
 800601a:	4603      	mov	r3, r0
 800601c:	4972      	ldr	r1, [pc, #456]	; (80061e8 <draw_radar+0x5a8>)
 800601e:	4618      	mov	r0, r3
 8006020:	f002 fbfa 	bl	8008818 <itoa32>
                    ssd1306_print_viceversa(another_radar_dev_row, 16, &buf[0], 0);
 8006024:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8006028:	2300      	movs	r3, #0
 800602a:	4a6f      	ldr	r2, [pc, #444]	; (80061e8 <draw_radar+0x5a8>)
 800602c:	2110      	movs	r1, #16
 800602e:	f003 f979 	bl	8009324 <ssd1306_print_viceversa>
                    ssd1306_char_pos(another_radar_dev_row, 17, '.', 0);
 8006032:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8006036:	2300      	movs	r3, #0
 8006038:	222e      	movs	r2, #46	; 0x2e
 800603a:	2111      	movs	r1, #17
 800603c:	f003 f930 	bl	80092a0 <ssd1306_char_pos>
 8006040:	e006      	b.n	8006050 <draw_radar+0x410>
                }
                else                                        // >100 km
                {
                    ssd1306_print(another_radar_dev_row, 14, "...", 0);
 8006042:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8006046:	2300      	movs	r3, #0
 8006048:	4a69      	ldr	r2, [pc, #420]	; (80061f0 <draw_radar+0x5b0>)
 800604a:	210e      	movs	r1, #14
 800604c:	f003 f947 	bl	80092de <ssd1306_print>
                }

                //Search max distance
                if (pp_gps_rel[dev]->distance > max_distance)
 8006050:	4b62      	ldr	r3, [pc, #392]	; (80061dc <draw_radar+0x59c>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006062:	429a      	cmp	r2, r3
 8006064:	d20e      	bcs.n	8006084 <draw_radar+0x444>
                {
                	if (radar_list_hide[dev] == 0)
 8006066:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800606a:	4a62      	ldr	r2, [pc, #392]	; (80061f4 <draw_radar+0x5b4>)
 800606c:	5cd3      	ldrb	r3, [r2, r3]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d108      	bne.n	8006084 <draw_radar+0x444>
                	{
                		max_distance = pp_gps_rel[dev]->distance;		//fix max distance only if device is not hided
 8006072:	4b5a      	ldr	r3, [pc, #360]	; (80061dc <draw_radar+0x59c>)
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28
                	}
                }

                //Heading
                itoa32(pp_gps_rel[dev]->heading, &buf[0]);
 8006084:	4b55      	ldr	r3, [pc, #340]	; (80061dc <draw_radar+0x59c>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	889b      	ldrh	r3, [r3, #4]
 8006094:	4954      	ldr	r1, [pc, #336]	; (80061e8 <draw_radar+0x5a8>)
 8006096:	4618      	mov	r0, r3
 8006098:	f002 fbbe 	bl	8008818 <itoa32>
                ssd1306_print_viceversa(another_radar_dev_row, 20, &buf[0], 0);
 800609c:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 80060a0:	2300      	movs	r3, #0
 80060a2:	4a51      	ldr	r2, [pc, #324]	; (80061e8 <draw_radar+0x5a8>)
 80060a4:	2114      	movs	r1, #20
 80060a6:	f003 f93d 	bl	8009324 <ssd1306_print_viceversa>


                //Warning sign in case of timeout, alarm or fence
                if (get_device_flags(dev, FLAGS_ALARM) || pp_dev_aux[dev]->timeout_flag || pp_dev_aux[dev]->fence_flag)
 80060aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80060ae:	2104      	movs	r1, #4
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fc fc03 	bl	80028bc <get_device_flags>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d113      	bne.n	80060e4 <draw_radar+0x4a4>
 80060bc:	4b4e      	ldr	r3, [pc, #312]	; (80061f8 <draw_radar+0x5b8>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	7b1b      	ldrb	r3, [r3, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d109      	bne.n	80060e4 <draw_radar+0x4a4>
 80060d0:	4b49      	ldr	r3, [pc, #292]	; (80061f8 <draw_radar+0x5b8>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	7b5b      	ldrb	r3, [r3, #13]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d006      	beq.n	80060f2 <draw_radar+0x4b2>
                {
                	ssd1306_print_byte(another_radar_dev_row, 21, custom_exclam_mark, 2);
 80060e4:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 80060e8:	2302      	movs	r3, #2
 80060ea:	4a44      	ldr	r2, [pc, #272]	; (80061fc <draw_radar+0x5bc>)
 80060ec:	2115      	movs	r1, #21
 80060ee:	f003 f989 	bl	8009404 <ssd1306_print_byte>
                }

                another_radar_dev_row++;
 80060f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80060f6:	3301      	adds	r3, #1
 80060f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80060fc:	e004      	b.n	8006108 <draw_radar+0x4c8>
    		}
    		else	//if device is not exist
    		{
    			radar_list_hide[dev] = 0;	//clear hide flag, so when device disappear, and appear again it will be not hided
 80060fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006102:	4a3c      	ldr	r2, [pc, #240]	; (80061f4 <draw_radar+0x5b4>)
 8006104:	2100      	movs	r1, #0
 8006106:	54d1      	strb	r1, [r2, r3]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8006108:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800610c:	3301      	adds	r3, #1
 800610e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006112:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006116:	2b06      	cmp	r3, #6
 8006118:	f67f ae92 	bls.w	8005e40 <draw_radar+0x200>
    	}
    }


    //Pointer and bottom row information bar
    if (devices_enlisted_cntr > 0)
 800611c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 80e6 	beq.w	80062f2 <draw_radar+0x6b2>
    {
    	ssd1306_print(2 + radar_list[current_radar_device], 8, ">", 0);
 8006126:	4b36      	ldr	r3, [pc, #216]	; (8006200 <draw_radar+0x5c0>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	4b35      	ldr	r3, [pc, #212]	; (8006204 <draw_radar+0x5c4>)
 800612e:	5c9b      	ldrb	r3, [r3, r2]
 8006130:	3302      	adds	r3, #2
 8006132:	b2d8      	uxtb	r0, r3
 8006134:	2300      	movs	r3, #0
 8006136:	4a34      	ldr	r2, [pc, #208]	; (8006208 <draw_radar+0x5c8>)
 8006138:	2108      	movs	r1, #8
 800613a:	f003 f8d0 	bl	80092de <ssd1306_print>

    	uint8_t icon_col = LCD_LAST_COL;
 800613e:	2314      	movs	r3, #20
 8006140:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

        if (pp_dev_aux[current_radar_device]->memory_point_flag == 0) //dont show battery icon for memory points
 8006144:	4b2c      	ldr	r3, [pc, #176]	; (80061f8 <draw_radar+0x5b8>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4b2d      	ldr	r3, [pc, #180]	; (8006200 <draw_radar+0x5c0>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	7b9b      	ldrb	r3, [r3, #14]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d164      	bne.n	8006222 <draw_radar+0x5e2>
        {
			//Battery
			switch (get_device_flags(current_radar_device, FLAGS_BATTERY))
 8006158:	4b29      	ldr	r3, [pc, #164]	; (8006200 <draw_radar+0x5c0>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2101      	movs	r1, #1
 800615e:	4618      	mov	r0, r3
 8006160:	f7fc fbac 	bl	80028bc <get_device_flags>
 8006164:	4603      	mov	r3, r0
 8006166:	2b04      	cmp	r3, #4
 8006168:	d85b      	bhi.n	8006222 <draw_radar+0x5e2>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <draw_radar+0x530>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	0800620d 	.word	0x0800620d
 8006174:	080061c7 	.word	0x080061c7
 8006178:	080061b1 	.word	0x080061b1
 800617c:	0800619b 	.word	0x0800619b
 8006180:	08006185 	.word	0x08006185
			{
				case FLAG_BATTERY_75_TO_100:
					ssd1306_char_pos(7, icon_col--, SYMB_BAT_4OF4, 0);
 8006184:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8006188:	1e4b      	subs	r3, r1, #1
 800618a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800618e:	2300      	movs	r3, #0
 8006190:	228c      	movs	r2, #140	; 0x8c
 8006192:	2007      	movs	r0, #7
 8006194:	f003 f884 	bl	80092a0 <ssd1306_char_pos>
					break;
 8006198:	e043      	b.n	8006222 <draw_radar+0x5e2>

				case FLAG_BATTERY_50_TO_75:
					ssd1306_char_pos(7, icon_col--, SYMB_BAT_3OF4, 0);
 800619a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800619e:	1e4b      	subs	r3, r1, #1
 80061a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80061a4:	2300      	movs	r3, #0
 80061a6:	228b      	movs	r2, #139	; 0x8b
 80061a8:	2007      	movs	r0, #7
 80061aa:	f003 f879 	bl	80092a0 <ssd1306_char_pos>
					break;
 80061ae:	e038      	b.n	8006222 <draw_radar+0x5e2>

				case FLAG_BATTERY_25_TO_50:
					ssd1306_char_pos(7, icon_col--, SYMB_BAT_2OF4, 0);
 80061b0:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80061b4:	1e4b      	subs	r3, r1, #1
 80061b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80061ba:	2300      	movs	r3, #0
 80061bc:	228a      	movs	r2, #138	; 0x8a
 80061be:	2007      	movs	r0, #7
 80061c0:	f003 f86e 	bl	80092a0 <ssd1306_char_pos>
					break;
 80061c4:	e02d      	b.n	8006222 <draw_radar+0x5e2>

				case FLAG_BATTERY_10_TO_25:
					ssd1306_char_pos(7, icon_col--, SYMB_BAT_1OF4, 0);
 80061c6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80061ca:	1e4b      	subs	r3, r1, #1
 80061cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80061d0:	2300      	movs	r3, #0
 80061d2:	2289      	movs	r2, #137	; 0x89
 80061d4:	2007      	movs	r0, #7
 80061d6:	f003 f863 	bl	80092a0 <ssd1306_char_pos>
					break;
 80061da:	e022      	b.n	8006222 <draw_radar+0x5e2>
 80061dc:	200007d0 	.word	0x200007d0
 80061e0:	408f4000 	.word	0x408f4000
 80061e4:	200007f4 	.word	0x200007f4
 80061e8:	20000810 	.word	0x20000810
 80061ec:	0001869f 	.word	0x0001869f
 80061f0:	0800ca18 	.word	0x0800ca18
 80061f4:	20000830 	.word	0x20000830
 80061f8:	2000083c 	.word	0x2000083c
 80061fc:	20000034 	.word	0x20000034
 8006200:	20000121 	.word	0x20000121
 8006204:	200007d8 	.word	0x200007d8
 8006208:	0800ca14 	.word	0x0800ca14

				case FLAG_BATTERY_0_TO_10:
					ssd1306_char_pos(7, icon_col--, SYMB_BAT_0OF4, 0);
 800620c:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8006210:	1e4b      	subs	r3, r1, #1
 8006212:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006216:	2300      	movs	r3, #0
 8006218:	2288      	movs	r2, #136	; 0x88
 800621a:	2007      	movs	r0, #7
 800621c:	f003 f840 	bl	80092a0 <ssd1306_char_pos>
					break;
 8006220:	bf00      	nop
			}
        }


        if (pp_dev_aux[current_radar_device]->memory_point_flag == 0)
 8006222:	4b71      	ldr	r3, [pc, #452]	; (80063e8 <draw_radar+0x7a8>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b71      	ldr	r3, [pc, #452]	; (80063ec <draw_radar+0x7ac>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	7b9b      	ldrb	r3, [r3, #14]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d113      	bne.n	800625e <draw_radar+0x61e>
        {
			//Timeout
			if (pp_dev_aux[current_radar_device]->timeout_flag)
 8006236:	4b6c      	ldr	r3, [pc, #432]	; (80063e8 <draw_radar+0x7a8>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b6c      	ldr	r3, [pc, #432]	; (80063ec <draw_radar+0x7ac>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	7b1b      	ldrb	r3, [r3, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <draw_radar+0x61e>
			{
				ssd1306_char_pos(7, icon_col--, SYMB_TIMEOUT, 0);
 800624a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800624e:	1e4b      	subs	r3, r1, #1
 8006250:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006254:	2300      	movs	r3, #0
 8006256:	2286      	movs	r2, #134	; 0x86
 8006258:	2007      	movs	r0, #7
 800625a:	f003 f821 	bl	80092a0 <ssd1306_char_pos>
			}
        }


        //Fence
        if (pp_dev_aux[current_radar_device]->fence_flag)
 800625e:	4b62      	ldr	r3, [pc, #392]	; (80063e8 <draw_radar+0x7a8>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	4b62      	ldr	r3, [pc, #392]	; (80063ec <draw_radar+0x7ac>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	7b5b      	ldrb	r3, [r3, #13]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <draw_radar+0x646>
        {
        	ssd1306_char_pos(7, icon_col--, SYMB_FENCE, 0);
 8006272:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8006276:	1e4b      	subs	r3, r1, #1
 8006278:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800627c:	2300      	movs	r3, #0
 800627e:	228e      	movs	r2, #142	; 0x8e
 8006280:	2007      	movs	r0, #7
 8006282:	f003 f80d 	bl	80092a0 <ssd1306_char_pos>
        }


        if (pp_dev_aux[current_radar_device]->memory_point_flag == 0)
 8006286:	4b58      	ldr	r3, [pc, #352]	; (80063e8 <draw_radar+0x7a8>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b58      	ldr	r3, [pc, #352]	; (80063ec <draw_radar+0x7ac>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	7b9b      	ldrb	r3, [r3, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d112      	bne.n	80062c0 <draw_radar+0x680>
        {
			//Alarm
			if (get_device_flags(current_radar_device, FLAGS_ALARM) == FLAG_ALARM_ON)
 800629a:	4b54      	ldr	r3, [pc, #336]	; (80063ec <draw_radar+0x7ac>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2104      	movs	r1, #4
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fc fb0b 	bl	80028bc <get_device_flags>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d109      	bne.n	80062c0 <draw_radar+0x680>
			{
				ssd1306_char_pos(7, icon_col--, SYMB_ALARM, 0);
 80062ac:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80062b0:	1e4b      	subs	r3, r1, #1
 80062b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80062b6:	2300      	movs	r3, #0
 80062b8:	2287      	movs	r2, #135	; 0x87
 80062ba:	2007      	movs	r0, #7
 80062bc:	f002 fff0 	bl	80092a0 <ssd1306_char_pos>
			}
        }


        //if mem point then print it name
        if (pp_dev_aux[current_radar_device]->memory_point_flag == 1)
 80062c0:	4b49      	ldr	r3, [pc, #292]	; (80063e8 <draw_radar+0x7a8>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	4b49      	ldr	r3, [pc, #292]	; (80063ec <draw_radar+0x7ac>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	7b9b      	ldrb	r3, [r3, #14]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d111      	bne.n	80062f8 <draw_radar+0x6b8>
        {
        	ssd1306_print(7, 9, pp_dev_aux[current_radar_device]->point_name, 0);
 80062d4:	4b44      	ldr	r3, [pc, #272]	; (80063e8 <draw_radar+0x7a8>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4b44      	ldr	r3, [pc, #272]	; (80063ec <draw_radar+0x7ac>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f103 020f 	add.w	r2, r3, #15
 80062e6:	2300      	movs	r3, #0
 80062e8:	2109      	movs	r1, #9
 80062ea:	2007      	movs	r0, #7
 80062ec:	f002 fff7 	bl	80092de <ssd1306_print>
 80062f0:	e002      	b.n	80062f8 <draw_radar+0x6b8>


    }
    else
    {
    	current_radar_device = 0;
 80062f2:	4b3e      	ldr	r3, [pc, #248]	; (80063ec <draw_radar+0x7ac>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]
    }


    //Radar implementation is here
    float mpd_ratio_f = 0.0;		//meters per dot ratio
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	61bb      	str	r3, [r7, #24]
    uint32_t mpd_ratio_i = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	623b      	str	r3, [r7, #32]

    if (max_distance < r_circ_dots)
 8006302:	2314      	movs	r3, #20
 8006304:	461a      	mov	r2, r3
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	4293      	cmp	r3, r2
 800630a:	d201      	bcs.n	8006310 <draw_radar+0x6d0>
    {
    	max_distance = r_circ_dots;
 800630c:	2314      	movs	r3, #20
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    mpd_ratio_f = (float)max_distance / (float)r_circ_dots;	//calc ratio
 8006310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006312:	f7fa fce7 	bl	8000ce4 <__aeabi_ui2f>
 8006316:	4604      	mov	r4, r0
 8006318:	2314      	movs	r3, #20
 800631a:	4618      	mov	r0, r3
 800631c:	f7fa fce2 	bl	8000ce4 <__aeabi_ui2f>
 8006320:	4603      	mov	r3, r0
 8006322:	4619      	mov	r1, r3
 8006324:	4620      	mov	r0, r4
 8006326:	f7fa fde9 	bl	8000efc <__aeabi_fdiv>
 800632a:	4603      	mov	r3, r0
 800632c:	61bb      	str	r3, [r7, #24]
    mpd_ratio_i = (uint32_t)mpd_ratio_f;			//extract int part
 800632e:	69b8      	ldr	r0, [r7, #24]
 8006330:	f7fa ff1c 	bl	800116c <__aeabi_f2uiz>
 8006334:	4603      	mov	r3, r0
 8006336:	623b      	str	r3, [r7, #32]

    mpd_ratio_f -= mpd_ratio_i;					//extract frac part
 8006338:	6a38      	ldr	r0, [r7, #32]
 800633a:	f7fa fcd3 	bl	8000ce4 <__aeabi_ui2f>
 800633e:	4603      	mov	r3, r0
 8006340:	4619      	mov	r1, r3
 8006342:	69b8      	ldr	r0, [r7, #24]
 8006344:	f7fa fc1c 	bl	8000b80 <__aeabi_fsub>
 8006348:	4603      	mov	r3, r0
 800634a:	61bb      	str	r3, [r7, #24]

    if (mpd_ratio_f > 0.001)					//if frac part is non-zero, then inc ratio
 800634c:	69b8      	ldr	r0, [r7, #24]
 800634e:	f7fa f873 	bl	8000438 <__aeabi_f2d>
 8006352:	a323      	add	r3, pc, #140	; (adr r3, 80063e0 <draw_radar+0x7a0>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7fa fb56 	bl	8000a08 <__aeabi_dcmpgt>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <draw_radar+0x728>
    {
    	mpd_ratio_i++;
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	3301      	adds	r3, #1
 8006366:	623b      	str	r3, [r7, #32]
    }

    //print radar range
    uint32_t radar_range = mpd_ratio_i * r_circ_dots;	//i.e. radar screen radius
 8006368:	2314      	movs	r3, #20
 800636a:	461a      	mov	r2, r3
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	fb02 f303 	mul.w	r3, r2, r3
 8006372:	617b      	str	r3, [r7, #20]

    if (radar_range < 10000) // 0...9999 meters, screen fits 4 characters max
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f242 720f 	movw	r2, #9999	; 0x270f
 800637a:	4293      	cmp	r3, r2
 800637c:	d80b      	bhi.n	8006396 <draw_radar+0x756>
    {
    	itoa32(radar_range, &buf[0]);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	491b      	ldr	r1, [pc, #108]	; (80063f0 <draw_radar+0x7b0>)
 8006382:	4618      	mov	r0, r3
 8006384:	f002 fa48 	bl	8008818 <itoa32>
    	ssd1306_print_viceversa(7, 7, &buf[0], 0);
 8006388:	2300      	movs	r3, #0
 800638a:	4a19      	ldr	r2, [pc, #100]	; (80063f0 <draw_radar+0x7b0>)
 800638c:	2107      	movs	r1, #7
 800638e:	2007      	movs	r0, #7
 8006390:	f002 ffc8 	bl	8009324 <ssd1306_print_viceversa>
 8006394:	e01f      	b.n	80063d6 <draw_radar+0x796>
    }
    else if (radar_range < 1000000)	// 10000...999999 meters
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	4a16      	ldr	r2, [pc, #88]	; (80063f4 <draw_radar+0x7b4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d815      	bhi.n	80063ca <draw_radar+0x78a>
    {
    	itoa32((radar_range / 1000), &buf[0]);
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <draw_radar+0x7b8>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	4911      	ldr	r1, [pc, #68]	; (80063f0 <draw_radar+0x7b0>)
 80063aa:	4618      	mov	r0, r3
 80063ac:	f002 fa34 	bl	8008818 <itoa32>
    	ssd1306_char_pos(7, 7, 'k', 0);
 80063b0:	2300      	movs	r3, #0
 80063b2:	226b      	movs	r2, #107	; 0x6b
 80063b4:	2107      	movs	r1, #7
 80063b6:	2007      	movs	r0, #7
 80063b8:	f002 ff72 	bl	80092a0 <ssd1306_char_pos>
    	ssd1306_print_viceversa(7, 6, &buf[0], 0);
 80063bc:	2300      	movs	r3, #0
 80063be:	4a0c      	ldr	r2, [pc, #48]	; (80063f0 <draw_radar+0x7b0>)
 80063c0:	2106      	movs	r1, #6
 80063c2:	2007      	movs	r0, #7
 80063c4:	f002 ffae 	bl	8009324 <ssd1306_print_viceversa>
 80063c8:	e005      	b.n	80063d6 <draw_radar+0x796>
    }
    else
    {
    	ssd1306_print_viceversa(7, 7, "...", 0);
 80063ca:	2300      	movs	r3, #0
 80063cc:	4a0b      	ldr	r2, [pc, #44]	; (80063fc <draw_radar+0x7bc>)
 80063ce:	2107      	movs	r1, #7
 80063d0:	2007      	movs	r0, #7
 80063d2:	f002 ffa7 	bl	8009324 <ssd1306_print_viceversa>
    }



    //plot on radar
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 80063d6:	2301      	movs	r3, #1
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e0f6      	b.n	80065ca <draw_radar+0x98a>
 80063dc:	f3af 8000 	nop.w
 80063e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80063e4:	3f50624d 	.word	0x3f50624d
 80063e8:	2000083c 	.word	0x2000083c
 80063ec:	20000121 	.word	0x20000121
 80063f0:	20000810 	.word	0x20000810
 80063f4:	000f423f 	.word	0x000f423f
 80063f8:	10624dd3 	.word	0x10624dd3
 80063fc:	0800ca18 	.word	0x0800ca18
    {
    	if (dev != device_number)
 8006400:	4b77      	ldr	r3, [pc, #476]	; (80065e0 <draw_radar+0x9a0>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	7ffa      	ldrb	r2, [r7, #31]
 8006406:	429a      	cmp	r2, r3
 8006408:	f000 80dc 	beq.w	80065c4 <draw_radar+0x984>
    	{
    		if (pp_dev_aux[dev]->exist_flag == 1)
 800640c:	4b75      	ldr	r3, [pc, #468]	; (80065e4 <draw_radar+0x9a4>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	7ffb      	ldrb	r3, [r7, #31]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	f040 80d2 	bne.w	80065c4 <draw_radar+0x984>
    		{
    			if (radar_list_hide[dev] == 0)		//if not hided
 8006420:	7ffb      	ldrb	r3, [r7, #31]
 8006422:	4a71      	ldr	r2, [pc, #452]	; (80065e8 <draw_radar+0x9a8>)
 8006424:	5cd3      	ldrb	r3, [r2, r3]
 8006426:	2b00      	cmp	r3, #0
 8006428:	f040 80cc 	bne.w	80065c4 <draw_radar+0x984>
    			{
					uint8_t sx1 = 0;		//device coordinates on the screen
 800642c:	2300      	movs	r3, #0
 800642e:	74fb      	strb	r3, [r7, #19]
					uint8_t sy1 = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	74bb      	strb	r3, [r7, #18]

					double x1 = 0.0;	//device coordinates relative from my position (0, 0)
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	f04f 0400 	mov.w	r4, #0
 800643c:	e9c7 3402 	strd	r3, r4, [r7, #8]
					double y1 = 0.0;
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	f04f 0400 	mov.w	r4, #0
 8006448:	e9c7 3400 	strd	r3, r4, [r7]

					x1 = -((pp_gps_rel[dev]->distance)/(double)mpd_ratio_i) * cos((pp_gps_rel[dev]->heading + 90) * deg_to_rad);
 800644c:	4b67      	ldr	r3, [pc, #412]	; (80065ec <draw_radar+0x9ac>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	7ffb      	ldrb	r3, [r7, #31]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f7f9 ffca 	bl	80003f4 <__aeabi_ui2d>
 8006460:	4680      	mov	r8, r0
 8006462:	4689      	mov	r9, r1
 8006464:	6a38      	ldr	r0, [r7, #32]
 8006466:	f7f9 ffc5 	bl	80003f4 <__aeabi_ui2d>
 800646a:	4603      	mov	r3, r0
 800646c:	460c      	mov	r4, r1
 800646e:	461a      	mov	r2, r3
 8006470:	4623      	mov	r3, r4
 8006472:	4640      	mov	r0, r8
 8006474:	4649      	mov	r1, r9
 8006476:	f7fa f961 	bl	800073c <__aeabi_ddiv>
 800647a:	4603      	mov	r3, r0
 800647c:	460c      	mov	r4, r1
 800647e:	461d      	mov	r5, r3
 8006480:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8006484:	4b59      	ldr	r3, [pc, #356]	; (80065ec <draw_radar+0x9ac>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	7ffb      	ldrb	r3, [r7, #31]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	889b      	ldrh	r3, [r3, #4]
 8006492:	335a      	adds	r3, #90	; 0x5a
 8006494:	4618      	mov	r0, r3
 8006496:	f7f9 ffbd 	bl	8000414 <__aeabi_i2d>
 800649a:	4b55      	ldr	r3, [pc, #340]	; (80065f0 <draw_radar+0x9b0>)
 800649c:	cb18      	ldmia	r3, {r3, r4}
 800649e:	461a      	mov	r2, r3
 80064a0:	4623      	mov	r3, r4
 80064a2:	f7fa f821 	bl	80004e8 <__aeabi_dmul>
 80064a6:	4603      	mov	r3, r0
 80064a8:	460c      	mov	r4, r1
 80064aa:	4618      	mov	r0, r3
 80064ac:	4621      	mov	r1, r4
 80064ae:	f003 fbf1 	bl	8009c94 <cos>
 80064b2:	4603      	mov	r3, r0
 80064b4:	460c      	mov	r4, r1
 80064b6:	461a      	mov	r2, r3
 80064b8:	4623      	mov	r3, r4
 80064ba:	4628      	mov	r0, r5
 80064bc:	4631      	mov	r1, r6
 80064be:	f7fa f813 	bl	80004e8 <__aeabi_dmul>
 80064c2:	4603      	mov	r3, r0
 80064c4:	460c      	mov	r4, r1
 80064c6:	e9c7 3402 	strd	r3, r4, [r7, #8]
					y1 = ((pp_gps_rel[dev]->distance)/(double)mpd_ratio_i) * sin((pp_gps_rel[dev]->heading + 90) * deg_to_rad);
 80064ca:	4b48      	ldr	r3, [pc, #288]	; (80065ec <draw_radar+0x9ac>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	7ffb      	ldrb	r3, [r7, #31]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7f9 ff8b 	bl	80003f4 <__aeabi_ui2d>
 80064de:	4680      	mov	r8, r0
 80064e0:	4689      	mov	r9, r1
 80064e2:	6a38      	ldr	r0, [r7, #32]
 80064e4:	f7f9 ff86 	bl	80003f4 <__aeabi_ui2d>
 80064e8:	4603      	mov	r3, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	461a      	mov	r2, r3
 80064ee:	4623      	mov	r3, r4
 80064f0:	4640      	mov	r0, r8
 80064f2:	4649      	mov	r1, r9
 80064f4:	f7fa f922 	bl	800073c <__aeabi_ddiv>
 80064f8:	4603      	mov	r3, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	4698      	mov	r8, r3
 80064fe:	46a1      	mov	r9, r4
 8006500:	4b3a      	ldr	r3, [pc, #232]	; (80065ec <draw_radar+0x9ac>)
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	7ffb      	ldrb	r3, [r7, #31]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	889b      	ldrh	r3, [r3, #4]
 800650e:	335a      	adds	r3, #90	; 0x5a
 8006510:	4618      	mov	r0, r3
 8006512:	f7f9 ff7f 	bl	8000414 <__aeabi_i2d>
 8006516:	4b36      	ldr	r3, [pc, #216]	; (80065f0 <draw_radar+0x9b0>)
 8006518:	cb18      	ldmia	r3, {r3, r4}
 800651a:	461a      	mov	r2, r3
 800651c:	4623      	mov	r3, r4
 800651e:	f7f9 ffe3 	bl	80004e8 <__aeabi_dmul>
 8006522:	4603      	mov	r3, r0
 8006524:	460c      	mov	r4, r1
 8006526:	4618      	mov	r0, r3
 8006528:	4621      	mov	r1, r4
 800652a:	f003 fbed 	bl	8009d08 <sin>
 800652e:	4603      	mov	r3, r0
 8006530:	460c      	mov	r4, r1
 8006532:	461a      	mov	r2, r3
 8006534:	4623      	mov	r3, r4
 8006536:	4640      	mov	r0, r8
 8006538:	4649      	mov	r1, r9
 800653a:	f7f9 ffd5 	bl	80004e8 <__aeabi_dmul>
 800653e:	4603      	mov	r3, r0
 8006540:	460c      	mov	r4, r1
 8006542:	e9c7 3400 	strd	r3, r4, [r7]

					sx1 = sx0 + (int8_t)x1;
 8006546:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800654a:	f7fa fa7d 	bl	8000a48 <__aeabi_d2iz>
 800654e:	4603      	mov	r3, r0
 8006550:	b25b      	sxtb	r3, r3
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2218      	movs	r2, #24
 8006556:	4413      	add	r3, r2
 8006558:	74fb      	strb	r3, [r7, #19]
					sy1 = sy0 - (int8_t)y1;		//note: Y axis is inverted (counts from top to the bottom)
 800655a:	241f      	movs	r4, #31
 800655c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006560:	f7fa fa72 	bl	8000a48 <__aeabi_d2iz>
 8006564:	4603      	mov	r3, r0
 8006566:	b25b      	sxtb	r3, r3
 8006568:	b2db      	uxtb	r3, r3
 800656a:	1ae3      	subs	r3, r4, r3
 800656c:	74bb      	strb	r3, [r7, #18]


					ssd1306_pixel(sx1, sy1+1, 1);	//pixel cross
 800656e:	7cbb      	ldrb	r3, [r7, #18]
 8006570:	3301      	adds	r3, #1
 8006572:	b2d9      	uxtb	r1, r3
 8006574:	7cfb      	ldrb	r3, [r7, #19]
 8006576:	2201      	movs	r2, #1
 8006578:	4618      	mov	r0, r3
 800657a:	f002 fdc1 	bl	8009100 <ssd1306_pixel>
					ssd1306_pixel(sx1+1, sy1, 1);
 800657e:	7cfb      	ldrb	r3, [r7, #19]
 8006580:	3301      	adds	r3, #1
 8006582:	b2db      	uxtb	r3, r3
 8006584:	7cb9      	ldrb	r1, [r7, #18]
 8006586:	2201      	movs	r2, #1
 8006588:	4618      	mov	r0, r3
 800658a:	f002 fdb9 	bl	8009100 <ssd1306_pixel>
					ssd1306_pixel(sx1, sy1-1, 1);
 800658e:	7cbb      	ldrb	r3, [r7, #18]
 8006590:	3b01      	subs	r3, #1
 8006592:	b2d9      	uxtb	r1, r3
 8006594:	7cfb      	ldrb	r3, [r7, #19]
 8006596:	2201      	movs	r2, #1
 8006598:	4618      	mov	r0, r3
 800659a:	f002 fdb1 	bl	8009100 <ssd1306_pixel>
					ssd1306_pixel(sx1-1, sy1, 1);
 800659e:	7cfb      	ldrb	r3, [r7, #19]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	7cb9      	ldrb	r1, [r7, #18]
 80065a6:	2201      	movs	r2, #1
 80065a8:	4618      	mov	r0, r3
 80065aa:	f002 fda9 	bl	8009100 <ssd1306_pixel>

					//center pixel if device is selected
					if (dev == current_radar_device)
 80065ae:	4b11      	ldr	r3, [pc, #68]	; (80065f4 <draw_radar+0x9b4>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	7ffa      	ldrb	r2, [r7, #31]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d105      	bne.n	80065c4 <draw_radar+0x984>
					{
						ssd1306_pixel(sx1, sy1, 1);
 80065b8:	7cb9      	ldrb	r1, [r7, #18]
 80065ba:	7cfb      	ldrb	r3, [r7, #19]
 80065bc:	2201      	movs	r2, #1
 80065be:	4618      	mov	r0, r3
 80065c0:	f002 fd9e 	bl	8009100 <ssd1306_pixel>
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 80065c4:	7ffb      	ldrb	r3, [r7, #31]
 80065c6:	3301      	adds	r3, #1
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	7ffb      	ldrb	r3, [r7, #31]
 80065cc:	2b06      	cmp	r3, #6
 80065ce:	f67f af17 	bls.w	8006400 <draw_radar+0x7c0>
    			}
    		}
    	}
    }

	ssd1306_update();
 80065d2:	f002 fd5d 	bl	8009090 <ssd1306_update>
}
 80065d6:	bf00      	nop
 80065d8:	3734      	adds	r7, #52	; 0x34
 80065da:	46bd      	mov	sp, r7
 80065dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065e0:	20000738 	.word	0x20000738
 80065e4:	2000083c 	.word	0x2000083c
 80065e8:	20000830 	.word	0x20000830
 80065ec:	200007d0 	.word	0x200007d0
 80065f0:	0800cf40 	.word	0x0800cf40
 80065f4:	20000121 	.word	0x20000121

080065f8 <draw_points>:



//POINTS
void draw_points(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0

	save_memory_point(1, "TEST1", 1);

#endif

	read_memory_slots();
 80065fe:	f001 fb7d 	bl	8007cfc <read_memory_slots>

	ssd1306_clear();
 8006602:	f002 fd65 	bl	80090d0 <ssd1306_clear>
	ssd1306_print(0, POINTS_COL, "POINTS", 0);
 8006606:	2300      	movs	r3, #0
 8006608:	4a57      	ldr	r2, [pc, #348]	; (8006768 <draw_points+0x170>)
 800660a:	2101      	movs	r1, #1
 800660c:	2000      	movs	r0, #0
 800660e:	f002 fe66 	bl	80092de <ssd1306_print>

	for (uint8_t s = 1; s <= MEMORY_SLOTS_TOTAL; s++)
 8006612:	2301      	movs	r3, #1
 8006614:	71fb      	strb	r3, [r7, #7]
 8006616:	e094      	b.n	8006742 <draw_points+0x14a>
	{
		ssd1306_print(POINTS_ROW + s - 1, POINTS_COL, pp_memory_slot[s]->slot_name, 0);	//print slot name
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	3301      	adds	r3, #1
 800661c:	b2d8      	uxtb	r0, r3
 800661e:	4b53      	ldr	r3, [pc, #332]	; (800676c <draw_points+0x174>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	2300      	movs	r3, #0
 800662e:	2101      	movs	r1, #1
 8006630:	f002 fe55 	bl	80092de <ssd1306_print>

		if (pp_memory_slot[s]->exist_flag == 1)
 8006634:	4b4d      	ldr	r3, [pc, #308]	; (800676c <draw_points+0x174>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d172      	bne.n	800672c <draw_points+0x134>
		{
			ssd1306_print(POINTS_ROW + s - 1, POINTS_NAME_COL, pp_memory_slot[s]->point_name, 0);	//print point name
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	3301      	adds	r3, #1
 800664a:	b2d8      	uxtb	r0, r3
 800664c:	4b47      	ldr	r3, [pc, #284]	; (800676c <draw_points+0x174>)
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	1d1a      	adds	r2, r3, #4
 800665a:	2300      	movs	r3, #0
 800665c:	2104      	movs	r1, #4
 800665e:	f002 fe3e 	bl	80092de <ssd1306_print>

	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL, pp_memory_slot[s]->save_date[0], 0);	//print point save date
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	3301      	adds	r3, #1
 8006666:	b2d8      	uxtb	r0, r3
 8006668:	4b40      	ldr	r3, [pc, #256]	; (800676c <draw_points+0x174>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	7a9a      	ldrb	r2, [r3, #10]
 8006676:	2300      	movs	r3, #0
 8006678:	210a      	movs	r1, #10
 800667a:	f002 fe11 	bl	80092a0 <ssd1306_char_pos>
	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL + 1, pp_memory_slot[s]->save_date[1], 0);
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	3301      	adds	r3, #1
 8006682:	b2d8      	uxtb	r0, r3
 8006684:	4b39      	ldr	r3, [pc, #228]	; (800676c <draw_points+0x174>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	7ada      	ldrb	r2, [r3, #11]
 8006692:	2300      	movs	r3, #0
 8006694:	210b      	movs	r1, #11
 8006696:	f002 fe03 	bl	80092a0 <ssd1306_char_pos>
	        ssd1306_print(POINTS_ROW + s - 1, POINTS_DATE_COL + 2, ".", 0);
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	3301      	adds	r3, #1
 800669e:	b2d8      	uxtb	r0, r3
 80066a0:	2300      	movs	r3, #0
 80066a2:	4a33      	ldr	r2, [pc, #204]	; (8006770 <draw_points+0x178>)
 80066a4:	210c      	movs	r1, #12
 80066a6:	f002 fe1a 	bl	80092de <ssd1306_print>

	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL + 3, pp_memory_slot[s]->save_date[2], 0);
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	3301      	adds	r3, #1
 80066ae:	b2d8      	uxtb	r0, r3
 80066b0:	4b2e      	ldr	r3, [pc, #184]	; (800676c <draw_points+0x174>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	7b1a      	ldrb	r2, [r3, #12]
 80066be:	2300      	movs	r3, #0
 80066c0:	210d      	movs	r1, #13
 80066c2:	f002 fded 	bl	80092a0 <ssd1306_char_pos>
	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL + 4, pp_memory_slot[s]->save_date[3], 0);
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	3301      	adds	r3, #1
 80066ca:	b2d8      	uxtb	r0, r3
 80066cc:	4b27      	ldr	r3, [pc, #156]	; (800676c <draw_points+0x174>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	7b5a      	ldrb	r2, [r3, #13]
 80066da:	2300      	movs	r3, #0
 80066dc:	210e      	movs	r1, #14
 80066de:	f002 fddf 	bl	80092a0 <ssd1306_char_pos>
	        ssd1306_print(POINTS_ROW + s - 1, POINTS_DATE_COL + 5, ".", 0);
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	3301      	adds	r3, #1
 80066e6:	b2d8      	uxtb	r0, r3
 80066e8:	2300      	movs	r3, #0
 80066ea:	4a21      	ldr	r2, [pc, #132]	; (8006770 <draw_points+0x178>)
 80066ec:	210f      	movs	r1, #15
 80066ee:	f002 fdf6 	bl	80092de <ssd1306_print>

	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL + 6, pp_memory_slot[s]->save_date[4], 0);
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	3301      	adds	r3, #1
 80066f6:	b2d8      	uxtb	r0, r3
 80066f8:	4b1c      	ldr	r3, [pc, #112]	; (800676c <draw_points+0x174>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	7b9a      	ldrb	r2, [r3, #14]
 8006706:	2300      	movs	r3, #0
 8006708:	2110      	movs	r1, #16
 800670a:	f002 fdc9 	bl	80092a0 <ssd1306_char_pos>
	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL + 7, pp_memory_slot[s]->save_date[5], 0);
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	3301      	adds	r3, #1
 8006712:	b2d8      	uxtb	r0, r3
 8006714:	4b15      	ldr	r3, [pc, #84]	; (800676c <draw_points+0x174>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	7bda      	ldrb	r2, [r3, #15]
 8006722:	2300      	movs	r3, #0
 8006724:	2111      	movs	r1, #17
 8006726:	f002 fdbb 	bl	80092a0 <ssd1306_char_pos>
 800672a:	e007      	b.n	800673c <draw_points+0x144>
		}
		else
		{
			ssd1306_print(POINTS_ROW + s - 1, POINTS_NAME_COL, "empty", 0);
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	3301      	adds	r3, #1
 8006730:	b2d8      	uxtb	r0, r3
 8006732:	2300      	movs	r3, #0
 8006734:	4a0f      	ldr	r2, [pc, #60]	; (8006774 <draw_points+0x17c>)
 8006736:	2104      	movs	r1, #4
 8006738:	f002 fdd1 	bl	80092de <ssd1306_print>
	for (uint8_t s = 1; s <= MEMORY_SLOTS_TOTAL; s++)
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	3301      	adds	r3, #1
 8006740:	71fb      	strb	r3, [r7, #7]
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	2b05      	cmp	r3, #5
 8006746:	f67f af67 	bls.w	8006618 <draw_points+0x20>
		}
	}

	ssd1306_print(POINTS_ROW + current_slot_to_load - 1, POINTS_COL - 1, ">", 0);	//print pointer
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <draw_points+0x180>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	3301      	adds	r3, #1
 8006750:	b2d8      	uxtb	r0, r3
 8006752:	2300      	movs	r3, #0
 8006754:	4a09      	ldr	r2, [pc, #36]	; (800677c <draw_points+0x184>)
 8006756:	2100      	movs	r1, #0
 8006758:	f002 fdc1 	bl	80092de <ssd1306_print>

	ssd1306_update();
 800675c:	f002 fc98 	bl	8009090 <ssd1306_update>
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	0800cb7c 	.word	0x0800cb7c
 800676c:	200007d4 	.word	0x200007d4
 8006770:	0800ca28 	.word	0x0800ca28
 8006774:	0800cb84 	.word	0x0800cb84
 8006778:	20000033 	.word	0x20000033
 800677c:	0800ca14 	.word	0x0800ca14

08006780 <draw_each_point>:



void draw_each_point(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
    #define EACH_POINT_ROW               (2)
    #define EACH_POINT_COL               (1)

    ssd1306_clear();
 8006784:	f002 fca4 	bl	80090d0 <ssd1306_clear>

	ssd1306_print(0, EACH_POINT_COL, "POINT ", 0);
 8006788:	2300      	movs	r3, #0
 800678a:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <draw_each_point+0x60>)
 800678c:	2101      	movs	r1, #1
 800678e:	2000      	movs	r0, #0
 8006790:	f002 fda5 	bl	80092de <ssd1306_print>
	ssd1306_print_next(pp_memory_slot[current_slot_to_load]->slot_name, 0);
 8006794:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <draw_each_point+0x64>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <draw_each_point+0x68>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	2100      	movs	r1, #0
 80067a6:	4618      	mov	r0, r3
 80067a8:	f002 fdf8 	bl	800939c <ssd1306_print_next>

	ssd1306_print(EACH_POINT_ROW, EACH_POINT_COL, "Load", 0);
 80067ac:	2300      	movs	r3, #0
 80067ae:	4a0f      	ldr	r2, [pc, #60]	; (80067ec <draw_each_point+0x6c>)
 80067b0:	2101      	movs	r1, #1
 80067b2:	2002      	movs	r0, #2
 80067b4:	f002 fd93 	bl	80092de <ssd1306_print>
	ssd1306_print(EACH_POINT_ROW + 1, EACH_POINT_COL, "Delete", 0);
 80067b8:	2300      	movs	r3, #0
 80067ba:	4a0d      	ldr	r2, [pc, #52]	; (80067f0 <draw_each_point+0x70>)
 80067bc:	2101      	movs	r1, #1
 80067be:	2003      	movs	r0, #3
 80067c0:	f002 fd8d 	bl	80092de <ssd1306_print>
	ssd1306_print(EACH_POINT_ROW + get_current_item(), EACH_POINT_COL - 1, ">", 0);
 80067c4:	f7fd fcce 	bl	8004164 <get_current_item>
 80067c8:	4603      	mov	r3, r0
 80067ca:	3302      	adds	r3, #2
 80067cc:	b2d8      	uxtb	r0, r3
 80067ce:	2300      	movs	r3, #0
 80067d0:	4a08      	ldr	r2, [pc, #32]	; (80067f4 <draw_each_point+0x74>)
 80067d2:	2100      	movs	r1, #0
 80067d4:	f002 fd83 	bl	80092de <ssd1306_print>

    ssd1306_update();
 80067d8:	f002 fc5a 	bl	8009090 <ssd1306_update>
}
 80067dc:	bf00      	nop
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	0800cb8c 	.word	0x0800cb8c
 80067e4:	200007d4 	.word	0x200007d4
 80067e8:	20000033 	.word	0x20000033
 80067ec:	0800cb94 	.word	0x0800cb94
 80067f0:	0800cadc 	.word	0x0800cadc
 80067f4:	0800ca14 	.word	0x0800ca14

080067f8 <draw_load_point>:



void draw_load_point(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
	#define LOAD_POINT_ROW               (2)
	#define LOAD_POINT_COL               (1)

	ssd1306_clear();
 80067fe:	f002 fc67 	bl	80090d0 <ssd1306_clear>

	ssd1306_print(0, LOAD_POINT_COL, "Where to load ", 0);
 8006802:	2300      	movs	r3, #0
 8006804:	4a34      	ldr	r2, [pc, #208]	; (80068d8 <draw_load_point+0xe0>)
 8006806:	2101      	movs	r1, #1
 8006808:	2000      	movs	r0, #0
 800680a:	f002 fd68 	bl	80092de <ssd1306_print>
	ssd1306_print_next(pp_memory_slot[current_slot_to_load]->slot_name, 0);
 800680e:	4b33      	ldr	r3, [pc, #204]	; (80068dc <draw_load_point+0xe4>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	4b33      	ldr	r3, [pc, #204]	; (80068e0 <draw_load_point+0xe8>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3301      	adds	r3, #1
 800681e:	2100      	movs	r1, #0
 8006820:	4618      	mov	r0, r3
 8006822:	f002 fdbb 	bl	800939c <ssd1306_print_next>
	ssd1306_print_next("?", 0);
 8006826:	2100      	movs	r1, #0
 8006828:	482e      	ldr	r0, [pc, #184]	; (80068e4 <draw_load_point+0xec>)
 800682a:	f002 fdb7 	bl	800939c <ssd1306_print_next>

    uint8_t another_device_to_load_row = LOAD_POINT_ROW;
 800682e:	2302      	movs	r3, #2
 8006830:	71fb      	strb	r3, [r7, #7]
    uint8_t devices_enlisted_cntr = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	71bb      	strb	r3, [r7, #6]

    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8006836:	2301      	movs	r3, #1
 8006838:	717b      	strb	r3, [r7, #5]
 800683a:	e02a      	b.n	8006892 <draw_load_point+0x9a>
    {
		if (pp_dev_aux[dev]->exist_flag == 0)
 800683c:	4b2a      	ldr	r3, [pc, #168]	; (80068e8 <draw_load_point+0xf0>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	797b      	ldrb	r3, [r7, #5]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d11e      	bne.n	800688c <draw_load_point+0x94>
		{
			device_to_load_list[dev] = devices_enlisted_cntr++; 		//first nonexisting device will get index 0
 800684e:	79bb      	ldrb	r3, [r7, #6]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	71ba      	strb	r2, [r7, #6]
 8006854:	797a      	ldrb	r2, [r7, #5]
 8006856:	4925      	ldr	r1, [pc, #148]	; (80068ec <draw_load_point+0xf4>)
 8006858:	548b      	strb	r3, [r1, r2]

			if (current_device_to_load == 0) //if for the first time
 800685a:	4b25      	ldr	r3, [pc, #148]	; (80068f0 <draw_load_point+0xf8>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d102      	bne.n	8006868 <draw_load_point+0x70>
			{
				current_device_to_load = dev;
 8006862:	4a23      	ldr	r2, [pc, #140]	; (80068f0 <draw_load_point+0xf8>)
 8006864:	797b      	ldrb	r3, [r7, #5]
 8006866:	7013      	strb	r3, [r2, #0]
			}

			//Device
			ssd1306_print(another_device_to_load_row, LOAD_POINT_COL, "Device ", 0);
 8006868:	79f8      	ldrb	r0, [r7, #7]
 800686a:	2300      	movs	r3, #0
 800686c:	4a21      	ldr	r2, [pc, #132]	; (80068f4 <draw_load_point+0xfc>)
 800686e:	2101      	movs	r1, #1
 8006870:	f002 fd35 	bl	80092de <ssd1306_print>

            //Number
			itoa32(dev, &buf[0]);
 8006874:	797b      	ldrb	r3, [r7, #5]
 8006876:	4920      	ldr	r1, [pc, #128]	; (80068f8 <draw_load_point+0x100>)
 8006878:	4618      	mov	r0, r3
 800687a:	f001 ffcd 	bl	8008818 <itoa32>
			ssd1306_print_next(&buf[0], 0);
 800687e:	2100      	movs	r1, #0
 8006880:	481d      	ldr	r0, [pc, #116]	; (80068f8 <draw_load_point+0x100>)
 8006882:	f002 fd8b 	bl	800939c <ssd1306_print_next>

			another_device_to_load_row++;
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	3301      	adds	r3, #1
 800688a:	71fb      	strb	r3, [r7, #7]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 800688c:	797b      	ldrb	r3, [r7, #5]
 800688e:	3301      	adds	r3, #1
 8006890:	717b      	strb	r3, [r7, #5]
 8006892:	797b      	ldrb	r3, [r7, #5]
 8006894:	2b06      	cmp	r3, #6
 8006896:	d9d1      	bls.n	800683c <draw_load_point+0x44>
		}
    }

    if (devices_enlisted_cntr > 0)
 8006898:	79bb      	ldrb	r3, [r7, #6]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00c      	beq.n	80068b8 <draw_load_point+0xc0>
    {
    	ssd1306_print(LOAD_POINT_ROW + device_to_load_list[current_device_to_load], LOAD_POINT_COL - 1, ">", 0);
 800689e:	4b14      	ldr	r3, [pc, #80]	; (80068f0 <draw_load_point+0xf8>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	4b11      	ldr	r3, [pc, #68]	; (80068ec <draw_load_point+0xf4>)
 80068a6:	5c9b      	ldrb	r3, [r3, r2]
 80068a8:	3302      	adds	r3, #2
 80068aa:	b2d8      	uxtb	r0, r3
 80068ac:	2300      	movs	r3, #0
 80068ae:	4a13      	ldr	r2, [pc, #76]	; (80068fc <draw_load_point+0x104>)
 80068b0:	2100      	movs	r1, #0
 80068b2:	f002 fd14 	bl	80092de <ssd1306_print>
 80068b6:	e008      	b.n	80068ca <draw_load_point+0xd2>
    }
    else
    {
    	ssd1306_print(LOAD_POINT_ROW, LOAD_POINT_COL, "no empty devices", 0);
 80068b8:	2300      	movs	r3, #0
 80068ba:	4a11      	ldr	r2, [pc, #68]	; (8006900 <draw_load_point+0x108>)
 80068bc:	2101      	movs	r1, #1
 80068be:	2002      	movs	r0, #2
 80068c0:	f002 fd0d 	bl	80092de <ssd1306_print>
    	current_device_to_load = 0;
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <draw_load_point+0xf8>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
    }

	ssd1306_update();
 80068ca:	f002 fbe1 	bl	8009090 <ssd1306_update>
}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	0800cb9c 	.word	0x0800cb9c
 80068dc:	200007d4 	.word	0x200007d4
 80068e0:	20000033 	.word	0x20000033
 80068e4:	0800caf4 	.word	0x0800caf4
 80068e8:	2000083c 	.word	0x2000083c
 80068ec:	200007ec 	.word	0x200007ec
 80068f0:	20000122 	.word	0x20000122
 80068f4:	0800cbac 	.word	0x0800cbac
 80068f8:	20000810 	.word	0x20000810
 80068fc:	0800ca14 	.word	0x0800ca14
 8006900:	0800cbb4 	.word	0x0800cbb4

08006904 <draw_delete_point>:



void draw_delete_point(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
    ssd1306_clear();
 8006908:	f002 fbe2 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, 1, "Delete point ", 0);
 800690c:	2300      	movs	r3, #0
 800690e:	4a12      	ldr	r2, [pc, #72]	; (8006958 <draw_delete_point+0x54>)
 8006910:	2101      	movs	r1, #1
 8006912:	2000      	movs	r0, #0
 8006914:	f002 fce3 	bl	80092de <ssd1306_print>
    ssd1306_print_next(pp_memory_slot[current_slot_to_load]->slot_name, 0);
 8006918:	4b10      	ldr	r3, [pc, #64]	; (800695c <draw_delete_point+0x58>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4b10      	ldr	r3, [pc, #64]	; (8006960 <draw_delete_point+0x5c>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3301      	adds	r3, #1
 8006928:	2100      	movs	r1, #0
 800692a:	4618      	mov	r0, r3
 800692c:	f002 fd36 	bl	800939c <ssd1306_print_next>
    ssd1306_print_next("?", 0);
 8006930:	2100      	movs	r1, #0
 8006932:	480c      	ldr	r0, [pc, #48]	; (8006964 <draw_delete_point+0x60>)
 8006934:	f002 fd32 	bl	800939c <ssd1306_print_next>
    ssd1306_print(3, 1, "OK - delete", 0);
 8006938:	2300      	movs	r3, #0
 800693a:	4a0b      	ldr	r2, [pc, #44]	; (8006968 <draw_delete_point+0x64>)
 800693c:	2101      	movs	r1, #1
 800693e:	2003      	movs	r0, #3
 8006940:	f002 fccd 	bl	80092de <ssd1306_print>
    ssd1306_print(4, 1, "ESC - cancel", 0);
 8006944:	2300      	movs	r3, #0
 8006946:	4a09      	ldr	r2, [pc, #36]	; (800696c <draw_delete_point+0x68>)
 8006948:	2101      	movs	r1, #1
 800694a:	2004      	movs	r0, #4
 800694c:	f002 fcc7 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8006950:	f002 fb9e 	bl	8009090 <ssd1306_update>
}
 8006954:	bf00      	nop
 8006956:	bd80      	pop	{r7, pc}
 8006958:	0800cbc8 	.word	0x0800cbc8
 800695c:	200007d4 	.word	0x200007d4
 8006960:	20000033 	.word	0x20000033
 8006964:	0800caf4 	.word	0x0800caf4
 8006968:	0800cb0c 	.word	0x0800cb0c
 800696c:	0800cb18 	.word	0x0800cb18

08006970 <draw_settings>:



//SETTINGS
void draw_settings(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
    #define SETTINGS_ROW               (2)
    #define SETTINGS_COL               (1)
    
    ssd1306_clear();
 8006974:	f002 fbac 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, SETTINGS_COL, "SETTINGS", 0);
 8006978:	2300      	movs	r3, #0
 800697a:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <draw_settings+0x54>)
 800697c:	2101      	movs	r1, #1
 800697e:	2000      	movs	r0, #0
 8006980:	f002 fcad 	bl	80092de <ssd1306_print>
    ssd1306_print(SETTINGS_ROW, SETTINGS_COL, "Edit", 0);
 8006984:	2300      	movs	r3, #0
 8006986:	4a10      	ldr	r2, [pc, #64]	; (80069c8 <draw_settings+0x58>)
 8006988:	2101      	movs	r1, #1
 800698a:	2002      	movs	r0, #2
 800698c:	f002 fca7 	bl	80092de <ssd1306_print>
    ssd1306_print(SETTINGS_ROW + 1, SETTINGS_COL, "Restore", 0);
 8006990:	2300      	movs	r3, #0
 8006992:	4a0e      	ldr	r2, [pc, #56]	; (80069cc <draw_settings+0x5c>)
 8006994:	2101      	movs	r1, #1
 8006996:	2003      	movs	r0, #3
 8006998:	f002 fca1 	bl	80092de <ssd1306_print>
    ssd1306_print(SETTINGS_ROW + 2, SETTINGS_COL, "Erase", 0);
 800699c:	2300      	movs	r3, #0
 800699e:	4a0c      	ldr	r2, [pc, #48]	; (80069d0 <draw_settings+0x60>)
 80069a0:	2101      	movs	r1, #1
 80069a2:	2004      	movs	r0, #4
 80069a4:	f002 fc9b 	bl	80092de <ssd1306_print>
    ssd1306_print(SETTINGS_ROW + get_current_item(), SETTINGS_COL - 1, ">", 0);
 80069a8:	f7fd fbdc 	bl	8004164 <get_current_item>
 80069ac:	4603      	mov	r3, r0
 80069ae:	3302      	adds	r3, #2
 80069b0:	b2d8      	uxtb	r0, r3
 80069b2:	2300      	movs	r3, #0
 80069b4:	4a07      	ldr	r2, [pc, #28]	; (80069d4 <draw_settings+0x64>)
 80069b6:	2100      	movs	r1, #0
 80069b8:	f002 fc91 	bl	80092de <ssd1306_print>
    ssd1306_update();
 80069bc:	f002 fb68 	bl	8009090 <ssd1306_update>
}
 80069c0:	bf00      	nop
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	0800cbd8 	.word	0x0800cbd8
 80069c8:	0800cbe4 	.word	0x0800cbe4
 80069cc:	0800cbec 	.word	0x0800cbec
 80069d0:	0800cbf4 	.word	0x0800cbf4
 80069d4:	0800ca14 	.word	0x0800ca14

080069d8 <draw_info>:



//INFO
void draw_info(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
    ssd1306_clear();
 80069dc:	f002 fb78 	bl	80090d0 <ssd1306_clear>

    ssd1306_bitmap(&info_blank[0]);
 80069e0:	481a      	ldr	r0, [pc, #104]	; (8006a4c <draw_info+0x74>)
 80069e2:	f002 fcf3 	bl	80093cc <ssd1306_bitmap>

    ssd1306_print(0, 0, "LRNS", 0);
 80069e6:	2300      	movs	r3, #0
 80069e8:	4a19      	ldr	r2, [pc, #100]	; (8006a50 <draw_info+0x78>)
 80069ea:	2100      	movs	r1, #0
 80069ec:	2000      	movs	r0, #0
 80069ee:	f002 fc76 	bl	80092de <ssd1306_print>

    ssd1306_print(2, 0, "HW/FW: ", 0);
 80069f2:	2300      	movs	r3, #0
 80069f4:	4a17      	ldr	r2, [pc, #92]	; (8006a54 <draw_info+0x7c>)
 80069f6:	2100      	movs	r1, #0
 80069f8:	2002      	movs	r0, #2
 80069fa:	f002 fc70 	bl	80092de <ssd1306_print>
    ssd1306_print_next(HW_VERSION, 0);
 80069fe:	4b16      	ldr	r3, [pc, #88]	; (8006a58 <draw_info+0x80>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2100      	movs	r1, #0
 8006a04:	4618      	mov	r0, r3
 8006a06:	f002 fcc9 	bl	800939c <ssd1306_print_next>
    ssd1306_print_next("/", 0);
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4813      	ldr	r0, [pc, #76]	; (8006a5c <draw_info+0x84>)
 8006a0e:	f002 fcc5 	bl	800939c <ssd1306_print_next>
    ssd1306_print_next(FW_VERSION, 0);
 8006a12:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <draw_info+0x88>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2100      	movs	r1, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f002 fcbf 	bl	800939c <ssd1306_print_next>

    ssd1306_print(3, 0, __TIME__, 0);
 8006a1e:	2300      	movs	r3, #0
 8006a20:	4a10      	ldr	r2, [pc, #64]	; (8006a64 <draw_info+0x8c>)
 8006a22:	2100      	movs	r1, #0
 8006a24:	2003      	movs	r0, #3
 8006a26:	f002 fc5a 	bl	80092de <ssd1306_print>
    ssd1306_print(4, 0, __DATE__, 0);
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4a0e      	ldr	r2, [pc, #56]	; (8006a68 <draw_info+0x90>)
 8006a2e:	2100      	movs	r1, #0
 8006a30:	2004      	movs	r0, #4
 8006a32:	f002 fc54 	bl	80092de <ssd1306_print>

    ssd1306_print(7, 0, "(C)2021 Feruz Topalov", 0);
 8006a36:	2300      	movs	r3, #0
 8006a38:	4a0c      	ldr	r2, [pc, #48]	; (8006a6c <draw_info+0x94>)
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	2007      	movs	r0, #7
 8006a3e:	f002 fc4e 	bl	80092de <ssd1306_print>

    ssd1306_update();
 8006a42:	f002 fb25 	bl	8009090 <ssd1306_update>
}
 8006a46:	bf00      	nop
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	0800e144 	.word	0x0800e144
 8006a50:	0800cbfc 	.word	0x0800cbfc
 8006a54:	0800cc04 	.word	0x0800cc04
 8006a58:	2000001c 	.word	0x2000001c
 8006a5c:	0800ca80 	.word	0x0800ca80
 8006a60:	20000018 	.word	0x20000018
 8006a64:	0800cc0c 	.word	0x0800cc0c
 8006a68:	0800cc18 	.word	0x0800cc18
 8006a6c:	0800cc24 	.word	0x0800cc24

08006a70 <draw_edit_settings>:



//EDIT SETTINGS
void draw_edit_settings(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
    #define EDIT_SETTINGS_ROW               (1)
    #define EDIT_SETTINGS_COL               (1)
    #define EDIT_SETTINGS_PARAM_COL         (15)
    
    ssd1306_clear();
 8006a74:	f002 fb2c 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, EDIT_SETTINGS_COL + 1, "EDIT SETTINGS", 0);
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4a57      	ldr	r2, [pc, #348]	; (8006bd8 <draw_edit_settings+0x168>)
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	2000      	movs	r0, #0
 8006a80:	f002 fc2d 	bl	80092de <ssd1306_print>
    
    ssd1306_print(EDIT_SETTINGS_ROW, EDIT_SETTINGS_COL, "Device number", 0);
 8006a84:	2300      	movs	r3, #0
 8006a86:	4a55      	ldr	r2, [pc, #340]	; (8006bdc <draw_edit_settings+0x16c>)
 8006a88:	2101      	movs	r1, #1
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	f002 fc27 	bl	80092de <ssd1306_print>
    itoa32(settings_copy.device_number, &buf[0]);
 8006a90:	4b53      	ldr	r3, [pc, #332]	; (8006be0 <draw_edit_settings+0x170>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	4953      	ldr	r1, [pc, #332]	; (8006be4 <draw_edit_settings+0x174>)
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 febe 	bl	8008818 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4a51      	ldr	r2, [pc, #324]	; (8006be4 <draw_edit_settings+0x174>)
 8006aa0:	210f      	movs	r1, #15
 8006aa2:	2001      	movs	r0, #1
 8006aa4:	f002 fc1b 	bl	80092de <ssd1306_print>
    
    ssd1306_print(EDIT_SETTINGS_ROW + 1, EDIT_SETTINGS_COL, "Device ID", 0);
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4a4f      	ldr	r2, [pc, #316]	; (8006be8 <draw_edit_settings+0x178>)
 8006aac:	2101      	movs	r1, #1
 8006aae:	2002      	movs	r0, #2
 8006ab0:	f002 fc15 	bl	80092de <ssd1306_print>
    buf[0] = settings_copy.device_id[0];
 8006ab4:	4b4a      	ldr	r3, [pc, #296]	; (8006be0 <draw_edit_settings+0x170>)
 8006ab6:	785a      	ldrb	r2, [r3, #1]
 8006ab8:	4b4a      	ldr	r3, [pc, #296]	; (8006be4 <draw_edit_settings+0x174>)
 8006aba:	701a      	strb	r2, [r3, #0]
    buf[1] = settings_copy.device_id[1];
 8006abc:	4b48      	ldr	r3, [pc, #288]	; (8006be0 <draw_edit_settings+0x170>)
 8006abe:	789a      	ldrb	r2, [r3, #2]
 8006ac0:	4b48      	ldr	r3, [pc, #288]	; (8006be4 <draw_edit_settings+0x174>)
 8006ac2:	705a      	strb	r2, [r3, #1]
    buf[2] = 0;
 8006ac4:	4b47      	ldr	r3, [pc, #284]	; (8006be4 <draw_edit_settings+0x174>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	709a      	strb	r2, [r3, #2]
    ssd1306_print(EDIT_SETTINGS_ROW + 1, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006aca:	2300      	movs	r3, #0
 8006acc:	4a45      	ldr	r2, [pc, #276]	; (8006be4 <draw_edit_settings+0x174>)
 8006ace:	210f      	movs	r1, #15
 8006ad0:	2002      	movs	r0, #2
 8006ad2:	f002 fc04 	bl	80092de <ssd1306_print>
    
    ssd1306_print(EDIT_SETTINGS_ROW + 2, EDIT_SETTINGS_COL, "Freq channel", 0);
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	4a44      	ldr	r2, [pc, #272]	; (8006bec <draw_edit_settings+0x17c>)
 8006ada:	2101      	movs	r1, #1
 8006adc:	2003      	movs	r0, #3
 8006ade:	f002 fbfe 	bl	80092de <ssd1306_print>
    itoa32(settings_copy.freq_channel, &buf[0]);
 8006ae2:	4b3f      	ldr	r3, [pc, #252]	; (8006be0 <draw_edit_settings+0x170>)
 8006ae4:	78db      	ldrb	r3, [r3, #3]
 8006ae6:	493f      	ldr	r1, [pc, #252]	; (8006be4 <draw_edit_settings+0x174>)
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 fe95 	bl	8008818 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW + 2, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006aee:	2300      	movs	r3, #0
 8006af0:	4a3c      	ldr	r2, [pc, #240]	; (8006be4 <draw_edit_settings+0x174>)
 8006af2:	210f      	movs	r1, #15
 8006af4:	2003      	movs	r0, #3
 8006af6:	f002 fbf2 	bl	80092de <ssd1306_print>
    
    ssd1306_print(EDIT_SETTINGS_ROW + 3, EDIT_SETTINGS_COL, "TX power", 0);
 8006afa:	2300      	movs	r3, #0
 8006afc:	4a3c      	ldr	r2, [pc, #240]	; (8006bf0 <draw_edit_settings+0x180>)
 8006afe:	2101      	movs	r1, #1
 8006b00:	2004      	movs	r0, #4
 8006b02:	f002 fbec 	bl	80092de <ssd1306_print>
    itoa32(p_get_tx_power_values[settings_copy.tx_power_opt], &buf[0]);
 8006b06:	4b3b      	ldr	r3, [pc, #236]	; (8006bf4 <draw_edit_settings+0x184>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a35      	ldr	r2, [pc, #212]	; (8006be0 <draw_edit_settings+0x170>)
 8006b0c:	7912      	ldrb	r2, [r2, #4]
 8006b0e:	4413      	add	r3, r2
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	4934      	ldr	r1, [pc, #208]	; (8006be4 <draw_edit_settings+0x174>)
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fe7f 	bl	8008818 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW + 3, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4a31      	ldr	r2, [pc, #196]	; (8006be4 <draw_edit_settings+0x174>)
 8006b1e:	210f      	movs	r1, #15
 8006b20:	2004      	movs	r0, #4
 8006b22:	f002 fbdc 	bl	80092de <ssd1306_print>
    ssd1306_print_next(" mW", 0);
 8006b26:	2100      	movs	r1, #0
 8006b28:	4833      	ldr	r0, [pc, #204]	; (8006bf8 <draw_edit_settings+0x188>)
 8006b2a:	f002 fc37 	bl	800939c <ssd1306_print_next>
    
    ssd1306_print(EDIT_SETTINGS_ROW + 4, EDIT_SETTINGS_COL, "Send interval", 0);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4a32      	ldr	r2, [pc, #200]	; (8006bfc <draw_edit_settings+0x18c>)
 8006b32:	2101      	movs	r1, #1
 8006b34:	2005      	movs	r0, #5
 8006b36:	f002 fbd2 	bl	80092de <ssd1306_print>
    itoa32(p_send_interval_values[settings_copy.send_interval_opt], &buf[0]);
 8006b3a:	4b31      	ldr	r3, [pc, #196]	; (8006c00 <draw_edit_settings+0x190>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a28      	ldr	r2, [pc, #160]	; (8006be0 <draw_edit_settings+0x170>)
 8006b40:	7952      	ldrb	r2, [r2, #5]
 8006b42:	4413      	add	r3, r2
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	4927      	ldr	r1, [pc, #156]	; (8006be4 <draw_edit_settings+0x174>)
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 fe65 	bl	8008818 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW + 4, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006b4e:	2300      	movs	r3, #0
 8006b50:	4a24      	ldr	r2, [pc, #144]	; (8006be4 <draw_edit_settings+0x174>)
 8006b52:	210f      	movs	r1, #15
 8006b54:	2005      	movs	r0, #5
 8006b56:	f002 fbc2 	bl	80092de <ssd1306_print>
    ssd1306_print_next(" s", 0);
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4829      	ldr	r0, [pc, #164]	; (8006c04 <draw_edit_settings+0x194>)
 8006b5e:	f002 fc1d 	bl	800939c <ssd1306_print_next>

    ssd1306_print(EDIT_SETTINGS_ROW + 5, EDIT_SETTINGS_COL, "Timeout thr", 0);
 8006b62:	2300      	movs	r3, #0
 8006b64:	4a28      	ldr	r2, [pc, #160]	; (8006c08 <draw_edit_settings+0x198>)
 8006b66:	2101      	movs	r1, #1
 8006b68:	2006      	movs	r0, #6
 8006b6a:	f002 fbb8 	bl	80092de <ssd1306_print>
    itoa32(settings_copy.timeout_threshold.as_integer, &buf[0]);
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <draw_edit_settings+0x170>)
 8006b70:	88db      	ldrh	r3, [r3, #6]
 8006b72:	491c      	ldr	r1, [pc, #112]	; (8006be4 <draw_edit_settings+0x174>)
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 fe4f 	bl	8008818 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW + 5, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <draw_edit_settings+0x174>)
 8006b7e:	210f      	movs	r1, #15
 8006b80:	2006      	movs	r0, #6
 8006b82:	f002 fbac 	bl	80092de <ssd1306_print>
    ssd1306_print_next(" s", 0);
 8006b86:	2100      	movs	r1, #0
 8006b88:	481e      	ldr	r0, [pc, #120]	; (8006c04 <draw_edit_settings+0x194>)
 8006b8a:	f002 fc07 	bl	800939c <ssd1306_print_next>

    ssd1306_print(EDIT_SETTINGS_ROW + 6, EDIT_SETTINGS_COL, "Fence thr", 0);
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4a1e      	ldr	r2, [pc, #120]	; (8006c0c <draw_edit_settings+0x19c>)
 8006b92:	2101      	movs	r1, #1
 8006b94:	2007      	movs	r0, #7
 8006b96:	f002 fba2 	bl	80092de <ssd1306_print>
    itoa32(settings_copy.fence_threshold.as_integer, &buf[0]);
 8006b9a:	4b11      	ldr	r3, [pc, #68]	; (8006be0 <draw_edit_settings+0x170>)
 8006b9c:	891b      	ldrh	r3, [r3, #8]
 8006b9e:	4911      	ldr	r1, [pc, #68]	; (8006be4 <draw_edit_settings+0x174>)
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 fe39 	bl	8008818 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW + 6, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	4a0e      	ldr	r2, [pc, #56]	; (8006be4 <draw_edit_settings+0x174>)
 8006baa:	210f      	movs	r1, #15
 8006bac:	2007      	movs	r0, #7
 8006bae:	f002 fb96 	bl	80092de <ssd1306_print>
    ssd1306_print_next(" m", 0);
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	4816      	ldr	r0, [pc, #88]	; (8006c10 <draw_edit_settings+0x1a0>)
 8006bb6:	f002 fbf1 	bl	800939c <ssd1306_print_next>

    ssd1306_print(EDIT_SETTINGS_ROW + get_current_item(), EDIT_SETTINGS_COL - 1, ">", 0);
 8006bba:	f7fd fad3 	bl	8004164 <get_current_item>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	b2d8      	uxtb	r0, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4a13      	ldr	r2, [pc, #76]	; (8006c14 <draw_edit_settings+0x1a4>)
 8006bc8:	2100      	movs	r1, #0
 8006bca:	f002 fb88 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8006bce:	f002 fa5f 	bl	8009090 <ssd1306_update>
}
 8006bd2:	bf00      	nop
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	0800cc3c 	.word	0x0800cc3c
 8006bdc:	0800cc4c 	.word	0x0800cc4c
 8006be0:	200007e0 	.word	0x200007e0
 8006be4:	20000810 	.word	0x20000810
 8006be8:	0800cc5c 	.word	0x0800cc5c
 8006bec:	0800cc68 	.word	0x0800cc68
 8006bf0:	0800cc78 	.word	0x0800cc78
 8006bf4:	2000080c 	.word	0x2000080c
 8006bf8:	0800cc84 	.word	0x0800cc84
 8006bfc:	0800cc88 	.word	0x0800cc88
 8006c00:	200007cc 	.word	0x200007cc
 8006c04:	0800cc98 	.word	0x0800cc98
 8006c08:	0800cc9c 	.word	0x0800cc9c
 8006c0c:	0800cca8 	.word	0x0800cca8
 8006c10:	0800ccb4 	.word	0x0800ccb4
 8006c14:	0800ca14 	.word	0x0800ca14

08006c18 <draw_set_dev_num>:



//SET DEV NUM
void draw_set_dev_num(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
    #define SET_DEV_NUM_ROW                 (2)
    #define SET_DEV_NUM_COL                 (1)
    #define SET_DEV_NUM_PARAM_COL           (15)
    
    ssd1306_clear();
 8006c1c:	f002 fa58 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, SET_DEV_NUM_COL, "SET DEV NUM", 0);
 8006c20:	2300      	movs	r3, #0
 8006c22:	4a10      	ldr	r2, [pc, #64]	; (8006c64 <draw_set_dev_num+0x4c>)
 8006c24:	2101      	movs	r1, #1
 8006c26:	2000      	movs	r0, #0
 8006c28:	f002 fb59 	bl	80092de <ssd1306_print>
    
    ssd1306_print(SET_DEV_NUM_ROW, SET_DEV_NUM_COL, "Device number", 0);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4a0e      	ldr	r2, [pc, #56]	; (8006c68 <draw_set_dev_num+0x50>)
 8006c30:	2101      	movs	r1, #1
 8006c32:	2002      	movs	r0, #2
 8006c34:	f002 fb53 	bl	80092de <ssd1306_print>
    itoa32(settings_copy.device_number, &buf[0]);
 8006c38:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <draw_set_dev_num+0x54>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	490c      	ldr	r1, [pc, #48]	; (8006c70 <draw_set_dev_num+0x58>)
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 fdea 	bl	8008818 <itoa32>
    ssd1306_print(SET_DEV_NUM_ROW, SET_DEV_NUM_PARAM_COL, &buf[0], 0);
 8006c44:	2300      	movs	r3, #0
 8006c46:	4a0a      	ldr	r2, [pc, #40]	; (8006c70 <draw_set_dev_num+0x58>)
 8006c48:	210f      	movs	r1, #15
 8006c4a:	2002      	movs	r0, #2
 8006c4c:	f002 fb47 	bl	80092de <ssd1306_print>
    ssd1306_print(SET_DEV_NUM_ROW + 1, SET_DEV_NUM_PARAM_COL, "^", 0);
 8006c50:	2300      	movs	r3, #0
 8006c52:	4a08      	ldr	r2, [pc, #32]	; (8006c74 <draw_set_dev_num+0x5c>)
 8006c54:	210f      	movs	r1, #15
 8006c56:	2003      	movs	r0, #3
 8006c58:	f002 fb41 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8006c5c:	f002 fa18 	bl	8009090 <ssd1306_update>
}
 8006c60:	bf00      	nop
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	0800ccb8 	.word	0x0800ccb8
 8006c68:	0800cc4c 	.word	0x0800cc4c
 8006c6c:	200007e0 	.word	0x200007e0
 8006c70:	20000810 	.word	0x20000810
 8006c74:	0800cb60 	.word	0x0800cb60

08006c78 <draw_set_dev_id>:



//SET DEV ID
void draw_set_dev_id(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
    #define SET_DEV_ID_ROW                 (2)
    #define SET_DEV_ID_COL                 (1)
    #define SET_DEV_ID_PARAM_COL           (15)
    
    ssd1306_clear();
 8006c7c:	f002 fa28 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, SET_DEV_NUM_COL, "SET DEV ID", 0);
 8006c80:	2300      	movs	r3, #0
 8006c82:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <draw_set_dev_id+0x68>)
 8006c84:	2101      	movs	r1, #1
 8006c86:	2000      	movs	r0, #0
 8006c88:	f002 fb29 	bl	80092de <ssd1306_print>
    
    ssd1306_print(SET_DEV_ID_ROW, SET_DEV_ID_COL, "Device ID", 0);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4a15      	ldr	r2, [pc, #84]	; (8006ce4 <draw_set_dev_id+0x6c>)
 8006c90:	2101      	movs	r1, #1
 8006c92:	2002      	movs	r0, #2
 8006c94:	f002 fb23 	bl	80092de <ssd1306_print>
    buf[0] = settings_copy.device_id[0];
 8006c98:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <draw_set_dev_id+0x70>)
 8006c9a:	785a      	ldrb	r2, [r3, #1]
 8006c9c:	4b13      	ldr	r3, [pc, #76]	; (8006cec <draw_set_dev_id+0x74>)
 8006c9e:	701a      	strb	r2, [r3, #0]
    buf[1] = settings_copy.device_id[1];
 8006ca0:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <draw_set_dev_id+0x70>)
 8006ca2:	789a      	ldrb	r2, [r3, #2]
 8006ca4:	4b11      	ldr	r3, [pc, #68]	; (8006cec <draw_set_dev_id+0x74>)
 8006ca6:	705a      	strb	r2, [r3, #1]
    buf[2] = 0;
 8006ca8:	4b10      	ldr	r3, [pc, #64]	; (8006cec <draw_set_dev_id+0x74>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	709a      	strb	r2, [r3, #2]
    ssd1306_print(SET_DEV_ID_ROW, SET_DEV_ID_PARAM_COL, &buf[0], 0);
 8006cae:	2300      	movs	r3, #0
 8006cb0:	4a0e      	ldr	r2, [pc, #56]	; (8006cec <draw_set_dev_id+0x74>)
 8006cb2:	210f      	movs	r1, #15
 8006cb4:	2002      	movs	r0, #2
 8006cb6:	f002 fb12 	bl	80092de <ssd1306_print>
    ssd1306_print(SET_DEV_ID_ROW + 1, SET_DEV_ID_PARAM_COL + device_id_current_symbol, "^", 0);
 8006cba:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <draw_set_dev_id+0x78>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	330f      	adds	r3, #15
 8006cc0:	b2d9      	uxtb	r1, r3
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	4a0b      	ldr	r2, [pc, #44]	; (8006cf4 <draw_set_dev_id+0x7c>)
 8006cc6:	2003      	movs	r0, #3
 8006cc8:	f002 fb09 	bl	80092de <ssd1306_print>
    ssd1306_print(SET_DEV_ID_ROW + 3, SET_DEV_ID_COL, "Long OK - apply", 0);
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4a0a      	ldr	r2, [pc, #40]	; (8006cf8 <draw_set_dev_id+0x80>)
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	2005      	movs	r0, #5
 8006cd4:	f002 fb03 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8006cd8:	f002 f9da 	bl	8009090 <ssd1306_update>
}
 8006cdc:	bf00      	nop
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	0800ccc4 	.word	0x0800ccc4
 8006ce4:	0800cc5c 	.word	0x0800cc5c
 8006ce8:	200007e0 	.word	0x200007e0
 8006cec:	20000810 	.word	0x20000810
 8006cf0:	2000011f 	.word	0x2000011f
 8006cf4:	0800cb60 	.word	0x0800cb60
 8006cf8:	0800ccd0 	.word	0x0800ccd0

08006cfc <draw_set_freq_ch>:



//SET FREQ CH
void draw_set_freq_ch(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
    #define SET_FREQ_CH_ROW         (2)
    #define SET_FREQ_CH_COL         (1)
    #define SET_FREQ_CH_PARAM_COL   (16)
    
    ssd1306_clear();
 8006d00:	f002 f9e6 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, SET_FREQ_CH_COL, "SET FREQ CH", 0);
 8006d04:	2300      	movs	r3, #0
 8006d06:	4a10      	ldr	r2, [pc, #64]	; (8006d48 <draw_set_freq_ch+0x4c>)
 8006d08:	2101      	movs	r1, #1
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	f002 fae7 	bl	80092de <ssd1306_print>
    
    ssd1306_print(SET_FREQ_CH_ROW, SET_FREQ_CH_COL, "Freq channel", 0);
 8006d10:	2300      	movs	r3, #0
 8006d12:	4a0e      	ldr	r2, [pc, #56]	; (8006d4c <draw_set_freq_ch+0x50>)
 8006d14:	2101      	movs	r1, #1
 8006d16:	2002      	movs	r0, #2
 8006d18:	f002 fae1 	bl	80092de <ssd1306_print>
    itoa32(settings_copy.freq_channel, &buf[0]);
 8006d1c:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <draw_set_freq_ch+0x54>)
 8006d1e:	78db      	ldrb	r3, [r3, #3]
 8006d20:	490c      	ldr	r1, [pc, #48]	; (8006d54 <draw_set_freq_ch+0x58>)
 8006d22:	4618      	mov	r0, r3
 8006d24:	f001 fd78 	bl	8008818 <itoa32>
    ssd1306_print_viceversa(SET_FREQ_CH_ROW, SET_FREQ_CH_PARAM_COL, &buf[0], 0);
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4a0a      	ldr	r2, [pc, #40]	; (8006d54 <draw_set_freq_ch+0x58>)
 8006d2c:	2110      	movs	r1, #16
 8006d2e:	2002      	movs	r0, #2
 8006d30:	f002 faf8 	bl	8009324 <ssd1306_print_viceversa>
    ssd1306_print(SET_FREQ_CH_ROW + 1, SET_FREQ_CH_PARAM_COL, "^", 0);
 8006d34:	2300      	movs	r3, #0
 8006d36:	4a08      	ldr	r2, [pc, #32]	; (8006d58 <draw_set_freq_ch+0x5c>)
 8006d38:	2110      	movs	r1, #16
 8006d3a:	2003      	movs	r0, #3
 8006d3c:	f002 facf 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8006d40:	f002 f9a6 	bl	8009090 <ssd1306_update>
}
 8006d44:	bf00      	nop
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	0800cce0 	.word	0x0800cce0
 8006d4c:	0800cc68 	.word	0x0800cc68
 8006d50:	200007e0 	.word	0x200007e0
 8006d54:	20000810 	.word	0x20000810
 8006d58:	0800cb60 	.word	0x0800cb60

08006d5c <draw_set_tx_pow>:



//SET TX POW
void draw_set_tx_pow(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
    #define SET_TX_POW_ROW          (2)
    #define SET_TX_POW_COL          (1)
    #define SET_TX_POW_PARAM_COL    (15)
    
    ssd1306_clear();
 8006d60:	f002 f9b6 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, SET_TX_POW_COL, "SET TX POW", 0);
 8006d64:	2300      	movs	r3, #0
 8006d66:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <draw_set_tx_pow+0x5c>)
 8006d68:	2101      	movs	r1, #1
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	f002 fab7 	bl	80092de <ssd1306_print>
    
    ssd1306_print(SET_TX_POW_ROW, SET_TX_POW_COL, "TX power", 0);
 8006d70:	2300      	movs	r3, #0
 8006d72:	4a12      	ldr	r2, [pc, #72]	; (8006dbc <draw_set_tx_pow+0x60>)
 8006d74:	2101      	movs	r1, #1
 8006d76:	2002      	movs	r0, #2
 8006d78:	f002 fab1 	bl	80092de <ssd1306_print>
    itoa32(p_get_tx_power_values[settings_copy.tx_power_opt], &buf[0]);
 8006d7c:	4b10      	ldr	r3, [pc, #64]	; (8006dc0 <draw_set_tx_pow+0x64>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <draw_set_tx_pow+0x68>)
 8006d82:	7912      	ldrb	r2, [r2, #4]
 8006d84:	4413      	add	r3, r2
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	490f      	ldr	r1, [pc, #60]	; (8006dc8 <draw_set_tx_pow+0x6c>)
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 fd44 	bl	8008818 <itoa32>
    ssd1306_print(SET_TX_POW_ROW, SET_TX_POW_PARAM_COL, &buf[0], 0);
 8006d90:	2300      	movs	r3, #0
 8006d92:	4a0d      	ldr	r2, [pc, #52]	; (8006dc8 <draw_set_tx_pow+0x6c>)
 8006d94:	210f      	movs	r1, #15
 8006d96:	2002      	movs	r0, #2
 8006d98:	f002 faa1 	bl	80092de <ssd1306_print>
    ssd1306_print_next(" mW", 0);
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	480b      	ldr	r0, [pc, #44]	; (8006dcc <draw_set_tx_pow+0x70>)
 8006da0:	f002 fafc 	bl	800939c <ssd1306_print_next>
    ssd1306_print(SET_TX_POW_ROW + 1, SET_TX_POW_PARAM_COL, "^", 0);
 8006da4:	2300      	movs	r3, #0
 8006da6:	4a0a      	ldr	r2, [pc, #40]	; (8006dd0 <draw_set_tx_pow+0x74>)
 8006da8:	210f      	movs	r1, #15
 8006daa:	2003      	movs	r0, #3
 8006dac:	f002 fa97 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8006db0:	f002 f96e 	bl	8009090 <ssd1306_update>
}
 8006db4:	bf00      	nop
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	0800ccec 	.word	0x0800ccec
 8006dbc:	0800cc78 	.word	0x0800cc78
 8006dc0:	2000080c 	.word	0x2000080c
 8006dc4:	200007e0 	.word	0x200007e0
 8006dc8:	20000810 	.word	0x20000810
 8006dcc:	0800cc84 	.word	0x0800cc84
 8006dd0:	0800cb60 	.word	0x0800cb60

08006dd4 <draw_set_send_intvl>:



//SET SEND INTRVL
void draw_set_send_intvl(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
    #define SET_SEND_INTVL_ROW                 (2)
    #define SET_SEND_INTVL_COL                 (1)
    #define SET_SEND_INTVL_PARAM_COL           (16)

    ssd1306_clear();
 8006dd8:	f002 f97a 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, SET_SEND_INTVL_COL, "SET SEND INTVL", 0);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <draw_set_send_intvl+0x5c>)
 8006de0:	2101      	movs	r1, #1
 8006de2:	2000      	movs	r0, #0
 8006de4:	f002 fa7b 	bl	80092de <ssd1306_print>

    ssd1306_print(SET_SEND_INTVL_ROW, SET_SEND_INTVL_COL, "Send interval", 0);
 8006de8:	2300      	movs	r3, #0
 8006dea:	4a12      	ldr	r2, [pc, #72]	; (8006e34 <draw_set_send_intvl+0x60>)
 8006dec:	2101      	movs	r1, #1
 8006dee:	2002      	movs	r0, #2
 8006df0:	f002 fa75 	bl	80092de <ssd1306_print>
    itoa32(p_send_interval_values[settings_copy.send_interval_opt], &buf[0]);
 8006df4:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <draw_set_send_intvl+0x64>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a10      	ldr	r2, [pc, #64]	; (8006e3c <draw_set_send_intvl+0x68>)
 8006dfa:	7952      	ldrb	r2, [r2, #5]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	490f      	ldr	r1, [pc, #60]	; (8006e40 <draw_set_send_intvl+0x6c>)
 8006e02:	4618      	mov	r0, r3
 8006e04:	f001 fd08 	bl	8008818 <itoa32>
    ssd1306_print(SET_SEND_INTVL_ROW, SET_SEND_INTVL_PARAM_COL, &buf[0], 0);
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4a0d      	ldr	r2, [pc, #52]	; (8006e40 <draw_set_send_intvl+0x6c>)
 8006e0c:	2110      	movs	r1, #16
 8006e0e:	2002      	movs	r0, #2
 8006e10:	f002 fa65 	bl	80092de <ssd1306_print>
    ssd1306_print_next(" s", 0);
 8006e14:	2100      	movs	r1, #0
 8006e16:	480b      	ldr	r0, [pc, #44]	; (8006e44 <draw_set_send_intvl+0x70>)
 8006e18:	f002 fac0 	bl	800939c <ssd1306_print_next>
    ssd1306_print(SET_SEND_INTVL_ROW + 1, SET_SEND_INTVL_PARAM_COL, "^", 0);
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4a0a      	ldr	r2, [pc, #40]	; (8006e48 <draw_set_send_intvl+0x74>)
 8006e20:	2110      	movs	r1, #16
 8006e22:	2003      	movs	r0, #3
 8006e24:	f002 fa5b 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8006e28:	f002 f932 	bl	8009090 <ssd1306_update>
}
 8006e2c:	bf00      	nop
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	0800ccf8 	.word	0x0800ccf8
 8006e34:	0800cc88 	.word	0x0800cc88
 8006e38:	200007cc 	.word	0x200007cc
 8006e3c:	200007e0 	.word	0x200007e0
 8006e40:	20000810 	.word	0x20000810
 8006e44:	0800cc98 	.word	0x0800cc98
 8006e48:	0800cb60 	.word	0x0800cb60

08006e4c <draw_set_to_thr>:



//SET TIMEOUT THR
void draw_set_to_thr(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
    #define SET_TO_THR_ROW                 (2)
    #define SET_TO_THR_COL                 (1)
    #define SET_TO_THR_PARAM_COL           (14)

    ssd1306_clear();
 8006e50:	f002 f93e 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, SET_TO_THR_COL, "SET TO THR", 0);
 8006e54:	2300      	movs	r3, #0
 8006e56:	4a12      	ldr	r2, [pc, #72]	; (8006ea0 <draw_set_to_thr+0x54>)
 8006e58:	2101      	movs	r1, #1
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f002 fa3f 	bl	80092de <ssd1306_print>

    ssd1306_print(SET_TO_THR_ROW, SET_TO_THR_COL, "Timeout thr", 0);
 8006e60:	2300      	movs	r3, #0
 8006e62:	4a10      	ldr	r2, [pc, #64]	; (8006ea4 <draw_set_to_thr+0x58>)
 8006e64:	2101      	movs	r1, #1
 8006e66:	2002      	movs	r0, #2
 8006e68:	f002 fa39 	bl	80092de <ssd1306_print>
    itoa32(settings_copy.timeout_threshold.as_integer, &buf[0]);
 8006e6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ea8 <draw_set_to_thr+0x5c>)
 8006e6e:	88db      	ldrh	r3, [r3, #6]
 8006e70:	490e      	ldr	r1, [pc, #56]	; (8006eac <draw_set_to_thr+0x60>)
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 fcd0 	bl	8008818 <itoa32>
    ssd1306_print(SET_TO_THR_ROW, SET_TO_THR_PARAM_COL, &buf[0], 0);
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4a0c      	ldr	r2, [pc, #48]	; (8006eac <draw_set_to_thr+0x60>)
 8006e7c:	210e      	movs	r1, #14
 8006e7e:	2002      	movs	r0, #2
 8006e80:	f002 fa2d 	bl	80092de <ssd1306_print>
    ssd1306_print_next(" s", 0);
 8006e84:	2100      	movs	r1, #0
 8006e86:	480a      	ldr	r0, [pc, #40]	; (8006eb0 <draw_set_to_thr+0x64>)
 8006e88:	f002 fa88 	bl	800939c <ssd1306_print_next>
    ssd1306_print(SET_TO_THR_ROW + 1, SET_TO_THR_PARAM_COL, "^", 0);
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4a09      	ldr	r2, [pc, #36]	; (8006eb4 <draw_set_to_thr+0x68>)
 8006e90:	210e      	movs	r1, #14
 8006e92:	2003      	movs	r0, #3
 8006e94:	f002 fa23 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8006e98:	f002 f8fa 	bl	8009090 <ssd1306_update>
}
 8006e9c:	bf00      	nop
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	0800cd08 	.word	0x0800cd08
 8006ea4:	0800cc9c 	.word	0x0800cc9c
 8006ea8:	200007e0 	.word	0x200007e0
 8006eac:	20000810 	.word	0x20000810
 8006eb0:	0800cc98 	.word	0x0800cc98
 8006eb4:	0800cb60 	.word	0x0800cb60

08006eb8 <draw_set_fnc_thr>:



//SET TIMEOUT THR
void draw_set_fnc_thr(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
    #define SET_FNC_THR_ROW                 (2)
    #define SET_FNC_THR_COL                 (1)
    #define SET_FNC_THR_PARAM_COL           (14)

    ssd1306_clear();
 8006ebc:	f002 f908 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, SET_FNC_THR_COL, "SET FNC THR", 0);
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4a12      	ldr	r2, [pc, #72]	; (8006f0c <draw_set_fnc_thr+0x54>)
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f002 fa09 	bl	80092de <ssd1306_print>

    ssd1306_print(SET_FNC_THR_ROW, SET_FNC_THR_COL, "Fence thr", 0);
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4a10      	ldr	r2, [pc, #64]	; (8006f10 <draw_set_fnc_thr+0x58>)
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	2002      	movs	r0, #2
 8006ed4:	f002 fa03 	bl	80092de <ssd1306_print>
    itoa32(settings_copy.fence_threshold.as_integer, &buf[0]);
 8006ed8:	4b0e      	ldr	r3, [pc, #56]	; (8006f14 <draw_set_fnc_thr+0x5c>)
 8006eda:	891b      	ldrh	r3, [r3, #8]
 8006edc:	490e      	ldr	r1, [pc, #56]	; (8006f18 <draw_set_fnc_thr+0x60>)
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f001 fc9a 	bl	8008818 <itoa32>
    ssd1306_print(SET_FNC_THR_ROW, SET_FNC_THR_PARAM_COL, &buf[0], 0);
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4a0c      	ldr	r2, [pc, #48]	; (8006f18 <draw_set_fnc_thr+0x60>)
 8006ee8:	210e      	movs	r1, #14
 8006eea:	2002      	movs	r0, #2
 8006eec:	f002 f9f7 	bl	80092de <ssd1306_print>
    ssd1306_print_next(" m", 0);
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	480a      	ldr	r0, [pc, #40]	; (8006f1c <draw_set_fnc_thr+0x64>)
 8006ef4:	f002 fa52 	bl	800939c <ssd1306_print_next>
    ssd1306_print(SET_FNC_THR_ROW + 1, SET_FNC_THR_PARAM_COL, "^", 0);
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <draw_set_fnc_thr+0x68>)
 8006efc:	210e      	movs	r1, #14
 8006efe:	2003      	movs	r0, #3
 8006f00:	f002 f9ed 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8006f04:	f002 f8c4 	bl	8009090 <ssd1306_update>
}
 8006f08:	bf00      	nop
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	0800cd14 	.word	0x0800cd14
 8006f10:	0800cca8 	.word	0x0800cca8
 8006f14:	200007e0 	.word	0x200007e0
 8006f18:	20000810 	.word	0x20000810
 8006f1c:	0800ccb4 	.word	0x0800ccb4
 8006f20:	0800cb60 	.word	0x0800cb60

08006f24 <draw_confirm_settings_save>:



//CONFIRM SETTINGS SAVE
void draw_confirm_settings_save(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
    if (flag_settings_changed)
 8006f28:	4b10      	ldr	r3, [pc, #64]	; (8006f6c <draw_confirm_settings_save+0x48>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d016      	beq.n	8006f5e <draw_confirm_settings_save+0x3a>
    {
        ssd1306_clear();
 8006f30:	f002 f8ce 	bl	80090d0 <ssd1306_clear>
        ssd1306_print(0, 1, "Settings changed", 0);
 8006f34:	2300      	movs	r3, #0
 8006f36:	4a0e      	ldr	r2, [pc, #56]	; (8006f70 <draw_confirm_settings_save+0x4c>)
 8006f38:	2101      	movs	r1, #1
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f002 f9cf 	bl	80092de <ssd1306_print>
        ssd1306_print(3, 1, "OK - save & restart", 0);
 8006f40:	2300      	movs	r3, #0
 8006f42:	4a0c      	ldr	r2, [pc, #48]	; (8006f74 <draw_confirm_settings_save+0x50>)
 8006f44:	2101      	movs	r1, #1
 8006f46:	2003      	movs	r0, #3
 8006f48:	f002 f9c9 	bl	80092de <ssd1306_print>
        ssd1306_print(4, 1, "ESC - cancel changes", 0);
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4a0a      	ldr	r2, [pc, #40]	; (8006f78 <draw_confirm_settings_save+0x54>)
 8006f50:	2101      	movs	r1, #1
 8006f52:	2004      	movs	r0, #4
 8006f54:	f002 f9c3 	bl	80092de <ssd1306_print>
        ssd1306_update();
 8006f58:	f002 f89a 	bl	8009090 <ssd1306_update>
    else
    {
        current_menu = M_SETTINGS;
        draw_current_menu();
    }
}
 8006f5c:	e004      	b.n	8006f68 <draw_confirm_settings_save+0x44>
        current_menu = M_SETTINGS;
 8006f5e:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <draw_confirm_settings_save+0x58>)
 8006f60:	220e      	movs	r2, #14
 8006f62:	701a      	strb	r2, [r3, #0]
        draw_current_menu();
 8006f64:	f7fd f9c0 	bl	80042e8 <draw_current_menu>
}
 8006f68:	bf00      	nop
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	2000011e 	.word	0x2000011e
 8006f70:	0800cd20 	.word	0x0800cd20
 8006f74:	0800cd34 	.word	0x0800cd34
 8006f78:	0800cd48 	.word	0x0800cd48
 8006f7c:	200007fa 	.word	0x200007fa

08006f80 <draw_restore_defaults>:



//RESTORE DEFAULTS
void draw_restore_defaults(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
    ssd1306_clear();
 8006f84:	f002 f8a4 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, 1, "Restore defaults?", 0);
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4a0a      	ldr	r2, [pc, #40]	; (8006fb4 <draw_restore_defaults+0x34>)
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	2000      	movs	r0, #0
 8006f90:	f002 f9a5 	bl	80092de <ssd1306_print>
    ssd1306_print(3, 1, "OK - restore & reset", 0);
 8006f94:	2300      	movs	r3, #0
 8006f96:	4a08      	ldr	r2, [pc, #32]	; (8006fb8 <draw_restore_defaults+0x38>)
 8006f98:	2101      	movs	r1, #1
 8006f9a:	2003      	movs	r0, #3
 8006f9c:	f002 f99f 	bl	80092de <ssd1306_print>
    ssd1306_print(4, 1, "ESC - cancel", 0);
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4a06      	ldr	r2, [pc, #24]	; (8006fbc <draw_restore_defaults+0x3c>)
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	2004      	movs	r0, #4
 8006fa8:	f002 f999 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8006fac:	f002 f870 	bl	8009090 <ssd1306_update>
}
 8006fb0:	bf00      	nop
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	0800cd60 	.word	0x0800cd60
 8006fb8:	0800cd74 	.word	0x0800cd74
 8006fbc:	0800cb18 	.word	0x0800cb18

08006fc0 <draw_erase_all>:



//ERASE ALL
void draw_erase_all(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
    ssd1306_clear();
 8006fc4:	f002 f884 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, 1, "Erase all EEPROM?", 0);
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4a0a      	ldr	r2, [pc, #40]	; (8006ff4 <draw_erase_all+0x34>)
 8006fcc:	2101      	movs	r1, #1
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f002 f985 	bl	80092de <ssd1306_print>
    ssd1306_print(3, 1, "OK - erase & reset", 0);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <draw_erase_all+0x38>)
 8006fd8:	2101      	movs	r1, #1
 8006fda:	2003      	movs	r0, #3
 8006fdc:	f002 f97f 	bl	80092de <ssd1306_print>
    ssd1306_print(4, 1, "ESC - cancel", 0);
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4a06      	ldr	r2, [pc, #24]	; (8006ffc <draw_erase_all+0x3c>)
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	2004      	movs	r0, #4
 8006fe8:	f002 f979 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8006fec:	f002 f850 	bl	8009090 <ssd1306_update>
}
 8006ff0:	bf00      	nop
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	0800cd8c 	.word	0x0800cd8c
 8006ff8:	0800cda0 	.word	0x0800cda0
 8006ffc:	0800cb18 	.word	0x0800cb18

08007000 <devices_ok>:



void devices_ok(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
    if (pp_dev_aux[current_each_device]->exist_flag == 0)
 8007004:	4b09      	ldr	r3, [pc, #36]	; (800702c <devices_ok+0x2c>)
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <devices_ok+0x30>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <devices_ok+0x1c>
    {
        each_device_up();
 8007018:	f000 f80e 	bl	8007038 <each_device_up>
    }
    
    current_menu = M_EACH_DEVICE;
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <devices_ok+0x34>)
 800701e:	2203      	movs	r2, #3
 8007020:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007022:	f7fd f961 	bl	80042e8 <draw_current_menu>
}
 8007026:	bf00      	nop
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	2000083c 	.word	0x2000083c
 8007030:	20000032 	.word	0x20000032
 8007034:	200007fa 	.word	0x200007fa

08007038 <each_device_up>:



void each_device_up(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
    do
    {
        if (current_each_device == DEVICE_NUMBER_FIRST)
 800703c:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <each_device_up+0x3c>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d103      	bne.n	800704c <each_device_up+0x14>
        {
            current_each_device = DEVICE_NUMBER_LAST;
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <each_device_up+0x3c>)
 8007046:	2206      	movs	r2, #6
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	e005      	b.n	8007058 <each_device_up+0x20>
        }
        else
        {
            current_each_device--;
 800704c:	4b09      	ldr	r3, [pc, #36]	; (8007074 <each_device_up+0x3c>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	3b01      	subs	r3, #1
 8007052:	b2da      	uxtb	r2, r3
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <each_device_up+0x3c>)
 8007056:	701a      	strb	r2, [r3, #0]
        }
    }
    while (pp_dev_aux[current_each_device]->exist_flag == 0);
 8007058:	4b07      	ldr	r3, [pc, #28]	; (8007078 <each_device_up+0x40>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <each_device_up+0x3c>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0e7      	beq.n	800703c <each_device_up+0x4>
    
    draw_current_menu();
 800706c:	f7fd f93c 	bl	80042e8 <draw_current_menu>
}
 8007070:	bf00      	nop
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20000032 	.word	0x20000032
 8007078:	2000083c 	.word	0x2000083c

0800707c <each_device_down>:



void each_device_down(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
    do
    {
        if (current_each_device == DEVICE_NUMBER_LAST)
 8007080:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <each_device_down+0x3c>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b06      	cmp	r3, #6
 8007086:	d103      	bne.n	8007090 <each_device_down+0x14>
        {
            current_each_device = DEVICE_NUMBER_FIRST;
 8007088:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <each_device_down+0x3c>)
 800708a:	2201      	movs	r2, #1
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	e005      	b.n	800709c <each_device_down+0x20>
        }
        else
        {
            current_each_device++;
 8007090:	4b09      	ldr	r3, [pc, #36]	; (80070b8 <each_device_down+0x3c>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	3301      	adds	r3, #1
 8007096:	b2da      	uxtb	r2, r3
 8007098:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <each_device_down+0x3c>)
 800709a:	701a      	strb	r2, [r3, #0]
        }
    }
    while (pp_dev_aux[current_each_device]->exist_flag == 0);
 800709c:	4b07      	ldr	r3, [pc, #28]	; (80070bc <each_device_down+0x40>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <each_device_down+0x3c>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0e7      	beq.n	8007080 <each_device_down+0x4>
    
    draw_current_menu();
 80070b0:	f7fd f91a 	bl	80042e8 <draw_current_menu>
}
 80070b4:	bf00      	nop
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20000032 	.word	0x20000032
 80070bc:	2000083c 	.word	0x2000083c

080070c0 <each_device_ok>:



void each_device_ok(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
	current_menu = M_EACH_DEVICE_SUBMENU;
 80070c4:	4b03      	ldr	r3, [pc, #12]	; (80070d4 <each_device_ok+0x14>)
 80070c6:	2204      	movs	r2, #4
 80070c8:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 80070ca:	f7fd f90d 	bl	80042e8 <draw_current_menu>
}
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	200007fa 	.word	0x200007fa

080070d8 <save_device_up>:



void save_device_up(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
	if (current_slot_to_save != 0)
 80070dc:	4b0f      	ldr	r3, [pc, #60]	; (800711c <save_device_up+0x44>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d019      	beq.n	8007118 <save_device_up+0x40>
	{
		do
		{
			if (current_slot_to_save == MEMORY_SLOT_FIRST)
 80070e4:	4b0d      	ldr	r3, [pc, #52]	; (800711c <save_device_up+0x44>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d103      	bne.n	80070f4 <save_device_up+0x1c>
			{
				current_slot_to_save = MEMORY_SLOT_LAST;
 80070ec:	4b0b      	ldr	r3, [pc, #44]	; (800711c <save_device_up+0x44>)
 80070ee:	2205      	movs	r2, #5
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	e005      	b.n	8007100 <save_device_up+0x28>
			}
			else
			{
				current_slot_to_save--;
 80070f4:	4b09      	ldr	r3, [pc, #36]	; (800711c <save_device_up+0x44>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	4b07      	ldr	r3, [pc, #28]	; (800711c <save_device_up+0x44>)
 80070fe:	701a      	strb	r2, [r3, #0]
			}
		}
		while (pp_memory_slot[current_slot_to_save]->exist_flag == 1);
 8007100:	4b07      	ldr	r3, [pc, #28]	; (8007120 <save_device_up+0x48>)
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	4b05      	ldr	r3, [pc, #20]	; (800711c <save_device_up+0x44>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d0e7      	beq.n	80070e4 <save_device_up+0xc>

		draw_current_menu();
 8007114:	f7fd f8e8 	bl	80042e8 <draw_current_menu>
	}
}
 8007118:	bf00      	nop
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20000123 	.word	0x20000123
 8007120:	200007d4 	.word	0x200007d4

08007124 <save_device_down>:



void save_device_down(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
	if (current_slot_to_save != 0)
 8007128:	4b0f      	ldr	r3, [pc, #60]	; (8007168 <save_device_down+0x44>)
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d019      	beq.n	8007164 <save_device_down+0x40>
	{
		do
		{
			if (current_slot_to_save == MEMORY_SLOT_LAST)
 8007130:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <save_device_down+0x44>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b05      	cmp	r3, #5
 8007136:	d103      	bne.n	8007140 <save_device_down+0x1c>
			{
				current_slot_to_save = MEMORY_SLOT_FIRST;
 8007138:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <save_device_down+0x44>)
 800713a:	2201      	movs	r2, #1
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	e005      	b.n	800714c <save_device_down+0x28>
			}
			else
			{
				current_slot_to_save++;
 8007140:	4b09      	ldr	r3, [pc, #36]	; (8007168 <save_device_down+0x44>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	3301      	adds	r3, #1
 8007146:	b2da      	uxtb	r2, r3
 8007148:	4b07      	ldr	r3, [pc, #28]	; (8007168 <save_device_down+0x44>)
 800714a:	701a      	strb	r2, [r3, #0]
			}
		}
		while (pp_memory_slot[current_slot_to_save]->exist_flag == 1);
 800714c:	4b07      	ldr	r3, [pc, #28]	; (800716c <save_device_down+0x48>)
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b05      	ldr	r3, [pc, #20]	; (8007168 <save_device_down+0x44>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d0e7      	beq.n	8007130 <save_device_down+0xc>

		draw_current_menu();
 8007160:	f7fd f8c2 	bl	80042e8 <draw_current_menu>
	}
}
 8007164:	bf00      	nop
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20000123 	.word	0x20000123
 800716c:	200007d4 	.word	0x200007d4

08007170 <save_device_ok>:



void save_device_ok(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
	if (current_slot_to_save != 0)
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <save_device_ok+0x1c>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d004      	beq.n	8007186 <save_device_ok+0x16>
	{
		current_menu = M_SAVE_DEVICE_AS;
 800717c:	4b04      	ldr	r3, [pc, #16]	; (8007190 <save_device_ok+0x20>)
 800717e:	2207      	movs	r2, #7
 8007180:	701a      	strb	r2, [r3, #0]
		draw_current_menu();
 8007182:	f7fd f8b1 	bl	80042e8 <draw_current_menu>
	}
}
 8007186:	bf00      	nop
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000123 	.word	0x20000123
 8007190:	200007fa 	.word	0x200007fa

08007194 <save_device_esc>:



void save_device_esc(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
	current_slot_to_save = 0;
 8007198:	4b04      	ldr	r3, [pc, #16]	; (80071ac <save_device_esc+0x18>)
 800719a:	2200      	movs	r2, #0
 800719c:	701a      	strb	r2, [r3, #0]
	current_menu = M_EACH_DEVICE_SUBMENU;
 800719e:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <save_device_esc+0x1c>)
 80071a0:	2204      	movs	r2, #4
 80071a2:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 80071a4:	f7fd f8a0 	bl	80042e8 <draw_current_menu>
}
 80071a8:	bf00      	nop
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	20000123 	.word	0x20000123
 80071b0:	200007fa 	.word	0x200007fa

080071b4 <save_device_as_up>:



void save_device_as_up(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
    if (point_to_save_name[point_name_current_symbol] == POINT_NAME_LAST_SYMBOL)
 80071b8:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <save_device_as_up+0x38>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <save_device_as_up+0x3c>)
 80071c0:	5c9b      	ldrb	r3, [r3, r2]
 80071c2:	2b7e      	cmp	r3, #126	; 0x7e
 80071c4:	d106      	bne.n	80071d4 <save_device_as_up+0x20>
    {
    	point_to_save_name[point_name_current_symbol] = POINT_NAME_FIRST_SYMBOL;
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <save_device_as_up+0x38>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	4b08      	ldr	r3, [pc, #32]	; (80071f0 <save_device_as_up+0x3c>)
 80071ce:	2120      	movs	r1, #32
 80071d0:	5499      	strb	r1, [r3, r2]
 80071d2:	e007      	b.n	80071e4 <save_device_as_up+0x30>
    }
    else
    {
    	point_to_save_name[point_name_current_symbol]++;
 80071d4:	4b05      	ldr	r3, [pc, #20]	; (80071ec <save_device_as_up+0x38>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	4a05      	ldr	r2, [pc, #20]	; (80071f0 <save_device_as_up+0x3c>)
 80071da:	5cd2      	ldrb	r2, [r2, r3]
 80071dc:	3201      	adds	r2, #1
 80071de:	b2d1      	uxtb	r1, r2
 80071e0:	4a03      	ldr	r2, [pc, #12]	; (80071f0 <save_device_as_up+0x3c>)
 80071e2:	54d1      	strb	r1, [r2, r3]
    }

    draw_current_menu();
 80071e4:	f7fd f880 	bl	80042e8 <draw_current_menu>
}
 80071e8:	bf00      	nop
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000120 	.word	0x20000120
 80071f0:	20000828 	.word	0x20000828

080071f4 <save_device_as_down>:



void save_device_as_down(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
    if (point_to_save_name[point_name_current_symbol] == POINT_NAME_FIRST_SYMBOL)
 80071f8:	4b0c      	ldr	r3, [pc, #48]	; (800722c <save_device_as_down+0x38>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <save_device_as_down+0x3c>)
 8007200:	5c9b      	ldrb	r3, [r3, r2]
 8007202:	2b20      	cmp	r3, #32
 8007204:	d106      	bne.n	8007214 <save_device_as_down+0x20>
    {
    	point_to_save_name[point_name_current_symbol] = POINT_NAME_LAST_SYMBOL;
 8007206:	4b09      	ldr	r3, [pc, #36]	; (800722c <save_device_as_down+0x38>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	4b08      	ldr	r3, [pc, #32]	; (8007230 <save_device_as_down+0x3c>)
 800720e:	217e      	movs	r1, #126	; 0x7e
 8007210:	5499      	strb	r1, [r3, r2]
 8007212:	e007      	b.n	8007224 <save_device_as_down+0x30>
    }
    else
    {
    	point_to_save_name[point_name_current_symbol]--;
 8007214:	4b05      	ldr	r3, [pc, #20]	; (800722c <save_device_as_down+0x38>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	4a05      	ldr	r2, [pc, #20]	; (8007230 <save_device_as_down+0x3c>)
 800721a:	5cd2      	ldrb	r2, [r2, r3]
 800721c:	3a01      	subs	r2, #1
 800721e:	b2d1      	uxtb	r1, r2
 8007220:	4a03      	ldr	r2, [pc, #12]	; (8007230 <save_device_as_down+0x3c>)
 8007222:	54d1      	strb	r1, [r2, r3]
    }

    draw_current_menu();
 8007224:	f7fd f860 	bl	80042e8 <draw_current_menu>
}
 8007228:	bf00      	nop
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20000120 	.word	0x20000120
 8007230:	20000828 	.word	0x20000828

08007234 <save_device_as_ok>:



void save_device_as_ok(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
    if (++point_name_current_symbol == MEMORY_POINT_NAME_LENGTH)
 8007238:	4b08      	ldr	r3, [pc, #32]	; (800725c <save_device_as_ok+0x28>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	3301      	adds	r3, #1
 800723e:	b2da      	uxtb	r2, r3
 8007240:	4b06      	ldr	r3, [pc, #24]	; (800725c <save_device_as_ok+0x28>)
 8007242:	701a      	strb	r2, [r3, #0]
 8007244:	4b05      	ldr	r3, [pc, #20]	; (800725c <save_device_as_ok+0x28>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b05      	cmp	r3, #5
 800724a:	d102      	bne.n	8007252 <save_device_as_ok+0x1e>
    {
    	point_name_current_symbol = 0;
 800724c:	4b03      	ldr	r3, [pc, #12]	; (800725c <save_device_as_ok+0x28>)
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
    }

    draw_current_menu();
 8007252:	f7fd f849 	bl	80042e8 <draw_current_menu>
}
 8007256:	bf00      	nop
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000120 	.word	0x20000120

08007260 <save_device_as_ok_long>:



void save_device_as_ok_long(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
	save_memory_point(current_each_device, &point_to_save_name[0], current_slot_to_save);
 8007264:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <save_device_as_ok_long+0x38>)
 8007266:	7818      	ldrb	r0, [r3, #0]
 8007268:	4b0c      	ldr	r3, [pc, #48]	; (800729c <save_device_as_ok_long+0x3c>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	490c      	ldr	r1, [pc, #48]	; (80072a0 <save_device_as_ok_long+0x40>)
 8007270:	f000 fdf8 	bl	8007e64 <save_memory_point>

	current_each_device = device_number;
 8007274:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <save_device_as_ok_long+0x44>)
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	4b07      	ldr	r3, [pc, #28]	; (8007298 <save_device_as_ok_long+0x38>)
 800727a:	701a      	strb	r2, [r3, #0]
	current_slot_to_save = 0;
 800727c:	4b07      	ldr	r3, [pc, #28]	; (800729c <save_device_as_ok_long+0x3c>)
 800727e:	2200      	movs	r2, #0
 8007280:	701a      	strb	r2, [r3, #0]
	point_name_current_symbol = 0;
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <save_device_as_ok_long+0x48>)
 8007284:	2200      	movs	r2, #0
 8007286:	701a      	strb	r2, [r3, #0]

	current_menu = M_SAVED_POPUP;
 8007288:	4b08      	ldr	r3, [pc, #32]	; (80072ac <save_device_as_ok_long+0x4c>)
 800728a:	2208      	movs	r2, #8
 800728c:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 800728e:	f7fd f82b 	bl	80042e8 <draw_current_menu>
}
 8007292:	bf00      	nop
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000032 	.word	0x20000032
 800729c:	20000123 	.word	0x20000123
 80072a0:	20000828 	.word	0x20000828
 80072a4:	20000738 	.word	0x20000738
 80072a8:	20000120 	.word	0x20000120
 80072ac:	200007fa 	.word	0x200007fa

080072b0 <save_device_as_esc>:



void save_device_as_esc(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
	point_name_current_symbol = 0;
 80072b4:	4b04      	ldr	r3, [pc, #16]	; (80072c8 <save_device_as_esc+0x18>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	701a      	strb	r2, [r3, #0]
	current_menu = M_SAVE_DEVICE;
 80072ba:	4b04      	ldr	r3, [pc, #16]	; (80072cc <save_device_as_esc+0x1c>)
 80072bc:	2206      	movs	r2, #6
 80072be:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 80072c0:	f7fd f812 	bl	80042e8 <draw_current_menu>
}
 80072c4:	bf00      	nop
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	20000120 	.word	0x20000120
 80072cc:	200007fa 	.word	0x200007fa

080072d0 <saved_popup_esc>:



void saved_popup_esc(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
	current_each_device = device_number;
 80072d4:	4b08      	ldr	r3, [pc, #32]	; (80072f8 <saved_popup_esc+0x28>)
 80072d6:	781a      	ldrb	r2, [r3, #0]
 80072d8:	4b08      	ldr	r3, [pc, #32]	; (80072fc <saved_popup_esc+0x2c>)
 80072da:	701a      	strb	r2, [r3, #0]
	current_slot_to_save = 0;
 80072dc:	4b08      	ldr	r3, [pc, #32]	; (8007300 <saved_popup_esc+0x30>)
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]
	point_name_current_symbol = 0;
 80072e2:	4b08      	ldr	r3, [pc, #32]	; (8007304 <saved_popup_esc+0x34>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	701a      	strb	r2, [r3, #0]

	current_menu = M_DEVICES;
 80072e8:	4b07      	ldr	r3, [pc, #28]	; (8007308 <saved_popup_esc+0x38>)
 80072ea:	2202      	movs	r2, #2
 80072ec:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 80072ee:	f7fc fffb 	bl	80042e8 <draw_current_menu>
}
 80072f2:	bf00      	nop
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000738 	.word	0x20000738
 80072fc:	20000032 	.word	0x20000032
 8007300:	20000123 	.word	0x20000123
 8007304:	20000120 	.word	0x20000120
 8007308:	200007fa 	.word	0x200007fa

0800730c <radar_up>:



void radar_up(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
	if (current_radar_device != 0)
 8007310:	4b12      	ldr	r3, [pc, #72]	; (800735c <radar_up+0x50>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01f      	beq.n	8007358 <radar_up+0x4c>
	{
		do
		{
			do
			{
				if (current_radar_device == DEVICE_NUMBER_FIRST)
 8007318:	4b10      	ldr	r3, [pc, #64]	; (800735c <radar_up+0x50>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d103      	bne.n	8007328 <radar_up+0x1c>
				{
					current_radar_device = DEVICE_NUMBER_LAST;
 8007320:	4b0e      	ldr	r3, [pc, #56]	; (800735c <radar_up+0x50>)
 8007322:	2206      	movs	r2, #6
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	e005      	b.n	8007334 <radar_up+0x28>
				}
				else
				{
					current_radar_device--;
 8007328:	4b0c      	ldr	r3, [pc, #48]	; (800735c <radar_up+0x50>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	3b01      	subs	r3, #1
 800732e:	b2da      	uxtb	r2, r3
 8007330:	4b0a      	ldr	r3, [pc, #40]	; (800735c <radar_up+0x50>)
 8007332:	701a      	strb	r2, [r3, #0]
				}
			}
			while (pp_dev_aux[current_radar_device]->exist_flag == 0);
 8007334:	4b0a      	ldr	r3, [pc, #40]	; (8007360 <radar_up+0x54>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	4b08      	ldr	r3, [pc, #32]	; (800735c <radar_up+0x50>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0e7      	beq.n	8007318 <radar_up+0xc>
		}
		while (current_radar_device == device_number);
 8007348:	4b04      	ldr	r3, [pc, #16]	; (800735c <radar_up+0x50>)
 800734a:	781a      	ldrb	r2, [r3, #0]
 800734c:	4b05      	ldr	r3, [pc, #20]	; (8007364 <radar_up+0x58>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d0e1      	beq.n	8007318 <radar_up+0xc>

		draw_current_menu();
 8007354:	f7fc ffc8 	bl	80042e8 <draw_current_menu>
	}
}
 8007358:	bf00      	nop
 800735a:	bd80      	pop	{r7, pc}
 800735c:	20000121 	.word	0x20000121
 8007360:	2000083c 	.word	0x2000083c
 8007364:	20000738 	.word	0x20000738

08007368 <radar_down>:



void radar_down(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
	if (current_radar_device != 0)
 800736c:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <radar_down+0x50>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01f      	beq.n	80073b4 <radar_down+0x4c>
	{
		do
		{
			do
			{
				if (current_radar_device == DEVICE_NUMBER_LAST)
 8007374:	4b10      	ldr	r3, [pc, #64]	; (80073b8 <radar_down+0x50>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b06      	cmp	r3, #6
 800737a:	d103      	bne.n	8007384 <radar_down+0x1c>
				{
					current_radar_device = DEVICE_NUMBER_FIRST;
 800737c:	4b0e      	ldr	r3, [pc, #56]	; (80073b8 <radar_down+0x50>)
 800737e:	2201      	movs	r2, #1
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	e005      	b.n	8007390 <radar_down+0x28>
				}
				else
				{
					current_radar_device++;
 8007384:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <radar_down+0x50>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	3301      	adds	r3, #1
 800738a:	b2da      	uxtb	r2, r3
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <radar_down+0x50>)
 800738e:	701a      	strb	r2, [r3, #0]
				}
			}
			while (pp_dev_aux[current_radar_device]->exist_flag == 0);
 8007390:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <radar_down+0x54>)
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	4b08      	ldr	r3, [pc, #32]	; (80073b8 <radar_down+0x50>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0e7      	beq.n	8007374 <radar_down+0xc>
		}
		while (current_radar_device == device_number);
 80073a4:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <radar_down+0x50>)
 80073a6:	781a      	ldrb	r2, [r3, #0]
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <radar_down+0x58>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d0e1      	beq.n	8007374 <radar_down+0xc>

		draw_current_menu();
 80073b0:	f7fc ff9a 	bl	80042e8 <draw_current_menu>
	}
}
 80073b4:	bf00      	nop
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20000121 	.word	0x20000121
 80073bc:	2000083c 	.word	0x2000083c
 80073c0:	20000738 	.word	0x20000738

080073c4 <radar_ok>:



void radar_ok(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
	if (current_radar_device != 0)
 80073c8:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <radar_ok+0x2c>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00d      	beq.n	80073ec <radar_ok+0x28>
	{
		radar_list_hide[current_radar_device] ^= 1;		//Invert hide flag
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <radar_ok+0x2c>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <radar_ok+0x30>)
 80073d8:	5c9b      	ldrb	r3, [r3, r2]
 80073da:	4a05      	ldr	r2, [pc, #20]	; (80073f0 <radar_ok+0x2c>)
 80073dc:	7812      	ldrb	r2, [r2, #0]
 80073de:	f083 0301 	eor.w	r3, r3, #1
 80073e2:	b2d9      	uxtb	r1, r3
 80073e4:	4b03      	ldr	r3, [pc, #12]	; (80073f4 <radar_ok+0x30>)
 80073e6:	5499      	strb	r1, [r3, r2]

		draw_current_menu();
 80073e8:	f7fc ff7e 	bl	80042e8 <draw_current_menu>
	}
}
 80073ec:	bf00      	nop
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20000121 	.word	0x20000121
 80073f4:	20000830 	.word	0x20000830

080073f8 <points_up>:



void points_up(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
	if (current_slot_to_load == MEMORY_SLOT_FIRST)
 80073fc:	4b08      	ldr	r3, [pc, #32]	; (8007420 <points_up+0x28>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d103      	bne.n	800740c <points_up+0x14>
    {
		current_slot_to_load = MEMORY_SLOT_LAST;
 8007404:	4b06      	ldr	r3, [pc, #24]	; (8007420 <points_up+0x28>)
 8007406:	2205      	movs	r2, #5
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	e005      	b.n	8007418 <points_up+0x20>
    }
    else
    {
    	current_slot_to_load--;
 800740c:	4b04      	ldr	r3, [pc, #16]	; (8007420 <points_up+0x28>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	3b01      	subs	r3, #1
 8007412:	b2da      	uxtb	r2, r3
 8007414:	4b02      	ldr	r3, [pc, #8]	; (8007420 <points_up+0x28>)
 8007416:	701a      	strb	r2, [r3, #0]
    }
    
    draw_current_menu();
 8007418:	f7fc ff66 	bl	80042e8 <draw_current_menu>
}
 800741c:	bf00      	nop
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20000033 	.word	0x20000033

08007424 <points_down>:



void points_down(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
	if (current_slot_to_load == MEMORY_SLOT_LAST)
 8007428:	4b08      	ldr	r3, [pc, #32]	; (800744c <points_down+0x28>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b05      	cmp	r3, #5
 800742e:	d103      	bne.n	8007438 <points_down+0x14>
    {
		current_slot_to_load = MEMORY_SLOT_FIRST;
 8007430:	4b06      	ldr	r3, [pc, #24]	; (800744c <points_down+0x28>)
 8007432:	2201      	movs	r2, #1
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e005      	b.n	8007444 <points_down+0x20>
    }
    else
    {
    	current_slot_to_load++;
 8007438:	4b04      	ldr	r3, [pc, #16]	; (800744c <points_down+0x28>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	b2da      	uxtb	r2, r3
 8007440:	4b02      	ldr	r3, [pc, #8]	; (800744c <points_down+0x28>)
 8007442:	701a      	strb	r2, [r3, #0]
    }

    draw_current_menu();
 8007444:	f7fc ff50 	bl	80042e8 <draw_current_menu>
}
 8007448:	bf00      	nop
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20000033 	.word	0x20000033

08007450 <points_ok>:



void points_ok(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
    if (pp_memory_slot[current_slot_to_load]->exist_flag == 1)
 8007454:	4b08      	ldr	r3, [pc, #32]	; (8007478 <points_ok+0x28>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	4b08      	ldr	r3, [pc, #32]	; (800747c <points_ok+0x2c>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d104      	bne.n	8007472 <points_ok+0x22>
    {
		current_menu = M_EACH_POINT;
 8007468:	4b05      	ldr	r3, [pc, #20]	; (8007480 <points_ok+0x30>)
 800746a:	220b      	movs	r2, #11
 800746c:	701a      	strb	r2, [r3, #0]
		draw_current_menu();
 800746e:	f7fc ff3b 	bl	80042e8 <draw_current_menu>
    }
}
 8007472:	bf00      	nop
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	200007d4 	.word	0x200007d4
 800747c:	20000033 	.word	0x20000033
 8007480:	200007fa 	.word	0x200007fa

08007484 <points_esc>:



void points_esc(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
	current_slot_to_load = MEMORY_SLOT_FIRST;
 8007488:	4b04      	ldr	r3, [pc, #16]	; (800749c <points_esc+0x18>)
 800748a:	2201      	movs	r2, #1
 800748c:	701a      	strb	r2, [r3, #0]
	current_menu = M_MAIN;
 800748e:	4b04      	ldr	r3, [pc, #16]	; (80074a0 <points_esc+0x1c>)
 8007490:	2201      	movs	r2, #1
 8007492:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 8007494:	f7fc ff28 	bl	80042e8 <draw_current_menu>
}
 8007498:	bf00      	nop
 800749a:	bd80      	pop	{r7, pc}
 800749c:	20000033 	.word	0x20000033
 80074a0:	200007fa 	.word	0x200007fa

080074a4 <load_point_up>:



void load_point_up(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
	if (current_device_to_load != 0)
 80074a8:	4b12      	ldr	r3, [pc, #72]	; (80074f4 <load_point_up+0x50>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01f      	beq.n	80074f0 <load_point_up+0x4c>
	{
		do
		{
			do
			{
				if (current_device_to_load == DEVICE_NUMBER_FIRST)
 80074b0:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <load_point_up+0x50>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d103      	bne.n	80074c0 <load_point_up+0x1c>
				{
					current_device_to_load = DEVICE_NUMBER_LAST;
 80074b8:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <load_point_up+0x50>)
 80074ba:	2206      	movs	r2, #6
 80074bc:	701a      	strb	r2, [r3, #0]
 80074be:	e005      	b.n	80074cc <load_point_up+0x28>
				}
				else
				{
					current_device_to_load--;
 80074c0:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <load_point_up+0x50>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <load_point_up+0x50>)
 80074ca:	701a      	strb	r2, [r3, #0]
				}
			}
			while (pp_dev_aux[current_device_to_load]->exist_flag == 1);
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <load_point_up+0x54>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	4b08      	ldr	r3, [pc, #32]	; (80074f4 <load_point_up+0x50>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d0e7      	beq.n	80074b0 <load_point_up+0xc>
		}
		while (current_device_to_load == device_number);
 80074e0:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <load_point_up+0x50>)
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	4b05      	ldr	r3, [pc, #20]	; (80074fc <load_point_up+0x58>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d0e1      	beq.n	80074b0 <load_point_up+0xc>

		draw_current_menu();
 80074ec:	f7fc fefc 	bl	80042e8 <draw_current_menu>
	}
}
 80074f0:	bf00      	nop
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000122 	.word	0x20000122
 80074f8:	2000083c 	.word	0x2000083c
 80074fc:	20000738 	.word	0x20000738

08007500 <load_point_down>:



void load_point_down(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
	if (current_device_to_load != 0)
 8007504:	4b12      	ldr	r3, [pc, #72]	; (8007550 <load_point_down+0x50>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01f      	beq.n	800754c <load_point_down+0x4c>
	{
		do
		{
			do
			{
				if (current_device_to_load == DEVICE_NUMBER_LAST)
 800750c:	4b10      	ldr	r3, [pc, #64]	; (8007550 <load_point_down+0x50>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b06      	cmp	r3, #6
 8007512:	d103      	bne.n	800751c <load_point_down+0x1c>
				{
					current_device_to_load = DEVICE_NUMBER_FIRST;
 8007514:	4b0e      	ldr	r3, [pc, #56]	; (8007550 <load_point_down+0x50>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e005      	b.n	8007528 <load_point_down+0x28>
				}
				else
				{
					current_device_to_load++;
 800751c:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <load_point_down+0x50>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	3301      	adds	r3, #1
 8007522:	b2da      	uxtb	r2, r3
 8007524:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <load_point_down+0x50>)
 8007526:	701a      	strb	r2, [r3, #0]
				}
			}
			while (pp_dev_aux[current_device_to_load]->exist_flag == 1);
 8007528:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <load_point_down+0x54>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	4b08      	ldr	r3, [pc, #32]	; (8007550 <load_point_down+0x50>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d0e7      	beq.n	800750c <load_point_down+0xc>
		}
		while (current_device_to_load == device_number);
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <load_point_down+0x50>)
 800753e:	781a      	ldrb	r2, [r3, #0]
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <load_point_down+0x58>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d0e1      	beq.n	800750c <load_point_down+0xc>

		draw_current_menu();
 8007548:	f7fc fece 	bl	80042e8 <draw_current_menu>
	}
}
 800754c:	bf00      	nop
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000122 	.word	0x20000122
 8007554:	2000083c 	.word	0x2000083c
 8007558:	20000738 	.word	0x20000738

0800755c <load_point_ok>:



void load_point_ok(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
	if (current_device_to_load != 0)
 8007560:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <load_point_ok+0x38>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d012      	beq.n	800758e <load_point_ok+0x32>
	{
		load_memory_point(current_device_to_load, current_slot_to_load);
 8007568:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <load_point_ok+0x38>)
 800756a:	781a      	ldrb	r2, [r3, #0]
 800756c:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <load_point_ok+0x3c>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	4619      	mov	r1, r3
 8007572:	4610      	mov	r0, r2
 8007574:	f000 fd22 	bl	8007fbc <load_memory_point>

		current_slot_to_load = MEMORY_SLOT_FIRST;
 8007578:	4b07      	ldr	r3, [pc, #28]	; (8007598 <load_point_ok+0x3c>)
 800757a:	2201      	movs	r2, #1
 800757c:	701a      	strb	r2, [r3, #0]
		current_device_to_load = 0;
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <load_point_ok+0x38>)
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
		current_menu = M_MAIN;
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <load_point_ok+0x40>)
 8007586:	2201      	movs	r2, #1
 8007588:	701a      	strb	r2, [r3, #0]
		draw_current_menu();
 800758a:	f7fc fead 	bl	80042e8 <draw_current_menu>
	}
}
 800758e:	bf00      	nop
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000122 	.word	0x20000122
 8007598:	20000033 	.word	0x20000033
 800759c:	200007fa 	.word	0x200007fa

080075a0 <load_point_esc>:



void load_point_esc(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
	current_device_to_load = 0;
 80075a4:	4b04      	ldr	r3, [pc, #16]	; (80075b8 <load_point_esc+0x18>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]
	current_menu = M_EACH_POINT;
 80075aa:	4b04      	ldr	r3, [pc, #16]	; (80075bc <load_point_esc+0x1c>)
 80075ac:	220b      	movs	r2, #11
 80075ae:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 80075b0:	f7fc fe9a 	bl	80042e8 <draw_current_menu>
}
 80075b4:	bf00      	nop
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20000122 	.word	0x20000122
 80075bc:	200007fa 	.word	0x200007fa

080075c0 <delete_point_ok>:



void delete_point_ok(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
	delete_memory_point(current_slot_to_load);
 80075c4:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <delete_point_ok+0x28>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fdd7 	bl	800817c <delete_memory_point>

	reset_current_item_in_menu(M_EACH_POINT);
 80075ce:	200b      	movs	r0, #11
 80075d0:	f7fc fe5a 	bl	8004288 <reset_current_item_in_menu>
	current_slot_to_load = MEMORY_SLOT_FIRST;
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <delete_point_ok+0x28>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	701a      	strb	r2, [r3, #0]
	current_menu = M_POINTS;
 80075da:	4b04      	ldr	r3, [pc, #16]	; (80075ec <delete_point_ok+0x2c>)
 80075dc:	220a      	movs	r2, #10
 80075de:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 80075e0:	f7fc fe82 	bl	80042e8 <draw_current_menu>
}
 80075e4:	bf00      	nop
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000033 	.word	0x20000033
 80075ec:	200007fa 	.word	0x200007fa

080075f0 <set_dev_num_up>:



void set_dev_num_up(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
    if (settings_copy.device_number == DEVICE_NUMBER_LAST)
 80075f4:	4b08      	ldr	r3, [pc, #32]	; (8007618 <set_dev_num_up+0x28>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b06      	cmp	r3, #6
 80075fa:	d103      	bne.n	8007604 <set_dev_num_up+0x14>
    {
        settings_copy.device_number = DEVICE_NUMBER_FIRST;
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <set_dev_num_up+0x28>)
 80075fe:	2201      	movs	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	e005      	b.n	8007610 <set_dev_num_up+0x20>
    }
    else
    {
        settings_copy.device_number++;
 8007604:	4b04      	ldr	r3, [pc, #16]	; (8007618 <set_dev_num_up+0x28>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	3301      	adds	r3, #1
 800760a:	b2da      	uxtb	r2, r3
 800760c:	4b02      	ldr	r3, [pc, #8]	; (8007618 <set_dev_num_up+0x28>)
 800760e:	701a      	strb	r2, [r3, #0]
    }

    draw_current_menu();
 8007610:	f7fc fe6a 	bl	80042e8 <draw_current_menu>
}
 8007614:	bf00      	nop
 8007616:	bd80      	pop	{r7, pc}
 8007618:	200007e0 	.word	0x200007e0

0800761c <set_dev_num_down>:



void set_dev_num_down(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
    if (settings_copy.device_number == DEVICE_NUMBER_FIRST)
 8007620:	4b08      	ldr	r3, [pc, #32]	; (8007644 <set_dev_num_down+0x28>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d103      	bne.n	8007630 <set_dev_num_down+0x14>
    {
        settings_copy.device_number = DEVICE_NUMBER_LAST;
 8007628:	4b06      	ldr	r3, [pc, #24]	; (8007644 <set_dev_num_down+0x28>)
 800762a:	2206      	movs	r2, #6
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	e005      	b.n	800763c <set_dev_num_down+0x20>
    }
    else
    {
        settings_copy.device_number--;
 8007630:	4b04      	ldr	r3, [pc, #16]	; (8007644 <set_dev_num_down+0x28>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	3b01      	subs	r3, #1
 8007636:	b2da      	uxtb	r2, r3
 8007638:	4b02      	ldr	r3, [pc, #8]	; (8007644 <set_dev_num_down+0x28>)
 800763a:	701a      	strb	r2, [r3, #0]
    }
    
    draw_current_menu();
 800763c:	f7fc fe54 	bl	80042e8 <draw_current_menu>
}
 8007640:	bf00      	nop
 8007642:	bd80      	pop	{r7, pc}
 8007644:	200007e0 	.word	0x200007e0

08007648 <set_dev_num_ok>:



void set_dev_num_ok(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
    if (settings_copy.device_number != device_number)
 800764c:	4b07      	ldr	r3, [pc, #28]	; (800766c <set_dev_num_ok+0x24>)
 800764e:	781a      	ldrb	r2, [r3, #0]
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <set_dev_num_ok+0x28>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d002      	beq.n	800765e <set_dev_num_ok+0x16>
    {
        flag_settings_changed = 1;
 8007658:	4b06      	ldr	r3, [pc, #24]	; (8007674 <set_dev_num_ok+0x2c>)
 800765a:	2201      	movs	r2, #1
 800765c:	701a      	strb	r2, [r3, #0]
    }
    
    current_menu = M_EDIT_SETTINGS;
 800765e:	4b06      	ldr	r3, [pc, #24]	; (8007678 <set_dev_num_ok+0x30>)
 8007660:	2210      	movs	r2, #16
 8007662:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007664:	f7fc fe40 	bl	80042e8 <draw_current_menu>
}
 8007668:	bf00      	nop
 800766a:	bd80      	pop	{r7, pc}
 800766c:	200007e0 	.word	0x200007e0
 8007670:	20000738 	.word	0x20000738
 8007674:	2000011e 	.word	0x2000011e
 8007678:	200007fa 	.word	0x200007fa

0800767c <set_dev_num_esc>:



void set_dev_num_esc(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
    settings_copy.device_number = device_number;   //exit no save, reset value
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <set_dev_num_esc+0x1c>)
 8007682:	781a      	ldrb	r2, [r3, #0]
 8007684:	4b05      	ldr	r3, [pc, #20]	; (800769c <set_dev_num_esc+0x20>)
 8007686:	701a      	strb	r2, [r3, #0]
    current_menu = M_EDIT_SETTINGS;
 8007688:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <set_dev_num_esc+0x24>)
 800768a:	2210      	movs	r2, #16
 800768c:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 800768e:	f7fc fe2b 	bl	80042e8 <draw_current_menu>
}
 8007692:	bf00      	nop
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000738 	.word	0x20000738
 800769c:	200007e0 	.word	0x200007e0
 80076a0:	200007fa 	.word	0x200007fa

080076a4 <confirm_settings_save_ok>:



void confirm_settings_save_ok(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
    settings_save(&settings_copy);
 80076a8:	4803      	ldr	r0, [pc, #12]	; (80076b8 <confirm_settings_save_ok+0x14>)
 80076aa:	f001 f9cd 	bl	8008a48 <settings_save>
    NVIC_SystemReset();
 80076ae:	f7fc fbbb 	bl	8003e28 <NVIC_SystemReset>
}
 80076b2:	bf00      	nop
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200007e0 	.word	0x200007e0

080076bc <set_dev_id_up>:



void set_dev_id_up(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
    if (settings_copy.device_id[device_id_current_symbol] == DEVICE_ID_LAST_SYMBOL)
 80076c0:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <set_dev_id_up+0x44>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <set_dev_id_up+0x48>)
 80076c8:	4413      	add	r3, r2
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	2b5a      	cmp	r3, #90	; 0x5a
 80076ce:	d107      	bne.n	80076e0 <set_dev_id_up+0x24>
    {
        settings_copy.device_id[device_id_current_symbol] = DEVICE_ID_FIRST_SYMBOL;
 80076d0:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <set_dev_id_up+0x44>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <set_dev_id_up+0x48>)
 80076d8:	4413      	add	r3, r2
 80076da:	2241      	movs	r2, #65	; 0x41
 80076dc:	705a      	strb	r2, [r3, #1]
 80076de:	e00a      	b.n	80076f6 <set_dev_id_up+0x3a>
    }
    else
    {
        settings_copy.device_id[device_id_current_symbol]++;
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <set_dev_id_up+0x44>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	4a07      	ldr	r2, [pc, #28]	; (8007704 <set_dev_id_up+0x48>)
 80076e6:	441a      	add	r2, r3
 80076e8:	7852      	ldrb	r2, [r2, #1]
 80076ea:	3201      	adds	r2, #1
 80076ec:	b2d1      	uxtb	r1, r2
 80076ee:	4a05      	ldr	r2, [pc, #20]	; (8007704 <set_dev_id_up+0x48>)
 80076f0:	4413      	add	r3, r2
 80076f2:	460a      	mov	r2, r1
 80076f4:	705a      	strb	r2, [r3, #1]
    }
    
    draw_current_menu();
 80076f6:	f7fc fdf7 	bl	80042e8 <draw_current_menu>
}
 80076fa:	bf00      	nop
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	2000011f 	.word	0x2000011f
 8007704:	200007e0 	.word	0x200007e0

08007708 <set_dev_id_down>:



void set_dev_id_down(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
    if (settings_copy.device_id[device_id_current_symbol] == DEVICE_ID_FIRST_SYMBOL)
 800770c:	4b0f      	ldr	r3, [pc, #60]	; (800774c <set_dev_id_down+0x44>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <set_dev_id_down+0x48>)
 8007714:	4413      	add	r3, r2
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	2b41      	cmp	r3, #65	; 0x41
 800771a:	d107      	bne.n	800772c <set_dev_id_down+0x24>
    {
        settings_copy.device_id[device_id_current_symbol] = DEVICE_ID_LAST_SYMBOL;
 800771c:	4b0b      	ldr	r3, [pc, #44]	; (800774c <set_dev_id_down+0x44>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <set_dev_id_down+0x48>)
 8007724:	4413      	add	r3, r2
 8007726:	225a      	movs	r2, #90	; 0x5a
 8007728:	705a      	strb	r2, [r3, #1]
 800772a:	e00a      	b.n	8007742 <set_dev_id_down+0x3a>
    }
    else
    {
        settings_copy.device_id[device_id_current_symbol]--;
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <set_dev_id_down+0x44>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	4a07      	ldr	r2, [pc, #28]	; (8007750 <set_dev_id_down+0x48>)
 8007732:	441a      	add	r2, r3
 8007734:	7852      	ldrb	r2, [r2, #1]
 8007736:	3a01      	subs	r2, #1
 8007738:	b2d1      	uxtb	r1, r2
 800773a:	4a05      	ldr	r2, [pc, #20]	; (8007750 <set_dev_id_down+0x48>)
 800773c:	4413      	add	r3, r2
 800773e:	460a      	mov	r2, r1
 8007740:	705a      	strb	r2, [r3, #1]
    }
    
    draw_current_menu();
 8007742:	f7fc fdd1 	bl	80042e8 <draw_current_menu>
}
 8007746:	bf00      	nop
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	2000011f 	.word	0x2000011f
 8007750:	200007e0 	.word	0x200007e0

08007754 <set_dev_id_ok>:



void set_dev_id_ok(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
    if (++device_id_current_symbol == DEVICE_ID_LEN)
 8007758:	4b08      	ldr	r3, [pc, #32]	; (800777c <set_dev_id_ok+0x28>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	3301      	adds	r3, #1
 800775e:	b2da      	uxtb	r2, r3
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <set_dev_id_ok+0x28>)
 8007762:	701a      	strb	r2, [r3, #0]
 8007764:	4b05      	ldr	r3, [pc, #20]	; (800777c <set_dev_id_ok+0x28>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d102      	bne.n	8007772 <set_dev_id_ok+0x1e>
    {
        device_id_current_symbol = 0;
 800776c:	4b03      	ldr	r3, [pc, #12]	; (800777c <set_dev_id_ok+0x28>)
 800776e:	2200      	movs	r2, #0
 8007770:	701a      	strb	r2, [r3, #0]
    }
    
    draw_current_menu();
 8007772:	f7fc fdb9 	bl	80042e8 <draw_current_menu>
}
 8007776:	bf00      	nop
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	2000011f 	.word	0x2000011f

08007780 <set_dev_id_ok_long>:



void set_dev_id_ok_long(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < DEVICE_ID_LEN; i++)
 8007786:	2300      	movs	r3, #0
 8007788:	71fb      	strb	r3, [r7, #7]
 800778a:	e011      	b.n	80077b0 <set_dev_id_ok_long+0x30>
    {
        if (settings_copy.device_id[i] != p_settings->device_id[i])
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	4a0e      	ldr	r2, [pc, #56]	; (80077c8 <set_dev_id_ok_long+0x48>)
 8007790:	4413      	add	r3, r2
 8007792:	785a      	ldrb	r2, [r3, #1]
 8007794:	4b0d      	ldr	r3, [pc, #52]	; (80077cc <set_dev_id_ok_long+0x4c>)
 8007796:	6819      	ldr	r1, [r3, #0]
 8007798:	79fb      	ldrb	r3, [r7, #7]
 800779a:	440b      	add	r3, r1
 800779c:	785b      	ldrb	r3, [r3, #1]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d003      	beq.n	80077aa <set_dev_id_ok_long+0x2a>
        {
            flag_settings_changed = 1;
 80077a2:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <set_dev_id_ok_long+0x50>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	701a      	strb	r2, [r3, #0]
            break;
 80077a8:	e005      	b.n	80077b6 <set_dev_id_ok_long+0x36>
    for (uint8_t i = 0; i < DEVICE_ID_LEN; i++)
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	3301      	adds	r3, #1
 80077ae:	71fb      	strb	r3, [r7, #7]
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d9ea      	bls.n	800778c <set_dev_id_ok_long+0xc>
        }
    }
    
    current_menu = M_EDIT_SETTINGS;
 80077b6:	4b07      	ldr	r3, [pc, #28]	; (80077d4 <set_dev_id_ok_long+0x54>)
 80077b8:	2210      	movs	r2, #16
 80077ba:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 80077bc:	f7fc fd94 	bl	80042e8 <draw_current_menu>
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	200007e0 	.word	0x200007e0
 80077cc:	2000061c 	.word	0x2000061c
 80077d0:	2000011e 	.word	0x2000011e
 80077d4:	200007fa 	.word	0x200007fa

080077d8 <set_dev_id_esc>:



void set_dev_id_esc(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < DEVICE_ID_LEN; i++)
 80077de:	2300      	movs	r3, #0
 80077e0:	71fb      	strb	r3, [r7, #7]
 80077e2:	e00c      	b.n	80077fe <set_dev_id_esc+0x26>
    {
        settings_copy.device_id[i] = p_settings->device_id[i];   //exit no save, reset value
 80077e4:	4b0d      	ldr	r3, [pc, #52]	; (800781c <set_dev_id_esc+0x44>)
 80077e6:	6819      	ldr	r1, [r3, #0]
 80077e8:	79fa      	ldrb	r2, [r7, #7]
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	440a      	add	r2, r1
 80077ee:	7851      	ldrb	r1, [r2, #1]
 80077f0:	4a0b      	ldr	r2, [pc, #44]	; (8007820 <set_dev_id_esc+0x48>)
 80077f2:	4413      	add	r3, r2
 80077f4:	460a      	mov	r2, r1
 80077f6:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < DEVICE_ID_LEN; i++)
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	3301      	adds	r3, #1
 80077fc:	71fb      	strb	r3, [r7, #7]
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d9ef      	bls.n	80077e4 <set_dev_id_esc+0xc>
    }
    device_id_current_symbol = 0;
 8007804:	4b07      	ldr	r3, [pc, #28]	; (8007824 <set_dev_id_esc+0x4c>)
 8007806:	2200      	movs	r2, #0
 8007808:	701a      	strb	r2, [r3, #0]
    
    current_menu = M_EDIT_SETTINGS;
 800780a:	4b07      	ldr	r3, [pc, #28]	; (8007828 <set_dev_id_esc+0x50>)
 800780c:	2210      	movs	r2, #16
 800780e:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007810:	f7fc fd6a 	bl	80042e8 <draw_current_menu>
}
 8007814:	bf00      	nop
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	2000061c 	.word	0x2000061c
 8007820:	200007e0 	.word	0x200007e0
 8007824:	2000011f 	.word	0x2000011f
 8007828:	200007fa 	.word	0x200007fa

0800782c <set_freq_ch_up>:



void set_freq_ch_up(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
    if (settings_copy.freq_channel == FREQ_CHANNEL_LAST)
 8007830:	4b08      	ldr	r3, [pc, #32]	; (8007854 <set_freq_ch_up+0x28>)
 8007832:	78db      	ldrb	r3, [r3, #3]
 8007834:	2b45      	cmp	r3, #69	; 0x45
 8007836:	d103      	bne.n	8007840 <set_freq_ch_up+0x14>
    {
        settings_copy.freq_channel = FREQ_CHANNEL_FIRST;
 8007838:	4b06      	ldr	r3, [pc, #24]	; (8007854 <set_freq_ch_up+0x28>)
 800783a:	2201      	movs	r2, #1
 800783c:	70da      	strb	r2, [r3, #3]
 800783e:	e005      	b.n	800784c <set_freq_ch_up+0x20>
    }
    else
    {
        settings_copy.freq_channel++;
 8007840:	4b04      	ldr	r3, [pc, #16]	; (8007854 <set_freq_ch_up+0x28>)
 8007842:	78db      	ldrb	r3, [r3, #3]
 8007844:	3301      	adds	r3, #1
 8007846:	b2da      	uxtb	r2, r3
 8007848:	4b02      	ldr	r3, [pc, #8]	; (8007854 <set_freq_ch_up+0x28>)
 800784a:	70da      	strb	r2, [r3, #3]
    }
    
    draw_current_menu();
 800784c:	f7fc fd4c 	bl	80042e8 <draw_current_menu>
}
 8007850:	bf00      	nop
 8007852:	bd80      	pop	{r7, pc}
 8007854:	200007e0 	.word	0x200007e0

08007858 <set_freq_ch_down>:



void set_freq_ch_down(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
    if (settings_copy.freq_channel == FREQ_CHANNEL_FIRST)
 800785c:	4b08      	ldr	r3, [pc, #32]	; (8007880 <set_freq_ch_down+0x28>)
 800785e:	78db      	ldrb	r3, [r3, #3]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d103      	bne.n	800786c <set_freq_ch_down+0x14>
    {
        settings_copy.freq_channel = FREQ_CHANNEL_LAST;
 8007864:	4b06      	ldr	r3, [pc, #24]	; (8007880 <set_freq_ch_down+0x28>)
 8007866:	2245      	movs	r2, #69	; 0x45
 8007868:	70da      	strb	r2, [r3, #3]
 800786a:	e005      	b.n	8007878 <set_freq_ch_down+0x20>
    }
    else
    {
        settings_copy.freq_channel--;
 800786c:	4b04      	ldr	r3, [pc, #16]	; (8007880 <set_freq_ch_down+0x28>)
 800786e:	78db      	ldrb	r3, [r3, #3]
 8007870:	3b01      	subs	r3, #1
 8007872:	b2da      	uxtb	r2, r3
 8007874:	4b02      	ldr	r3, [pc, #8]	; (8007880 <set_freq_ch_down+0x28>)
 8007876:	70da      	strb	r2, [r3, #3]
    }
    
    draw_current_menu();
 8007878:	f7fc fd36 	bl	80042e8 <draw_current_menu>
}
 800787c:	bf00      	nop
 800787e:	bd80      	pop	{r7, pc}
 8007880:	200007e0 	.word	0x200007e0

08007884 <set_freq_ch_ok>:



void set_freq_ch_ok(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
    if (settings_copy.freq_channel != p_settings->freq_channel)
 8007888:	4b08      	ldr	r3, [pc, #32]	; (80078ac <set_freq_ch_ok+0x28>)
 800788a:	78da      	ldrb	r2, [r3, #3]
 800788c:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <set_freq_ch_ok+0x2c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	78db      	ldrb	r3, [r3, #3]
 8007892:	429a      	cmp	r2, r3
 8007894:	d002      	beq.n	800789c <set_freq_ch_ok+0x18>
    {
        flag_settings_changed = 1;
 8007896:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <set_freq_ch_ok+0x30>)
 8007898:	2201      	movs	r2, #1
 800789a:	701a      	strb	r2, [r3, #0]
    }
    
    current_menu = M_EDIT_SETTINGS;
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <set_freq_ch_ok+0x34>)
 800789e:	2210      	movs	r2, #16
 80078a0:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 80078a2:	f7fc fd21 	bl	80042e8 <draw_current_menu>
}
 80078a6:	bf00      	nop
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	200007e0 	.word	0x200007e0
 80078b0:	2000061c 	.word	0x2000061c
 80078b4:	2000011e 	.word	0x2000011e
 80078b8:	200007fa 	.word	0x200007fa

080078bc <set_freq_ch_esc>:



void set_freq_ch_esc(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
    settings_copy.freq_channel = p_settings->freq_channel;   //exit no save, reset value
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <set_freq_ch_esc+0x1c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	78da      	ldrb	r2, [r3, #3]
 80078c6:	4b05      	ldr	r3, [pc, #20]	; (80078dc <set_freq_ch_esc+0x20>)
 80078c8:	70da      	strb	r2, [r3, #3]
    current_menu = M_EDIT_SETTINGS;
 80078ca:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <set_freq_ch_esc+0x24>)
 80078cc:	2210      	movs	r2, #16
 80078ce:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 80078d0:	f7fc fd0a 	bl	80042e8 <draw_current_menu>
}
 80078d4:	bf00      	nop
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	2000061c 	.word	0x2000061c
 80078dc:	200007e0 	.word	0x200007e0
 80078e0:	200007fa 	.word	0x200007fa

080078e4 <set_tx_pow_up>:



void set_tx_pow_up(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
    if (settings_copy.tx_power_opt == TX_POWER_LAST_OPTION)
 80078e8:	4b08      	ldr	r3, [pc, #32]	; (800790c <set_tx_pow_up+0x28>)
 80078ea:	791b      	ldrb	r3, [r3, #4]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d103      	bne.n	80078f8 <set_tx_pow_up+0x14>
    {
        settings_copy.tx_power_opt = TX_POWER_FIRST_OPTION;
 80078f0:	4b06      	ldr	r3, [pc, #24]	; (800790c <set_tx_pow_up+0x28>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	711a      	strb	r2, [r3, #4]
 80078f6:	e005      	b.n	8007904 <set_tx_pow_up+0x20>
    }
    else
    {
        settings_copy.tx_power_opt++;
 80078f8:	4b04      	ldr	r3, [pc, #16]	; (800790c <set_tx_pow_up+0x28>)
 80078fa:	791b      	ldrb	r3, [r3, #4]
 80078fc:	3301      	adds	r3, #1
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	4b02      	ldr	r3, [pc, #8]	; (800790c <set_tx_pow_up+0x28>)
 8007902:	711a      	strb	r2, [r3, #4]
    }
    
    draw_current_menu();
 8007904:	f7fc fcf0 	bl	80042e8 <draw_current_menu>
}
 8007908:	bf00      	nop
 800790a:	bd80      	pop	{r7, pc}
 800790c:	200007e0 	.word	0x200007e0

08007910 <set_tx_pow_down>:



void set_tx_pow_down(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
    if (settings_copy.tx_power_opt == TX_POWER_FIRST_OPTION)
 8007914:	4b08      	ldr	r3, [pc, #32]	; (8007938 <set_tx_pow_down+0x28>)
 8007916:	791b      	ldrb	r3, [r3, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d103      	bne.n	8007924 <set_tx_pow_down+0x14>
    {
        settings_copy.tx_power_opt = TX_POWER_LAST_OPTION;
 800791c:	4b06      	ldr	r3, [pc, #24]	; (8007938 <set_tx_pow_down+0x28>)
 800791e:	2203      	movs	r2, #3
 8007920:	711a      	strb	r2, [r3, #4]
 8007922:	e005      	b.n	8007930 <set_tx_pow_down+0x20>
    }
    else
    {
        settings_copy.tx_power_opt--;
 8007924:	4b04      	ldr	r3, [pc, #16]	; (8007938 <set_tx_pow_down+0x28>)
 8007926:	791b      	ldrb	r3, [r3, #4]
 8007928:	3b01      	subs	r3, #1
 800792a:	b2da      	uxtb	r2, r3
 800792c:	4b02      	ldr	r3, [pc, #8]	; (8007938 <set_tx_pow_down+0x28>)
 800792e:	711a      	strb	r2, [r3, #4]
    }
    
    draw_current_menu();
 8007930:	f7fc fcda 	bl	80042e8 <draw_current_menu>
}
 8007934:	bf00      	nop
 8007936:	bd80      	pop	{r7, pc}
 8007938:	200007e0 	.word	0x200007e0

0800793c <set_tx_pow_ok>:



void set_tx_pow_ok(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
    if (settings_copy.tx_power_opt != p_settings->tx_power_opt)
 8007940:	4b08      	ldr	r3, [pc, #32]	; (8007964 <set_tx_pow_ok+0x28>)
 8007942:	791a      	ldrb	r2, [r3, #4]
 8007944:	4b08      	ldr	r3, [pc, #32]	; (8007968 <set_tx_pow_ok+0x2c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	791b      	ldrb	r3, [r3, #4]
 800794a:	429a      	cmp	r2, r3
 800794c:	d002      	beq.n	8007954 <set_tx_pow_ok+0x18>
    {
        flag_settings_changed = 1;
 800794e:	4b07      	ldr	r3, [pc, #28]	; (800796c <set_tx_pow_ok+0x30>)
 8007950:	2201      	movs	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
    }
    
    current_menu = M_EDIT_SETTINGS;
 8007954:	4b06      	ldr	r3, [pc, #24]	; (8007970 <set_tx_pow_ok+0x34>)
 8007956:	2210      	movs	r2, #16
 8007958:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 800795a:	f7fc fcc5 	bl	80042e8 <draw_current_menu>
}
 800795e:	bf00      	nop
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	200007e0 	.word	0x200007e0
 8007968:	2000061c 	.word	0x2000061c
 800796c:	2000011e 	.word	0x2000011e
 8007970:	200007fa 	.word	0x200007fa

08007974 <set_tx_pow_esc>:



void set_tx_pow_esc(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
    settings_copy.tx_power_opt = p_settings->tx_power_opt;   //exit no save, reset value
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <set_tx_pow_esc+0x1c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	791a      	ldrb	r2, [r3, #4]
 800797e:	4b05      	ldr	r3, [pc, #20]	; (8007994 <set_tx_pow_esc+0x20>)
 8007980:	711a      	strb	r2, [r3, #4]
    current_menu = M_EDIT_SETTINGS;
 8007982:	4b05      	ldr	r3, [pc, #20]	; (8007998 <set_tx_pow_esc+0x24>)
 8007984:	2210      	movs	r2, #16
 8007986:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007988:	f7fc fcae 	bl	80042e8 <draw_current_menu>
}
 800798c:	bf00      	nop
 800798e:	bd80      	pop	{r7, pc}
 8007990:	2000061c 	.word	0x2000061c
 8007994:	200007e0 	.word	0x200007e0
 8007998:	200007fa 	.word	0x200007fa

0800799c <set_send_intvl_up>:



void set_send_intvl_up(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
    if (settings_copy.send_interval_opt == SEND_INTERVAL_LAST_OPTION)
 80079a0:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <set_send_intvl_up+0x28>)
 80079a2:	795b      	ldrb	r3, [r3, #5]
 80079a4:	2b04      	cmp	r3, #4
 80079a6:	d103      	bne.n	80079b0 <set_send_intvl_up+0x14>
    {
    	settings_copy.send_interval_opt = SEND_INTERVAL_FIRST_OPTION;
 80079a8:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <set_send_intvl_up+0x28>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	715a      	strb	r2, [r3, #5]
 80079ae:	e005      	b.n	80079bc <set_send_intvl_up+0x20>
    }
    else
    {
    	settings_copy.send_interval_opt++;
 80079b0:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <set_send_intvl_up+0x28>)
 80079b2:	795b      	ldrb	r3, [r3, #5]
 80079b4:	3301      	adds	r3, #1
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	4b02      	ldr	r3, [pc, #8]	; (80079c4 <set_send_intvl_up+0x28>)
 80079ba:	715a      	strb	r2, [r3, #5]
    }

    draw_current_menu();
 80079bc:	f7fc fc94 	bl	80042e8 <draw_current_menu>
}
 80079c0:	bf00      	nop
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	200007e0 	.word	0x200007e0

080079c8 <set_send_intvl_down>:



void set_send_intvl_down(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
    if (settings_copy.send_interval_opt == SEND_INTERVAL_FIRST_OPTION)
 80079cc:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <set_send_intvl_down+0x28>)
 80079ce:	795b      	ldrb	r3, [r3, #5]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d103      	bne.n	80079dc <set_send_intvl_down+0x14>
    {
    	settings_copy.send_interval_opt = SEND_INTERVAL_LAST_OPTION;
 80079d4:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <set_send_intvl_down+0x28>)
 80079d6:	2204      	movs	r2, #4
 80079d8:	715a      	strb	r2, [r3, #5]
 80079da:	e005      	b.n	80079e8 <set_send_intvl_down+0x20>
    }
    else
    {
    	settings_copy.send_interval_opt--;
 80079dc:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <set_send_intvl_down+0x28>)
 80079de:	795b      	ldrb	r3, [r3, #5]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	4b02      	ldr	r3, [pc, #8]	; (80079f0 <set_send_intvl_down+0x28>)
 80079e6:	715a      	strb	r2, [r3, #5]
    }

    draw_current_menu();
 80079e8:	f7fc fc7e 	bl	80042e8 <draw_current_menu>
}
 80079ec:	bf00      	nop
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	200007e0 	.word	0x200007e0

080079f4 <set_send_intvl_ok>:



void set_send_intvl_ok(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
    if (settings_copy.send_interval_opt != p_settings->send_interval_opt)
 80079f8:	4b08      	ldr	r3, [pc, #32]	; (8007a1c <set_send_intvl_ok+0x28>)
 80079fa:	795a      	ldrb	r2, [r3, #5]
 80079fc:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <set_send_intvl_ok+0x2c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	795b      	ldrb	r3, [r3, #5]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d002      	beq.n	8007a0c <set_send_intvl_ok+0x18>
    {
        flag_settings_changed = 1;
 8007a06:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <set_send_intvl_ok+0x30>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	701a      	strb	r2, [r3, #0]
    }

    current_menu = M_EDIT_SETTINGS;
 8007a0c:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <set_send_intvl_ok+0x34>)
 8007a0e:	2210      	movs	r2, #16
 8007a10:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007a12:	f7fc fc69 	bl	80042e8 <draw_current_menu>
}
 8007a16:	bf00      	nop
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200007e0 	.word	0x200007e0
 8007a20:	2000061c 	.word	0x2000061c
 8007a24:	2000011e 	.word	0x2000011e
 8007a28:	200007fa 	.word	0x200007fa

08007a2c <set_send_intvl_esc>:



void set_send_intvl_esc(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
    settings_copy.send_interval_opt = p_settings->send_interval_opt;   //exit no save, reset value
 8007a30:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <set_send_intvl_esc+0x1c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	795a      	ldrb	r2, [r3, #5]
 8007a36:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <set_send_intvl_esc+0x20>)
 8007a38:	715a      	strb	r2, [r3, #5]
    current_menu = M_EDIT_SETTINGS;
 8007a3a:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <set_send_intvl_esc+0x24>)
 8007a3c:	2210      	movs	r2, #16
 8007a3e:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007a40:	f7fc fc52 	bl	80042e8 <draw_current_menu>
}
 8007a44:	bf00      	nop
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	2000061c 	.word	0x2000061c
 8007a4c:	200007e0 	.word	0x200007e0
 8007a50:	200007fa 	.word	0x200007fa

08007a54 <set_to_thr_up>:



void set_to_thr_up(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
	#define TIMEOUT_THRESHOLD_MAX 	(3600)
	#define TIMEOUT_THRESHOLD_STEP 	(10)

	if (settings_copy.timeout_threshold.as_integer < TIMEOUT_THRESHOLD_MAX)
 8007a58:	4b07      	ldr	r3, [pc, #28]	; (8007a78 <set_to_thr_up+0x24>)
 8007a5a:	88db      	ldrh	r3, [r3, #6]
 8007a5c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8007a60:	d205      	bcs.n	8007a6e <set_to_thr_up+0x1a>
	{
		settings_copy.timeout_threshold.as_integer += TIMEOUT_THRESHOLD_STEP;
 8007a62:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <set_to_thr_up+0x24>)
 8007a64:	88db      	ldrh	r3, [r3, #6]
 8007a66:	330a      	adds	r3, #10
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	4b03      	ldr	r3, [pc, #12]	; (8007a78 <set_to_thr_up+0x24>)
 8007a6c:	80da      	strh	r2, [r3, #6]
	}

    draw_current_menu();
 8007a6e:	f7fc fc3b 	bl	80042e8 <draw_current_menu>
}
 8007a72:	bf00      	nop
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	200007e0 	.word	0x200007e0

08007a7c <set_to_thr_down>:



void set_to_thr_down(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
	#define TIMEOUT_THRESHOLD_MIN 	(0)

	if (settings_copy.timeout_threshold.as_integer > TIMEOUT_THRESHOLD_MIN)
 8007a80:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <set_to_thr_down+0x20>)
 8007a82:	88db      	ldrh	r3, [r3, #6]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d005      	beq.n	8007a94 <set_to_thr_down+0x18>
	{
		settings_copy.timeout_threshold.as_integer -= TIMEOUT_THRESHOLD_STEP;
 8007a88:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <set_to_thr_down+0x20>)
 8007a8a:	88db      	ldrh	r3, [r3, #6]
 8007a8c:	3b0a      	subs	r3, #10
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	4b02      	ldr	r3, [pc, #8]	; (8007a9c <set_to_thr_down+0x20>)
 8007a92:	80da      	strh	r2, [r3, #6]
	}

    draw_current_menu();
 8007a94:	f7fc fc28 	bl	80042e8 <draw_current_menu>
}
 8007a98:	bf00      	nop
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	200007e0 	.word	0x200007e0

08007aa0 <set_to_thr_ok>:



void set_to_thr_ok(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0
    if (settings_copy.timeout_threshold.as_integer != p_settings->timeout_threshold.as_integer)
 8007aa4:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <set_to_thr_ok+0x28>)
 8007aa6:	88da      	ldrh	r2, [r3, #6]
 8007aa8:	4b08      	ldr	r3, [pc, #32]	; (8007acc <set_to_thr_ok+0x2c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	88db      	ldrh	r3, [r3, #6]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d002      	beq.n	8007ab8 <set_to_thr_ok+0x18>
    {
        flag_settings_changed = 1;
 8007ab2:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <set_to_thr_ok+0x30>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	701a      	strb	r2, [r3, #0]
    }

    current_menu = M_EDIT_SETTINGS;
 8007ab8:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <set_to_thr_ok+0x34>)
 8007aba:	2210      	movs	r2, #16
 8007abc:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007abe:	f7fc fc13 	bl	80042e8 <draw_current_menu>
}
 8007ac2:	bf00      	nop
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	200007e0 	.word	0x200007e0
 8007acc:	2000061c 	.word	0x2000061c
 8007ad0:	2000011e 	.word	0x2000011e
 8007ad4:	200007fa 	.word	0x200007fa

08007ad8 <set_to_thr_esc>:



void set_to_thr_esc(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
	settings_copy.timeout_threshold.as_integer = p_settings->timeout_threshold.as_integer;   //exit no save, reset value
 8007adc:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <set_to_thr_esc+0x1c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	88da      	ldrh	r2, [r3, #6]
 8007ae2:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <set_to_thr_esc+0x20>)
 8007ae4:	80da      	strh	r2, [r3, #6]
    current_menu = M_EDIT_SETTINGS;
 8007ae6:	4b05      	ldr	r3, [pc, #20]	; (8007afc <set_to_thr_esc+0x24>)
 8007ae8:	2210      	movs	r2, #16
 8007aea:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007aec:	f7fc fbfc 	bl	80042e8 <draw_current_menu>
}
 8007af0:	bf00      	nop
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	2000061c 	.word	0x2000061c
 8007af8:	200007e0 	.word	0x200007e0
 8007afc:	200007fa 	.word	0x200007fa

08007b00 <set_fnc_thr_up>:



void set_fnc_thr_up(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
	#define FENCE_THRESHOLD_MAX 	(3600)
	#define FENCE_THRESHOLD_STEP 	(10)

	if (settings_copy.fence_threshold.as_integer < FENCE_THRESHOLD_MAX)
 8007b04:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <set_fnc_thr_up+0x24>)
 8007b06:	891b      	ldrh	r3, [r3, #8]
 8007b08:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8007b0c:	d205      	bcs.n	8007b1a <set_fnc_thr_up+0x1a>
	{
		settings_copy.fence_threshold.as_integer += FENCE_THRESHOLD_STEP;
 8007b0e:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <set_fnc_thr_up+0x24>)
 8007b10:	891b      	ldrh	r3, [r3, #8]
 8007b12:	330a      	adds	r3, #10
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	4b03      	ldr	r3, [pc, #12]	; (8007b24 <set_fnc_thr_up+0x24>)
 8007b18:	811a      	strh	r2, [r3, #8]
	}

    draw_current_menu();
 8007b1a:	f7fc fbe5 	bl	80042e8 <draw_current_menu>
}
 8007b1e:	bf00      	nop
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	200007e0 	.word	0x200007e0

08007b28 <set_fnc_thr_down>:



void set_fnc_thr_down(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
	#define FENCE_THRESHOLD_MIN 	(0)

	if (settings_copy.fence_threshold.as_integer > FENCE_THRESHOLD_MIN)
 8007b2c:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <set_fnc_thr_down+0x20>)
 8007b2e:	891b      	ldrh	r3, [r3, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <set_fnc_thr_down+0x18>
	{
		settings_copy.fence_threshold.as_integer -= FENCE_THRESHOLD_STEP;
 8007b34:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <set_fnc_thr_down+0x20>)
 8007b36:	891b      	ldrh	r3, [r3, #8]
 8007b38:	3b0a      	subs	r3, #10
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <set_fnc_thr_down+0x20>)
 8007b3e:	811a      	strh	r2, [r3, #8]
	}

    draw_current_menu();
 8007b40:	f7fc fbd2 	bl	80042e8 <draw_current_menu>
}
 8007b44:	bf00      	nop
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	200007e0 	.word	0x200007e0

08007b4c <set_fnc_thr_ok>:



void set_fnc_thr_ok(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
    if (settings_copy.fence_threshold.as_integer != p_settings->fence_threshold.as_integer)
 8007b50:	4b08      	ldr	r3, [pc, #32]	; (8007b74 <set_fnc_thr_ok+0x28>)
 8007b52:	891a      	ldrh	r2, [r3, #8]
 8007b54:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <set_fnc_thr_ok+0x2c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	891b      	ldrh	r3, [r3, #8]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d002      	beq.n	8007b64 <set_fnc_thr_ok+0x18>
    {
        flag_settings_changed = 1;
 8007b5e:	4b07      	ldr	r3, [pc, #28]	; (8007b7c <set_fnc_thr_ok+0x30>)
 8007b60:	2201      	movs	r2, #1
 8007b62:	701a      	strb	r2, [r3, #0]
    }

    current_menu = M_EDIT_SETTINGS;
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <set_fnc_thr_ok+0x34>)
 8007b66:	2210      	movs	r2, #16
 8007b68:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007b6a:	f7fc fbbd 	bl	80042e8 <draw_current_menu>
}
 8007b6e:	bf00      	nop
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	200007e0 	.word	0x200007e0
 8007b78:	2000061c 	.word	0x2000061c
 8007b7c:	2000011e 	.word	0x2000011e
 8007b80:	200007fa 	.word	0x200007fa

08007b84 <set_fnc_thr_esc>:



void set_fnc_thr_esc(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
	settings_copy.fence_threshold.as_integer = p_settings->fence_threshold.as_integer;   //exit no save, reset value
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <set_fnc_thr_esc+0x1c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	891a      	ldrh	r2, [r3, #8]
 8007b8e:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <set_fnc_thr_esc+0x20>)
 8007b90:	811a      	strh	r2, [r3, #8]
    current_menu = M_EDIT_SETTINGS;
 8007b92:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <set_fnc_thr_esc+0x24>)
 8007b94:	2210      	movs	r2, #16
 8007b96:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007b98:	f7fc fba6 	bl	80042e8 <draw_current_menu>
}
 8007b9c:	bf00      	nop
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	2000061c 	.word	0x2000061c
 8007ba4:	200007e0 	.word	0x200007e0
 8007ba8:	200007fa 	.word	0x200007fa

08007bac <confirm_settings_save_esc>:



void confirm_settings_save_esc(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	af00      	add	r7, sp, #0
    settings_copy = *p_settings;   //reset to no changes state
 8007bb0:	4b09      	ldr	r3, [pc, #36]	; (8007bd8 <confirm_settings_save_esc+0x2c>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <confirm_settings_save_esc+0x30>)
 8007bb6:	6810      	ldr	r0, [r2, #0]
 8007bb8:	6851      	ldr	r1, [r2, #4]
 8007bba:	6018      	str	r0, [r3, #0]
 8007bbc:	6059      	str	r1, [r3, #4]
 8007bbe:	8912      	ldrh	r2, [r2, #8]
 8007bc0:	811a      	strh	r2, [r3, #8]
    flag_settings_changed = 0;  //clear flag
 8007bc2:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <confirm_settings_save_esc+0x34>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
    current_menu = M_SETTINGS;
 8007bc8:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <confirm_settings_save_esc+0x38>)
 8007bca:	220e      	movs	r2, #14
 8007bcc:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007bce:	f7fc fb8b 	bl	80042e8 <draw_current_menu>
}
 8007bd2:	bf00      	nop
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	2000061c 	.word	0x2000061c
 8007bdc:	200007e0 	.word	0x200007e0
 8007be0:	2000011e 	.word	0x2000011e
 8007be4:	200007fa 	.word	0x200007fa

08007be8 <restore_defaults_ok>:



void restore_defaults_ok(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
    settings_save_default();
 8007bec:	f000 fef0 	bl	80089d0 <settings_save_default>
    NVIC_SystemReset();
 8007bf0:	f7fc f91a 	bl	8003e28 <NVIC_SystemReset>
}
 8007bf4:	bf00      	nop
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <erase_all_ok>:



void erase_all_ok(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
    ssd1306_clear();
 8007bfc:	f001 fa68 	bl	80090d0 <ssd1306_clear>
    ssd1306_print(0, 1, "WAIT...", 0);
 8007c00:	2300      	movs	r3, #0
 8007c02:	4a06      	ldr	r2, [pc, #24]	; (8007c1c <erase_all_ok+0x24>)
 8007c04:	2101      	movs	r1, #1
 8007c06:	2000      	movs	r0, #0
 8007c08:	f001 fb69 	bl	80092de <ssd1306_print>
    ssd1306_update();
 8007c0c:	f001 fa40 	bl	8009090 <ssd1306_update>
    m24c64_erase_all();
 8007c10:	f7fb ff15 	bl	8003a3e <m24c64_erase_all>
    NVIC_SystemReset();
 8007c14:	f7fc f908 	bl	8003e28 <NVIC_SystemReset>
}
 8007c18:	bf00      	nop
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	0800cdb4 	.word	0x0800cdb4

08007c20 <get_memory_slot>:
char *memory_slot_names[MEMORY_SLOTS_TOTAL + 1] = MEMORY_SLOT_NAMES;



struct memory_slot_struct **get_memory_slot(void)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 8007c26:	2301      	movs	r3, #1
 8007c28:	71fb      	strb	r3, [r7, #7]
 8007c2a:	e00c      	b.n	8007c46 <get_memory_slot+0x26>
	{
		p_memory_slot[slot] = &memory_slot[slot];
 8007c2c:	79fa      	ldrb	r2, [r7, #7]
 8007c2e:	79f9      	ldrb	r1, [r7, #7]
 8007c30:	4613      	mov	r3, r2
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	4413      	add	r3, r2
 8007c36:	4a08      	ldr	r2, [pc, #32]	; (8007c58 <get_memory_slot+0x38>)
 8007c38:	4413      	add	r3, r2
 8007c3a:	4a08      	ldr	r2, [pc, #32]	; (8007c5c <get_memory_slot+0x3c>)
 8007c3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	3301      	adds	r3, #1
 8007c44:	71fb      	strb	r3, [r7, #7]
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	2b05      	cmp	r3, #5
 8007c4a:	d9ef      	bls.n	8007c2c <get_memory_slot+0xc>
	}

	return &p_memory_slot[0];
 8007c4c:	4b03      	ldr	r3, [pc, #12]	; (8007c5c <get_memory_slot+0x3c>)
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bc80      	pop	{r7}
 8007c56:	4770      	bx	lr
 8007c58:	20000878 	.word	0x20000878
 8007c5c:	20000860 	.word	0x20000860

08007c60 <init_points>:



void init_points(void)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
	p_gps_raw = get_gps_raw();
 8007c66:	f7fa fce9 	bl	800263c <get_gps_raw>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ce8 <init_points+0x88>)
 8007c6e:	601a      	str	r2, [r3, #0]
	pp_gps_air = get_gps_air();
 8007c70:	f7fb fc1e 	bl	80034b0 <get_gps_air>
 8007c74:	4602      	mov	r2, r0
 8007c76:	4b1d      	ldr	r3, [pc, #116]	; (8007cec <init_points+0x8c>)
 8007c78:	601a      	str	r2, [r3, #0]
	pp_dev_aux = get_dev_aux();
 8007c7a:	f7fb fc59 	bl	8003530 <get_dev_aux>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	4b1b      	ldr	r3, [pc, #108]	; (8007cf0 <init_points+0x90>)
 8007c82:	601a      	str	r2, [r3, #0]

	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 8007c84:	2301      	movs	r3, #1
 8007c86:	71fb      	strb	r3, [r7, #7]
 8007c88:	e027      	b.n	8007cda <init_points+0x7a>
	{
		memory_slot[slot].slot_name[0] = memory_slot_names[slot][0];	//init slot names
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	4a19      	ldr	r2, [pc, #100]	; (8007cf4 <init_points+0x94>)
 8007c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c92:	79fa      	ldrb	r2, [r7, #7]
 8007c94:	7818      	ldrb	r0, [r3, #0]
 8007c96:	4918      	ldr	r1, [pc, #96]	; (8007cf8 <init_points+0x98>)
 8007c98:	4613      	mov	r3, r2
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	4413      	add	r3, r2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	701a      	strb	r2, [r3, #0]
		memory_slot[slot].slot_name[1] = memory_slot_names[slot][1];
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
 8007ca8:	4a12      	ldr	r2, [pc, #72]	; (8007cf4 <init_points+0x94>)
 8007caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cae:	79fa      	ldrb	r2, [r7, #7]
 8007cb0:	7858      	ldrb	r0, [r3, #1]
 8007cb2:	4911      	ldr	r1, [pc, #68]	; (8007cf8 <init_points+0x98>)
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	4413      	add	r3, r2
 8007cba:	440b      	add	r3, r1
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	701a      	strb	r2, [r3, #0]
		memory_slot[slot].slot_name[2] = 0;
 8007cc2:	79fa      	ldrb	r2, [r7, #7]
 8007cc4:	490c      	ldr	r1, [pc, #48]	; (8007cf8 <init_points+0x98>)
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	4413      	add	r3, r2
 8007ccc:	440b      	add	r3, r1
 8007cce:	3303      	adds	r3, #3
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	71fb      	strb	r3, [r7, #7]
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	2b05      	cmp	r3, #5
 8007cde:	d9d4      	bls.n	8007c8a <init_points+0x2a>
	}
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000808 	.word	0x20000808
 8007cec:	20000804 	.word	0x20000804
 8007cf0:	2000083c 	.word	0x2000083c
 8007cf4:	20000038 	.word	0x20000038
 8007cf8:	20000878 	.word	0x20000878

08007cfc <read_memory_slots>:



void read_memory_slots(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 8007d02:	2301      	movs	r3, #1
 8007d04:	71fb      	strb	r3, [r7, #7]
 8007d06:	e0a1      	b.n	8007e4c <read_memory_slots+0x150>
	{

		clear_point_buffer();
 8007d08:	f000 fa4a 	bl	80081a0 <clear_point_buffer>
		m24c64_read_page(&point_buffer[0], slot);
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4852      	ldr	r0, [pc, #328]	; (8007e5c <read_memory_slots+0x160>)
 8007d12:	f7fb fd2d 	bl	8003770 <m24c64_read_page>

		if (point_buffer[MEMORY_POINT_EXIST_FLAG_POS] == POINT_EXIST_FLAG_DEFAULT)
 8007d16:	4b51      	ldr	r3, [pc, #324]	; (8007e5c <read_memory_slots+0x160>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	2baa      	cmp	r3, #170	; 0xaa
 8007d1c:	f040 808b 	bne.w	8007e36 <read_memory_slots+0x13a>
		{
			memory_slot[slot].exist_flag = 1;
 8007d20:	79fa      	ldrb	r2, [r7, #7]
 8007d22:	494f      	ldr	r1, [pc, #316]	; (8007e60 <read_memory_slots+0x164>)
 8007d24:	4613      	mov	r3, r2
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	4413      	add	r3, r2
 8007d2a:	440b      	add	r3, r1
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	701a      	strb	r2, [r3, #0]

			memory_slot[slot].point_name[0] = point_buffer[MEMORY_POINT_NAME_POS];
 8007d30:	79fa      	ldrb	r2, [r7, #7]
 8007d32:	4b4a      	ldr	r3, [pc, #296]	; (8007e5c <read_memory_slots+0x160>)
 8007d34:	7858      	ldrb	r0, [r3, #1]
 8007d36:	494a      	ldr	r1, [pc, #296]	; (8007e60 <read_memory_slots+0x164>)
 8007d38:	4613      	mov	r3, r2
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	4413      	add	r3, r2
 8007d3e:	440b      	add	r3, r1
 8007d40:	3304      	adds	r3, #4
 8007d42:	4602      	mov	r2, r0
 8007d44:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].point_name[1] = point_buffer[MEMORY_POINT_NAME_POS + 1];
 8007d46:	79fa      	ldrb	r2, [r7, #7]
 8007d48:	4b44      	ldr	r3, [pc, #272]	; (8007e5c <read_memory_slots+0x160>)
 8007d4a:	7898      	ldrb	r0, [r3, #2]
 8007d4c:	4944      	ldr	r1, [pc, #272]	; (8007e60 <read_memory_slots+0x164>)
 8007d4e:	4613      	mov	r3, r2
 8007d50:	011b      	lsls	r3, r3, #4
 8007d52:	4413      	add	r3, r2
 8007d54:	440b      	add	r3, r1
 8007d56:	3305      	adds	r3, #5
 8007d58:	4602      	mov	r2, r0
 8007d5a:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].point_name[2] = point_buffer[MEMORY_POINT_NAME_POS + 2];
 8007d5c:	79fa      	ldrb	r2, [r7, #7]
 8007d5e:	4b3f      	ldr	r3, [pc, #252]	; (8007e5c <read_memory_slots+0x160>)
 8007d60:	78d8      	ldrb	r0, [r3, #3]
 8007d62:	493f      	ldr	r1, [pc, #252]	; (8007e60 <read_memory_slots+0x164>)
 8007d64:	4613      	mov	r3, r2
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	4413      	add	r3, r2
 8007d6a:	440b      	add	r3, r1
 8007d6c:	3306      	adds	r3, #6
 8007d6e:	4602      	mov	r2, r0
 8007d70:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].point_name[3] = point_buffer[MEMORY_POINT_NAME_POS + 3];
 8007d72:	79fa      	ldrb	r2, [r7, #7]
 8007d74:	4b39      	ldr	r3, [pc, #228]	; (8007e5c <read_memory_slots+0x160>)
 8007d76:	7918      	ldrb	r0, [r3, #4]
 8007d78:	4939      	ldr	r1, [pc, #228]	; (8007e60 <read_memory_slots+0x164>)
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	011b      	lsls	r3, r3, #4
 8007d7e:	4413      	add	r3, r2
 8007d80:	440b      	add	r3, r1
 8007d82:	3307      	adds	r3, #7
 8007d84:	4602      	mov	r2, r0
 8007d86:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].point_name[4] = point_buffer[MEMORY_POINT_NAME_POS + 4];
 8007d88:	79fa      	ldrb	r2, [r7, #7]
 8007d8a:	4b34      	ldr	r3, [pc, #208]	; (8007e5c <read_memory_slots+0x160>)
 8007d8c:	7958      	ldrb	r0, [r3, #5]
 8007d8e:	4934      	ldr	r1, [pc, #208]	; (8007e60 <read_memory_slots+0x164>)
 8007d90:	4613      	mov	r3, r2
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	4413      	add	r3, r2
 8007d96:	440b      	add	r3, r1
 8007d98:	3308      	adds	r3, #8
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].point_name[5] = 0;
 8007d9e:	79fa      	ldrb	r2, [r7, #7]
 8007da0:	492f      	ldr	r1, [pc, #188]	; (8007e60 <read_memory_slots+0x164>)
 8007da2:	4613      	mov	r3, r2
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	4413      	add	r3, r2
 8007da8:	440b      	add	r3, r1
 8007daa:	3309      	adds	r3, #9
 8007dac:	2200      	movs	r2, #0
 8007dae:	701a      	strb	r2, [r3, #0]

			memory_slot[slot].save_date[0] = point_buffer[MEMORY_POINT_DAY_POS];
 8007db0:	79fa      	ldrb	r2, [r7, #7]
 8007db2:	4b2a      	ldr	r3, [pc, #168]	; (8007e5c <read_memory_slots+0x160>)
 8007db4:	7998      	ldrb	r0, [r3, #6]
 8007db6:	492a      	ldr	r1, [pc, #168]	; (8007e60 <read_memory_slots+0x164>)
 8007db8:	4613      	mov	r3, r2
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	4413      	add	r3, r2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	330a      	adds	r3, #10
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].save_date[1] = point_buffer[MEMORY_POINT_DAY_POS + 1];
 8007dc6:	79fa      	ldrb	r2, [r7, #7]
 8007dc8:	4b24      	ldr	r3, [pc, #144]	; (8007e5c <read_memory_slots+0x160>)
 8007dca:	79d8      	ldrb	r0, [r3, #7]
 8007dcc:	4924      	ldr	r1, [pc, #144]	; (8007e60 <read_memory_slots+0x164>)
 8007dce:	4613      	mov	r3, r2
 8007dd0:	011b      	lsls	r3, r3, #4
 8007dd2:	4413      	add	r3, r2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	330b      	adds	r3, #11
 8007dd8:	4602      	mov	r2, r0
 8007dda:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].save_date[2] = point_buffer[MEMORY_POINT_MONTH_POS];
 8007ddc:	79fa      	ldrb	r2, [r7, #7]
 8007dde:	4b1f      	ldr	r3, [pc, #124]	; (8007e5c <read_memory_slots+0x160>)
 8007de0:	7a18      	ldrb	r0, [r3, #8]
 8007de2:	491f      	ldr	r1, [pc, #124]	; (8007e60 <read_memory_slots+0x164>)
 8007de4:	4613      	mov	r3, r2
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	4413      	add	r3, r2
 8007dea:	440b      	add	r3, r1
 8007dec:	330c      	adds	r3, #12
 8007dee:	4602      	mov	r2, r0
 8007df0:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].save_date[3] = point_buffer[MEMORY_POINT_MONTH_POS + 1];
 8007df2:	79fa      	ldrb	r2, [r7, #7]
 8007df4:	4b19      	ldr	r3, [pc, #100]	; (8007e5c <read_memory_slots+0x160>)
 8007df6:	7a58      	ldrb	r0, [r3, #9]
 8007df8:	4919      	ldr	r1, [pc, #100]	; (8007e60 <read_memory_slots+0x164>)
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	011b      	lsls	r3, r3, #4
 8007dfe:	4413      	add	r3, r2
 8007e00:	440b      	add	r3, r1
 8007e02:	330d      	adds	r3, #13
 8007e04:	4602      	mov	r2, r0
 8007e06:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].save_date[4] = point_buffer[MEMORY_POINT_YEAR_POS];
 8007e08:	79fa      	ldrb	r2, [r7, #7]
 8007e0a:	4b14      	ldr	r3, [pc, #80]	; (8007e5c <read_memory_slots+0x160>)
 8007e0c:	7a98      	ldrb	r0, [r3, #10]
 8007e0e:	4914      	ldr	r1, [pc, #80]	; (8007e60 <read_memory_slots+0x164>)
 8007e10:	4613      	mov	r3, r2
 8007e12:	011b      	lsls	r3, r3, #4
 8007e14:	4413      	add	r3, r2
 8007e16:	440b      	add	r3, r1
 8007e18:	330e      	adds	r3, #14
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].save_date[5] = point_buffer[MEMORY_POINT_YEAR_POS + 1];
 8007e1e:	79fa      	ldrb	r2, [r7, #7]
 8007e20:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <read_memory_slots+0x160>)
 8007e22:	7ad8      	ldrb	r0, [r3, #11]
 8007e24:	490e      	ldr	r1, [pc, #56]	; (8007e60 <read_memory_slots+0x164>)
 8007e26:	4613      	mov	r3, r2
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	4413      	add	r3, r2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	330f      	adds	r3, #15
 8007e30:	4602      	mov	r2, r0
 8007e32:	701a      	strb	r2, [r3, #0]
 8007e34:	e007      	b.n	8007e46 <read_memory_slots+0x14a>
		}
		else
		{
			memory_slot[slot].exist_flag = 0;
 8007e36:	79fa      	ldrb	r2, [r7, #7]
 8007e38:	4909      	ldr	r1, [pc, #36]	; (8007e60 <read_memory_slots+0x164>)
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	4413      	add	r3, r2
 8007e40:	440b      	add	r3, r1
 8007e42:	2200      	movs	r2, #0
 8007e44:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	71fb      	strb	r3, [r7, #7]
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	2b05      	cmp	r3, #5
 8007e50:	f67f af5a 	bls.w	8007d08 <read_memory_slots+0xc>
		}
	}
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20000840 	.word	0x20000840
 8007e60:	20000878 	.word	0x20000878

08007e64 <save_memory_point>:



//Save selected device in a slot
void save_memory_point(uint8_t dev_num, char *point_name, uint8_t slot_num)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
 8007e70:	4613      	mov	r3, r2
 8007e72:	71bb      	strb	r3, [r7, #6]
	clear_point_buffer();
 8007e74:	f000 f994 	bl	80081a0 <clear_point_buffer>

	point_buffer[MEMORY_POINT_EXIST_FLAG_POS] = 		POINT_EXIST_FLAG_DEFAULT;
 8007e78:	4b4d      	ldr	r3, [pc, #308]	; (8007fb0 <save_memory_point+0x14c>)
 8007e7a:	22aa      	movs	r2, #170	; 0xaa
 8007e7c:	701a      	strb	r2, [r3, #0]

	point_buffer[MEMORY_POINT_NAME_POS] = 				point_name[0];
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	4b4b      	ldr	r3, [pc, #300]	; (8007fb0 <save_memory_point+0x14c>)
 8007e84:	705a      	strb	r2, [r3, #1]
	point_buffer[MEMORY_POINT_NAME_POS + 1] = 			point_name[1];
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	781a      	ldrb	r2, [r3, #0]
 8007e8c:	4b48      	ldr	r3, [pc, #288]	; (8007fb0 <save_memory_point+0x14c>)
 8007e8e:	709a      	strb	r2, [r3, #2]
	point_buffer[MEMORY_POINT_NAME_POS + 2] = 			point_name[2];
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	3302      	adds	r3, #2
 8007e94:	781a      	ldrb	r2, [r3, #0]
 8007e96:	4b46      	ldr	r3, [pc, #280]	; (8007fb0 <save_memory_point+0x14c>)
 8007e98:	70da      	strb	r2, [r3, #3]
	point_buffer[MEMORY_POINT_NAME_POS + 3] = 			point_name[3];
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	3303      	adds	r3, #3
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	4b43      	ldr	r3, [pc, #268]	; (8007fb0 <save_memory_point+0x14c>)
 8007ea2:	711a      	strb	r2, [r3, #4]
	point_buffer[MEMORY_POINT_NAME_POS + 4] = 			point_name[4];
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	4b41      	ldr	r3, [pc, #260]	; (8007fb0 <save_memory_point+0x14c>)
 8007eac:	715a      	strb	r2, [r3, #5]

	point_buffer[MEMORY_POINT_DAY_POS] = 				p_gps_raw->date[0];	//save in char format for easy print in the menu
 8007eae:	4b41      	ldr	r3, [pc, #260]	; (8007fb4 <save_memory_point+0x150>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	7b1a      	ldrb	r2, [r3, #12]
 8007eb4:	4b3e      	ldr	r3, [pc, #248]	; (8007fb0 <save_memory_point+0x14c>)
 8007eb6:	719a      	strb	r2, [r3, #6]
	point_buffer[MEMORY_POINT_DAY_POS + 1] = 			p_gps_raw->date[1];
 8007eb8:	4b3e      	ldr	r3, [pc, #248]	; (8007fb4 <save_memory_point+0x150>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	7b5a      	ldrb	r2, [r3, #13]
 8007ebe:	4b3c      	ldr	r3, [pc, #240]	; (8007fb0 <save_memory_point+0x14c>)
 8007ec0:	71da      	strb	r2, [r3, #7]

	point_buffer[MEMORY_POINT_MONTH_POS] = 			p_gps_raw->date[2];
 8007ec2:	4b3c      	ldr	r3, [pc, #240]	; (8007fb4 <save_memory_point+0x150>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	7b9a      	ldrb	r2, [r3, #14]
 8007ec8:	4b39      	ldr	r3, [pc, #228]	; (8007fb0 <save_memory_point+0x14c>)
 8007eca:	721a      	strb	r2, [r3, #8]
	point_buffer[MEMORY_POINT_MONTH_POS + 1] = 		p_gps_raw->date[3];
 8007ecc:	4b39      	ldr	r3, [pc, #228]	; (8007fb4 <save_memory_point+0x150>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	7bda      	ldrb	r2, [r3, #15]
 8007ed2:	4b37      	ldr	r3, [pc, #220]	; (8007fb0 <save_memory_point+0x14c>)
 8007ed4:	725a      	strb	r2, [r3, #9]

	point_buffer[MEMORY_POINT_YEAR_POS] = 				p_gps_raw->date[4];
 8007ed6:	4b37      	ldr	r3, [pc, #220]	; (8007fb4 <save_memory_point+0x150>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	7c1a      	ldrb	r2, [r3, #16]
 8007edc:	4b34      	ldr	r3, [pc, #208]	; (8007fb0 <save_memory_point+0x14c>)
 8007ede:	729a      	strb	r2, [r3, #10]
	point_buffer[MEMORY_POINT_YEAR_POS + 1] = 			p_gps_raw->date[5];
 8007ee0:	4b34      	ldr	r3, [pc, #208]	; (8007fb4 <save_memory_point+0x150>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	7c5a      	ldrb	r2, [r3, #17]
 8007ee6:	4b32      	ldr	r3, [pc, #200]	; (8007fb0 <save_memory_point+0x14c>)
 8007ee8:	72da      	strb	r2, [r3, #11]

	point_buffer[MEMORY_POINT_LATITUDE_POS] = 			pp_gps_air[dev_num]->latitude.as_array[0];
 8007eea:	4b33      	ldr	r3, [pc, #204]	; (8007fb8 <save_memory_point+0x154>)
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	791a      	ldrb	r2, [r3, #4]
 8007ef8:	4b2d      	ldr	r3, [pc, #180]	; (8007fb0 <save_memory_point+0x14c>)
 8007efa:	731a      	strb	r2, [r3, #12]
	point_buffer[MEMORY_POINT_LATITUDE_POS + 1] = 		pp_gps_air[dev_num]->latitude.as_array[1];
 8007efc:	4b2e      	ldr	r3, [pc, #184]	; (8007fb8 <save_memory_point+0x154>)
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	795a      	ldrb	r2, [r3, #5]
 8007f0a:	4b29      	ldr	r3, [pc, #164]	; (8007fb0 <save_memory_point+0x14c>)
 8007f0c:	735a      	strb	r2, [r3, #13]
	point_buffer[MEMORY_POINT_LATITUDE_POS + 2] = 		pp_gps_air[dev_num]->latitude.as_array[2];
 8007f0e:	4b2a      	ldr	r3, [pc, #168]	; (8007fb8 <save_memory_point+0x154>)
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	799a      	ldrb	r2, [r3, #6]
 8007f1c:	4b24      	ldr	r3, [pc, #144]	; (8007fb0 <save_memory_point+0x14c>)
 8007f1e:	739a      	strb	r2, [r3, #14]
	point_buffer[MEMORY_POINT_LATITUDE_POS + 3] = 		pp_gps_air[dev_num]->latitude.as_array[3];
 8007f20:	4b25      	ldr	r3, [pc, #148]	; (8007fb8 <save_memory_point+0x154>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	79da      	ldrb	r2, [r3, #7]
 8007f2e:	4b20      	ldr	r3, [pc, #128]	; (8007fb0 <save_memory_point+0x14c>)
 8007f30:	73da      	strb	r2, [r3, #15]

	point_buffer[MEMORY_POINT_LONGITUDE_POS] = 		pp_gps_air[dev_num]->longitude.as_array[0];
 8007f32:	4b21      	ldr	r3, [pc, #132]	; (8007fb8 <save_memory_point+0x154>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	7a1a      	ldrb	r2, [r3, #8]
 8007f40:	4b1b      	ldr	r3, [pc, #108]	; (8007fb0 <save_memory_point+0x14c>)
 8007f42:	741a      	strb	r2, [r3, #16]
	point_buffer[MEMORY_POINT_LONGITUDE_POS + 1] = 	pp_gps_air[dev_num]->longitude.as_array[1];
 8007f44:	4b1c      	ldr	r3, [pc, #112]	; (8007fb8 <save_memory_point+0x154>)
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	7a5a      	ldrb	r2, [r3, #9]
 8007f52:	4b17      	ldr	r3, [pc, #92]	; (8007fb0 <save_memory_point+0x14c>)
 8007f54:	745a      	strb	r2, [r3, #17]
	point_buffer[MEMORY_POINT_LONGITUDE_POS + 2] = 	pp_gps_air[dev_num]->longitude.as_array[2];
 8007f56:	4b18      	ldr	r3, [pc, #96]	; (8007fb8 <save_memory_point+0x154>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	7a9a      	ldrb	r2, [r3, #10]
 8007f64:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <save_memory_point+0x14c>)
 8007f66:	749a      	strb	r2, [r3, #18]
	point_buffer[MEMORY_POINT_LONGITUDE_POS + 3] = 	pp_gps_air[dev_num]->longitude.as_array[3];
 8007f68:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <save_memory_point+0x154>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	7ada      	ldrb	r2, [r3, #11]
 8007f76:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <save_memory_point+0x14c>)
 8007f78:	74da      	strb	r2, [r3, #19]

	point_buffer[MEMORY_POINT_ALTITUDE_POS] = 			pp_gps_air[dev_num]->altitude.as_array[0];
 8007f7a:	4b0f      	ldr	r3, [pc, #60]	; (8007fb8 <save_memory_point+0x154>)
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	7b1a      	ldrb	r2, [r3, #12]
 8007f88:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <save_memory_point+0x14c>)
 8007f8a:	751a      	strb	r2, [r3, #20]
	point_buffer[MEMORY_POINT_ALTITUDE_POS + 1] = 		pp_gps_air[dev_num]->altitude.as_array[1];
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <save_memory_point+0x154>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	7b5a      	ldrb	r2, [r3, #13]
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <save_memory_point+0x14c>)
 8007f9c:	755a      	strb	r2, [r3, #21]

	m24c64_write_page(&point_buffer[0], slot_num);
 8007f9e:	79bb      	ldrb	r3, [r7, #6]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	4803      	ldr	r0, [pc, #12]	; (8007fb0 <save_memory_point+0x14c>)
 8007fa4:	f7fb fca8 	bl	80038f8 <m24c64_write_page>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	20000840 	.word	0x20000840
 8007fb4:	20000808 	.word	0x20000808
 8007fb8:	20000804 	.word	0x20000804

08007fbc <load_memory_point>:



void load_memory_point(uint8_t dev_num, uint8_t slot_num)
{
 8007fbc:	b5b0      	push	{r4, r5, r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	460a      	mov	r2, r1
 8007fc6:	71fb      	strb	r3, [r7, #7]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	71bb      	strb	r3, [r7, #6]
	clear_point_buffer();
 8007fcc:	f000 f8e8 	bl	80081a0 <clear_point_buffer>

	m24c64_read_page(&point_buffer[0], slot_num);
 8007fd0:	79bb      	ldrb	r3, [r7, #6]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4865      	ldr	r0, [pc, #404]	; (800816c <load_memory_point+0x1b0>)
 8007fd6:	f7fb fbcb 	bl	8003770 <m24c64_read_page>

	memset(pp_gps_air[dev_num], 0, sizeof(*(pp_gps_air[dev_num])));
 8007fda:	4b65      	ldr	r3, [pc, #404]	; (8008170 <load_memory_point+0x1b4>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2214      	movs	r2, #20
 8007fe8:	2100      	movs	r1, #0
 8007fea:	4618      	mov	r0, r3
 8007fec:	f001 fcbf 	bl	800996e <memset>
	memset(pp_dev_aux[dev_num], 0, sizeof(*(pp_dev_aux[dev_num])));
 8007ff0:	4b60      	ldr	r3, [pc, #384]	; (8008174 <load_memory_point+0x1b8>)
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2218      	movs	r2, #24
 8007ffe:	2100      	movs	r1, #0
 8008000:	4618      	mov	r0, r3
 8008002:	f001 fcb4 	bl	800996e <memset>

	pp_dev_aux[dev_num]->exist_flag = 1;
 8008006:	4b5b      	ldr	r3, [pc, #364]	; (8008174 <load_memory_point+0x1b8>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	79fb      	ldrb	r3, [r7, #7]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2201      	movs	r2, #1
 8008014:	701a      	strb	r2, [r3, #0]
	pp_dev_aux[dev_num]->memory_point_flag = 1;
 8008016:	4b57      	ldr	r3, [pc, #348]	; (8008174 <load_memory_point+0x1b8>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	79fb      	ldrb	r3, [r7, #7]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2201      	movs	r2, #1
 8008024:	739a      	strb	r2, [r3, #14]
	pp_dev_aux[dev_num]->timestamp = get_uptime();
 8008026:	4b53      	ldr	r3, [pc, #332]	; (8008174 <load_memory_point+0x1b8>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	681c      	ldr	r4, [r3, #0]
 8008032:	f7fb fedd 	bl	8003df0 <get_uptime>
 8008036:	4603      	mov	r3, r0
 8008038:	6063      	str	r3, [r4, #4]

	for (uint8_t c = 0; c < MEMORY_POINT_NAME_LENGTH; c++)
 800803a:	2300      	movs	r3, #0
 800803c:	73fb      	strb	r3, [r7, #15]
 800803e:	e015      	b.n	800806c <load_memory_point+0xb0>
	{
		pp_dev_aux[dev_num]->point_name[c] = memory_slot[slot_num].point_name[c];
 8008040:	79ba      	ldrb	r2, [r7, #6]
 8008042:	7bfc      	ldrb	r4, [r7, #15]
 8008044:	4b4b      	ldr	r3, [pc, #300]	; (8008174 <load_memory_point+0x1b8>)
 8008046:	6819      	ldr	r1, [r3, #0]
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	440b      	add	r3, r1
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	7bf9      	ldrb	r1, [r7, #15]
 8008052:	4d49      	ldr	r5, [pc, #292]	; (8008178 <load_memory_point+0x1bc>)
 8008054:	4613      	mov	r3, r2
 8008056:	011b      	lsls	r3, r3, #4
 8008058:	4413      	add	r3, r2
 800805a:	442b      	add	r3, r5
 800805c:	4423      	add	r3, r4
 800805e:	3304      	adds	r3, #4
 8008060:	781a      	ldrb	r2, [r3, #0]
 8008062:	1843      	adds	r3, r0, r1
 8008064:	73da      	strb	r2, [r3, #15]
	for (uint8_t c = 0; c < MEMORY_POINT_NAME_LENGTH; c++)
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	3301      	adds	r3, #1
 800806a:	73fb      	strb	r3, [r7, #15]
 800806c:	7bfb      	ldrb	r3, [r7, #15]
 800806e:	2b04      	cmp	r3, #4
 8008070:	d9e6      	bls.n	8008040 <load_memory_point+0x84>
	}

	pp_gps_air[dev_num]->device_id[0] = memory_slot[slot_num].slot_name[0];
 8008072:	79ba      	ldrb	r2, [r7, #6]
 8008074:	4b3e      	ldr	r3, [pc, #248]	; (8008170 <load_memory_point+0x1b4>)
 8008076:	6819      	ldr	r1, [r3, #0]
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	6819      	ldr	r1, [r3, #0]
 8008080:	483d      	ldr	r0, [pc, #244]	; (8008178 <load_memory_point+0x1bc>)
 8008082:	4613      	mov	r3, r2
 8008084:	011b      	lsls	r3, r3, #4
 8008086:	4413      	add	r3, r2
 8008088:	4403      	add	r3, r0
 800808a:	3301      	adds	r3, #1
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	700b      	strb	r3, [r1, #0]
	pp_gps_air[dev_num]->device_id[1] = memory_slot[slot_num].slot_name[1];
 8008090:	79ba      	ldrb	r2, [r7, #6]
 8008092:	4b37      	ldr	r3, [pc, #220]	; (8008170 <load_memory_point+0x1b4>)
 8008094:	6819      	ldr	r1, [r3, #0]
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	440b      	add	r3, r1
 800809c:	6819      	ldr	r1, [r3, #0]
 800809e:	4836      	ldr	r0, [pc, #216]	; (8008178 <load_memory_point+0x1bc>)
 80080a0:	4613      	mov	r3, r2
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	4413      	add	r3, r2
 80080a6:	4403      	add	r3, r0
 80080a8:	3302      	adds	r3, #2
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	704b      	strb	r3, [r1, #1]

	pp_gps_air[dev_num]->latitude.as_array[0] = 	point_buffer[MEMORY_POINT_LATITUDE_POS];
 80080ae:	4b30      	ldr	r3, [pc, #192]	; (8008170 <load_memory_point+0x1b4>)
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a2c      	ldr	r2, [pc, #176]	; (800816c <load_memory_point+0x1b0>)
 80080bc:	7b12      	ldrb	r2, [r2, #12]
 80080be:	711a      	strb	r2, [r3, #4]
	pp_gps_air[dev_num]->latitude.as_array[1] =  	point_buffer[MEMORY_POINT_LATITUDE_POS + 1];
 80080c0:	4b2b      	ldr	r3, [pc, #172]	; (8008170 <load_memory_point+0x1b4>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a27      	ldr	r2, [pc, #156]	; (800816c <load_memory_point+0x1b0>)
 80080ce:	7b52      	ldrb	r2, [r2, #13]
 80080d0:	715a      	strb	r2, [r3, #5]
	pp_gps_air[dev_num]->latitude.as_array[2] =  	point_buffer[MEMORY_POINT_LATITUDE_POS + 2];
 80080d2:	4b27      	ldr	r3, [pc, #156]	; (8008170 <load_memory_point+0x1b4>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a23      	ldr	r2, [pc, #140]	; (800816c <load_memory_point+0x1b0>)
 80080e0:	7b92      	ldrb	r2, [r2, #14]
 80080e2:	719a      	strb	r2, [r3, #6]
	pp_gps_air[dev_num]->latitude.as_array[3] =  	point_buffer[MEMORY_POINT_LATITUDE_POS + 3];
 80080e4:	4b22      	ldr	r3, [pc, #136]	; (8008170 <load_memory_point+0x1b4>)
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a1e      	ldr	r2, [pc, #120]	; (800816c <load_memory_point+0x1b0>)
 80080f2:	7bd2      	ldrb	r2, [r2, #15]
 80080f4:	71da      	strb	r2, [r3, #7]

	pp_gps_air[dev_num]->longitude.as_array[0] = 	point_buffer[MEMORY_POINT_LONGITUDE_POS];
 80080f6:	4b1e      	ldr	r3, [pc, #120]	; (8008170 <load_memory_point+0x1b4>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	79fb      	ldrb	r3, [r7, #7]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1a      	ldr	r2, [pc, #104]	; (800816c <load_memory_point+0x1b0>)
 8008104:	7c12      	ldrb	r2, [r2, #16]
 8008106:	721a      	strb	r2, [r3, #8]
	pp_gps_air[dev_num]->longitude.as_array[1] = 	point_buffer[MEMORY_POINT_LONGITUDE_POS + 1];
 8008108:	4b19      	ldr	r3, [pc, #100]	; (8008170 <load_memory_point+0x1b4>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a15      	ldr	r2, [pc, #84]	; (800816c <load_memory_point+0x1b0>)
 8008116:	7c52      	ldrb	r2, [r2, #17]
 8008118:	725a      	strb	r2, [r3, #9]
	pp_gps_air[dev_num]->longitude.as_array[2] = 	point_buffer[MEMORY_POINT_LONGITUDE_POS + 2];
 800811a:	4b15      	ldr	r3, [pc, #84]	; (8008170 <load_memory_point+0x1b4>)
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a11      	ldr	r2, [pc, #68]	; (800816c <load_memory_point+0x1b0>)
 8008128:	7c92      	ldrb	r2, [r2, #18]
 800812a:	729a      	strb	r2, [r3, #10]
	pp_gps_air[dev_num]->longitude.as_array[3] = 	point_buffer[MEMORY_POINT_LONGITUDE_POS + 3];
 800812c:	4b10      	ldr	r3, [pc, #64]	; (8008170 <load_memory_point+0x1b4>)
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	79fb      	ldrb	r3, [r7, #7]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a0c      	ldr	r2, [pc, #48]	; (800816c <load_memory_point+0x1b0>)
 800813a:	7cd2      	ldrb	r2, [r2, #19]
 800813c:	72da      	strb	r2, [r3, #11]

	pp_gps_air[dev_num]->altitude.as_array[0] =  	point_buffer[MEMORY_POINT_ALTITUDE_POS];
 800813e:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <load_memory_point+0x1b4>)
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a08      	ldr	r2, [pc, #32]	; (800816c <load_memory_point+0x1b0>)
 800814c:	7d12      	ldrb	r2, [r2, #20]
 800814e:	731a      	strb	r2, [r3, #12]
	pp_gps_air[dev_num]->altitude.as_array[1] =		point_buffer[MEMORY_POINT_ALTITUDE_POS + 1];
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <load_memory_point+0x1b4>)
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a03      	ldr	r2, [pc, #12]	; (800816c <load_memory_point+0x1b0>)
 800815e:	7d52      	ldrb	r2, [r2, #21]
 8008160:	735a      	strb	r2, [r3, #13]
}
 8008162:	bf00      	nop
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bdb0      	pop	{r4, r5, r7, pc}
 800816a:	bf00      	nop
 800816c:	20000840 	.word	0x20000840
 8008170:	20000804 	.word	0x20000804
 8008174:	2000083c 	.word	0x2000083c
 8008178:	20000878 	.word	0x20000878

0800817c <delete_memory_point>:



void delete_memory_point(uint8_t slot_num)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	71fb      	strb	r3, [r7, #7]
	clear_point_buffer();
 8008186:	f000 f80b 	bl	80081a0 <clear_point_buffer>
	m24c64_write_page(&point_buffer[0], slot_num);
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	4619      	mov	r1, r3
 800818e:	4803      	ldr	r0, [pc, #12]	; (800819c <delete_memory_point+0x20>)
 8008190:	f7fb fbb2 	bl	80038f8 <m24c64_write_page>
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	20000840 	.word	0x20000840

080081a0 <clear_point_buffer>:



void clear_point_buffer(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 80081a6:	2300      	movs	r3, #0
 80081a8:	71fb      	strb	r3, [r7, #7]
 80081aa:	e006      	b.n	80081ba <clear_point_buffer+0x1a>
	{
		point_buffer[i] = M24C64_EMPTY_CELL_VALUE;
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	4a07      	ldr	r2, [pc, #28]	; (80081cc <clear_point_buffer+0x2c>)
 80081b0:	21ff      	movs	r1, #255	; 0xff
 80081b2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	3301      	adds	r3, #1
 80081b8:	71fb      	strb	r3, [r7, #7]
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	2b1f      	cmp	r3, #31
 80081be:	d9f5      	bls.n	80081ac <clear_point_buffer+0xc>
	}
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bc80      	pop	{r7}
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	20000840 	.word	0x20000840

080081d0 <convert_timeout>:



//Convert timeout in seconds to timeout in "XXdXXhXXmXXs"
void convert_timeout(uint32_t timeout_val, char *buffer)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
    uint32_t sec = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	61fb      	str	r3, [r7, #28]
    uint32_t min = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	61bb      	str	r3, [r7, #24]
    uint32_t hour = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]
    uint32_t day = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	613b      	str	r3, [r7, #16]
    char buf[3];
    
    
    if (timeout_val >= 60)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b3b      	cmp	r3, #59	; 0x3b
 80081ee:	d939      	bls.n	8008264 <convert_timeout+0x94>
    {
        min = timeout_val / 60;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a8b      	ldr	r2, [pc, #556]	; (8008420 <convert_timeout+0x250>)
 80081f4:	fba2 2303 	umull	r2, r3, r2, r3
 80081f8:	095b      	lsrs	r3, r3, #5
 80081fa:	61bb      	str	r3, [r7, #24]
        sec = timeout_val % 60;
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	4b88      	ldr	r3, [pc, #544]	; (8008420 <convert_timeout+0x250>)
 8008200:	fba3 1302 	umull	r1, r3, r3, r2
 8008204:	0959      	lsrs	r1, r3, #5
 8008206:	460b      	mov	r3, r1
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	1a5b      	subs	r3, r3, r1
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	61fb      	str	r3, [r7, #28]

        if (min >= 60)
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b3b      	cmp	r3, #59	; 0x3b
 8008216:	d927      	bls.n	8008268 <convert_timeout+0x98>
        {
            hour = min / 60;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	4a81      	ldr	r2, [pc, #516]	; (8008420 <convert_timeout+0x250>)
 800821c:	fba2 2303 	umull	r2, r3, r2, r3
 8008220:	095b      	lsrs	r3, r3, #5
 8008222:	617b      	str	r3, [r7, #20]
            min = min % 60;
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	4b7e      	ldr	r3, [pc, #504]	; (8008420 <convert_timeout+0x250>)
 8008228:	fba3 1302 	umull	r1, r3, r3, r2
 800822c:	0959      	lsrs	r1, r3, #5
 800822e:	460b      	mov	r3, r1
 8008230:	011b      	lsls	r3, r3, #4
 8008232:	1a5b      	subs	r3, r3, r1
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	61bb      	str	r3, [r7, #24]

            if (hour >= 24)
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2b17      	cmp	r3, #23
 800823e:	d913      	bls.n	8008268 <convert_timeout+0x98>
            {
                day = hour / 24;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	4a78      	ldr	r2, [pc, #480]	; (8008424 <convert_timeout+0x254>)
 8008244:	fba2 2303 	umull	r2, r3, r2, r3
 8008248:	091b      	lsrs	r3, r3, #4
 800824a:	613b      	str	r3, [r7, #16]
                hour = hour % 24;
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	4b75      	ldr	r3, [pc, #468]	; (8008424 <convert_timeout+0x254>)
 8008250:	fba3 1302 	umull	r1, r3, r3, r2
 8008254:	0919      	lsrs	r1, r3, #4
 8008256:	460b      	mov	r3, r1
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	440b      	add	r3, r1
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	617b      	str	r3, [r7, #20]
 8008262:	e001      	b.n	8008268 <convert_timeout+0x98>
            }
        }
    }
    else
    {
        sec = timeout_val;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	61fb      	str	r3, [r7, #28]
    }
    
    if (day)
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d044      	beq.n	80082f8 <convert_timeout+0x128>
    {
        //XXdXXh
        itoa32(day, &buf[0]);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f107 020c 	add.w	r2, r7, #12
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f000 face 	bl	8008818 <itoa32>
        if (day > 9)
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	2b09      	cmp	r3, #9
 8008280:	d90b      	bls.n	800829a <convert_timeout+0xca>
        {
            buffer[0] = buf[0];
 8008282:	7b3a      	ldrb	r2, [r7, #12]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[1];
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	3301      	adds	r3, #1
 800828c:	7b7a      	ldrb	r2, [r7, #13]
 800828e:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'd';
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	3302      	adds	r3, #2
 8008294:	2264      	movs	r2, #100	; 0x64
 8008296:	701a      	strb	r2, [r3, #0]
 8008298:	e00a      	b.n	80082b0 <convert_timeout+0xe0>
        }
        else
        {
            buffer[0] = '0';
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2230      	movs	r2, #48	; 0x30
 800829e:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[0];
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	3301      	adds	r3, #1
 80082a4:	7b3a      	ldrb	r2, [r7, #12]
 80082a6:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'd';
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	3302      	adds	r3, #2
 80082ac:	2264      	movs	r2, #100	; 0x64
 80082ae:	701a      	strb	r2, [r3, #0]
        }
        
        itoa32(hour, &buf[0]);
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f107 020c 	add.w	r2, r7, #12
 80082b6:	4611      	mov	r1, r2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 faad 	bl	8008818 <itoa32>
        if (hour > 9)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2b09      	cmp	r3, #9
 80082c2:	d90c      	bls.n	80082de <convert_timeout+0x10e>
        {
            buffer[3] = buf[0];
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	3303      	adds	r3, #3
 80082c8:	7b3a      	ldrb	r2, [r7, #12]
 80082ca:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[1];
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	3304      	adds	r3, #4
 80082d0:	7b7a      	ldrb	r2, [r7, #13]
 80082d2:	701a      	strb	r2, [r3, #0]
            buffer[5] = 'h';
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	3305      	adds	r3, #5
 80082d8:	2268      	movs	r2, #104	; 0x68
 80082da:	701a      	strb	r2, [r3, #0]
 80082dc:	e098      	b.n	8008410 <convert_timeout+0x240>
        }
        else
        {
            buffer[3] = '0';
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	3303      	adds	r3, #3
 80082e2:	2230      	movs	r2, #48	; 0x30
 80082e4:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[0];
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	3304      	adds	r3, #4
 80082ea:	7b3a      	ldrb	r2, [r7, #12]
 80082ec:	701a      	strb	r2, [r3, #0]
            buffer[5] = 'h';
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	3305      	adds	r3, #5
 80082f2:	2268      	movs	r2, #104	; 0x68
 80082f4:	701a      	strb	r2, [r3, #0]
 80082f6:	e08b      	b.n	8008410 <convert_timeout+0x240>
        }
    }
    else if (hour)
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d044      	beq.n	8008388 <convert_timeout+0x1b8>
    {
        //XXhXXm
        itoa32(hour, &buf[0]);
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f107 020c 	add.w	r2, r7, #12
 8008304:	4611      	mov	r1, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f000 fa86 	bl	8008818 <itoa32>
        if (hour > 9)
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2b09      	cmp	r3, #9
 8008310:	d90b      	bls.n	800832a <convert_timeout+0x15a>
        {
            buffer[0] = buf[0];
 8008312:	7b3a      	ldrb	r2, [r7, #12]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[1];
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	3301      	adds	r3, #1
 800831c:	7b7a      	ldrb	r2, [r7, #13]
 800831e:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'h';
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	3302      	adds	r3, #2
 8008324:	2268      	movs	r2, #104	; 0x68
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	e00a      	b.n	8008340 <convert_timeout+0x170>
        }
        else
        {
            buffer[0] = '0';
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2230      	movs	r2, #48	; 0x30
 800832e:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[0];
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	3301      	adds	r3, #1
 8008334:	7b3a      	ldrb	r2, [r7, #12]
 8008336:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'h';
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	3302      	adds	r3, #2
 800833c:	2268      	movs	r2, #104	; 0x68
 800833e:	701a      	strb	r2, [r3, #0]
        }
        
        itoa32(min, &buf[0]);
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	f107 020c 	add.w	r2, r7, #12
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f000 fa65 	bl	8008818 <itoa32>
        if (min > 9)
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	2b09      	cmp	r3, #9
 8008352:	d90c      	bls.n	800836e <convert_timeout+0x19e>
        {
            buffer[3] = buf[0];
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	3303      	adds	r3, #3
 8008358:	7b3a      	ldrb	r2, [r7, #12]
 800835a:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[1];
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	3304      	adds	r3, #4
 8008360:	7b7a      	ldrb	r2, [r7, #13]
 8008362:	701a      	strb	r2, [r3, #0]
            buffer[5] = 'm';
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	3305      	adds	r3, #5
 8008368:	226d      	movs	r2, #109	; 0x6d
 800836a:	701a      	strb	r2, [r3, #0]
 800836c:	e050      	b.n	8008410 <convert_timeout+0x240>
        }
        else
        {
            buffer[3] = '0';
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	3303      	adds	r3, #3
 8008372:	2230      	movs	r2, #48	; 0x30
 8008374:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[0];
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	3304      	adds	r3, #4
 800837a:	7b3a      	ldrb	r2, [r7, #12]
 800837c:	701a      	strb	r2, [r3, #0]
            buffer[5] = 'm';
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	3305      	adds	r3, #5
 8008382:	226d      	movs	r2, #109	; 0x6d
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	e043      	b.n	8008410 <convert_timeout+0x240>
        }
    }
    else
    {
        //XXmXXs
        itoa32(min, &buf[0]);
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	f107 020c 	add.w	r2, r7, #12
 800838e:	4611      	mov	r1, r2
 8008390:	4618      	mov	r0, r3
 8008392:	f000 fa41 	bl	8008818 <itoa32>
        if (min > 9)
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b09      	cmp	r3, #9
 800839a:	d90b      	bls.n	80083b4 <convert_timeout+0x1e4>
        {
            buffer[0] = buf[0];
 800839c:	7b3a      	ldrb	r2, [r7, #12]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[1];
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	3301      	adds	r3, #1
 80083a6:	7b7a      	ldrb	r2, [r7, #13]
 80083a8:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'm';
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	3302      	adds	r3, #2
 80083ae:	226d      	movs	r2, #109	; 0x6d
 80083b0:	701a      	strb	r2, [r3, #0]
 80083b2:	e00a      	b.n	80083ca <convert_timeout+0x1fa>
        }
        else
        {
            buffer[0] = '0';
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2230      	movs	r2, #48	; 0x30
 80083b8:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[0];
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	3301      	adds	r3, #1
 80083be:	7b3a      	ldrb	r2, [r7, #12]
 80083c0:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'm';
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	3302      	adds	r3, #2
 80083c6:	226d      	movs	r2, #109	; 0x6d
 80083c8:	701a      	strb	r2, [r3, #0]
        }
        
        itoa32(sec, &buf[0]);
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	f107 020c 	add.w	r2, r7, #12
 80083d0:	4611      	mov	r1, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fa20 	bl	8008818 <itoa32>
        if (sec > 9)
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	2b09      	cmp	r3, #9
 80083dc:	d90c      	bls.n	80083f8 <convert_timeout+0x228>
        {
            buffer[3] = buf[0];
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	3303      	adds	r3, #3
 80083e2:	7b3a      	ldrb	r2, [r7, #12]
 80083e4:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[1];
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	3304      	adds	r3, #4
 80083ea:	7b7a      	ldrb	r2, [r7, #13]
 80083ec:	701a      	strb	r2, [r3, #0]
            buffer[5] = 's';
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	3305      	adds	r3, #5
 80083f2:	2273      	movs	r2, #115	; 0x73
 80083f4:	701a      	strb	r2, [r3, #0]
 80083f6:	e00b      	b.n	8008410 <convert_timeout+0x240>
        }
        else
        {
            buffer[3] = '0';
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	3303      	adds	r3, #3
 80083fc:	2230      	movs	r2, #48	; 0x30
 80083fe:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[0];
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	3304      	adds	r3, #4
 8008404:	7b3a      	ldrb	r2, [r7, #12]
 8008406:	701a      	strb	r2, [r3, #0]
            buffer[5] = 's';
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	3305      	adds	r3, #5
 800840c:	2273      	movs	r2, #115	; 0x73
 800840e:	701a      	strb	r2, [r3, #0]
        }
    }
    
    buffer[6] = 0;  //string end
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	3306      	adds	r3, #6
 8008414:	2200      	movs	r2, #0
 8008416:	701a      	strb	r2, [r3, #0]
}
 8008418:	bf00      	nop
 800841a:	3720      	adds	r7, #32
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	88888889 	.word	0x88888889
 8008424:	aaaaaaab 	.word	0xaaaaaaab

08008428 <delay_cyc>:



//Simple delay in cycles
void delay_cyc(uint32_t cycles)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
    while (cycles)
 8008430:	e002      	b.n	8008438 <delay_cyc+0x10>
    {
        cycles--;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	3b01      	subs	r3, #1
 8008436:	607b      	str	r3, [r7, #4]
    while (cycles)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1f9      	bne.n	8008432 <delay_cyc+0xa>
    }
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr

08008448 <atof32>:



//Converts string to float
float atof32(char *input)
{
 8008448:	b5b0      	push	{r4, r5, r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	75fb      	strb	r3, [r7, #23]
    int32_t sign = 1;
 8008454:	2301      	movs	r3, #1
 8008456:	613b      	str	r3, [r7, #16]
    float power = 1.0;
 8008458:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800845c:	60fb      	str	r3, [r7, #12]
    float result = 0.0;
 800845e:	f04f 0300 	mov.w	r3, #0
 8008462:	60bb      	str	r3, [r7, #8]
    
    if(input[0] == 0)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d102      	bne.n	8008472 <atof32+0x2a>
    {
        return 0.0;
 800846c:	f04f 0300 	mov.w	r3, #0
 8008470:	e07a      	b.n	8008568 <atof32+0x120>
    }
    
    if(input[i] == '-')
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	4413      	add	r3, r2
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b2d      	cmp	r3, #45	; 0x2d
 800847c:	d12b      	bne.n	80084d6 <atof32+0x8e>
    {
        sign = -1;
 800847e:	f04f 33ff 	mov.w	r3, #4294967295
 8008482:	613b      	str	r3, [r7, #16]
        i++;
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	3301      	adds	r3, #1
 8008488:	75fb      	strb	r3, [r7, #23]
    }
    
    while(input[i] != '.')
 800848a:	e024      	b.n	80084d6 <atof32+0x8e>
    {
        result = result * 10.0 + (input[i] - '0');
 800848c:	68b8      	ldr	r0, [r7, #8]
 800848e:	f7f7 ffd3 	bl	8000438 <__aeabi_f2d>
 8008492:	f04f 0200 	mov.w	r2, #0
 8008496:	4b36      	ldr	r3, [pc, #216]	; (8008570 <atof32+0x128>)
 8008498:	f7f8 f826 	bl	80004e8 <__aeabi_dmul>
 800849c:	4603      	mov	r3, r0
 800849e:	460c      	mov	r4, r1
 80084a0:	4625      	mov	r5, r4
 80084a2:	461c      	mov	r4, r3
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	3b30      	subs	r3, #48	; 0x30
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7f7 ffb0 	bl	8000414 <__aeabi_i2d>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4620      	mov	r0, r4
 80084ba:	4629      	mov	r1, r5
 80084bc:	f7f7 fe5e 	bl	800017c <__adddf3>
 80084c0:	4603      	mov	r3, r0
 80084c2:	460c      	mov	r4, r1
 80084c4:	4618      	mov	r0, r3
 80084c6:	4621      	mov	r1, r4
 80084c8:	f7f8 fb06 	bl	8000ad8 <__aeabi_d2f>
 80084cc:	4603      	mov	r3, r0
 80084ce:	60bb      	str	r3, [r7, #8]
        i++;
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
 80084d2:	3301      	adds	r3, #1
 80084d4:	75fb      	strb	r3, [r7, #23]
    while(input[i] != '.')
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	4413      	add	r3, r2
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b2e      	cmp	r3, #46	; 0x2e
 80084e0:	d1d4      	bne.n	800848c <atof32+0x44>
    }
    
    i++;
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
 80084e4:	3301      	adds	r3, #1
 80084e6:	75fb      	strb	r3, [r7, #23]
    
    while(input[i] != 0)
 80084e8:	e02a      	b.n	8008540 <atof32+0xf8>
    {
        result = result * 10.0 + (input[i] - '0');
 80084ea:	68b8      	ldr	r0, [r7, #8]
 80084ec:	f7f7 ffa4 	bl	8000438 <__aeabi_f2d>
 80084f0:	f04f 0200 	mov.w	r2, #0
 80084f4:	4b1e      	ldr	r3, [pc, #120]	; (8008570 <atof32+0x128>)
 80084f6:	f7f7 fff7 	bl	80004e8 <__aeabi_dmul>
 80084fa:	4603      	mov	r3, r0
 80084fc:	460c      	mov	r4, r1
 80084fe:	4625      	mov	r5, r4
 8008500:	461c      	mov	r4, r3
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	4413      	add	r3, r2
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	3b30      	subs	r3, #48	; 0x30
 800850c:	4618      	mov	r0, r3
 800850e:	f7f7 ff81 	bl	8000414 <__aeabi_i2d>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4620      	mov	r0, r4
 8008518:	4629      	mov	r1, r5
 800851a:	f7f7 fe2f 	bl	800017c <__adddf3>
 800851e:	4603      	mov	r3, r0
 8008520:	460c      	mov	r4, r1
 8008522:	4618      	mov	r0, r3
 8008524:	4621      	mov	r1, r4
 8008526:	f7f8 fad7 	bl	8000ad8 <__aeabi_d2f>
 800852a:	4603      	mov	r3, r0
 800852c:	60bb      	str	r3, [r7, #8]
        power *= 10.0;
 800852e:	4911      	ldr	r1, [pc, #68]	; (8008574 <atof32+0x12c>)
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f7f8 fc2f 	bl	8000d94 <__aeabi_fmul>
 8008536:	4603      	mov	r3, r0
 8008538:	60fb      	str	r3, [r7, #12]
        i++;
 800853a:	7dfb      	ldrb	r3, [r7, #23]
 800853c:	3301      	adds	r3, #1
 800853e:	75fb      	strb	r3, [r7, #23]
    while(input[i] != 0)
 8008540:	7dfb      	ldrb	r3, [r7, #23]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	4413      	add	r3, r2
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1ce      	bne.n	80084ea <atof32+0xa2>
    }
    
    return (sign * result / power);
 800854c:	6938      	ldr	r0, [r7, #16]
 800854e:	f7f8 fbcd 	bl	8000cec <__aeabi_i2f>
 8008552:	4603      	mov	r3, r0
 8008554:	68b9      	ldr	r1, [r7, #8]
 8008556:	4618      	mov	r0, r3
 8008558:	f7f8 fc1c 	bl	8000d94 <__aeabi_fmul>
 800855c:	4603      	mov	r3, r0
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	4618      	mov	r0, r3
 8008562:	f7f8 fccb 	bl	8000efc <__aeabi_fdiv>
 8008566:	4603      	mov	r3, r0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bdb0      	pop	{r4, r5, r7, pc}
 8008570:	40240000 	.word	0x40240000
 8008574:	41200000 	.word	0x41200000

08008578 <ftoa32>:



//Converts float to string
void ftoa32(float value, uint8_t precision, char *buffer)
{
 8008578:	b590      	push	{r4, r7, lr}
 800857a:	b08d      	sub	sp, #52	; 0x34
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	460b      	mov	r3, r1
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	72fb      	strb	r3, [r7, #11]
    uint8_t i = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t mod = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	61bb      	str	r3, [r7, #24]
    float pow = 1.0;
 8008590:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008594:	62bb      	str	r3, [r7, #40]	; 0x28
    char sgn = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    float value_copy;
    
    if((value == 0.0) || (value == -0.0))
 800859c:	f04f 0100 	mov.w	r1, #0
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7f8 fd8b 	bl	80010bc <__aeabi_fcmpeq>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d107      	bne.n	80085bc <ftoa32+0x44>
 80085ac:	f04f 0100 	mov.w	r1, #0
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7f8 fd83 	bl	80010bc <__aeabi_fcmpeq>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d007      	beq.n	80085cc <ftoa32+0x54>
    {
        buffer[0] = '0';
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2230      	movs	r2, #48	; 0x30
 80085c0:	701a      	strb	r2, [r3, #0]
        buffer[1] = 0;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3301      	adds	r3, #1
 80085c6:	2200      	movs	r2, #0
 80085c8:	701a      	strb	r2, [r3, #0]
        return;
 80085ca:	e0d6      	b.n	800877a <ftoa32+0x202>
    }
    
    if(value < 0)
 80085cc:	f04f 0100 	mov.w	r1, #0
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7f8 fd7d 	bl	80010d0 <__aeabi_fcmplt>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00f      	beq.n	80085fc <ftoa32+0x84>
    {
        sgn = '-';
 80085dc:	232d      	movs	r3, #45	; 0x2d
 80085de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        value *= -1.0;
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7f7 ff28 	bl	8000438 <__aeabi_f2d>
 80085e8:	4603      	mov	r3, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	4618      	mov	r0, r3
 80085ee:	4621      	mov	r1, r4
 80085f0:	f7f8 fa72 	bl	8000ad8 <__aeabi_d2f>
 80085f4:	4603      	mov	r3, r0
 80085f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80085fa:	60fb      	str	r3, [r7, #12]
    }
    
    value_copy = value;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	617b      	str	r3, [r7, #20]
    
    for(uint8_t p = 0; p < precision; p++)
 8008600:	2300      	movs	r3, #0
 8008602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008606:	e00a      	b.n	800861e <ftoa32+0xa6>
    {
        pow = pow * 10.0;
 8008608:	495d      	ldr	r1, [pc, #372]	; (8008780 <ftoa32+0x208>)
 800860a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800860c:	f7f8 fbc2 	bl	8000d94 <__aeabi_fmul>
 8008610:	4603      	mov	r3, r0
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
    for(uint8_t p = 0; p < precision; p++)
 8008614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008618:	3301      	adds	r3, #1
 800861a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800861e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008622:	7afb      	ldrb	r3, [r7, #11]
 8008624:	429a      	cmp	r2, r3
 8008626:	d3ef      	bcc.n	8008608 <ftoa32+0x90>
    }
    
    value = value * pow;
 8008628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7f8 fbb2 	bl	8000d94 <__aeabi_fmul>
 8008630:	4603      	mov	r3, r0
 8008632:	60fb      	str	r3, [r7, #12]
    uint32_t ipart = value;
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7f8 fd99 	bl	800116c <__aeabi_f2uiz>
 800863a:	4603      	mov	r3, r0
 800863c:	623b      	str	r3, [r7, #32]
    
    buffer[i++] = 0;
 800863e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8008648:	461a      	mov	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	2200      	movs	r2, #0
 8008650:	701a      	strb	r2, [r3, #0]
    
    do
    {
        mod = ipart % 10;
 8008652:	6a3a      	ldr	r2, [r7, #32]
 8008654:	4b4b      	ldr	r3, [pc, #300]	; (8008784 <ftoa32+0x20c>)
 8008656:	fba3 1302 	umull	r1, r3, r3, r2
 800865a:	08d9      	lsrs	r1, r3, #3
 800865c:	460b      	mov	r3, r1
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	440b      	add	r3, r1
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	61bb      	str	r3, [r7, #24]
        ipart /= 10;
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	4a46      	ldr	r2, [pc, #280]	; (8008784 <ftoa32+0x20c>)
 800866c:	fba2 2303 	umull	r2, r3, r2, r3
 8008670:	08db      	lsrs	r3, r3, #3
 8008672:	623b      	str	r3, [r7, #32]
        buffer[i++] = mod + '0';
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	b2da      	uxtb	r2, r3
 8008678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800867c:	1c59      	adds	r1, r3, #1
 800867e:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 8008682:	4619      	mov	r1, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	440b      	add	r3, r1
 8008688:	3230      	adds	r2, #48	; 0x30
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	701a      	strb	r2, [r3, #0]
    }
    while(ipart > 0);
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1de      	bne.n	8008652 <ftoa32+0xda>
    
    if (value_copy < 1.0)
 8008694:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008698:	6978      	ldr	r0, [r7, #20]
 800869a:	f7f8 fd19 	bl	80010d0 <__aeabi_fcmplt>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d014      	beq.n	80086ce <ftoa32+0x156>
    {
        for(uint8_t p = 0; p < precision; p++)
 80086a4:	2300      	movs	r3, #0
 80086a6:	77fb      	strb	r3, [r7, #31]
 80086a8:	e00d      	b.n	80086c6 <ftoa32+0x14e>
        {
            buffer[i] = '0';
 80086aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	2230      	movs	r2, #48	; 0x30
 80086b4:	701a      	strb	r2, [r3, #0]
            i++;
 80086b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086ba:	3301      	adds	r3, #1
 80086bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        for(uint8_t p = 0; p < precision; p++)
 80086c0:	7ffb      	ldrb	r3, [r7, #31]
 80086c2:	3301      	adds	r3, #1
 80086c4:	77fb      	strb	r3, [r7, #31]
 80086c6:	7ffa      	ldrb	r2, [r7, #31]
 80086c8:	7afb      	ldrb	r3, [r7, #11]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d3ed      	bcc.n	80086aa <ftoa32+0x132>
        }
    }
    
    if(sgn == '-')
 80086ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086d2:	2b2d      	cmp	r3, #45	; 0x2d
 80086d4:	d107      	bne.n	80086e6 <ftoa32+0x16e>
    {
        buffer[i] = sgn;
 80086d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80086e2:	701a      	strb	r2, [r3, #0]
 80086e4:	e004      	b.n	80086f0 <ftoa32+0x178>
    }
    else
    {
        i--;
 80086e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086ea:	3b01      	subs	r3, #1
 80086ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    for(uint8_t n = i + 1; n > precision + 1; n--)
 80086f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086f4:	3301      	adds	r3, #1
 80086f6:	77bb      	strb	r3, [r7, #30]
 80086f8:	e00b      	b.n	8008712 <ftoa32+0x19a>
    {
        buffer[n] = buffer[n - 1];
 80086fa:	7fbb      	ldrb	r3, [r7, #30]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	441a      	add	r2, r3
 8008702:	7fbb      	ldrb	r3, [r7, #30]
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	440b      	add	r3, r1
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	701a      	strb	r2, [r3, #0]
    for(uint8_t n = i + 1; n > precision + 1; n--)
 800870c:	7fbb      	ldrb	r3, [r7, #30]
 800870e:	3b01      	subs	r3, #1
 8008710:	77bb      	strb	r3, [r7, #30]
 8008712:	7fba      	ldrb	r2, [r7, #30]
 8008714:	7afb      	ldrb	r3, [r7, #11]
 8008716:	3301      	adds	r3, #1
 8008718:	429a      	cmp	r2, r3
 800871a:	dcee      	bgt.n	80086fa <ftoa32+0x182>
    }
    buffer[precision + 1] = '.';
 800871c:	7afb      	ldrb	r3, [r7, #11]
 800871e:	3301      	adds	r3, #1
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	4413      	add	r3, r2
 8008724:	222e      	movs	r2, #46	; 0x2e
 8008726:	701a      	strb	r2, [r3, #0]
    i++;
 8008728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800872c:	3301      	adds	r3, #1
 800872e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    
    char c;
    for(uint8_t j = 0; j < i; j++, i--)
 8008732:	2300      	movs	r3, #0
 8008734:	777b      	strb	r3, [r7, #29]
 8008736:	e01b      	b.n	8008770 <ftoa32+0x1f8>
    {
        c = buffer[j];
 8008738:	7f7b      	ldrb	r3, [r7, #29]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	74fb      	strb	r3, [r7, #19]
        buffer[j] = buffer[i];
 8008742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	441a      	add	r2, r3
 800874a:	7f7b      	ldrb	r3, [r7, #29]
 800874c:	6879      	ldr	r1, [r7, #4]
 800874e:	440b      	add	r3, r1
 8008750:	7812      	ldrb	r2, [r2, #0]
 8008752:	701a      	strb	r2, [r3, #0]
        buffer[i] = c;
 8008754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	4413      	add	r3, r2
 800875c:	7cfa      	ldrb	r2, [r7, #19]
 800875e:	701a      	strb	r2, [r3, #0]
    for(uint8_t j = 0; j < i; j++, i--)
 8008760:	7f7b      	ldrb	r3, [r7, #29]
 8008762:	3301      	adds	r3, #1
 8008764:	777b      	strb	r3, [r7, #29]
 8008766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800876a:	3b01      	subs	r3, #1
 800876c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008770:	7f7a      	ldrb	r2, [r7, #29]
 8008772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008776:	429a      	cmp	r2, r3
 8008778:	d3de      	bcc.n	8008738 <ftoa32+0x1c0>
    }
}
 800877a:	3734      	adds	r7, #52	; 0x34
 800877c:	46bd      	mov	sp, r7
 800877e:	bd90      	pop	{r4, r7, pc}
 8008780:	41200000 	.word	0x41200000
 8008784:	cccccccd 	.word	0xcccccccd

08008788 <atoi32>:



//Converts string to integer
int32_t atoi32(char *input)
{
 8008788:	b480      	push	{r7}
 800878a:	b087      	sub	sp, #28
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8008790:	2300      	movs	r3, #0
 8008792:	75fb      	strb	r3, [r7, #23]
    int32_t sign = 1;
 8008794:	2301      	movs	r3, #1
 8008796:	613b      	str	r3, [r7, #16]
    int32_t result = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]
    
    if(input[0] == 0)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <atoi32+0x20>
    {
        return 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	e031      	b.n	800880c <atoi32+0x84>
    }
    
    if((input[0] == '0') && (input[1] == 0))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b30      	cmp	r3, #48	; 0x30
 80087ae:	d106      	bne.n	80087be <atoi32+0x36>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3301      	adds	r3, #1
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <atoi32+0x36>
    {
        return 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	e026      	b.n	800880c <atoi32+0x84>
    }
    
    if(input[i] == '-')
 80087be:	7dfb      	ldrb	r3, [r7, #23]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	4413      	add	r3, r2
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b2d      	cmp	r3, #45	; 0x2d
 80087c8:	d116      	bne.n	80087f8 <atoi32+0x70>
    {
        sign = -1;
 80087ca:	f04f 33ff 	mov.w	r3, #4294967295
 80087ce:	613b      	str	r3, [r7, #16]
        i++;
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	3301      	adds	r3, #1
 80087d4:	75fb      	strb	r3, [r7, #23]
    }
    
    while(input[i] != 0)
 80087d6:	e00f      	b.n	80087f8 <atoi32+0x70>
    {
        result = result * 10 + (input[i] - '0');
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	4619      	mov	r1, r3
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	4413      	add	r3, r2
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	3b30      	subs	r3, #48	; 0x30
 80087ee:	440b      	add	r3, r1
 80087f0:	60fb      	str	r3, [r7, #12]
        i++;
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	3301      	adds	r3, #1
 80087f6:	75fb      	strb	r3, [r7, #23]
    while(input[i] != 0)
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	4413      	add	r3, r2
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e9      	bne.n	80087d8 <atoi32+0x50>
    }
    
    return result * sign;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	fb02 f303 	mul.w	r3, r2, r3
}
 800880c:	4618      	mov	r0, r3
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr
	...

08008818 <itoa32>:



//Converts integer to string
void itoa32(int32_t value, char *buffer)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
    uint8_t mod = 0;
 8008826:	2300      	movs	r3, #0
 8008828:	733b      	strb	r3, [r7, #12]
    char sgn = 0;
 800882a:	2300      	movs	r3, #0
 800882c:	73bb      	strb	r3, [r7, #14]
    
    if(value == 0)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d107      	bne.n	8008844 <itoa32+0x2c>
    {
        buffer[0] = '0';
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2230      	movs	r2, #48	; 0x30
 8008838:	701a      	strb	r2, [r3, #0]
        buffer[1] = 0;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	3301      	adds	r3, #1
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
        return;
 8008842:	e05e      	b.n	8008902 <itoa32+0xea>
    }
    
    if(value < 0)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	da04      	bge.n	8008854 <itoa32+0x3c>
    {
        sgn = '-';
 800884a:	232d      	movs	r3, #45	; 0x2d
 800884c:	73bb      	strb	r3, [r7, #14]
        value *= -1;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	425b      	negs	r3, r3
 8008852:	607b      	str	r3, [r7, #4]
    }
    
    buffer[i++] = 0;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	73fa      	strb	r2, [r7, #15]
 800885a:	461a      	mov	r2, r3
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	4413      	add	r3, r2
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
    
    while(value > 0)
 8008864:	e01f      	b.n	80088a6 <itoa32+0x8e>
    {
        mod = value % 10;
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	4b28      	ldr	r3, [pc, #160]	; (800890c <itoa32+0xf4>)
 800886a:	fb83 1302 	smull	r1, r3, r3, r2
 800886e:	1099      	asrs	r1, r3, #2
 8008870:	17d3      	asrs	r3, r2, #31
 8008872:	1ac9      	subs	r1, r1, r3
 8008874:	460b      	mov	r3, r1
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	1ad1      	subs	r1, r2, r3
 800887e:	460b      	mov	r3, r1
 8008880:	733b      	strb	r3, [r7, #12]
        value /= 10;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a21      	ldr	r2, [pc, #132]	; (800890c <itoa32+0xf4>)
 8008886:	fb82 1203 	smull	r1, r2, r2, r3
 800888a:	1092      	asrs	r2, r2, #2
 800888c:	17db      	asrs	r3, r3, #31
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	607b      	str	r3, [r7, #4]
        buffer[i++] = mod + '0';
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	1c5a      	adds	r2, r3, #1
 8008896:	73fa      	strb	r2, [r7, #15]
 8008898:	461a      	mov	r2, r3
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	4413      	add	r3, r2
 800889e:	7b3a      	ldrb	r2, [r7, #12]
 80088a0:	3230      	adds	r2, #48	; 0x30
 80088a2:	b2d2      	uxtb	r2, r2
 80088a4:	701a      	strb	r2, [r3, #0]
    while(value > 0)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	dcdc      	bgt.n	8008866 <itoa32+0x4e>
    }
    
    if(sgn == '-')
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	2b2d      	cmp	r3, #45	; 0x2d
 80088b0:	d105      	bne.n	80088be <itoa32+0xa6>
    {
        buffer[i] = sgn;
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	4413      	add	r3, r2
 80088b8:	7bba      	ldrb	r2, [r7, #14]
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	e002      	b.n	80088c4 <itoa32+0xac>
    }
    else
    {
        i--;
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	73fb      	strb	r3, [r7, #15]
    }
    
    char c;
    for(uint8_t j = 0; j < i; j++, i--)
 80088c4:	2300      	movs	r3, #0
 80088c6:	737b      	strb	r3, [r7, #13]
 80088c8:	e017      	b.n	80088fa <itoa32+0xe2>
    {
        c = buffer[j];
 80088ca:	7b7b      	ldrb	r3, [r7, #13]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	4413      	add	r3, r2
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	72fb      	strb	r3, [r7, #11]
        buffer[j] = buffer[i];
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	441a      	add	r2, r3
 80088da:	7b7b      	ldrb	r3, [r7, #13]
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	440b      	add	r3, r1
 80088e0:	7812      	ldrb	r2, [r2, #0]
 80088e2:	701a      	strb	r2, [r3, #0]
        buffer[i] = c;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	4413      	add	r3, r2
 80088ea:	7afa      	ldrb	r2, [r7, #11]
 80088ec:	701a      	strb	r2, [r3, #0]
    for(uint8_t j = 0; j < i; j++, i--)
 80088ee:	7b7b      	ldrb	r3, [r7, #13]
 80088f0:	3301      	adds	r3, #1
 80088f2:	737b      	strb	r3, [r7, #13]
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	3b01      	subs	r3, #1
 80088f8:	73fb      	strb	r3, [r7, #15]
 80088fa:	7b7a      	ldrb	r2, [r7, #13]
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d3e3      	bcc.n	80088ca <itoa32+0xb2>
    }
}
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	bc80      	pop	{r7}
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	66666667 	.word	0x66666667

08008910 <get_send_interval_values>:
uint8_t tx_power_values[] = TX_POWER_VALUES_ARRAY;



uint8_t *get_send_interval_values(void)
{
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
	return &send_interval_values[0];
 8008914:	4b02      	ldr	r3, [pc, #8]	; (8008920 <get_send_interval_values+0x10>)
}
 8008916:	4618      	mov	r0, r3
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	20000050 	.word	0x20000050

08008924 <get_tx_power_values>:



uint8_t *get_tx_power_values(void)
{
 8008924:	b480      	push	{r7}
 8008926:	af00      	add	r7, sp, #0
	return &tx_power_values[0];
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <get_tx_power_values+0x10>)
}
 800892a:	4618      	mov	r0, r3
 800892c:	46bd      	mov	sp, r7
 800892e:	bc80      	pop	{r7}
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20000058 	.word	0x20000058

08008938 <get_settings>:



struct settings_struct *get_settings(void)
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
	return &settings;
 800893c:	4b02      	ldr	r3, [pc, #8]	; (8008948 <get_settings+0x10>)
}
 800893e:	4618      	mov	r0, r3
 8008940:	46bd      	mov	sp, r7
 8008942:	bc80      	pop	{r7}
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	200008e0 	.word	0x200008e0

0800894c <settings_load>:



void settings_load(void)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
    uint16_t init_flag_addr = EEPROM_SETTINGS_PAGE_ADDRESS * M24C64_PAGE_SIZE + SETTINGS_INIT_FLAG_POS;
 8008952:	2300      	movs	r3, #0
 8008954:	80fb      	strh	r3, [r7, #6]
    
    if (m24c64_read_byte(init_flag_addr) != SETTINGS_INIT_FLAG_DEFAULT)     //if first power-up or EEPROM had been erased
 8008956:	88fb      	ldrh	r3, [r7, #6]
 8008958:	4618      	mov	r0, r3
 800895a:	f7fa fe6f 	bl	800363c <m24c64_read_byte>
 800895e:	4603      	mov	r3, r0
 8008960:	2baa      	cmp	r3, #170	; 0xaa
 8008962:	d001      	beq.n	8008968 <settings_load+0x1c>
    {
        settings_save_default();
 8008964:	f000 f834 	bl	80089d0 <settings_save_default>
    }
    
    //read from EEPROM
    m24c64_read_page(&settings_array[0], EEPROM_SETTINGS_PAGE_ADDRESS);
 8008968:	2100      	movs	r1, #0
 800896a:	4817      	ldr	r0, [pc, #92]	; (80089c8 <settings_load+0x7c>)
 800896c:	f7fa ff00 	bl	8003770 <m24c64_read_page>
    
    //load settings to struct
    settings.device_number = 					settings_array[SETTINGS_DEVICE_NUMBER_POS];
 8008970:	4b15      	ldr	r3, [pc, #84]	; (80089c8 <settings_load+0x7c>)
 8008972:	785a      	ldrb	r2, [r3, #1]
 8008974:	4b15      	ldr	r3, [pc, #84]	; (80089cc <settings_load+0x80>)
 8008976:	701a      	strb	r2, [r3, #0]
    settings.device_id[0] = 					settings_array[SETTINGS_DEVICE_ID_POS];
 8008978:	4b13      	ldr	r3, [pc, #76]	; (80089c8 <settings_load+0x7c>)
 800897a:	789a      	ldrb	r2, [r3, #2]
 800897c:	4b13      	ldr	r3, [pc, #76]	; (80089cc <settings_load+0x80>)
 800897e:	705a      	strb	r2, [r3, #1]
    settings.device_id[1] = 					settings_array[SETTINGS_DEVICE_ID_POS + 1];
 8008980:	4b11      	ldr	r3, [pc, #68]	; (80089c8 <settings_load+0x7c>)
 8008982:	78da      	ldrb	r2, [r3, #3]
 8008984:	4b11      	ldr	r3, [pc, #68]	; (80089cc <settings_load+0x80>)
 8008986:	709a      	strb	r2, [r3, #2]
    settings.freq_channel = 					settings_array[SETTINGS_FREQ_CHANNEL_POS];
 8008988:	4b0f      	ldr	r3, [pc, #60]	; (80089c8 <settings_load+0x7c>)
 800898a:	791a      	ldrb	r2, [r3, #4]
 800898c:	4b0f      	ldr	r3, [pc, #60]	; (80089cc <settings_load+0x80>)
 800898e:	70da      	strb	r2, [r3, #3]
    settings.tx_power_opt = 					settings_array[SETTINGS_TX_POWER_POS];
 8008990:	4b0d      	ldr	r3, [pc, #52]	; (80089c8 <settings_load+0x7c>)
 8008992:	795a      	ldrb	r2, [r3, #5]
 8008994:	4b0d      	ldr	r3, [pc, #52]	; (80089cc <settings_load+0x80>)
 8008996:	711a      	strb	r2, [r3, #4]
    settings.send_interval_opt = 				settings_array[SETTINGS_SEND_INTERVAL_POS];
 8008998:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <settings_load+0x7c>)
 800899a:	799a      	ldrb	r2, [r3, #6]
 800899c:	4b0b      	ldr	r3, [pc, #44]	; (80089cc <settings_load+0x80>)
 800899e:	715a      	strb	r2, [r3, #5]
    settings.timeout_threshold.as_array[0] = 	settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS];
 80089a0:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <settings_load+0x7c>)
 80089a2:	79da      	ldrb	r2, [r3, #7]
 80089a4:	4b09      	ldr	r3, [pc, #36]	; (80089cc <settings_load+0x80>)
 80089a6:	719a      	strb	r2, [r3, #6]
    settings.timeout_threshold.as_array[1] = 	settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS + 1];
 80089a8:	4b07      	ldr	r3, [pc, #28]	; (80089c8 <settings_load+0x7c>)
 80089aa:	7a1a      	ldrb	r2, [r3, #8]
 80089ac:	4b07      	ldr	r3, [pc, #28]	; (80089cc <settings_load+0x80>)
 80089ae:	71da      	strb	r2, [r3, #7]
    settings.fence_threshold.as_array[0] = 		settings_array[SETTINGS_FENCE_THRESHOLD_POS];
 80089b0:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <settings_load+0x7c>)
 80089b2:	7a5a      	ldrb	r2, [r3, #9]
 80089b4:	4b05      	ldr	r3, [pc, #20]	; (80089cc <settings_load+0x80>)
 80089b6:	721a      	strb	r2, [r3, #8]
    settings.fence_threshold.as_array[1] = 		settings_array[SETTINGS_FENCE_THRESHOLD_POS + 1];
 80089b8:	4b03      	ldr	r3, [pc, #12]	; (80089c8 <settings_load+0x7c>)
 80089ba:	7a9a      	ldrb	r2, [r3, #10]
 80089bc:	4b03      	ldr	r3, [pc, #12]	; (80089cc <settings_load+0x80>)
 80089be:	725a      	strb	r2, [r3, #9]
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	200008ec 	.word	0x200008ec
 80089cc:	200008e0 	.word	0x200008e0

080089d0 <settings_save_default>:



void settings_save_default(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 80089d6:	2300      	movs	r3, #0
 80089d8:	71fb      	strb	r3, [r7, #7]
 80089da:	e006      	b.n	80089ea <settings_save_default+0x1a>
    {
        settings_array[i] = M24C64_EMPTY_CELL_VALUE;    //clear array
 80089dc:	79fb      	ldrb	r3, [r7, #7]
 80089de:	4a19      	ldr	r2, [pc, #100]	; (8008a44 <settings_save_default+0x74>)
 80089e0:	21ff      	movs	r1, #255	; 0xff
 80089e2:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	3301      	adds	r3, #1
 80089e8:	71fb      	strb	r3, [r7, #7]
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	2b1f      	cmp	r3, #31
 80089ee:	d9f5      	bls.n	80089dc <settings_save_default+0xc>
    }
    
    //assign default values
    settings_array[SETTINGS_INIT_FLAG_POS] = 			SETTINGS_INIT_FLAG_DEFAULT;
 80089f0:	4b14      	ldr	r3, [pc, #80]	; (8008a44 <settings_save_default+0x74>)
 80089f2:	22aa      	movs	r2, #170	; 0xaa
 80089f4:	701a      	strb	r2, [r3, #0]
    settings_array[SETTINGS_DEVICE_NUMBER_POS] = 		SETTINGS_DEVICE_NUMBER_DEFAULT;
 80089f6:	4b13      	ldr	r3, [pc, #76]	; (8008a44 <settings_save_default+0x74>)
 80089f8:	2201      	movs	r2, #1
 80089fa:	705a      	strb	r2, [r3, #1]
    settings_array[SETTINGS_DEVICE_ID_POS] = 			SETTINGS_DEVICE_ID_0_DEFAULT;
 80089fc:	4b11      	ldr	r3, [pc, #68]	; (8008a44 <settings_save_default+0x74>)
 80089fe:	2249      	movs	r2, #73	; 0x49
 8008a00:	709a      	strb	r2, [r3, #2]
    settings_array[SETTINGS_DEVICE_ID_POS + 1] = 		SETTINGS_DEVICE_ID_1_DEFAULT;
 8008a02:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <settings_save_default+0x74>)
 8008a04:	2244      	movs	r2, #68	; 0x44
 8008a06:	70da      	strb	r2, [r3, #3]
    settings_array[SETTINGS_FREQ_CHANNEL_POS] = 		SETTINGS_FREQ_CHANNEL_DEFAULT;
 8008a08:	4b0e      	ldr	r3, [pc, #56]	; (8008a44 <settings_save_default+0x74>)
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	711a      	strb	r2, [r3, #4]
    settings_array[SETTINGS_TX_POWER_POS] = 			SETTINGS_TX_POWER_DEFAULT;
 8008a0e:	4b0d      	ldr	r3, [pc, #52]	; (8008a44 <settings_save_default+0x74>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	715a      	strb	r2, [r3, #5]
    settings_array[SETTINGS_SEND_INTERVAL_POS] = 		SETTINGS_SEND_INTERVAL_DEFAULT;
 8008a14:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <settings_save_default+0x74>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	719a      	strb	r2, [r3, #6]
    settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS] = 	(uint8_t)((uint8_t)0xFF & (uint16_t)SETTINGS_TIMEOUT_THRESHOLD_DEFAULT);				//note: little-endian assumed
 8008a1a:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <settings_save_default+0x74>)
 8008a1c:	223c      	movs	r2, #60	; 0x3c
 8008a1e:	71da      	strb	r2, [r3, #7]
    settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS + 1]= (uint8_t)((uint8_t)0xFF & ((uint16_t)SETTINGS_TIMEOUT_THRESHOLD_DEFAULT >> 8));
 8008a20:	4b08      	ldr	r3, [pc, #32]	; (8008a44 <settings_save_default+0x74>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	721a      	strb	r2, [r3, #8]
    settings_array[SETTINGS_FENCE_THRESHOLD_POS] = 		(uint8_t)((uint8_t)0xFF & (uint16_t)SETTINGS_FENCE_THRESHOLD_DEFAULT);				//note: little-endian assumed
 8008a26:	4b07      	ldr	r3, [pc, #28]	; (8008a44 <settings_save_default+0x74>)
 8008a28:	2264      	movs	r2, #100	; 0x64
 8008a2a:	725a      	strb	r2, [r3, #9]
    settings_array[SETTINGS_FENCE_THRESHOLD_POS + 1] = 	(uint8_t)((uint8_t)0xFF & ((uint16_t)SETTINGS_FENCE_THRESHOLD_DEFAULT >> 8));
 8008a2c:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <settings_save_default+0x74>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	729a      	strb	r2, [r3, #10]
    
    //write to EEPROM
    m24c64_write_page(&settings_array[0], EEPROM_SETTINGS_PAGE_ADDRESS);
 8008a32:	2100      	movs	r1, #0
 8008a34:	4803      	ldr	r0, [pc, #12]	; (8008a44 <settings_save_default+0x74>)
 8008a36:	f7fa ff5f 	bl	80038f8 <m24c64_write_page>
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	200008ec 	.word	0x200008ec

08008a48 <settings_save>:



void settings_save(struct settings_struct *p_settings)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
 8008a54:	e006      	b.n	8008a64 <settings_save+0x1c>
    {
        settings_array[i] = M24C64_EMPTY_CELL_VALUE;    //clear array
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
 8008a58:	4a1d      	ldr	r2, [pc, #116]	; (8008ad0 <settings_save+0x88>)
 8008a5a:	21ff      	movs	r1, #255	; 0xff
 8008a5c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	3301      	adds	r3, #1
 8008a62:	73fb      	strb	r3, [r7, #15]
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	2b1f      	cmp	r3, #31
 8008a68:	d9f5      	bls.n	8008a56 <settings_save+0xe>
    }
    
    //assign values
    settings_array[SETTINGS_INIT_FLAG_POS] = 			SETTINGS_INIT_FLAG_DEFAULT;
 8008a6a:	4b19      	ldr	r3, [pc, #100]	; (8008ad0 <settings_save+0x88>)
 8008a6c:	22aa      	movs	r2, #170	; 0xaa
 8008a6e:	701a      	strb	r2, [r3, #0]
    settings_array[SETTINGS_DEVICE_NUMBER_POS] = 		p_settings->device_number;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	781a      	ldrb	r2, [r3, #0]
 8008a74:	4b16      	ldr	r3, [pc, #88]	; (8008ad0 <settings_save+0x88>)
 8008a76:	705a      	strb	r2, [r3, #1]
    settings_array[SETTINGS_DEVICE_ID_POS] = 			p_settings->device_id[0];
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	785a      	ldrb	r2, [r3, #1]
 8008a7c:	4b14      	ldr	r3, [pc, #80]	; (8008ad0 <settings_save+0x88>)
 8008a7e:	709a      	strb	r2, [r3, #2]
    settings_array[SETTINGS_DEVICE_ID_POS + 1] = 		p_settings->device_id[1];
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	789a      	ldrb	r2, [r3, #2]
 8008a84:	4b12      	ldr	r3, [pc, #72]	; (8008ad0 <settings_save+0x88>)
 8008a86:	70da      	strb	r2, [r3, #3]
    settings_array[SETTINGS_FREQ_CHANNEL_POS] = 		p_settings->freq_channel;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	78da      	ldrb	r2, [r3, #3]
 8008a8c:	4b10      	ldr	r3, [pc, #64]	; (8008ad0 <settings_save+0x88>)
 8008a8e:	711a      	strb	r2, [r3, #4]
    settings_array[SETTINGS_TX_POWER_POS] = 			p_settings->tx_power_opt;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	791a      	ldrb	r2, [r3, #4]
 8008a94:	4b0e      	ldr	r3, [pc, #56]	; (8008ad0 <settings_save+0x88>)
 8008a96:	715a      	strb	r2, [r3, #5]
    settings_array[SETTINGS_SEND_INTERVAL_POS] = 		p_settings->send_interval_opt;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	795a      	ldrb	r2, [r3, #5]
 8008a9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ad0 <settings_save+0x88>)
 8008a9e:	719a      	strb	r2, [r3, #6]
    settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS] = 	p_settings->timeout_threshold.as_array[0];
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	799a      	ldrb	r2, [r3, #6]
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <settings_save+0x88>)
 8008aa6:	71da      	strb	r2, [r3, #7]
    settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS + 1]= p_settings->timeout_threshold.as_array[1];
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	79da      	ldrb	r2, [r3, #7]
 8008aac:	4b08      	ldr	r3, [pc, #32]	; (8008ad0 <settings_save+0x88>)
 8008aae:	721a      	strb	r2, [r3, #8]
    settings_array[SETTINGS_FENCE_THRESHOLD_POS] = 		p_settings->fence_threshold.as_array[0];
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	7a1a      	ldrb	r2, [r3, #8]
 8008ab4:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <settings_save+0x88>)
 8008ab6:	725a      	strb	r2, [r3, #9]
    settings_array[SETTINGS_FENCE_THRESHOLD_POS + 1] = 	p_settings->fence_threshold.as_array[1];
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	7a5a      	ldrb	r2, [r3, #9]
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <settings_save+0x88>)
 8008abe:	729a      	strb	r2, [r3, #10]
    
    //write to EEPROM
    m24c64_write_page(&settings_array[0], EEPROM_SETTINGS_PAGE_ADDRESS);
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4803      	ldr	r0, [pc, #12]	; (8008ad0 <settings_save+0x88>)
 8008ac4:	f7fa ff18 	bl	80038f8 <m24c64_write_page>
}
 8008ac8:	bf00      	nop
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	200008ec 	.word	0x200008ec

08008ad4 <si4463_init>:



//SI4463 Init
void si4463_init(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b0de      	sub	sp, #376	; 0x178
 8008ad8:	af00      	add	r7, sp, #0
    cs_si4463_inactive();       //set pins initial state
 8008ada:	f7f9 f8d3 	bl	8001c84 <cs_si4463_inactive>
    sdn_si4463_inactive();
 8008ade:	f7f9 f8b9 	bl	8001c54 <sdn_si4463_inactive>
    delay_cyc(1000000);
 8008ae2:	482e      	ldr	r0, [pc, #184]	; (8008b9c <si4463_init+0xc8>)
 8008ae4:	f7ff fca0 	bl	8008428 <delay_cyc>
    
    sdn_si4463_active();        //reset the chip
 8008ae8:	f7f9 f8a8 	bl	8001c3c <sdn_si4463_active>
    delay_cyc(1000000);
 8008aec:	482b      	ldr	r0, [pc, #172]	; (8008b9c <si4463_init+0xc8>)
 8008aee:	f7ff fc9b 	bl	8008428 <delay_cyc>
    sdn_si4463_inactive();
 8008af2:	f7f9 f8af 	bl	8001c54 <sdn_si4463_inactive>
    
    uint8_t init_arr[] = RADIO_CONFIGURATION_DATA_ARRAY;    //array with init data, generated by WDS software
 8008af6:	1d3b      	adds	r3, r7, #4
 8008af8:	4a29      	ldr	r2, [pc, #164]	; (8008ba0 <si4463_init+0xcc>)
 8008afa:	4618      	mov	r0, r3
 8008afc:	4611      	mov	r1, r2
 8008afe:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8008b02:	461a      	mov	r2, r3
 8008b04:	f000 ff28 	bl	8009958 <memcpy>
    uint8_t *p_init_arr = &init_arr[0];                     //pointer to the array
 8008b08:	1d3b      	adds	r3, r7, #4
 8008b0a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    
    //Send all commands while pointer not equal 0x00 (0x00 presented in the end of the configuration array)
    while(*p_init_arr != 0x00)
 8008b0e:	e029      	b.n	8008b64 <si4463_init+0x90>
    {
        uint8_t len = *p_init_arr;      //command len (first byte of the each line in configuration array)
 8008b10:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
        p_init_arr++;                   //move pointer to the first data byte (which is next after the command len)
 8008b1a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008b1e:	3301      	adds	r3, #1
 8008b20:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
        
        si4463_wait_cts();              //check cts before any command
 8008b24:	f000 f842 	bl	8008bac <si4463_wait_cts>
        cs_si4463_active();
 8008b28:	f7f9 f8a0 	bl	8001c6c <cs_si4463_active>
        for(uint8_t i = 0; i < len; i++)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
 8008b32:	e00f      	b.n	8008b54 <si4463_init+0x80>
        {
            spi1_trx(*p_init_arr);      //send command byte
 8008b34:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fa1a 	bl	8008f74 <spi1_trx>
            p_init_arr++;               //move pointer to the next byte in command
 8008b40:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008b44:	3301      	adds	r3, #1
 8008b46:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
        for(uint8_t i = 0; i < len; i++)
 8008b4a:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8008b4e:	3301      	adds	r3, #1
 8008b50:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
 8008b54:	f897 2173 	ldrb.w	r2, [r7, #371]	; 0x173
 8008b58:	f897 3172 	ldrb.w	r3, [r7, #370]	; 0x172
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d3e9      	bcc.n	8008b34 <si4463_init+0x60>
        }
        cs_si4463_inactive();
 8008b60:	f7f9 f890 	bl	8001c84 <cs_si4463_inactive>
    while(*p_init_arr != 0x00)
 8008b64:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1d0      	bne.n	8008b10 <si4463_init+0x3c>
    }

    //Set len of the packet
    si4463_set_packet_len(AIR_PACKET_LEN);
 8008b6e:	2011      	movs	r0, #17
 8008b70:	f000 f82c 	bl	8008bcc <si4463_set_packet_len>

    //Get current settings
    p_settings = get_settings();
 8008b74:	f7ff fee0 	bl	8008938 <get_settings>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <si4463_init+0xd0>)
 8008b7c:	601a      	str	r2, [r3, #0]

    //Set TX power
    si4463_set_tx_power(tx_power_register_values[p_settings->tx_power_opt]);
 8008b7e:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <si4463_init+0xd0>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	791b      	ldrb	r3, [r3, #4]
 8008b84:	461a      	mov	r2, r3
 8008b86:	4b08      	ldr	r3, [pc, #32]	; (8008ba8 <si4463_init+0xd4>)
 8008b88:	5c9b      	ldrb	r3, [r3, r2]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f840 	bl	8008c10 <si4463_set_tx_power>
}
 8008b90:	bf00      	nop
 8008b92:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	000f4240 	.word	0x000f4240
 8008ba0:	0800cdd4 	.word	0x0800cdd4
 8008ba4:	2000061c 	.word	0x2000061c
 8008ba8:	2000005c 	.word	0x2000005c

08008bac <si4463_wait_cts>:



//Wait for hardware CTS pin
void si4463_wait_cts(void)
{
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0
    while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}      //while GPIO1 = 0
 8008bb0:	bf00      	nop
 8008bb2:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <si4463_wait_cts+0x1c>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0f9      	beq.n	8008bb2 <si4463_wait_cts+0x6>
}
 8008bbe:	bf00      	nop
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40010800 	.word	0x40010800

08008bcc <si4463_set_packet_len>:



//Set air packet length
void si4463_set_packet_len(uint8_t packet_len)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	71fb      	strb	r3, [r7, #7]
    si4463_wait_cts();
 8008bd6:	f7ff ffe9 	bl	8008bac <si4463_wait_cts>
    cs_si4463_active();
 8008bda:	f7f9 f847 	bl	8001c6c <cs_si4463_active>
    spi1_trx(SI4463_CMD_SET_PROPERTY);
 8008bde:	2011      	movs	r0, #17
 8008be0:	f000 f9c8 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_PKT_FIELD_1_LENGTH_GROUP_ID);
 8008be4:	2012      	movs	r0, #18
 8008be6:	f000 f9c5 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_PKT_FIELD_1_LENGTH_NUM_PROPS);
 8008bea:	2002      	movs	r0, #2
 8008bec:	f000 f9c2 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_PKT_FIELD_1_LENGTH_START_PROP);
 8008bf0:	200d      	movs	r0, #13
 8008bf2:	f000 f9bf 	bl	8008f74 <spi1_trx>
    spi1_trx(0x00);                 //packet len high byte
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	f000 f9bc 	bl	8008f74 <spi1_trx>
    spi1_trx(packet_len);           //packet len low byte
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 f9b8 	bl	8008f74 <spi1_trx>
    cs_si4463_inactive();
 8008c04:	f7f9 f83e 	bl	8001c84 <cs_si4463_inactive>
}
 8008c08:	bf00      	nop
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <si4463_set_tx_power>:



void si4463_set_tx_power(uint8_t tx_pow_reg_val)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	71fb      	strb	r3, [r7, #7]
    si4463_wait_cts();
 8008c1a:	f7ff ffc7 	bl	8008bac <si4463_wait_cts>
    cs_si4463_active();
 8008c1e:	f7f9 f825 	bl	8001c6c <cs_si4463_active>
    spi1_trx(SI4463_CMD_SET_PROPERTY);
 8008c22:	2011      	movs	r0, #17
 8008c24:	f000 f9a6 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_PA_PWR_LVL_GROUP_ID);
 8008c28:	2022      	movs	r0, #34	; 0x22
 8008c2a:	f000 f9a3 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_PA_PWR_LVL_NUM_PROPS);
 8008c2e:	2001      	movs	r0, #1
 8008c30:	f000 f9a0 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_PA_PWR_LVL_START_PROP);
 8008c34:	2001      	movs	r0, #1
 8008c36:	f000 f99d 	bl	8008f74 <spi1_trx>
    spi1_trx(tx_pow_reg_val);
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 f999 	bl	8008f74 <spi1_trx>
    cs_si4463_inactive();
 8008c42:	f7f9 f81f 	bl	8001c84 <cs_si4463_inactive>
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <si4463_tx_packet>:



//SI4463 TX packet
void si4463_tx_packet(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
    //reset TX FIFO
    si4463_wait_cts();
 8008c56:	f7ff ffa9 	bl	8008bac <si4463_wait_cts>
    cs_si4463_active();
 8008c5a:	f7f9 f807 	bl	8001c6c <cs_si4463_active>
    spi1_trx(SI4463_CMD_FIFO_INFO);
 8008c5e:	2015      	movs	r0, #21
 8008c60:	f000 f988 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_FIFO_INFO_TX_BIT);
 8008c64:	2001      	movs	r0, #1
 8008c66:	f000 f985 	bl	8008f74 <spi1_trx>
    cs_si4463_inactive();
 8008c6a:	f7f9 f80b 	bl	8001c84 <cs_si4463_inactive>
    
    //fill TX FIFO buffer
    si4463_wait_cts();
 8008c6e:	f7ff ff9d 	bl	8008bac <si4463_wait_cts>
    cs_si4463_active();
 8008c72:	f7f8 fffb 	bl	8001c6c <cs_si4463_active>
    spi1_trx(SI4463_CMD_WRITE_TX_FIFO);
 8008c76:	2066      	movs	r0, #102	; 0x66
 8008c78:	f000 f97c 	bl	8008f74 <spi1_trx>
    for (uint8_t i = 0; i < AIR_PACKET_LEN; i++)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	71fb      	strb	r3, [r7, #7]
 8008c80:	e008      	b.n	8008c94 <si4463_tx_packet+0x44>
    {
        spi1_trx(air_packet_tx[i]);
 8008c82:	79fb      	ldrb	r3, [r7, #7]
 8008c84:	4a14      	ldr	r2, [pc, #80]	; (8008cd8 <si4463_tx_packet+0x88>)
 8008c86:	5cd3      	ldrb	r3, [r2, r3]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 f973 	bl	8008f74 <spi1_trx>
    for (uint8_t i = 0; i < AIR_PACKET_LEN; i++)
 8008c8e:	79fb      	ldrb	r3, [r7, #7]
 8008c90:	3301      	adds	r3, #1
 8008c92:	71fb      	strb	r3, [r7, #7]
 8008c94:	79fb      	ldrb	r3, [r7, #7]
 8008c96:	2b10      	cmp	r3, #16
 8008c98:	d9f3      	bls.n	8008c82 <si4463_tx_packet+0x32>
    }
    cs_si4463_inactive();
 8008c9a:	f7f8 fff3 	bl	8001c84 <cs_si4463_inactive>
    
    //start TX
    si4463_wait_cts();
 8008c9e:	f7ff ff85 	bl	8008bac <si4463_wait_cts>
    cs_si4463_active();
 8008ca2:	f7f8 ffe3 	bl	8001c6c <cs_si4463_active>
    spi1_trx(SI4463_CMD_START_TX);
 8008ca6:	2031      	movs	r0, #49	; 0x31
 8008ca8:	f000 f964 	bl	8008f74 <spi1_trx>
    spi1_trx(p_settings->freq_channel);                 //frequency channel
 8008cac:	4b0b      	ldr	r3, [pc, #44]	; (8008cdc <si4463_tx_packet+0x8c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	78db      	ldrb	r3, [r3, #3]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 f95e 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_SLEEP_STATE << 4);                  //return to sleep state, send FIFO content, start TX immediately
 8008cb8:	2010      	movs	r0, #16
 8008cba:	f000 f95b 	bl	8008f74 <spi1_trx>
    spi1_trx(0x00);                                     //the number of data bytes to be transmitted
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	f000 f958 	bl	8008f74 <spi1_trx>
    spi1_trx(0x00);                                     //is specified by the value(s) of the PKT_FIELD_X_LENGTH properties
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	f000 f955 	bl	8008f74 <spi1_trx>
    cs_si4463_inactive();
 8008cca:	f7f8 ffdb 	bl	8001c84 <cs_si4463_inactive>
}
 8008cce:	bf00      	nop
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000920 	.word	0x20000920
 8008cdc:	2000061c 	.word	0x2000061c

08008ce0 <si4463_start_rx>:



//SI4463 start packet RX
void si4463_start_rx(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
    si4463_wait_cts();
 8008ce4:	f7ff ff62 	bl	8008bac <si4463_wait_cts>
    cs_si4463_active();
 8008ce8:	f7f8 ffc0 	bl	8001c6c <cs_si4463_active>
    spi1_trx(SI4463_CMD_START_RX);
 8008cec:	2032      	movs	r0, #50	; 0x32
 8008cee:	f000 f941 	bl	8008f74 <spi1_trx>
    spi1_trx(p_settings->freq_channel);                 //frequency channel
 8008cf2:	4b0e      	ldr	r3, [pc, #56]	; (8008d2c <si4463_start_rx+0x4c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	78db      	ldrb	r3, [r3, #3]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 f93b 	bl	8008f74 <spi1_trx>
    spi1_trx(0x00);                                     //start RX immediately
 8008cfe:	2000      	movs	r0, #0
 8008d00:	f000 f938 	bl	8008f74 <spi1_trx>
    spi1_trx(0x00);                                     //RX packet len is specified
 8008d04:	2000      	movs	r0, #0
 8008d06:	f000 f935 	bl	8008f74 <spi1_trx>
    spi1_trx(0x00);                                     //in packet handler configuration
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	f000 f932 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_SLEEP_STATE);                       //if RX timeout then go to sleep (after RX_PREAMBLE_TIMEOUT)
 8008d10:	2001      	movs	r0, #1
 8008d12:	f000 f92f 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_SLEEP_STATE);                       //if RX valid then go to sleep
 8008d16:	2001      	movs	r0, #1
 8008d18:	f000 f92c 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_SLEEP_STATE);                       //if RX invalid then go to sleep
 8008d1c:	2001      	movs	r0, #1
 8008d1e:	f000 f929 	bl	8008f74 <spi1_trx>
    cs_si4463_inactive();
 8008d22:	f7f8 ffaf 	bl	8001c84 <cs_si4463_inactive>
}
 8008d26:	bf00      	nop
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	2000061c 	.word	0x2000061c

08008d30 <si4463_get_rx_packet>:



//SI4463 get received packet
uint8_t si4463_get_rx_packet(void)
{
 8008d30:	b590      	push	{r4, r7, lr}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
    uint8_t ph_pending = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	71bb      	strb	r3, [r7, #6]
    
    //send get PH status command
    si4463_wait_cts();
 8008d3a:	f7ff ff37 	bl	8008bac <si4463_wait_cts>
    cs_si4463_active();
 8008d3e:	f7f8 ff95 	bl	8001c6c <cs_si4463_active>
    spi1_trx(SI4463_CMD_GET_PH_STATUS);
 8008d42:	2021      	movs	r0, #33	; 0x21
 8008d44:	f000 f916 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_BYTE_DUMMY);                //also clear all pending interrupts
 8008d48:	2000      	movs	r0, #0
 8008d4a:	f000 f913 	bl	8008f74 <spi1_trx>
    cs_si4463_inactive();
 8008d4e:	f7f8 ff99 	bl	8001c84 <cs_si4463_inactive>
    
    //retrieve response
    si4463_wait_cts();
 8008d52:	f7ff ff2b 	bl	8008bac <si4463_wait_cts>
    cs_si4463_active();
 8008d56:	f7f8 ff89 	bl	8001c6c <cs_si4463_active>
    spi1_trx(SI4463_CMD_READ_CMD_BUF);
 8008d5a:	2044      	movs	r0, #68	; 0x44
 8008d5c:	f000 f90a 	bl	8008f74 <spi1_trx>
    spi1_trx(SI4463_BYTE_DUMMY);                //skip CTS byte
 8008d60:	2000      	movs	r0, #0
 8008d62:	f000 f907 	bl	8008f74 <spi1_trx>
    ph_pending = spi1_trx(SI4463_BYTE_DUMMY);
 8008d66:	2000      	movs	r0, #0
 8008d68:	f000 f904 	bl	8008f74 <spi1_trx>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	71bb      	strb	r3, [r7, #6]
    cs_si4463_inactive();
 8008d70:	f7f8 ff88 	bl	8001c84 <cs_si4463_inactive>
    
    if (ph_pending & SI4463_PH_PEND_CRC_ERROR_BIT)
 8008d74:	79bb      	ldrb	r3, [r7, #6]
 8008d76:	f003 0308 	and.w	r3, r3, #8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d019      	beq.n	8008db2 <si4463_get_rx_packet+0x82>
    {
        si4463_wait_cts();                      //clear RX FIFO content
 8008d7e:	f7ff ff15 	bl	8008bac <si4463_wait_cts>
        cs_si4463_active();
 8008d82:	f7f8 ff73 	bl	8001c6c <cs_si4463_active>
        spi1_trx(SI4463_CMD_FIFO_INFO);
 8008d86:	2015      	movs	r0, #21
 8008d88:	f000 f8f4 	bl	8008f74 <spi1_trx>
        spi1_trx(SI4463_FIFO_INFO_RX_BIT);
 8008d8c:	2002      	movs	r0, #2
 8008d8e:	f000 f8f1 	bl	8008f74 <spi1_trx>
        cs_si4463_inactive();
 8008d92:	f7f8 ff77 	bl	8001c84 <cs_si4463_inactive>
        
        si4463_wait_cts();                      //workaround if received packet has CRC error (see si4463 revB1 errata)
 8008d96:	f7ff ff09 	bl	8008bac <si4463_wait_cts>
        cs_si4463_active();
 8008d9a:	f7f8 ff67 	bl	8001c6c <cs_si4463_active>
        spi1_trx(SI4463_CMD_CHANGE_STATE);
 8008d9e:	2034      	movs	r0, #52	; 0x34
 8008da0:	f000 f8e8 	bl	8008f74 <spi1_trx>
        spi1_trx(SI4463_SLEEP_STATE);
 8008da4:	2001      	movs	r0, #1
 8008da6:	f000 f8e5 	bl	8008f74 <spi1_trx>
        cs_si4463_inactive();
 8008daa:	f7f8 ff6b 	bl	8001c84 <cs_si4463_inactive>
        
        return 0;
 8008dae:	2300      	movs	r3, #0
 8008db0:	e021      	b.n	8008df6 <si4463_get_rx_packet+0xc6>
    }
    else if (ph_pending & SI4463_PH_PEND_PACKET_RX_BIT)
 8008db2:	79bb      	ldrb	r3, [r7, #6]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01b      	beq.n	8008df4 <si4463_get_rx_packet+0xc4>
    {
        //read RX FIFO buffer
        si4463_wait_cts();
 8008dbc:	f7ff fef6 	bl	8008bac <si4463_wait_cts>
        cs_si4463_active();
 8008dc0:	f7f8 ff54 	bl	8001c6c <cs_si4463_active>
        spi1_trx(SI4463_CMD_READ_RX_FIFO);
 8008dc4:	2077      	movs	r0, #119	; 0x77
 8008dc6:	f000 f8d5 	bl	8008f74 <spi1_trx>
        for (uint8_t i = 0; i < AIR_PACKET_LEN; i++)
 8008dca:	2300      	movs	r3, #0
 8008dcc:	71fb      	strb	r3, [r7, #7]
 8008dce:	e00a      	b.n	8008de6 <si4463_get_rx_packet+0xb6>
        {
        	air_packet_rx[i] = spi1_trx(SI4463_BYTE_DUMMY);
 8008dd0:	79fc      	ldrb	r4, [r7, #7]
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	f000 f8ce 	bl	8008f74 <spi1_trx>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	4b08      	ldr	r3, [pc, #32]	; (8008e00 <si4463_get_rx_packet+0xd0>)
 8008dde:	551a      	strb	r2, [r3, r4]
        for (uint8_t i = 0; i < AIR_PACKET_LEN; i++)
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	3301      	adds	r3, #1
 8008de4:	71fb      	strb	r3, [r7, #7]
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	2b10      	cmp	r3, #16
 8008dea:	d9f1      	bls.n	8008dd0 <si4463_get_rx_packet+0xa0>
        }
        cs_si4463_inactive();
 8008dec:	f7f8 ff4a 	bl	8001c84 <cs_si4463_inactive>
        
        return 1;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e000      	b.n	8008df6 <si4463_get_rx_packet+0xc6>
    }
    else
    {
        return 0;
 8008df4:	2300      	movs	r3, #0
    }
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd90      	pop	{r4, r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	2000090c 	.word	0x2000090c

08008e04 <get_air_packet_tx>:



uint8_t *get_air_packet_tx(void)
{
 8008e04:	b480      	push	{r7}
 8008e06:	af00      	add	r7, sp, #0
	return &air_packet_tx[0];
 8008e08:	4b02      	ldr	r3, [pc, #8]	; (8008e14 <get_air_packet_tx+0x10>)
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bc80      	pop	{r7}
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	20000920 	.word	0x20000920

08008e18 <get_air_packet_rx>:



uint8_t *get_air_packet_rx(void)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	af00      	add	r7, sp, #0
	return &air_packet_rx[0];
 8008e1c:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <get_air_packet_rx+0x10>)
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	2000090c 	.word	0x2000090c

08008e2c <spi1_init>:



//Init SPI1
void spi1_init(void)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;             //enable clock spi1
 8008e30:	4b29      	ldr	r3, [pc, #164]	; (8008ed8 <spi1_init+0xac>)
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	4a28      	ldr	r2, [pc, #160]	; (8008ed8 <spi1_init+0xac>)
 8008e36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e3a:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;             //enable alternate function clock
 8008e3c:	4b26      	ldr	r3, [pc, #152]	; (8008ed8 <spi1_init+0xac>)
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	4a25      	ldr	r2, [pc, #148]	; (8008ed8 <spi1_init+0xac>)
 8008e42:	f043 0301 	orr.w	r3, r3, #1
 8008e46:	6193      	str	r3, [r2, #24]
    AFIO->MAPR |= AFIO_MAPR_SPI1_REMAP;             //remap spi
 8008e48:	4b24      	ldr	r3, [pc, #144]	; (8008edc <spi1_init+0xb0>)
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	4a23      	ldr	r2, [pc, #140]	; (8008edc <spi1_init+0xb0>)
 8008e4e:	f043 0301 	orr.w	r3, r3, #1
 8008e52:	6053      	str	r3, [r2, #4]
    AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;    //disable JTAG
 8008e54:	4b21      	ldr	r3, [pc, #132]	; (8008edc <spi1_init+0xb0>)
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	4a20      	ldr	r2, [pc, #128]	; (8008edc <spi1_init+0xb0>)
 8008e5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e5e:	6053      	str	r3, [r2, #4]
    SPI1->CR1 &= ~SPI_CR1_BR;                       //clock/2
 8008e60:	4b1f      	ldr	r3, [pc, #124]	; (8008ee0 <spi1_init+0xb4>)
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	4a1e      	ldr	r2, [pc, #120]	; (8008ee0 <spi1_init+0xb4>)
 8008e68:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SSM;
 8008e70:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <spi1_init+0xb4>)
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	4a1a      	ldr	r2, [pc, #104]	; (8008ee0 <spi1_init+0xb4>)
 8008e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SSI;
 8008e80:	4b17      	ldr	r3, [pc, #92]	; (8008ee0 <spi1_init+0xb4>)
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	4a16      	ldr	r2, [pc, #88]	; (8008ee0 <spi1_init+0xb4>)
 8008e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_MSTR;                      //master mode
 8008e90:	4b13      	ldr	r3, [pc, #76]	; (8008ee0 <spi1_init+0xb4>)
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	4a12      	ldr	r2, [pc, #72]	; (8008ee0 <spi1_init+0xb4>)
 8008e98:	f043 0304 	orr.w	r3, r3, #4
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_CPOL;                     //SCK = 0 in IDLE
 8008ea0:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <spi1_init+0xb4>)
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	4a0e      	ldr	r2, [pc, #56]	; (8008ee0 <spi1_init+0xb4>)
 8008ea8:	f023 0302 	bic.w	r3, r3, #2
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_CPHA;                     //first rising edge capture
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <spi1_init+0xb4>)
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	4a0a      	ldr	r2, [pc, #40]	; (8008ee0 <spi1_init+0xb4>)
 8008eb8:	f023 0301 	bic.w	r3, r3, #1
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SPE;                       //enable spi
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <spi1_init+0xb4>)
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	4a06      	ldr	r2, [pc, #24]	; (8008ee0 <spi1_init+0xb4>)
 8008ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	8013      	strh	r3, [r2, #0]
}
 8008ed0:	bf00      	nop
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr
 8008ed8:	40021000 	.word	0x40021000
 8008edc:	40010000 	.word	0x40010000
 8008ee0:	40013000 	.word	0x40013000

08008ee4 <spi2_init>:



//Init SPI2
void spi2_init(void)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;     //enable clock spi2
 8008ee8:	4b20      	ldr	r3, [pc, #128]	; (8008f6c <spi2_init+0x88>)
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <spi2_init+0x88>)
 8008eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ef2:	61d3      	str	r3, [r2, #28]
    SPI2->CR1 &= ~SPI_CR1_BR;               //clock/2
 8008ef4:	4b1e      	ldr	r3, [pc, #120]	; (8008f70 <spi2_init+0x8c>)
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	4a1d      	ldr	r2, [pc, #116]	; (8008f70 <spi2_init+0x8c>)
 8008efc:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_SSM;
 8008f04:	4b1a      	ldr	r3, [pc, #104]	; (8008f70 <spi2_init+0x8c>)
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4a19      	ldr	r2, [pc, #100]	; (8008f70 <spi2_init+0x8c>)
 8008f0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_SSI;
 8008f14:	4b16      	ldr	r3, [pc, #88]	; (8008f70 <spi2_init+0x8c>)
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	4a15      	ldr	r2, [pc, #84]	; (8008f70 <spi2_init+0x8c>)
 8008f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_MSTR;              //master mode
 8008f24:	4b12      	ldr	r3, [pc, #72]	; (8008f70 <spi2_init+0x8c>)
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	4a11      	ldr	r2, [pc, #68]	; (8008f70 <spi2_init+0x8c>)
 8008f2c:	f043 0304 	orr.w	r3, r3, #4
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 &= ~SPI_CR1_CPOL;             //SCK = 0 in IDLE
 8008f34:	4b0e      	ldr	r3, [pc, #56]	; (8008f70 <spi2_init+0x8c>)
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	4a0d      	ldr	r2, [pc, #52]	; (8008f70 <spi2_init+0x8c>)
 8008f3c:	f023 0302 	bic.w	r3, r3, #2
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 &= ~SPI_CR1_CPHA;             //first rising edge capture
 8008f44:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <spi2_init+0x8c>)
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	4a09      	ldr	r2, [pc, #36]	; (8008f70 <spi2_init+0x8c>)
 8008f4c:	f023 0301 	bic.w	r3, r3, #1
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_SPE;               //enable spi
 8008f54:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <spi2_init+0x8c>)
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	4a05      	ldr	r2, [pc, #20]	; (8008f70 <spi2_init+0x8c>)
 8008f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	8013      	strh	r3, [r2, #0]
}
 8008f64:	bf00      	nop
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bc80      	pop	{r7}
 8008f6a:	4770      	bx	lr
 8008f6c:	40021000 	.word	0x40021000
 8008f70:	40003800 	.word	0x40003800

08008f74 <spi1_trx>:



//TRX one byte via SPI1
uint8_t spi1_trx(uint8_t send_data)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	71fb      	strb	r3, [r7, #7]
    while(!(SPI1->SR & SPI_SR_TXE)){}       //while TXE bit = 0
 8008f7e:	bf00      	nop
 8008f80:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <spi1_trx+0x44>)
 8008f82:	891b      	ldrh	r3, [r3, #8]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d0f8      	beq.n	8008f80 <spi1_trx+0xc>
    SPI1->DR = send_data;
 8008f8e:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <spi1_trx+0x44>)
 8008f90:	79fa      	ldrb	r2, [r7, #7]
 8008f92:	b292      	uxth	r2, r2
 8008f94:	819a      	strh	r2, [r3, #12]
    
    while(!(SPI1->SR & SPI_SR_RXNE)){}      //while RXNE = 0
 8008f96:	bf00      	nop
 8008f98:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <spi1_trx+0x44>)
 8008f9a:	891b      	ldrh	r3, [r3, #8]
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0f8      	beq.n	8008f98 <spi1_trx+0x24>
    return SPI1->DR;
 8008fa6:	4b04      	ldr	r3, [pc, #16]	; (8008fb8 <spi1_trx+0x44>)
 8008fa8:	899b      	ldrh	r3, [r3, #12]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	b2db      	uxtb	r3, r3
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bc80      	pop	{r7}
 8008fb6:	4770      	bx	lr
 8008fb8:	40013000 	.word	0x40013000

08008fbc <spi2_trx>:



//TRX one byte via SPI2
uint8_t spi2_trx(uint8_t send_data)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	71fb      	strb	r3, [r7, #7]
    while (!(SPI2->SR & SPI_SR_TXE)){}      //while TXE bit = 0
 8008fc6:	bf00      	nop
 8008fc8:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <spi2_trx+0x44>)
 8008fca:	891b      	ldrh	r3, [r3, #8]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0f8      	beq.n	8008fc8 <spi2_trx+0xc>
    SPI2->DR = send_data;
 8008fd6:	4b0a      	ldr	r3, [pc, #40]	; (8009000 <spi2_trx+0x44>)
 8008fd8:	79fa      	ldrb	r2, [r7, #7]
 8008fda:	b292      	uxth	r2, r2
 8008fdc:	819a      	strh	r2, [r3, #12]
    
    while (!(SPI2->SR & SPI_SR_RXNE)){}     //while RXNE = 0
 8008fde:	bf00      	nop
 8008fe0:	4b07      	ldr	r3, [pc, #28]	; (8009000 <spi2_trx+0x44>)
 8008fe2:	891b      	ldrh	r3, [r3, #8]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0f8      	beq.n	8008fe0 <spi2_trx+0x24>
    return  SPI2->DR;
 8008fee:	4b04      	ldr	r3, [pc, #16]	; (8009000 <spi2_trx+0x44>)
 8008ff0:	899b      	ldrh	r3, [r3, #12]
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	b2db      	uxtb	r3, r3
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bc80      	pop	{r7}
 8008ffe:	4770      	bx	lr
 8009000:	40003800 	.word	0x40003800

08009004 <ssd1306_init>:



//SSD1306 Init
void ssd1306_init(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
    cs_ssd1306_inactive();      //ports init state
 800900a:	f7f8 fe83 	bl	8001d14 <cs_ssd1306_inactive>
    res_ssd1306_inactive();
 800900e:	f7f8 fe51 	bl	8001cb4 <res_ssd1306_inactive>
    ssd1306_command_mode();
 8009012:	f7f8 fe67 	bl	8001ce4 <ssd1306_command_mode>
    delay_cyc(100000);
 8009016:	481c      	ldr	r0, [pc, #112]	; (8009088 <ssd1306_init+0x84>)
 8009018:	f7ff fa06 	bl	8008428 <delay_cyc>
    
    res_ssd1306_active();       //reset ssd1306
 800901c:	f7f8 fe3e 	bl	8001c9c <res_ssd1306_active>
    delay_cyc(100000);
 8009020:	4819      	ldr	r0, [pc, #100]	; (8009088 <ssd1306_init+0x84>)
 8009022:	f7ff fa01 	bl	8008428 <delay_cyc>
    res_ssd1306_inactive();
 8009026:	f7f8 fe45 	bl	8001cb4 <res_ssd1306_inactive>
    delay_cyc(100000);
 800902a:	4817      	ldr	r0, [pc, #92]	; (8009088 <ssd1306_init+0x84>)
 800902c:	f7ff f9fc 	bl	8008428 <delay_cyc>
    
    uint8_t i = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	71fb      	strb	r3, [r7, #7]
    uint8_t len = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	71bb      	strb	r3, [r7, #6]
    while (ssd1306_conf[i] != 0x00)
 8009038:	e019      	b.n	800906e <ssd1306_init+0x6a>
    {
        len = ssd1306_conf[i++];
 800903a:	79fb      	ldrb	r3, [r7, #7]
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	71fa      	strb	r2, [r7, #7]
 8009040:	461a      	mov	r2, r3
 8009042:	4b12      	ldr	r3, [pc, #72]	; (800908c <ssd1306_init+0x88>)
 8009044:	5c9b      	ldrb	r3, [r3, r2]
 8009046:	71bb      	strb	r3, [r7, #6]
        
        cs_ssd1306_active();
 8009048:	f7f8 fe58 	bl	8001cfc <cs_ssd1306_active>
        while (len--)
 800904c:	e008      	b.n	8009060 <ssd1306_init+0x5c>
        {
            spi2_trx(ssd1306_conf[i++]);
 800904e:	79fb      	ldrb	r3, [r7, #7]
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	71fa      	strb	r2, [r7, #7]
 8009054:	461a      	mov	r2, r3
 8009056:	4b0d      	ldr	r3, [pc, #52]	; (800908c <ssd1306_init+0x88>)
 8009058:	5c9b      	ldrb	r3, [r3, r2]
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff ffae 	bl	8008fbc <spi2_trx>
        while (len--)
 8009060:	79bb      	ldrb	r3, [r7, #6]
 8009062:	1e5a      	subs	r2, r3, #1
 8009064:	71ba      	strb	r2, [r7, #6]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1f1      	bne.n	800904e <ssd1306_init+0x4a>
        }
        cs_ssd1306_inactive();
 800906a:	f7f8 fe53 	bl	8001d14 <cs_ssd1306_inactive>
    while (ssd1306_conf[i] != 0x00)
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	4a06      	ldr	r2, [pc, #24]	; (800908c <ssd1306_init+0x88>)
 8009072:	5cd3      	ldrb	r3, [r2, r3]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1e0      	bne.n	800903a <ssd1306_init+0x36>
    }
    
    ssd1306_clear();
 8009078:	f000 f82a 	bl	80090d0 <ssd1306_clear>
    ssd1306_update();
 800907c:	f000 f808 	bl	8009090 <ssd1306_update>
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	000186a0 	.word	0x000186a0
 800908c:	0800d538 	.word	0x0800d538

08009090 <ssd1306_update>:



//Update screen with buffer content
void ssd1306_update(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
    ssd1306_data_mode();
 8009096:	f7f8 fe19 	bl	8001ccc <ssd1306_data_mode>
    cs_ssd1306_active();
 800909a:	f7f8 fe2f 	bl	8001cfc <cs_ssd1306_active>
    for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 800909e:	2300      	movs	r3, #0
 80090a0:	80fb      	strh	r3, [r7, #6]
 80090a2:	e008      	b.n	80090b6 <ssd1306_update+0x26>
    {
        spi2_trx(screen_buf[i]);
 80090a4:	88fb      	ldrh	r3, [r7, #6]
 80090a6:	4a09      	ldr	r2, [pc, #36]	; (80090cc <ssd1306_update+0x3c>)
 80090a8:	5cd3      	ldrb	r3, [r2, r3]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff ff86 	bl	8008fbc <spi2_trx>
    for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	3301      	adds	r3, #1
 80090b4:	80fb      	strh	r3, [r7, #6]
 80090b6:	88fb      	ldrh	r3, [r7, #6]
 80090b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090bc:	d3f2      	bcc.n	80090a4 <ssd1306_update+0x14>
    }
    cs_ssd1306_inactive();
 80090be:	f7f8 fe29 	bl	8001d14 <cs_ssd1306_inactive>
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20000934 	.word	0x20000934

080090d0 <ssd1306_clear>:



//Clear all screen pixels
void ssd1306_clear(void)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 80090d6:	2300      	movs	r3, #0
 80090d8:	80fb      	strh	r3, [r7, #6]
 80090da:	e006      	b.n	80090ea <ssd1306_clear+0x1a>
    {
        screen_buf[i] = 0x00;
 80090dc:	88fb      	ldrh	r3, [r7, #6]
 80090de:	4a07      	ldr	r2, [pc, #28]	; (80090fc <ssd1306_clear+0x2c>)
 80090e0:	2100      	movs	r1, #0
 80090e2:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 80090e4:	88fb      	ldrh	r3, [r7, #6]
 80090e6:	3301      	adds	r3, #1
 80090e8:	80fb      	strh	r3, [r7, #6]
 80090ea:	88fb      	ldrh	r3, [r7, #6]
 80090ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090f0:	d3f4      	bcc.n	80090dc <ssd1306_clear+0xc>
    }
}
 80090f2:	bf00      	nop
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bc80      	pop	{r7}
 80090fa:	4770      	bx	lr
 80090fc:	20000934 	.word	0x20000934

08009100 <ssd1306_pixel>:



//Clear, Set or Reset any pixel on the screen (x 0-127, y 0-63)
void ssd1306_pixel(uint8_t x, uint8_t y, int8_t action)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	71fb      	strb	r3, [r7, #7]
 800910a:	460b      	mov	r3, r1
 800910c:	71bb      	strb	r3, [r7, #6]
 800910e:	4613      	mov	r3, r2
 8009110:	717b      	strb	r3, [r7, #5]
    switch (action)
 8009112:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d002      	beq.n	8009120 <ssd1306_pixel+0x20>
 800911a:	2b01      	cmp	r3, #1
 800911c:	d01d      	beq.n	800915a <ssd1306_pixel+0x5a>
 800911e:	e037      	b.n	8009190 <ssd1306_pixel+0x90>
    {
        case 0:     //clear pixel
            screen_buf[x + (y / 8) * LCD_SIZE_X] &= ~(1 << (y % 8));
 8009120:	79fa      	ldrb	r2, [r7, #7]
 8009122:	79bb      	ldrb	r3, [r7, #6]
 8009124:	08db      	lsrs	r3, r3, #3
 8009126:	b2d8      	uxtb	r0, r3
 8009128:	4603      	mov	r3, r0
 800912a:	01db      	lsls	r3, r3, #7
 800912c:	4413      	add	r3, r2
 800912e:	4a28      	ldr	r2, [pc, #160]	; (80091d0 <ssd1306_pixel+0xd0>)
 8009130:	5cd3      	ldrb	r3, [r2, r3]
 8009132:	b25a      	sxtb	r2, r3
 8009134:	79bb      	ldrb	r3, [r7, #6]
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	2101      	movs	r1, #1
 800913c:	fa01 f303 	lsl.w	r3, r1, r3
 8009140:	b25b      	sxtb	r3, r3
 8009142:	43db      	mvns	r3, r3
 8009144:	b25b      	sxtb	r3, r3
 8009146:	4013      	ands	r3, r2
 8009148:	b259      	sxtb	r1, r3
 800914a:	79fa      	ldrb	r2, [r7, #7]
 800914c:	4603      	mov	r3, r0
 800914e:	01db      	lsls	r3, r3, #7
 8009150:	4413      	add	r3, r2
 8009152:	b2c9      	uxtb	r1, r1
 8009154:	4a1e      	ldr	r2, [pc, #120]	; (80091d0 <ssd1306_pixel+0xd0>)
 8009156:	54d1      	strb	r1, [r2, r3]
            break;
 8009158:	e035      	b.n	80091c6 <ssd1306_pixel+0xc6>
        case 1:     //set pixel
            screen_buf[x + (y / 8) * LCD_SIZE_X] |= 1 << (y % 8);
 800915a:	79fa      	ldrb	r2, [r7, #7]
 800915c:	79bb      	ldrb	r3, [r7, #6]
 800915e:	08db      	lsrs	r3, r3, #3
 8009160:	b2d8      	uxtb	r0, r3
 8009162:	4603      	mov	r3, r0
 8009164:	01db      	lsls	r3, r3, #7
 8009166:	4413      	add	r3, r2
 8009168:	4a19      	ldr	r2, [pc, #100]	; (80091d0 <ssd1306_pixel+0xd0>)
 800916a:	5cd3      	ldrb	r3, [r2, r3]
 800916c:	b25a      	sxtb	r2, r3
 800916e:	79bb      	ldrb	r3, [r7, #6]
 8009170:	f003 0307 	and.w	r3, r3, #7
 8009174:	2101      	movs	r1, #1
 8009176:	fa01 f303 	lsl.w	r3, r1, r3
 800917a:	b25b      	sxtb	r3, r3
 800917c:	4313      	orrs	r3, r2
 800917e:	b259      	sxtb	r1, r3
 8009180:	79fa      	ldrb	r2, [r7, #7]
 8009182:	4603      	mov	r3, r0
 8009184:	01db      	lsls	r3, r3, #7
 8009186:	4413      	add	r3, r2
 8009188:	b2c9      	uxtb	r1, r1
 800918a:	4a11      	ldr	r2, [pc, #68]	; (80091d0 <ssd1306_pixel+0xd0>)
 800918c:	54d1      	strb	r1, [r2, r3]
            break;
 800918e:	e01a      	b.n	80091c6 <ssd1306_pixel+0xc6>
        default:    //invert pixel
            screen_buf[x + (y / 8) * LCD_SIZE_X] ^= 1 << (y % 8);
 8009190:	79fa      	ldrb	r2, [r7, #7]
 8009192:	79bb      	ldrb	r3, [r7, #6]
 8009194:	08db      	lsrs	r3, r3, #3
 8009196:	b2d8      	uxtb	r0, r3
 8009198:	4603      	mov	r3, r0
 800919a:	01db      	lsls	r3, r3, #7
 800919c:	4413      	add	r3, r2
 800919e:	4a0c      	ldr	r2, [pc, #48]	; (80091d0 <ssd1306_pixel+0xd0>)
 80091a0:	5cd3      	ldrb	r3, [r2, r3]
 80091a2:	b25a      	sxtb	r2, r3
 80091a4:	79bb      	ldrb	r3, [r7, #6]
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	2101      	movs	r1, #1
 80091ac:	fa01 f303 	lsl.w	r3, r1, r3
 80091b0:	b25b      	sxtb	r3, r3
 80091b2:	4053      	eors	r3, r2
 80091b4:	b259      	sxtb	r1, r3
 80091b6:	79fa      	ldrb	r2, [r7, #7]
 80091b8:	4603      	mov	r3, r0
 80091ba:	01db      	lsls	r3, r3, #7
 80091bc:	4413      	add	r3, r2
 80091be:	b2c9      	uxtb	r1, r1
 80091c0:	4a03      	ldr	r2, [pc, #12]	; (80091d0 <ssd1306_pixel+0xd0>)
 80091c2:	54d1      	strb	r1, [r2, r3]
            break;
 80091c4:	bf00      	nop
    }
}
 80091c6:	bf00      	nop
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bc80      	pop	{r7}
 80091ce:	4770      	bx	lr
 80091d0:	20000934 	.word	0x20000934

080091d4 <ssd1306_pos>:



//Set character position on screen (rows 0-7, cols 0-20)
void ssd1306_pos(uint8_t row, uint8_t col)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	460a      	mov	r2, r1
 80091de:	71fb      	strb	r3, [r7, #7]
 80091e0:	4613      	mov	r3, r2
 80091e2:	71bb      	strb	r3, [r7, #6]
    buf_pos = (row * 21 + col) * FONT_SIZE_X + 2 * row;   //+2 bytes, because 128 - 21 * 6 = 2
 80091e4:	79fa      	ldrb	r2, [r7, #7]
 80091e6:	4613      	mov	r3, r2
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	4413      	add	r3, r2
 80091ec:	00da      	lsls	r2, r3, #3
 80091ee:	1ad2      	subs	r2, r2, r3
 80091f0:	79bb      	ldrb	r3, [r7, #6]
 80091f2:	441a      	add	r2, r3
 80091f4:	4613      	mov	r3, r2
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	441a      	add	r2, r3
 80091fa:	79fb      	ldrb	r3, [r7, #7]
 80091fc:	4413      	add	r3, r2
 80091fe:	b29b      	uxth	r3, r3
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	b29a      	uxth	r2, r3
 8009204:	4b03      	ldr	r3, [pc, #12]	; (8009214 <ssd1306_pos+0x40>)
 8009206:	801a      	strh	r2, [r3, #0]
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	bc80      	pop	{r7}
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20000124 	.word	0x20000124

08009218 <ssd1306_char>:



//Put one char in buffer in position, defined previously via ssd1306_pos()
void ssd1306_char(char chr, uint8_t inv)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	460a      	mov	r2, r1
 8009222:	71fb      	strb	r3, [r7, #7]
 8009224:	4613      	mov	r3, r2
 8009226:	71bb      	strb	r3, [r7, #6]
    if (inv)
 8009228:	79bb      	ldrb	r3, [r7, #6]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d002      	beq.n	8009234 <ssd1306_char+0x1c>
    {
        inv = 0xFF;
 800922e:	23ff      	movs	r3, #255	; 0xff
 8009230:	71bb      	strb	r3, [r7, #6]
 8009232:	e001      	b.n	8009238 <ssd1306_char+0x20>
    }
    else
    {
        inv = 0x00;
 8009234:	2300      	movs	r3, #0
 8009236:	71bb      	strb	r3, [r7, #6]
    }
    
    for (uint8_t i = 0; i < FONT_SIZE_X - 1; i++)
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]
 800923c:	e017      	b.n	800926e <ssd1306_char+0x56>
    {
        screen_buf[buf_pos++] = font[(uint8_t)chr][i] ^ inv;
 800923e:	79fa      	ldrb	r2, [r7, #7]
 8009240:	7bf9      	ldrb	r1, [r7, #15]
 8009242:	4814      	ldr	r0, [pc, #80]	; (8009294 <ssd1306_char+0x7c>)
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	4403      	add	r3, r0
 800924c:	440b      	add	r3, r1
 800924e:	781a      	ldrb	r2, [r3, #0]
 8009250:	4b11      	ldr	r3, [pc, #68]	; (8009298 <ssd1306_char+0x80>)
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	1c59      	adds	r1, r3, #1
 8009256:	b288      	uxth	r0, r1
 8009258:	490f      	ldr	r1, [pc, #60]	; (8009298 <ssd1306_char+0x80>)
 800925a:	8008      	strh	r0, [r1, #0]
 800925c:	4619      	mov	r1, r3
 800925e:	79bb      	ldrb	r3, [r7, #6]
 8009260:	4053      	eors	r3, r2
 8009262:	b2da      	uxtb	r2, r3
 8009264:	4b0d      	ldr	r3, [pc, #52]	; (800929c <ssd1306_char+0x84>)
 8009266:	545a      	strb	r2, [r3, r1]
    for (uint8_t i = 0; i < FONT_SIZE_X - 1; i++)
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	3301      	adds	r3, #1
 800926c:	73fb      	strb	r3, [r7, #15]
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	2b04      	cmp	r3, #4
 8009272:	d9e4      	bls.n	800923e <ssd1306_char+0x26>
    }
    screen_buf[buf_pos++] = 0x00 ^ inv;       //intercharacter space
 8009274:	4b08      	ldr	r3, [pc, #32]	; (8009298 <ssd1306_char+0x80>)
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	b291      	uxth	r1, r2
 800927c:	4a06      	ldr	r2, [pc, #24]	; (8009298 <ssd1306_char+0x80>)
 800927e:	8011      	strh	r1, [r2, #0]
 8009280:	4619      	mov	r1, r3
 8009282:	4a06      	ldr	r2, [pc, #24]	; (800929c <ssd1306_char+0x84>)
 8009284:	79bb      	ldrb	r3, [r7, #6]
 8009286:	5453      	strb	r3, [r2, r1]
}
 8009288:	bf00      	nop
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	bc80      	pop	{r7}
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	0800d268 	.word	0x0800d268
 8009298:	20000124 	.word	0x20000124
 800929c:	20000934 	.word	0x20000934

080092a0 <ssd1306_char_pos>:



//Put one char in defined pos
void ssd1306_char_pos(uint8_t row, uint8_t col, char chr, uint8_t inv)
{
 80092a0:	b590      	push	{r4, r7, lr}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	4608      	mov	r0, r1
 80092aa:	4611      	mov	r1, r2
 80092ac:	461a      	mov	r2, r3
 80092ae:	4623      	mov	r3, r4
 80092b0:	71fb      	strb	r3, [r7, #7]
 80092b2:	4603      	mov	r3, r0
 80092b4:	71bb      	strb	r3, [r7, #6]
 80092b6:	460b      	mov	r3, r1
 80092b8:	717b      	strb	r3, [r7, #5]
 80092ba:	4613      	mov	r3, r2
 80092bc:	713b      	strb	r3, [r7, #4]
    ssd1306_pos(row, col);
 80092be:	79ba      	ldrb	r2, [r7, #6]
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	4611      	mov	r1, r2
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff ff85 	bl	80091d4 <ssd1306_pos>
    ssd1306_char(chr, inv);
 80092ca:	793a      	ldrb	r2, [r7, #4]
 80092cc:	797b      	ldrb	r3, [r7, #5]
 80092ce:	4611      	mov	r1, r2
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7ff ffa1 	bl	8009218 <ssd1306_char>
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd90      	pop	{r4, r7, pc}

080092de <ssd1306_print>:



//Print string on screen (with position)
void ssd1306_print(uint8_t row, uint8_t col, char *p_str, uint8_t inv)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	603a      	str	r2, [r7, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	4603      	mov	r3, r0
 80092ea:	71fb      	strb	r3, [r7, #7]
 80092ec:	460b      	mov	r3, r1
 80092ee:	71bb      	strb	r3, [r7, #6]
 80092f0:	4613      	mov	r3, r2
 80092f2:	717b      	strb	r3, [r7, #5]
    ssd1306_pos(row, col);
 80092f4:	79ba      	ldrb	r2, [r7, #6]
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	4611      	mov	r1, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff ff6a 	bl	80091d4 <ssd1306_pos>
    
    while (*p_str)
 8009300:	e008      	b.n	8009314 <ssd1306_print+0x36>
    {
        ssd1306_char(*p_str++, inv);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	603a      	str	r2, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	797a      	ldrb	r2, [r7, #5]
 800930c:	4611      	mov	r1, r2
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff ff82 	bl	8009218 <ssd1306_char>
    while (*p_str)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1f2      	bne.n	8009302 <ssd1306_print+0x24>
    }
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <ssd1306_print_viceversa>:



//Print string on screen (with position) in viceversa direction (decrease collumn)
void ssd1306_print_viceversa(uint8_t row, uint8_t col, char *p_str, uint8_t inv)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	603a      	str	r2, [r7, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	4603      	mov	r3, r0
 8009330:	71fb      	strb	r3, [r7, #7]
 8009332:	460b      	mov	r3, r1
 8009334:	71bb      	strb	r3, [r7, #6]
 8009336:	4613      	mov	r3, r2
 8009338:	717b      	strb	r3, [r7, #5]
    uint8_t symb_cntr = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	73fb      	strb	r3, [r7, #15]
    
    ssd1306_pos(row, col);
 800933e:	79ba      	ldrb	r2, [r7, #6]
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	4611      	mov	r1, r2
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff ff45 	bl	80091d4 <ssd1306_pos>
    
    while (*p_str)
 800934a:	e005      	b.n	8009358 <ssd1306_print_viceversa+0x34>
    {
        p_str++;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	3301      	adds	r3, #1
 8009350:	603b      	str	r3, [r7, #0]
        symb_cntr++;
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	3301      	adds	r3, #1
 8009356:	73fb      	strb	r3, [r7, #15]
    while (*p_str)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1f5      	bne.n	800934c <ssd1306_print_viceversa+0x28>
    }
    
    while (symb_cntr)
 8009360:	e012      	b.n	8009388 <ssd1306_print_viceversa+0x64>
    {
        symb_cntr--;
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	3b01      	subs	r3, #1
 8009366:	73fb      	strb	r3, [r7, #15]
        ssd1306_char(*--p_str, inv);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	3b01      	subs	r3, #1
 800936c:	603b      	str	r3, [r7, #0]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	797a      	ldrb	r2, [r7, #5]
 8009374:	4611      	mov	r1, r2
 8009376:	4618      	mov	r0, r3
 8009378:	f7ff ff4e 	bl	8009218 <ssd1306_char>
        buf_pos -= 2 * FONT_SIZE_X;         //minus two characters position
 800937c:	4b06      	ldr	r3, [pc, #24]	; (8009398 <ssd1306_print_viceversa+0x74>)
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	3b0c      	subs	r3, #12
 8009382:	b29a      	uxth	r2, r3
 8009384:	4b04      	ldr	r3, [pc, #16]	; (8009398 <ssd1306_print_viceversa+0x74>)
 8009386:	801a      	strh	r2, [r3, #0]
    while (symb_cntr)
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1e9      	bne.n	8009362 <ssd1306_print_viceversa+0x3e>
    }
}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20000124 	.word	0x20000124

0800939c <ssd1306_print_next>:



//Print string on screen
void ssd1306_print_next(char *p_str, uint8_t inv)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
    while (*p_str)
 80093a8:	e008      	b.n	80093bc <ssd1306_print_next+0x20>
    {
        ssd1306_char(*p_str++, inv);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	4611      	mov	r1, r2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff ff2e 	bl	8009218 <ssd1306_char>
    while (*p_str)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1f2      	bne.n	80093aa <ssd1306_print_next+0xe>
    }
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <ssd1306_bitmap>:



//Show bitmap
void ssd1306_bitmap(const uint8_t arr[])
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 80093d4:	2300      	movs	r3, #0
 80093d6:	81fb      	strh	r3, [r7, #14]
 80093d8:	e009      	b.n	80093ee <ssd1306_bitmap+0x22>
    {
        screen_buf[i] = arr[i];
 80093da:	89fb      	ldrh	r3, [r7, #14]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	441a      	add	r2, r3
 80093e0:	89fb      	ldrh	r3, [r7, #14]
 80093e2:	7811      	ldrb	r1, [r2, #0]
 80093e4:	4a06      	ldr	r2, [pc, #24]	; (8009400 <ssd1306_bitmap+0x34>)
 80093e6:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 80093e8:	89fb      	ldrh	r3, [r7, #14]
 80093ea:	3301      	adds	r3, #1
 80093ec:	81fb      	strh	r3, [r7, #14]
 80093ee:	89fb      	ldrh	r3, [r7, #14]
 80093f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093f4:	d3f1      	bcc.n	80093da <ssd1306_bitmap+0xe>
    }
}
 80093f6:	bf00      	nop
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr
 8009400:	20000934 	.word	0x20000934

08009404 <ssd1306_print_byte>:



//Print byte on screen (debug function)
void ssd1306_print_byte(uint8_t row, uint8_t col, uint8_t *p_byte, uint8_t amount)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	603a      	str	r2, [r7, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	4603      	mov	r3, r0
 8009410:	71fb      	strb	r3, [r7, #7]
 8009412:	460b      	mov	r3, r1
 8009414:	71bb      	strb	r3, [r7, #6]
 8009416:	4613      	mov	r3, r2
 8009418:	717b      	strb	r3, [r7, #5]
    ssd1306_pos(row, col);
 800941a:	79ba      	ldrb	r2, [r7, #6]
 800941c:	79fb      	ldrb	r3, [r7, #7]
 800941e:	4611      	mov	r1, r2
 8009420:	4618      	mov	r0, r3
 8009422:	f7ff fed7 	bl	80091d4 <ssd1306_pos>
    
    while (amount--)
 8009426:	e00b      	b.n	8009440 <ssd1306_print_byte+0x3c>
    {
        screen_buf[buf_pos++] = *p_byte++;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	603a      	str	r2, [r7, #0]
 800942e:	4a09      	ldr	r2, [pc, #36]	; (8009454 <ssd1306_print_byte+0x50>)
 8009430:	8812      	ldrh	r2, [r2, #0]
 8009432:	1c51      	adds	r1, r2, #1
 8009434:	b288      	uxth	r0, r1
 8009436:	4907      	ldr	r1, [pc, #28]	; (8009454 <ssd1306_print_byte+0x50>)
 8009438:	8008      	strh	r0, [r1, #0]
 800943a:	7819      	ldrb	r1, [r3, #0]
 800943c:	4b06      	ldr	r3, [pc, #24]	; (8009458 <ssd1306_print_byte+0x54>)
 800943e:	5499      	strb	r1, [r3, r2]
    while (amount--)
 8009440:	797b      	ldrb	r3, [r7, #5]
 8009442:	1e5a      	subs	r2, r3, #1
 8009444:	717a      	strb	r2, [r7, #5]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1ee      	bne.n	8009428 <ssd1306_print_byte+0x24>
    }
}
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000124 	.word	0x20000124
 8009458:	20000934 	.word	0x20000934

0800945c <NVIC_EnableIRQ>:
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8009466:	79fb      	ldrb	r3, [r7, #7]
 8009468:	f003 031f 	and.w	r3, r3, #31
 800946c:	2201      	movs	r2, #1
 800946e:	fa02 f103 	lsl.w	r1, r2, r3
 8009472:	4a05      	ldr	r2, [pc, #20]	; (8009488 <NVIC_EnableIRQ+0x2c>)
 8009474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009478:	095b      	lsrs	r3, r3, #5
 800947a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800947e:	bf00      	nop
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	bc80      	pop	{r7}
 8009486:	4770      	bx	lr
 8009488:	e000e100 	.word	0xe000e100

0800948c <timers_init>:



//Init all timers together
void timers_init(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
	systick_init();
 8009490:	f000 f832 	bl	80094f8 <systick_init>
	timer1_init();
 8009494:	f000 f852 	bl	800953c <timer1_init>
	timer2_init();
 8009498:	f000 f8a8 	bl	80095ec <timer2_init>
	timer3_init();
 800949c:	f000 f8ec 	bl	8009678 <timer3_init>
}
 80094a0:	bf00      	nop
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <make_a_beep>:



void make_a_beep(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
	led_board_on();
 80094a8:	f7f8 fbb0 	bl	8001c0c <led_board_on>
	timer2_start(); //in order to switch off led_board
 80094ac:	f000 f8d4 	bl	8009658 <timer2_start>

	if (beep_mute == 0)
 80094b0:	4b03      	ldr	r3, [pc, #12]	; (80094c0 <make_a_beep+0x1c>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <make_a_beep+0x18>
	{
		timer3_start();
 80094b8:	f000 f92c 	bl	8009714 <timer3_start>
	}
}
 80094bc:	bf00      	nop
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20000126 	.word	0x20000126

080094c4 <toggle_mute>:



void toggle_mute(void)
{
 80094c4:	b480      	push	{r7}
 80094c6:	af00      	add	r7, sp, #0
	beep_mute ^= (uint8_t)1;
 80094c8:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <toggle_mute+0x1c>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	f083 0301 	eor.w	r3, r3, #1
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	4b03      	ldr	r3, [pc, #12]	; (80094e0 <toggle_mute+0x1c>)
 80094d4:	701a      	strb	r2, [r3, #0]
}
 80094d6:	bf00      	nop
 80094d8:	46bd      	mov	sp, r7
 80094da:	bc80      	pop	{r7}
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	20000126 	.word	0x20000126

080094e4 <get_mute_flag>:



uint8_t get_mute_flag(void)
{
 80094e4:	b480      	push	{r7}
 80094e6:	af00      	add	r7, sp, #0
	return beep_mute;
 80094e8:	4b02      	ldr	r3, [pc, #8]	; (80094f4 <get_mute_flag+0x10>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bc80      	pop	{r7}
 80094f2:	4770      	bx	lr
 80094f4:	20000126 	.word	0x20000126

080094f8 <systick_init>:



//SysTick timer init (tick every 1s to count uptime)
void systick_init(void)
{
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
    SysTick->CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;   //clock source = AHB/8 = 72MHz/8 = 9MHz
 80094fc:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <systick_init+0x3c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a0c      	ldr	r2, [pc, #48]	; (8009534 <systick_init+0x3c>)
 8009502:	f023 0304 	bic.w	r3, r3, #4
 8009506:	6013      	str	r3, [r2, #0]
    SysTick->LOAD = (uint32_t)8999999;              //9000000Hz-1
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <systick_init+0x3c>)
 800950a:	4a0b      	ldr	r2, [pc, #44]	; (8009538 <systick_init+0x40>)
 800950c:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;                               //reset counter value
 800950e:	4b09      	ldr	r3, [pc, #36]	; (8009534 <systick_init+0x3c>)
 8009510:	2200      	movs	r2, #0
 8009512:	609a      	str	r2, [r3, #8]
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;      //enable interrupt
 8009514:	4b07      	ldr	r3, [pc, #28]	; (8009534 <systick_init+0x3c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a06      	ldr	r2, [pc, #24]	; (8009534 <systick_init+0x3c>)
 800951a:	f043 0302 	orr.w	r3, r3, #2
 800951e:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;       //enable counter
 8009520:	4b04      	ldr	r3, [pc, #16]	; (8009534 <systick_init+0x3c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a03      	ldr	r2, [pc, #12]	; (8009534 <systick_init+0x3c>)
 8009526:	f043 0301 	orr.w	r3, r3, #1
 800952a:	6013      	str	r3, [r2, #0]
}
 800952c:	bf00      	nop
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr
 8009534:	e000e010 	.word	0xe000e010
 8009538:	0089543f 	.word	0x0089543f

0800953c <timer1_init>:



//Timer1 init (time slot counter)
void timer1_init(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;     //enable timer 1 clock
 8009540:	4b16      	ldr	r3, [pc, #88]	; (800959c <timer1_init+0x60>)
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	4a15      	ldr	r2, [pc, #84]	; (800959c <timer1_init+0x60>)
 8009546:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800954a:	6193      	str	r3, [r2, #24]
    TIM1->PSC = (uint16_t)35999;            // 72MHz/(35999+1)=2kHz
 800954c:	4b14      	ldr	r3, [pc, #80]	; (80095a0 <timer1_init+0x64>)
 800954e:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8009552:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM1->ARR = (uint16_t)199;              // 2kHz/(199+1)=10Hz(100ms)
 8009554:	4b12      	ldr	r3, [pc, #72]	; (80095a0 <timer1_init+0x64>)
 8009556:	22c7      	movs	r2, #199	; 0xc7
 8009558:	859a      	strh	r2, [r3, #44]	; 0x2c
    TIM1->CR1 |= TIM_CR1_URS;               //only overflow generates interrupt
 800955a:	4b11      	ldr	r3, [pc, #68]	; (80095a0 <timer1_init+0x64>)
 800955c:	881b      	ldrh	r3, [r3, #0]
 800955e:	b29b      	uxth	r3, r3
 8009560:	4a0f      	ldr	r2, [pc, #60]	; (80095a0 <timer1_init+0x64>)
 8009562:	f043 0304 	orr.w	r3, r3, #4
 8009566:	b29b      	uxth	r3, r3
 8009568:	8013      	strh	r3, [r2, #0]
    TIM1->EGR = TIM_EGR_UG;                 //software update generation
 800956a:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <timer1_init+0x64>)
 800956c:	2201      	movs	r2, #1
 800956e:	829a      	strh	r2, [r3, #20]
    TIM1->SR &= ~TIM_SR_UIF;                //clear update interrupt
 8009570:	4b0b      	ldr	r3, [pc, #44]	; (80095a0 <timer1_init+0x64>)
 8009572:	8a1b      	ldrh	r3, [r3, #16]
 8009574:	b29b      	uxth	r3, r3
 8009576:	4a0a      	ldr	r2, [pc, #40]	; (80095a0 <timer1_init+0x64>)
 8009578:	f023 0301 	bic.w	r3, r3, #1
 800957c:	b29b      	uxth	r3, r3
 800957e:	8213      	strh	r3, [r2, #16]
    TIM1->DIER |= TIM_DIER_UIE;             //update interrupt enable
 8009580:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <timer1_init+0x64>)
 8009582:	899b      	ldrh	r3, [r3, #12]
 8009584:	b29b      	uxth	r3, r3
 8009586:	4a06      	ldr	r2, [pc, #24]	; (80095a0 <timer1_init+0x64>)
 8009588:	f043 0301 	orr.w	r3, r3, #1
 800958c:	b29b      	uxth	r3, r3
 800958e:	8193      	strh	r3, [r2, #12]
    
    NVIC_EnableIRQ(TIM1_UP_IRQn);           //enable interrupt
 8009590:	2019      	movs	r0, #25
 8009592:	f7ff ff63 	bl	800945c <NVIC_EnableIRQ>
}
 8009596:	bf00      	nop
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	40021000 	.word	0x40021000
 80095a0:	40012c00 	.word	0x40012c00

080095a4 <timer1_start>:



//Timer1 start
void timer1_start(void)
{
 80095a4:	b480      	push	{r7}
 80095a6:	af00      	add	r7, sp, #0
    TIM1->CR1 |= TIM_CR1_CEN;               //enable counter
 80095a8:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <timer1_start+0x1c>)
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	4a04      	ldr	r2, [pc, #16]	; (80095c0 <timer1_start+0x1c>)
 80095b0:	f043 0301 	orr.w	r3, r3, #1
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	8013      	strh	r3, [r2, #0]
}
 80095b8:	bf00      	nop
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bc80      	pop	{r7}
 80095be:	4770      	bx	lr
 80095c0:	40012c00 	.word	0x40012c00

080095c4 <timer1_stop_reload>:



//Timer1 stop and reload
void timer1_stop_reload(void)
{
 80095c4:	b480      	push	{r7}
 80095c6:	af00      	add	r7, sp, #0
    TIM1->CR1 &= ~TIM_CR1_CEN;              //disable counter
 80095c8:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <timer1_stop_reload+0x24>)
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	4a06      	ldr	r2, [pc, #24]	; (80095e8 <timer1_stop_reload+0x24>)
 80095d0:	f023 0301 	bic.w	r3, r3, #1
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	8013      	strh	r3, [r2, #0]
    TIM1->EGR = TIM_EGR_UG;                 //software update generation
 80095d8:	4b03      	ldr	r3, [pc, #12]	; (80095e8 <timer1_stop_reload+0x24>)
 80095da:	2201      	movs	r2, #1
 80095dc:	829a      	strh	r2, [r3, #20]
}
 80095de:	bf00      	nop
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bc80      	pop	{r7}
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	40012c00 	.word	0x40012c00

080095ec <timer2_init>:



//Timer 2 init (gating timer, the length of the "beep")
void timer2_init(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; //enable timer clock
 80095f0:	4b10      	ldr	r3, [pc, #64]	; (8009634 <timer2_init+0x48>)
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	4a0f      	ldr	r2, [pc, #60]	; (8009634 <timer2_init+0x48>)
 80095f6:	f043 0301 	orr.w	r3, r3, #1
 80095fa:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = (uint16_t)35999;        //72MHz/(35999+1)=2kHz
 80095fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009600:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8009604:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = (uint16_t)199;          //2kHz/(199+1)=10Hz(100ms)
 8009606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800960a:	22c7      	movs	r2, #199	; 0xc7
 800960c:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM2->EGR = TIM_EGR_UG;             //software update generation
 800960e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009612:	2201      	movs	r2, #1
 8009614:	829a      	strh	r2, [r3, #20]
	TIM2->DIER |= TIM_DIER_UIE;         //update interrupt enable
 8009616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800961a:	899b      	ldrh	r3, [r3, #12]
 800961c:	b29b      	uxth	r3, r3
 800961e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009622:	f043 0301 	orr.w	r3, r3, #1
 8009626:	b29b      	uxth	r3, r3
 8009628:	8193      	strh	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn);
 800962a:	201c      	movs	r0, #28
 800962c:	f7ff ff16 	bl	800945c <NVIC_EnableIRQ>
}
 8009630:	bf00      	nop
 8009632:	bd80      	pop	{r7, pc}
 8009634:	40021000 	.word	0x40021000

08009638 <timer2_stop>:



void timer2_stop(void)
{
 8009638:	b480      	push	{r7}
 800963a:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~TIM_CR1_CEN;      //stop gating timer
 800963c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	b29b      	uxth	r3, r3
 8009644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009648:	f023 0301 	bic.w	r3, r3, #1
 800964c:	b29b      	uxth	r3, r3
 800964e:	8013      	strh	r3, [r2, #0]
}
 8009650:	bf00      	nop
 8009652:	46bd      	mov	sp, r7
 8009654:	bc80      	pop	{r7}
 8009656:	4770      	bx	lr

08009658 <timer2_start>:



void timer2_start(void)
{
 8009658:	b480      	push	{r7}
 800965a:	af00      	add	r7, sp, #0
	TIM2->CR1 |= TIM_CR1_CEN;   	//start gating timer
 800965c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	b29b      	uxth	r3, r3
 8009664:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009668:	f043 0301 	orr.w	r3, r3, #1
 800966c:	b29b      	uxth	r3, r3
 800966e:	8013      	strh	r3, [r2, #0]
}
 8009670:	bf00      	nop
 8009672:	46bd      	mov	sp, r7
 8009674:	bc80      	pop	{r7}
 8009676:	4770      	bx	lr

08009678 <timer3_init>:



//Timer 3 init (pwm timer, the frequency of the "beep")
void timer3_init(void)
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; //enable timer clock
 800967c:	4b19      	ldr	r3, [pc, #100]	; (80096e4 <timer3_init+0x6c>)
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	4a18      	ldr	r2, [pc, #96]	; (80096e4 <timer3_init+0x6c>)
 8009682:	f043 0302 	orr.w	r3, r3, #2
 8009686:	61d3      	str	r3, [r2, #28]
	TIM3->PSC = (uint16_t)8999;         //72MHz/(8999+1)=8kHz
 8009688:	4b17      	ldr	r3, [pc, #92]	; (80096e8 <timer3_init+0x70>)
 800968a:	f242 3227 	movw	r2, #8999	; 0x2327
 800968e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->ARR = (uint16_t)3;            //8kHz/(3+1)=2kHz
 8009690:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <timer3_init+0x70>)
 8009692:	2203      	movs	r2, #3
 8009694:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM3->CCR2 = (uint16_t)2;           //duty cycle 2/(3+1)=0.5
 8009696:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <timer3_init+0x70>)
 8009698:	2202      	movs	r2, #2
 800969a:	871a      	strh	r2, [r3, #56]	; 0x38
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_2;    //PWM mode 2
 800969c:	4b12      	ldr	r3, [pc, #72]	; (80096e8 <timer3_init+0x70>)
 800969e:	8b1b      	ldrh	r3, [r3, #24]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	4a11      	ldr	r2, [pc, #68]	; (80096e8 <timer3_init+0x70>)
 80096a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	8313      	strh	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_1;
 80096ac:	4b0e      	ldr	r3, [pc, #56]	; (80096e8 <timer3_init+0x70>)
 80096ae:	8b1b      	ldrh	r3, [r3, #24]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	4a0d      	ldr	r2, [pc, #52]	; (80096e8 <timer3_init+0x70>)
 80096b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	8313      	strh	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_0;
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <timer3_init+0x70>)
 80096be:	8b1b      	ldrh	r3, [r3, #24]
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	4a09      	ldr	r2, [pc, #36]	; (80096e8 <timer3_init+0x70>)
 80096c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	8313      	strh	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC2E;        //CH2 output enable
 80096cc:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <timer3_init+0x70>)
 80096ce:	8c1b      	ldrh	r3, [r3, #32]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	4a05      	ldr	r2, [pc, #20]	; (80096e8 <timer3_init+0x70>)
 80096d4:	f043 0310 	orr.w	r3, r3, #16
 80096d8:	b29b      	uxth	r3, r3
 80096da:	8413      	strh	r3, [r2, #32]
}
 80096dc:	bf00      	nop
 80096de:	46bd      	mov	sp, r7
 80096e0:	bc80      	pop	{r7}
 80096e2:	4770      	bx	lr
 80096e4:	40021000 	.word	0x40021000
 80096e8:	40000400 	.word	0x40000400

080096ec <timer3_stop>:



void timer3_stop(void)
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~TIM_CR1_CEN;      //disable PWM timer
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <timer3_stop+0x24>)
 80096f2:	881b      	ldrh	r3, [r3, #0]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	4a06      	ldr	r2, [pc, #24]	; (8009710 <timer3_stop+0x24>)
 80096f8:	f023 0301 	bic.w	r3, r3, #1
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	8013      	strh	r3, [r2, #0]
	TIM3->CNT = 0;                  //force output low
 8009700:	4b03      	ldr	r3, [pc, #12]	; (8009710 <timer3_stop+0x24>)
 8009702:	2200      	movs	r2, #0
 8009704:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8009706:	bf00      	nop
 8009708:	46bd      	mov	sp, r7
 800970a:	bc80      	pop	{r7}
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	40000400 	.word	0x40000400

08009714 <timer3_start>:



void timer3_start(void)
{
 8009714:	b480      	push	{r7}
 8009716:	af00      	add	r7, sp, #0
	TIM3->CR1 |= TIM_CR1_CEN;   	//enable PWM timer
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <timer3_start+0x1c>)
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	b29b      	uxth	r3, r3
 800971e:	4a04      	ldr	r2, [pc, #16]	; (8009730 <timer3_start+0x1c>)
 8009720:	f043 0301 	orr.w	r3, r3, #1
 8009724:	b29b      	uxth	r3, r3
 8009726:	8013      	strh	r3, [r2, #0]
}
 8009728:	bf00      	nop
 800972a:	46bd      	mov	sp, r7
 800972c:	bc80      	pop	{r7}
 800972e:	4770      	bx	lr
 8009730:	40000400 	.word	0x40000400

08009734 <NVIC_EnableIRQ>:
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	f003 031f 	and.w	r3, r3, #31
 8009744:	2201      	movs	r2, #1
 8009746:	fa02 f103 	lsl.w	r1, r2, r3
 800974a:	4a05      	ldr	r2, [pc, #20]	; (8009760 <NVIC_EnableIRQ+0x2c>)
 800974c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009750:	095b      	lsrs	r3, r3, #5
 8009752:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	bc80      	pop	{r7}
 800975e:	4770      	bx	lr
 8009760:	e000e100 	.word	0xe000e100

08009764 <uart_dma_init>:



//UART Init
void uart_dma_init(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;   //ENABLE usart clock
 8009768:	4b2c      	ldr	r3, [pc, #176]	; (800981c <uart_dma_init+0xb8>)
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	4a2b      	ldr	r2, [pc, #172]	; (800981c <uart_dma_init+0xb8>)
 800976e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009772:	6193      	str	r3, [r2, #24]
    
    USART1->BRR = 0x1D4C;                   //9600 bod
 8009774:	4b2a      	ldr	r3, [pc, #168]	; (8009820 <uart_dma_init+0xbc>)
 8009776:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800977a:	811a      	strh	r2, [r3, #8]
    USART1->CR1 |= USART_CR1_TE;            //enable tx
 800977c:	4b28      	ldr	r3, [pc, #160]	; (8009820 <uart_dma_init+0xbc>)
 800977e:	899b      	ldrh	r3, [r3, #12]
 8009780:	b29b      	uxth	r3, r3
 8009782:	4a27      	ldr	r2, [pc, #156]	; (8009820 <uart_dma_init+0xbc>)
 8009784:	f043 0308 	orr.w	r3, r3, #8
 8009788:	b29b      	uxth	r3, r3
 800978a:	8193      	strh	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_RE;            //enable rx
 800978c:	4b24      	ldr	r3, [pc, #144]	; (8009820 <uart_dma_init+0xbc>)
 800978e:	899b      	ldrh	r3, [r3, #12]
 8009790:	b29b      	uxth	r3, r3
 8009792:	4a23      	ldr	r2, [pc, #140]	; (8009820 <uart_dma_init+0xbc>)
 8009794:	f043 0304 	orr.w	r3, r3, #4
 8009798:	b29b      	uxth	r3, r3
 800979a:	8193      	strh	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;            //uart enable
 800979c:	4b20      	ldr	r3, [pc, #128]	; (8009820 <uart_dma_init+0xbc>)
 800979e:	899b      	ldrh	r3, [r3, #12]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	4a1f      	ldr	r2, [pc, #124]	; (8009820 <uart_dma_init+0xbc>)
 80097a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	8193      	strh	r3, [r2, #12]
    
    USART1->CR3 |= USART_CR3_DMAR;          //enable DMA mode USART
 80097ac:	4b1c      	ldr	r3, [pc, #112]	; (8009820 <uart_dma_init+0xbc>)
 80097ae:	8a9b      	ldrh	r3, [r3, #20]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	4a1b      	ldr	r2, [pc, #108]	; (8009820 <uart_dma_init+0xbc>)
 80097b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	8293      	strh	r3, [r2, #20]
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;       //enable dma1 clock
 80097bc:	4b17      	ldr	r3, [pc, #92]	; (800981c <uart_dma_init+0xb8>)
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	4a16      	ldr	r2, [pc, #88]	; (800981c <uart_dma_init+0xb8>)
 80097c2:	f043 0301 	orr.w	r3, r3, #1
 80097c6:	6153      	str	r3, [r2, #20]
    
    DMA1_Channel5->CPAR = (uint32_t)(&(USART1->DR));    //transfer source 
 80097c8:	4b16      	ldr	r3, [pc, #88]	; (8009824 <uart_dma_init+0xc0>)
 80097ca:	4a17      	ldr	r2, [pc, #92]	; (8009828 <uart_dma_init+0xc4>)
 80097cc:	609a      	str	r2, [r3, #8]
    DMA1_Channel5->CMAR = (uint32_t)(&uart_buffer[0]);  //transfer destination
 80097ce:	4b15      	ldr	r3, [pc, #84]	; (8009824 <uart_dma_init+0xc0>)
 80097d0:	4a16      	ldr	r2, [pc, #88]	; (800982c <uart_dma_init+0xc8>)
 80097d2:	60da      	str	r2, [r3, #12]
    DMA1_Channel5->CNDTR = UART_BUF_LEN;                //bytes amount to receive
 80097d4:	4b13      	ldr	r3, [pc, #76]	; (8009824 <uart_dma_init+0xc0>)
 80097d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097da:	605a      	str	r2, [r3, #4]
    
    DMA1_Channel5->CCR |= DMA_CCR5_MINC;    //enable memory increment
 80097dc:	4b11      	ldr	r3, [pc, #68]	; (8009824 <uart_dma_init+0xc0>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a10      	ldr	r2, [pc, #64]	; (8009824 <uart_dma_init+0xc0>)
 80097e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e6:	6013      	str	r3, [r2, #0]
    DMA1_Channel5->CCR |= DMA_CCR5_TCIE;    //enable transfer complete interrupt
 80097e8:	4b0e      	ldr	r3, [pc, #56]	; (8009824 <uart_dma_init+0xc0>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a0d      	ldr	r2, [pc, #52]	; (8009824 <uart_dma_init+0xc0>)
 80097ee:	f043 0302 	orr.w	r3, r3, #2
 80097f2:	6013      	str	r3, [r2, #0]
    DMA1_Channel5->CCR |= DMA_CCR5_EN;      //enable channel
 80097f4:	4b0b      	ldr	r3, [pc, #44]	; (8009824 <uart_dma_init+0xc0>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a0a      	ldr	r2, [pc, #40]	; (8009824 <uart_dma_init+0xc0>)
 80097fa:	f043 0301 	orr.w	r3, r3, #1
 80097fe:	6013      	str	r3, [r2, #0]
    
    NVIC_EnableIRQ(DMA1_Channel5_IRQn);     //enable interrupts
 8009800:	200f      	movs	r0, #15
 8009802:	f7ff ff97 	bl	8009734 <NVIC_EnableIRQ>
    DMA1->IFCR = DMA_IFCR_CGIF5;            //clear all interrupt flags for DMA channel 5
 8009806:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <uart_dma_init+0xcc>)
 8009808:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800980c:	605a      	str	r2, [r3, #4]

    backup_buf = get_nmea_buf();
 800980e:	f7f8 ff0b 	bl	8002628 <get_nmea_buf>
 8009812:	4602      	mov	r2, r0
 8009814:	4b07      	ldr	r3, [pc, #28]	; (8009834 <uart_dma_init+0xd0>)
 8009816:	601a      	str	r2, [r3, #0]
}
 8009818:	bf00      	nop
 800981a:	bd80      	pop	{r7, pc}
 800981c:	40021000 	.word	0x40021000
 8009820:	40013800 	.word	0x40013800
 8009824:	40020058 	.word	0x40020058
 8009828:	40013804 	.word	0x40013804
 800982c:	20000d38 	.word	0x20000d38
 8009830:	40020000 	.word	0x40020000
 8009834:	20000d34 	.word	0x20000d34

08009838 <uart_dma_stop>:



//Stop UART DMA
void uart_dma_stop(void)
{
 8009838:	b480      	push	{r7}
 800983a:	af00      	add	r7, sp, #0
    DMA1_Channel5->CCR &= ~DMA_CCR5_EN;     //disable channel
 800983c:	4b04      	ldr	r3, [pc, #16]	; (8009850 <uart_dma_stop+0x18>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a03      	ldr	r2, [pc, #12]	; (8009850 <uart_dma_stop+0x18>)
 8009842:	f023 0301 	bic.w	r3, r3, #1
 8009846:	6013      	str	r3, [r2, #0]
}
 8009848:	bf00      	nop
 800984a:	46bd      	mov	sp, r7
 800984c:	bc80      	pop	{r7}
 800984e:	4770      	bx	lr
 8009850:	40020058 	.word	0x40020058

08009854 <uart_dma_restart>:



//Restart UART DMA
void uart_dma_restart(void)
{
 8009854:	b480      	push	{r7}
 8009856:	af00      	add	r7, sp, #0
    DMA1_Channel5->CNDTR = UART_BUF_LEN;    //reload bytes amount to receive
 8009858:	4b06      	ldr	r3, [pc, #24]	; (8009874 <uart_dma_restart+0x20>)
 800985a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800985e:	605a      	str	r2, [r3, #4]
    DMA1_Channel5->CCR |= DMA_CCR5_EN;      //enable channel
 8009860:	4b04      	ldr	r3, [pc, #16]	; (8009874 <uart_dma_restart+0x20>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a03      	ldr	r2, [pc, #12]	; (8009874 <uart_dma_restart+0x20>)
 8009866:	f043 0301 	orr.w	r3, r3, #1
 800986a:	6013      	str	r3, [r2, #0]
}
 800986c:	bf00      	nop
 800986e:	46bd      	mov	sp, r7
 8009870:	bc80      	pop	{r7}
 8009872:	4770      	bx	lr
 8009874:	40020058 	.word	0x40020058

08009878 <backup_and_clear_uart_buffer>:



//Backup uart buffer and then clear it
void backup_and_clear_uart_buffer(void)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < UART_BUF_LEN; i++)     //copy received data to buffer and clear uart_buffer
 800987e:	2300      	movs	r3, #0
 8009880:	80fb      	strh	r3, [r7, #6]
 8009882:	e00e      	b.n	80098a2 <backup_and_clear_uart_buffer+0x2a>
	{
		backup_buf[i] = uart_buffer[i];
 8009884:	88fa      	ldrh	r2, [r7, #6]
 8009886:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <backup_and_clear_uart_buffer+0x3c>)
 8009888:	6819      	ldr	r1, [r3, #0]
 800988a:	88fb      	ldrh	r3, [r7, #6]
 800988c:	440b      	add	r3, r1
 800988e:	490a      	ldr	r1, [pc, #40]	; (80098b8 <backup_and_clear_uart_buffer+0x40>)
 8009890:	5c8a      	ldrb	r2, [r1, r2]
 8009892:	701a      	strb	r2, [r3, #0]
		uart_buffer[i] = 0;
 8009894:	88fb      	ldrh	r3, [r7, #6]
 8009896:	4a08      	ldr	r2, [pc, #32]	; (80098b8 <backup_and_clear_uart_buffer+0x40>)
 8009898:	2100      	movs	r1, #0
 800989a:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < UART_BUF_LEN; i++)     //copy received data to buffer and clear uart_buffer
 800989c:	88fb      	ldrh	r3, [r7, #6]
 800989e:	3301      	adds	r3, #1
 80098a0:	80fb      	strh	r3, [r7, #6]
 80098a2:	88fb      	ldrh	r3, [r7, #6]
 80098a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098a8:	d3ec      	bcc.n	8009884 <backup_and_clear_uart_buffer+0xc>
	}
}
 80098aa:	bf00      	nop
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bc80      	pop	{r7}
 80098b2:	4770      	bx	lr
 80098b4:	20000d34 	.word	0x20000d34
 80098b8:	20000d38 	.word	0x20000d38

080098bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80098bc:	480d      	ldr	r0, [pc, #52]	; (80098f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80098be:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80098c0:	f7f7 fc74 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80098c4:	480c      	ldr	r0, [pc, #48]	; (80098f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80098c6:	490d      	ldr	r1, [pc, #52]	; (80098fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80098c8:	4a0d      	ldr	r2, [pc, #52]	; (8009900 <LoopForever+0xe>)
  movs r3, #0
 80098ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80098cc:	e002      	b.n	80098d4 <LoopCopyDataInit>

080098ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80098ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80098d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80098d2:	3304      	adds	r3, #4

080098d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80098d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80098d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80098d8:	d3f9      	bcc.n	80098ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80098da:	4a0a      	ldr	r2, [pc, #40]	; (8009904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80098dc:	4c0a      	ldr	r4, [pc, #40]	; (8009908 <LoopForever+0x16>)
  movs r3, #0
 80098de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80098e0:	e001      	b.n	80098e6 <LoopFillZerobss>

080098e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80098e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80098e4:	3204      	adds	r2, #4

080098e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80098e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80098e8:	d3fb      	bcc.n	80098e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80098ea:	f000 f811 	bl	8009910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80098ee:	f7fa f8c3 	bl	8003a78 <main>

080098f2 <LoopForever>:

LoopForever:
    b LoopForever
 80098f2:	e7fe      	b.n	80098f2 <LoopForever>
  ldr   r0, =_estack
 80098f4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80098f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80098fc:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8009900:	0800e7c0 	.word	0x0800e7c0
  ldr r2, =_sbss
 8009904:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8009908:	20001138 	.word	0x20001138

0800990c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800990c:	e7fe      	b.n	800990c <ADC1_2_IRQHandler>
	...

08009910 <__libc_init_array>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	2500      	movs	r5, #0
 8009914:	4e0c      	ldr	r6, [pc, #48]	; (8009948 <__libc_init_array+0x38>)
 8009916:	4c0d      	ldr	r4, [pc, #52]	; (800994c <__libc_init_array+0x3c>)
 8009918:	1ba4      	subs	r4, r4, r6
 800991a:	10a4      	asrs	r4, r4, #2
 800991c:	42a5      	cmp	r5, r4
 800991e:	d109      	bne.n	8009934 <__libc_init_array+0x24>
 8009920:	f003 f84c 	bl	800c9bc <_init>
 8009924:	2500      	movs	r5, #0
 8009926:	4e0a      	ldr	r6, [pc, #40]	; (8009950 <__libc_init_array+0x40>)
 8009928:	4c0a      	ldr	r4, [pc, #40]	; (8009954 <__libc_init_array+0x44>)
 800992a:	1ba4      	subs	r4, r4, r6
 800992c:	10a4      	asrs	r4, r4, #2
 800992e:	42a5      	cmp	r5, r4
 8009930:	d105      	bne.n	800993e <__libc_init_array+0x2e>
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009938:	4798      	blx	r3
 800993a:	3501      	adds	r5, #1
 800993c:	e7ee      	b.n	800991c <__libc_init_array+0xc>
 800993e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009942:	4798      	blx	r3
 8009944:	3501      	adds	r5, #1
 8009946:	e7f2      	b.n	800992e <__libc_init_array+0x1e>
 8009948:	0800e7b8 	.word	0x0800e7b8
 800994c:	0800e7b8 	.word	0x0800e7b8
 8009950:	0800e7b8 	.word	0x0800e7b8
 8009954:	0800e7bc 	.word	0x0800e7bc

08009958 <memcpy>:
 8009958:	b510      	push	{r4, lr}
 800995a:	1e43      	subs	r3, r0, #1
 800995c:	440a      	add	r2, r1
 800995e:	4291      	cmp	r1, r2
 8009960:	d100      	bne.n	8009964 <memcpy+0xc>
 8009962:	bd10      	pop	{r4, pc}
 8009964:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009968:	f803 4f01 	strb.w	r4, [r3, #1]!
 800996c:	e7f7      	b.n	800995e <memcpy+0x6>

0800996e <memset>:
 800996e:	4603      	mov	r3, r0
 8009970:	4402      	add	r2, r0
 8009972:	4293      	cmp	r3, r2
 8009974:	d100      	bne.n	8009978 <memset+0xa>
 8009976:	4770      	bx	lr
 8009978:	f803 1b01 	strb.w	r1, [r3], #1
 800997c:	e7f9      	b.n	8009972 <memset+0x4>
	...

08009980 <atan>:
 8009980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	4bb6      	ldr	r3, [pc, #728]	; (8009c60 <atan+0x2e0>)
 8009986:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800998a:	429e      	cmp	r6, r3
 800998c:	4604      	mov	r4, r0
 800998e:	460d      	mov	r5, r1
 8009990:	468b      	mov	fp, r1
 8009992:	dd17      	ble.n	80099c4 <atan+0x44>
 8009994:	4bb3      	ldr	r3, [pc, #716]	; (8009c64 <atan+0x2e4>)
 8009996:	429e      	cmp	r6, r3
 8009998:	dc01      	bgt.n	800999e <atan+0x1e>
 800999a:	d109      	bne.n	80099b0 <atan+0x30>
 800999c:	b140      	cbz	r0, 80099b0 <atan+0x30>
 800999e:	4622      	mov	r2, r4
 80099a0:	462b      	mov	r3, r5
 80099a2:	4620      	mov	r0, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7f6 fbe9 	bl	800017c <__adddf3>
 80099aa:	4604      	mov	r4, r0
 80099ac:	460d      	mov	r5, r1
 80099ae:	e005      	b.n	80099bc <atan+0x3c>
 80099b0:	f1bb 0f00 	cmp.w	fp, #0
 80099b4:	4cac      	ldr	r4, [pc, #688]	; (8009c68 <atan+0x2e8>)
 80099b6:	f340 8121 	ble.w	8009bfc <atan+0x27c>
 80099ba:	4dac      	ldr	r5, [pc, #688]	; (8009c6c <atan+0x2ec>)
 80099bc:	4620      	mov	r0, r4
 80099be:	4629      	mov	r1, r5
 80099c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c4:	4baa      	ldr	r3, [pc, #680]	; (8009c70 <atan+0x2f0>)
 80099c6:	429e      	cmp	r6, r3
 80099c8:	dc11      	bgt.n	80099ee <atan+0x6e>
 80099ca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80099ce:	429e      	cmp	r6, r3
 80099d0:	dc0a      	bgt.n	80099e8 <atan+0x68>
 80099d2:	a38b      	add	r3, pc, #556	; (adr r3, 8009c00 <atan+0x280>)
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	f7f6 fbd0 	bl	800017c <__adddf3>
 80099dc:	2200      	movs	r2, #0
 80099de:	4ba5      	ldr	r3, [pc, #660]	; (8009c74 <atan+0x2f4>)
 80099e0:	f7f7 f812 	bl	8000a08 <__aeabi_dcmpgt>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d1e9      	bne.n	80099bc <atan+0x3c>
 80099e8:	f04f 3aff 	mov.w	sl, #4294967295
 80099ec:	e027      	b.n	8009a3e <atan+0xbe>
 80099ee:	f000 f987 	bl	8009d00 <fabs>
 80099f2:	4ba1      	ldr	r3, [pc, #644]	; (8009c78 <atan+0x2f8>)
 80099f4:	4604      	mov	r4, r0
 80099f6:	429e      	cmp	r6, r3
 80099f8:	460d      	mov	r5, r1
 80099fa:	f300 80b8 	bgt.w	8009b6e <atan+0x1ee>
 80099fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009a02:	429e      	cmp	r6, r3
 8009a04:	f300 809c 	bgt.w	8009b40 <atan+0x1c0>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	f7f6 fbb6 	bl	800017c <__adddf3>
 8009a10:	2200      	movs	r2, #0
 8009a12:	4b98      	ldr	r3, [pc, #608]	; (8009c74 <atan+0x2f4>)
 8009a14:	f7f6 fbb0 	bl	8000178 <__aeabi_dsub>
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4606      	mov	r6, r0
 8009a1c:	460f      	mov	r7, r1
 8009a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a22:	4620      	mov	r0, r4
 8009a24:	4629      	mov	r1, r5
 8009a26:	f7f6 fba9 	bl	800017c <__adddf3>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4630      	mov	r0, r6
 8009a30:	4639      	mov	r1, r7
 8009a32:	f7f6 fe83 	bl	800073c <__aeabi_ddiv>
 8009a36:	f04f 0a00 	mov.w	sl, #0
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	460d      	mov	r5, r1
 8009a3e:	4622      	mov	r2, r4
 8009a40:	462b      	mov	r3, r5
 8009a42:	4620      	mov	r0, r4
 8009a44:	4629      	mov	r1, r5
 8009a46:	f7f6 fd4f 	bl	80004e8 <__aeabi_dmul>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4680      	mov	r8, r0
 8009a50:	4689      	mov	r9, r1
 8009a52:	f7f6 fd49 	bl	80004e8 <__aeabi_dmul>
 8009a56:	a36c      	add	r3, pc, #432	; (adr r3, 8009c08 <atan+0x288>)
 8009a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5c:	4606      	mov	r6, r0
 8009a5e:	460f      	mov	r7, r1
 8009a60:	f7f6 fd42 	bl	80004e8 <__aeabi_dmul>
 8009a64:	a36a      	add	r3, pc, #424	; (adr r3, 8009c10 <atan+0x290>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f7f6 fb87 	bl	800017c <__adddf3>
 8009a6e:	4632      	mov	r2, r6
 8009a70:	463b      	mov	r3, r7
 8009a72:	f7f6 fd39 	bl	80004e8 <__aeabi_dmul>
 8009a76:	a368      	add	r3, pc, #416	; (adr r3, 8009c18 <atan+0x298>)
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f7f6 fb7e 	bl	800017c <__adddf3>
 8009a80:	4632      	mov	r2, r6
 8009a82:	463b      	mov	r3, r7
 8009a84:	f7f6 fd30 	bl	80004e8 <__aeabi_dmul>
 8009a88:	a365      	add	r3, pc, #404	; (adr r3, 8009c20 <atan+0x2a0>)
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f7f6 fb75 	bl	800017c <__adddf3>
 8009a92:	4632      	mov	r2, r6
 8009a94:	463b      	mov	r3, r7
 8009a96:	f7f6 fd27 	bl	80004e8 <__aeabi_dmul>
 8009a9a:	a363      	add	r3, pc, #396	; (adr r3, 8009c28 <atan+0x2a8>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f7f6 fb6c 	bl	800017c <__adddf3>
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	f7f6 fd1e 	bl	80004e8 <__aeabi_dmul>
 8009aac:	a360      	add	r3, pc, #384	; (adr r3, 8009c30 <atan+0x2b0>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f7f6 fb63 	bl	800017c <__adddf3>
 8009ab6:	4642      	mov	r2, r8
 8009ab8:	464b      	mov	r3, r9
 8009aba:	f7f6 fd15 	bl	80004e8 <__aeabi_dmul>
 8009abe:	a35e      	add	r3, pc, #376	; (adr r3, 8009c38 <atan+0x2b8>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	4689      	mov	r9, r1
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fd0c 	bl	80004e8 <__aeabi_dmul>
 8009ad0:	a35b      	add	r3, pc, #364	; (adr r3, 8009c40 <atan+0x2c0>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f7f6 fb4f 	bl	8000178 <__aeabi_dsub>
 8009ada:	4632      	mov	r2, r6
 8009adc:	463b      	mov	r3, r7
 8009ade:	f7f6 fd03 	bl	80004e8 <__aeabi_dmul>
 8009ae2:	a359      	add	r3, pc, #356	; (adr r3, 8009c48 <atan+0x2c8>)
 8009ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae8:	f7f6 fb46 	bl	8000178 <__aeabi_dsub>
 8009aec:	4632      	mov	r2, r6
 8009aee:	463b      	mov	r3, r7
 8009af0:	f7f6 fcfa 	bl	80004e8 <__aeabi_dmul>
 8009af4:	a356      	add	r3, pc, #344	; (adr r3, 8009c50 <atan+0x2d0>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f7f6 fb3d 	bl	8000178 <__aeabi_dsub>
 8009afe:	4632      	mov	r2, r6
 8009b00:	463b      	mov	r3, r7
 8009b02:	f7f6 fcf1 	bl	80004e8 <__aeabi_dmul>
 8009b06:	a354      	add	r3, pc, #336	; (adr r3, 8009c58 <atan+0x2d8>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fb34 	bl	8000178 <__aeabi_dsub>
 8009b10:	4632      	mov	r2, r6
 8009b12:	463b      	mov	r3, r7
 8009b14:	f7f6 fce8 	bl	80004e8 <__aeabi_dmul>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	4649      	mov	r1, r9
 8009b20:	f7f6 fb2c 	bl	800017c <__adddf3>
 8009b24:	4622      	mov	r2, r4
 8009b26:	462b      	mov	r3, r5
 8009b28:	f7f6 fcde 	bl	80004e8 <__aeabi_dmul>
 8009b2c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	d144      	bne.n	8009bc0 <atan+0x240>
 8009b36:	4620      	mov	r0, r4
 8009b38:	4629      	mov	r1, r5
 8009b3a:	f7f6 fb1d 	bl	8000178 <__aeabi_dsub>
 8009b3e:	e734      	b.n	80099aa <atan+0x2a>
 8009b40:	2200      	movs	r2, #0
 8009b42:	4b4c      	ldr	r3, [pc, #304]	; (8009c74 <atan+0x2f4>)
 8009b44:	f7f6 fb18 	bl	8000178 <__aeabi_dsub>
 8009b48:	2200      	movs	r2, #0
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	4b49      	ldr	r3, [pc, #292]	; (8009c74 <atan+0x2f4>)
 8009b50:	4620      	mov	r0, r4
 8009b52:	4629      	mov	r1, r5
 8009b54:	f7f6 fb12 	bl	800017c <__adddf3>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	4639      	mov	r1, r7
 8009b60:	f7f6 fdec 	bl	800073c <__aeabi_ddiv>
 8009b64:	f04f 0a01 	mov.w	sl, #1
 8009b68:	4604      	mov	r4, r0
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	e767      	b.n	8009a3e <atan+0xbe>
 8009b6e:	4b43      	ldr	r3, [pc, #268]	; (8009c7c <atan+0x2fc>)
 8009b70:	429e      	cmp	r6, r3
 8009b72:	dc1a      	bgt.n	8009baa <atan+0x22a>
 8009b74:	2200      	movs	r2, #0
 8009b76:	4b42      	ldr	r3, [pc, #264]	; (8009c80 <atan+0x300>)
 8009b78:	f7f6 fafe 	bl	8000178 <__aeabi_dsub>
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	4606      	mov	r6, r0
 8009b80:	460f      	mov	r7, r1
 8009b82:	4b3f      	ldr	r3, [pc, #252]	; (8009c80 <atan+0x300>)
 8009b84:	4620      	mov	r0, r4
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7f6 fcae 	bl	80004e8 <__aeabi_dmul>
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4b39      	ldr	r3, [pc, #228]	; (8009c74 <atan+0x2f4>)
 8009b90:	f7f6 faf4 	bl	800017c <__adddf3>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	4630      	mov	r0, r6
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	f7f6 fdce 	bl	800073c <__aeabi_ddiv>
 8009ba0:	f04f 0a02 	mov.w	sl, #2
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	460d      	mov	r5, r1
 8009ba8:	e749      	b.n	8009a3e <atan+0xbe>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	2000      	movs	r0, #0
 8009bb0:	4934      	ldr	r1, [pc, #208]	; (8009c84 <atan+0x304>)
 8009bb2:	f7f6 fdc3 	bl	800073c <__aeabi_ddiv>
 8009bb6:	f04f 0a03 	mov.w	sl, #3
 8009bba:	4604      	mov	r4, r0
 8009bbc:	460d      	mov	r5, r1
 8009bbe:	e73e      	b.n	8009a3e <atan+0xbe>
 8009bc0:	4b31      	ldr	r3, [pc, #196]	; (8009c88 <atan+0x308>)
 8009bc2:	4e32      	ldr	r6, [pc, #200]	; (8009c8c <atan+0x30c>)
 8009bc4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009bc8:	4456      	add	r6, sl
 8009bca:	449a      	add	sl, r3
 8009bcc:	e9da 2300 	ldrd	r2, r3, [sl]
 8009bd0:	f7f6 fad2 	bl	8000178 <__aeabi_dsub>
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	462b      	mov	r3, r5
 8009bd8:	f7f6 face 	bl	8000178 <__aeabi_dsub>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009be4:	f7f6 fac8 	bl	8000178 <__aeabi_dsub>
 8009be8:	f1bb 0f00 	cmp.w	fp, #0
 8009bec:	4604      	mov	r4, r0
 8009bee:	460d      	mov	r5, r1
 8009bf0:	f6bf aee4 	bge.w	80099bc <atan+0x3c>
 8009bf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bf8:	461d      	mov	r5, r3
 8009bfa:	e6df      	b.n	80099bc <atan+0x3c>
 8009bfc:	4d24      	ldr	r5, [pc, #144]	; (8009c90 <atan+0x310>)
 8009bfe:	e6dd      	b.n	80099bc <atan+0x3c>
 8009c00:	8800759c 	.word	0x8800759c
 8009c04:	7e37e43c 	.word	0x7e37e43c
 8009c08:	e322da11 	.word	0xe322da11
 8009c0c:	3f90ad3a 	.word	0x3f90ad3a
 8009c10:	24760deb 	.word	0x24760deb
 8009c14:	3fa97b4b 	.word	0x3fa97b4b
 8009c18:	a0d03d51 	.word	0xa0d03d51
 8009c1c:	3fb10d66 	.word	0x3fb10d66
 8009c20:	c54c206e 	.word	0xc54c206e
 8009c24:	3fb745cd 	.word	0x3fb745cd
 8009c28:	920083ff 	.word	0x920083ff
 8009c2c:	3fc24924 	.word	0x3fc24924
 8009c30:	5555550d 	.word	0x5555550d
 8009c34:	3fd55555 	.word	0x3fd55555
 8009c38:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c3c:	bfa2b444 	.word	0xbfa2b444
 8009c40:	52defd9a 	.word	0x52defd9a
 8009c44:	3fadde2d 	.word	0x3fadde2d
 8009c48:	af749a6d 	.word	0xaf749a6d
 8009c4c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c50:	fe231671 	.word	0xfe231671
 8009c54:	3fbc71c6 	.word	0x3fbc71c6
 8009c58:	9998ebc4 	.word	0x9998ebc4
 8009c5c:	3fc99999 	.word	0x3fc99999
 8009c60:	440fffff 	.word	0x440fffff
 8009c64:	7ff00000 	.word	0x7ff00000
 8009c68:	54442d18 	.word	0x54442d18
 8009c6c:	3ff921fb 	.word	0x3ff921fb
 8009c70:	3fdbffff 	.word	0x3fdbffff
 8009c74:	3ff00000 	.word	0x3ff00000
 8009c78:	3ff2ffff 	.word	0x3ff2ffff
 8009c7c:	40037fff 	.word	0x40037fff
 8009c80:	3ff80000 	.word	0x3ff80000
 8009c84:	bff00000 	.word	0xbff00000
 8009c88:	0800e568 	.word	0x0800e568
 8009c8c:	0800e548 	.word	0x0800e548
 8009c90:	bff921fb 	.word	0xbff921fb

08009c94 <cos>:
 8009c94:	b530      	push	{r4, r5, lr}
 8009c96:	4a18      	ldr	r2, [pc, #96]	; (8009cf8 <cos+0x64>)
 8009c98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	dc04      	bgt.n	8009cac <cos+0x18>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f001 fe6b 	bl	800b980 <__kernel_cos>
 8009caa:	e006      	b.n	8009cba <cos+0x26>
 8009cac:	4a13      	ldr	r2, [pc, #76]	; (8009cfc <cos+0x68>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	dd05      	ble.n	8009cbe <cos+0x2a>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	f7f6 fa5f 	bl	8000178 <__aeabi_dsub>
 8009cba:	b007      	add	sp, #28
 8009cbc:	bd30      	pop	{r4, r5, pc}
 8009cbe:	aa02      	add	r2, sp, #8
 8009cc0:	f001 fbc2 	bl	800b448 <__ieee754_rem_pio2>
 8009cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cc8:	f000 0403 	and.w	r4, r0, #3
 8009ccc:	2c01      	cmp	r4, #1
 8009cce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cd2:	d008      	beq.n	8009ce6 <cos+0x52>
 8009cd4:	2c02      	cmp	r4, #2
 8009cd6:	d00c      	beq.n	8009cf2 <cos+0x5e>
 8009cd8:	2c00      	cmp	r4, #0
 8009cda:	d0e4      	beq.n	8009ca6 <cos+0x12>
 8009cdc:	2401      	movs	r4, #1
 8009cde:	9400      	str	r4, [sp, #0]
 8009ce0:	f002 fa56 	bl	800c190 <__kernel_sin>
 8009ce4:	e7e9      	b.n	8009cba <cos+0x26>
 8009ce6:	9400      	str	r4, [sp, #0]
 8009ce8:	f002 fa52 	bl	800c190 <__kernel_sin>
 8009cec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009cf0:	e7e3      	b.n	8009cba <cos+0x26>
 8009cf2:	f001 fe45 	bl	800b980 <__kernel_cos>
 8009cf6:	e7f9      	b.n	8009cec <cos+0x58>
 8009cf8:	3fe921fb 	.word	0x3fe921fb
 8009cfc:	7fefffff 	.word	0x7fefffff

08009d00 <fabs>:
 8009d00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d04:	4619      	mov	r1, r3
 8009d06:	4770      	bx	lr

08009d08 <sin>:
 8009d08:	b530      	push	{r4, r5, lr}
 8009d0a:	4a1a      	ldr	r2, [pc, #104]	; (8009d74 <sin+0x6c>)
 8009d0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d10:	4293      	cmp	r3, r2
 8009d12:	b087      	sub	sp, #28
 8009d14:	dc06      	bgt.n	8009d24 <sin+0x1c>
 8009d16:	2300      	movs	r3, #0
 8009d18:	2200      	movs	r2, #0
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f002 fa37 	bl	800c190 <__kernel_sin>
 8009d22:	e006      	b.n	8009d32 <sin+0x2a>
 8009d24:	4a14      	ldr	r2, [pc, #80]	; (8009d78 <sin+0x70>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	dd05      	ble.n	8009d36 <sin+0x2e>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	f7f6 fa23 	bl	8000178 <__aeabi_dsub>
 8009d32:	b007      	add	sp, #28
 8009d34:	bd30      	pop	{r4, r5, pc}
 8009d36:	aa02      	add	r2, sp, #8
 8009d38:	f001 fb86 	bl	800b448 <__ieee754_rem_pio2>
 8009d3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d40:	f000 0403 	and.w	r4, r0, #3
 8009d44:	2c01      	cmp	r4, #1
 8009d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d4a:	d005      	beq.n	8009d58 <sin+0x50>
 8009d4c:	2c02      	cmp	r4, #2
 8009d4e:	d006      	beq.n	8009d5e <sin+0x56>
 8009d50:	b964      	cbnz	r4, 8009d6c <sin+0x64>
 8009d52:	2401      	movs	r4, #1
 8009d54:	9400      	str	r4, [sp, #0]
 8009d56:	e7e2      	b.n	8009d1e <sin+0x16>
 8009d58:	f001 fe12 	bl	800b980 <__kernel_cos>
 8009d5c:	e7e9      	b.n	8009d32 <sin+0x2a>
 8009d5e:	2401      	movs	r4, #1
 8009d60:	9400      	str	r4, [sp, #0]
 8009d62:	f002 fa15 	bl	800c190 <__kernel_sin>
 8009d66:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009d6a:	e7e2      	b.n	8009d32 <sin+0x2a>
 8009d6c:	f001 fe08 	bl	800b980 <__kernel_cos>
 8009d70:	e7f9      	b.n	8009d66 <sin+0x5e>
 8009d72:	bf00      	nop
 8009d74:	3fe921fb 	.word	0x3fe921fb
 8009d78:	7fefffff 	.word	0x7fefffff

08009d7c <tan>:
 8009d7c:	b530      	push	{r4, r5, lr}
 8009d7e:	4a12      	ldr	r2, [pc, #72]	; (8009dc8 <tan+0x4c>)
 8009d80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d84:	4293      	cmp	r3, r2
 8009d86:	b087      	sub	sp, #28
 8009d88:	dc06      	bgt.n	8009d98 <tan+0x1c>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	2300      	movs	r3, #0
 8009d92:	f002 fab5 	bl	800c300 <__kernel_tan>
 8009d96:	e006      	b.n	8009da6 <tan+0x2a>
 8009d98:	4a0c      	ldr	r2, [pc, #48]	; (8009dcc <tan+0x50>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	dd05      	ble.n	8009daa <tan+0x2e>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	f7f6 f9e9 	bl	8000178 <__aeabi_dsub>
 8009da6:	b007      	add	sp, #28
 8009da8:	bd30      	pop	{r4, r5, pc}
 8009daa:	aa02      	add	r2, sp, #8
 8009dac:	f001 fb4c 	bl	800b448 <__ieee754_rem_pio2>
 8009db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009db4:	0040      	lsls	r0, r0, #1
 8009db6:	f000 0002 	and.w	r0, r0, #2
 8009dba:	f1c0 0001 	rsb	r0, r0, #1
 8009dbe:	9000      	str	r0, [sp, #0]
 8009dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dc4:	e7e5      	b.n	8009d92 <tan+0x16>
 8009dc6:	bf00      	nop
 8009dc8:	3fe921fb 	.word	0x3fe921fb
 8009dcc:	7fefffff 	.word	0x7fefffff

08009dd0 <asin>:
 8009dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dd4:	b08b      	sub	sp, #44	; 0x2c
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	460d      	mov	r5, r1
 8009dda:	f000 fa79 	bl	800a2d0 <__ieee754_asin>
 8009dde:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8009e74 <asin+0xa4>
 8009de2:	4606      	mov	r6, r0
 8009de4:	f998 3000 	ldrsb.w	r3, [r8]
 8009de8:	460f      	mov	r7, r1
 8009dea:	3301      	adds	r3, #1
 8009dec:	d036      	beq.n	8009e5c <asin+0x8c>
 8009dee:	4622      	mov	r2, r4
 8009df0:	462b      	mov	r3, r5
 8009df2:	4620      	mov	r0, r4
 8009df4:	4629      	mov	r1, r5
 8009df6:	f7f6 fe11 	bl	8000a1c <__aeabi_dcmpun>
 8009dfa:	4681      	mov	r9, r0
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d12d      	bne.n	8009e5c <asin+0x8c>
 8009e00:	4620      	mov	r0, r4
 8009e02:	4629      	mov	r1, r5
 8009e04:	f7ff ff7c 	bl	8009d00 <fabs>
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4b17      	ldr	r3, [pc, #92]	; (8009e68 <asin+0x98>)
 8009e0c:	f7f6 fdfc 	bl	8000a08 <__aeabi_dcmpgt>
 8009e10:	b320      	cbz	r0, 8009e5c <asin+0x8c>
 8009e12:	2301      	movs	r3, #1
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	4b15      	ldr	r3, [pc, #84]	; (8009e6c <asin+0x9c>)
 8009e18:	4815      	ldr	r0, [pc, #84]	; (8009e70 <asin+0xa0>)
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009e20:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009e24:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009e28:	f002 fcb8 	bl	800c79c <nan>
 8009e2c:	f998 3000 	ldrsb.w	r3, [r8]
 8009e30:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d104      	bne.n	8009e42 <asin+0x72>
 8009e38:	f002 fdba 	bl	800c9b0 <__errno>
 8009e3c:	2321      	movs	r3, #33	; 0x21
 8009e3e:	6003      	str	r3, [r0, #0]
 8009e40:	e004      	b.n	8009e4c <asin+0x7c>
 8009e42:	4668      	mov	r0, sp
 8009e44:	f002 fca8 	bl	800c798 <matherr>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d0f5      	beq.n	8009e38 <asin+0x68>
 8009e4c:	9b08      	ldr	r3, [sp, #32]
 8009e4e:	b11b      	cbz	r3, 8009e58 <asin+0x88>
 8009e50:	f002 fdae 	bl	800c9b0 <__errno>
 8009e54:	9b08      	ldr	r3, [sp, #32]
 8009e56:	6003      	str	r3, [r0, #0]
 8009e58:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	4639      	mov	r1, r7
 8009e60:	b00b      	add	sp, #44	; 0x2c
 8009e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e66:	bf00      	nop
 8009e68:	3ff00000 	.word	0x3ff00000
 8009e6c:	0800e588 	.word	0x0800e588
 8009e70:	0800e590 	.word	0x0800e590
 8009e74:	200000c4 	.word	0x200000c4

08009e78 <log>:
 8009e78:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8009e7c:	b08a      	sub	sp, #40	; 0x28
 8009e7e:	4604      	mov	r4, r0
 8009e80:	460d      	mov	r5, r1
 8009e82:	f000 fc21 	bl	800a6c8 <__ieee754_log>
 8009e86:	4b34      	ldr	r3, [pc, #208]	; (8009f58 <log+0xe0>)
 8009e88:	4680      	mov	r8, r0
 8009e8a:	f993 6000 	ldrsb.w	r6, [r3]
 8009e8e:	4689      	mov	r9, r1
 8009e90:	1c73      	adds	r3, r6, #1
 8009e92:	d05b      	beq.n	8009f4c <log+0xd4>
 8009e94:	4622      	mov	r2, r4
 8009e96:	462b      	mov	r3, r5
 8009e98:	4620      	mov	r0, r4
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	f7f6 fdbe 	bl	8000a1c <__aeabi_dcmpun>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d153      	bne.n	8009f4c <log+0xd4>
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	4629      	mov	r1, r5
 8009eac:	f7f6 fdac 	bl	8000a08 <__aeabi_dcmpgt>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d14b      	bne.n	8009f4c <log+0xd4>
 8009eb4:	4b29      	ldr	r3, [pc, #164]	; (8009f5c <log+0xe4>)
 8009eb6:	9008      	str	r0, [sp, #32]
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009ebe:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009ec2:	b9a6      	cbnz	r6, 8009eee <log+0x76>
 8009ec4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009ec8:	4b25      	ldr	r3, [pc, #148]	; (8009f60 <log+0xe8>)
 8009eca:	4620      	mov	r0, r4
 8009ecc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f7f6 fd6f 	bl	80009b8 <__aeabi_dcmpeq>
 8009eda:	bb40      	cbnz	r0, 8009f2e <log+0xb6>
 8009edc:	2301      	movs	r3, #1
 8009ede:	2e02      	cmp	r6, #2
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	d119      	bne.n	8009f18 <log+0xa0>
 8009ee4:	f002 fd64 	bl	800c9b0 <__errno>
 8009ee8:	2321      	movs	r3, #33	; 0x21
 8009eea:	6003      	str	r3, [r0, #0]
 8009eec:	e019      	b.n	8009f22 <log+0xaa>
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4b1c      	ldr	r3, [pc, #112]	; (8009f64 <log+0xec>)
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ef8:	4629      	mov	r1, r5
 8009efa:	2200      	movs	r2, #0
 8009efc:	2300      	movs	r3, #0
 8009efe:	f7f6 fd5b 	bl	80009b8 <__aeabi_dcmpeq>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d0ea      	beq.n	8009edc <log+0x64>
 8009f06:	2302      	movs	r3, #2
 8009f08:	429e      	cmp	r6, r3
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	d111      	bne.n	8009f32 <log+0xba>
 8009f0e:	f002 fd4f 	bl	800c9b0 <__errno>
 8009f12:	2322      	movs	r3, #34	; 0x22
 8009f14:	6003      	str	r3, [r0, #0]
 8009f16:	e011      	b.n	8009f3c <log+0xc4>
 8009f18:	4668      	mov	r0, sp
 8009f1a:	f002 fc3d 	bl	800c798 <matherr>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d0e0      	beq.n	8009ee4 <log+0x6c>
 8009f22:	4811      	ldr	r0, [pc, #68]	; (8009f68 <log+0xf0>)
 8009f24:	f002 fc3a 	bl	800c79c <nan>
 8009f28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009f2c:	e006      	b.n	8009f3c <log+0xc4>
 8009f2e:	2302      	movs	r3, #2
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	4668      	mov	r0, sp
 8009f34:	f002 fc30 	bl	800c798 <matherr>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d0e8      	beq.n	8009f0e <log+0x96>
 8009f3c:	9b08      	ldr	r3, [sp, #32]
 8009f3e:	b11b      	cbz	r3, 8009f48 <log+0xd0>
 8009f40:	f002 fd36 	bl	800c9b0 <__errno>
 8009f44:	9b08      	ldr	r3, [sp, #32]
 8009f46:	6003      	str	r3, [r0, #0]
 8009f48:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	4649      	mov	r1, r9
 8009f50:	b00a      	add	sp, #40	; 0x28
 8009f52:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009f56:	bf00      	nop
 8009f58:	200000c4 	.word	0x200000c4
 8009f5c:	0800e58d 	.word	0x0800e58d
 8009f60:	c7efffff 	.word	0xc7efffff
 8009f64:	fff00000 	.word	0xfff00000
 8009f68:	0800e590 	.word	0x0800e590

08009f6c <pow>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	b08f      	sub	sp, #60	; 0x3c
 8009f72:	461d      	mov	r5, r3
 8009f74:	4680      	mov	r8, r0
 8009f76:	4689      	mov	r9, r1
 8009f78:	4614      	mov	r4, r2
 8009f7a:	f000 fd59 	bl	800aa30 <__ieee754_pow>
 8009f7e:	4fa1      	ldr	r7, [pc, #644]	; (800a204 <pow+0x298>)
 8009f80:	e9cd 0100 	strd	r0, r1, [sp]
 8009f84:	f997 3000 	ldrsb.w	r3, [r7]
 8009f88:	463e      	mov	r6, r7
 8009f8a:	9302      	str	r3, [sp, #8]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	d05f      	beq.n	800a050 <pow+0xe4>
 8009f90:	4622      	mov	r2, r4
 8009f92:	462b      	mov	r3, r5
 8009f94:	4620      	mov	r0, r4
 8009f96:	4629      	mov	r1, r5
 8009f98:	f7f6 fd40 	bl	8000a1c <__aeabi_dcmpun>
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d156      	bne.n	800a050 <pow+0xe4>
 8009fa2:	4642      	mov	r2, r8
 8009fa4:	464b      	mov	r3, r9
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	4649      	mov	r1, r9
 8009faa:	f7f6 fd37 	bl	8000a1c <__aeabi_dcmpun>
 8009fae:	9003      	str	r0, [sp, #12]
 8009fb0:	b1e8      	cbz	r0, 8009fee <pow+0x82>
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7f6 fcfd 	bl	80009b8 <__aeabi_dcmpeq>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d046      	beq.n	800a050 <pow+0xe4>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	9304      	str	r3, [sp, #16]
 8009fc8:	4b8f      	ldr	r3, [pc, #572]	; (800a208 <pow+0x29c>)
 8009fca:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009fce:	9305      	str	r3, [sp, #20]
 8009fd0:	4b8e      	ldr	r3, [pc, #568]	; (800a20c <pow+0x2a0>)
 8009fd2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009fd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009fda:	9b02      	ldr	r3, [sp, #8]
 8009fdc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d031      	beq.n	800a048 <pow+0xdc>
 8009fe4:	a804      	add	r0, sp, #16
 8009fe6:	f002 fbd7 	bl	800c798 <matherr>
 8009fea:	bb38      	cbnz	r0, 800a03c <pow+0xd0>
 8009fec:	e058      	b.n	800a0a0 <pow+0x134>
 8009fee:	f04f 0a00 	mov.w	sl, #0
 8009ff2:	f04f 0b00 	mov.w	fp, #0
 8009ff6:	4652      	mov	r2, sl
 8009ff8:	465b      	mov	r3, fp
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	4649      	mov	r1, r9
 8009ffe:	f7f6 fcdb 	bl	80009b8 <__aeabi_dcmpeq>
 800a002:	2800      	cmp	r0, #0
 800a004:	d051      	beq.n	800a0aa <pow+0x13e>
 800a006:	4652      	mov	r2, sl
 800a008:	465b      	mov	r3, fp
 800a00a:	4620      	mov	r0, r4
 800a00c:	4629      	mov	r1, r5
 800a00e:	f7f6 fcd3 	bl	80009b8 <__aeabi_dcmpeq>
 800a012:	4606      	mov	r6, r0
 800a014:	b308      	cbz	r0, 800a05a <pow+0xee>
 800a016:	2301      	movs	r3, #1
 800a018:	9304      	str	r3, [sp, #16]
 800a01a:	4b7b      	ldr	r3, [pc, #492]	; (800a208 <pow+0x29c>)
 800a01c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a020:	9305      	str	r3, [sp, #20]
 800a022:	9b03      	ldr	r3, [sp, #12]
 800a024:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a028:	930c      	str	r3, [sp, #48]	; 0x30
 800a02a:	9b02      	ldr	r3, [sp, #8]
 800a02c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a030:	2b00      	cmp	r3, #0
 800a032:	d0d7      	beq.n	8009fe4 <pow+0x78>
 800a034:	2200      	movs	r2, #0
 800a036:	4b75      	ldr	r3, [pc, #468]	; (800a20c <pow+0x2a0>)
 800a038:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a03c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a03e:	b11b      	cbz	r3, 800a048 <pow+0xdc>
 800a040:	f002 fcb6 	bl	800c9b0 <__errno>
 800a044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a046:	6003      	str	r3, [r0, #0]
 800a048:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800a04c:	e9cd 3400 	strd	r3, r4, [sp]
 800a050:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a054:	b00f      	add	sp, #60	; 0x3c
 800a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05a:	4620      	mov	r0, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	f002 fb0f 	bl	800c680 <finite>
 800a062:	2800      	cmp	r0, #0
 800a064:	d0f4      	beq.n	800a050 <pow+0xe4>
 800a066:	4652      	mov	r2, sl
 800a068:	465b      	mov	r3, fp
 800a06a:	4620      	mov	r0, r4
 800a06c:	4629      	mov	r1, r5
 800a06e:	f7f6 fcad 	bl	80009cc <__aeabi_dcmplt>
 800a072:	2800      	cmp	r0, #0
 800a074:	d0ec      	beq.n	800a050 <pow+0xe4>
 800a076:	2301      	movs	r3, #1
 800a078:	9304      	str	r3, [sp, #16]
 800a07a:	4b63      	ldr	r3, [pc, #396]	; (800a208 <pow+0x29c>)
 800a07c:	960c      	str	r6, [sp, #48]	; 0x30
 800a07e:	9305      	str	r3, [sp, #20]
 800a080:	f997 3000 	ldrsb.w	r3, [r7]
 800a084:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a088:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a08c:	b913      	cbnz	r3, 800a094 <pow+0x128>
 800a08e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a092:	e7a7      	b.n	8009fe4 <pow+0x78>
 800a094:	2000      	movs	r0, #0
 800a096:	495e      	ldr	r1, [pc, #376]	; (800a210 <pow+0x2a4>)
 800a098:	2b02      	cmp	r3, #2
 800a09a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a09e:	d1a1      	bne.n	8009fe4 <pow+0x78>
 800a0a0:	f002 fc86 	bl	800c9b0 <__errno>
 800a0a4:	2321      	movs	r3, #33	; 0x21
 800a0a6:	6003      	str	r3, [r0, #0]
 800a0a8:	e7c8      	b.n	800a03c <pow+0xd0>
 800a0aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ae:	f002 fae7 	bl	800c680 <finite>
 800a0b2:	9002      	str	r0, [sp, #8]
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d177      	bne.n	800a1a8 <pow+0x23c>
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	f002 fae0 	bl	800c680 <finite>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d071      	beq.n	800a1a8 <pow+0x23c>
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	f002 fada 	bl	800c680 <finite>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d06b      	beq.n	800a1a8 <pow+0x23c>
 800a0d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	f7f6 fca0 	bl	8000a1c <__aeabi_dcmpun>
 800a0dc:	f997 7000 	ldrsb.w	r7, [r7]
 800a0e0:	4b49      	ldr	r3, [pc, #292]	; (800a208 <pow+0x29c>)
 800a0e2:	b1a0      	cbz	r0, 800a10e <pow+0x1a2>
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0ea:	9b02      	ldr	r3, [sp, #8]
 800a0ec:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a0f0:	930c      	str	r3, [sp, #48]	; 0x30
 800a0f2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a0f6:	2f00      	cmp	r7, #0
 800a0f8:	d0c9      	beq.n	800a08e <pow+0x122>
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	465b      	mov	r3, fp
 800a0fe:	4650      	mov	r0, sl
 800a100:	4659      	mov	r1, fp
 800a102:	f7f6 fb1b 	bl	800073c <__aeabi_ddiv>
 800a106:	2f02      	cmp	r7, #2
 800a108:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a10c:	e7c7      	b.n	800a09e <pow+0x132>
 800a10e:	2203      	movs	r2, #3
 800a110:	900c      	str	r0, [sp, #48]	; 0x30
 800a112:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a116:	4620      	mov	r0, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	2200      	movs	r2, #0
 800a11c:	4b3d      	ldr	r3, [pc, #244]	; (800a214 <pow+0x2a8>)
 800a11e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a122:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a126:	f7f6 f9df 	bl	80004e8 <__aeabi_dmul>
 800a12a:	4604      	mov	r4, r0
 800a12c:	460d      	mov	r5, r1
 800a12e:	bb17      	cbnz	r7, 800a176 <pow+0x20a>
 800a130:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a134:	4b38      	ldr	r3, [pc, #224]	; (800a218 <pow+0x2ac>)
 800a136:	4640      	mov	r0, r8
 800a138:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a13c:	4649      	mov	r1, r9
 800a13e:	4652      	mov	r2, sl
 800a140:	465b      	mov	r3, fp
 800a142:	f7f6 fc43 	bl	80009cc <__aeabi_dcmplt>
 800a146:	2800      	cmp	r0, #0
 800a148:	d054      	beq.n	800a1f4 <pow+0x288>
 800a14a:	4620      	mov	r0, r4
 800a14c:	4629      	mov	r1, r5
 800a14e:	f002 fb2b 	bl	800c7a8 <rint>
 800a152:	4622      	mov	r2, r4
 800a154:	462b      	mov	r3, r5
 800a156:	f7f6 fc2f 	bl	80009b8 <__aeabi_dcmpeq>
 800a15a:	b920      	cbnz	r0, 800a166 <pow+0x1fa>
 800a15c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a160:	4b2e      	ldr	r3, [pc, #184]	; (800a21c <pow+0x2b0>)
 800a162:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a166:	f996 3000 	ldrsb.w	r3, [r6]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d142      	bne.n	800a1f4 <pow+0x288>
 800a16e:	f002 fc1f 	bl	800c9b0 <__errno>
 800a172:	2322      	movs	r3, #34	; 0x22
 800a174:	e797      	b.n	800a0a6 <pow+0x13a>
 800a176:	2200      	movs	r2, #0
 800a178:	4b29      	ldr	r3, [pc, #164]	; (800a220 <pow+0x2b4>)
 800a17a:	4640      	mov	r0, r8
 800a17c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a180:	4649      	mov	r1, r9
 800a182:	4652      	mov	r2, sl
 800a184:	465b      	mov	r3, fp
 800a186:	f7f6 fc21 	bl	80009cc <__aeabi_dcmplt>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d0eb      	beq.n	800a166 <pow+0x1fa>
 800a18e:	4620      	mov	r0, r4
 800a190:	4629      	mov	r1, r5
 800a192:	f002 fb09 	bl	800c7a8 <rint>
 800a196:	4622      	mov	r2, r4
 800a198:	462b      	mov	r3, r5
 800a19a:	f7f6 fc0d 	bl	80009b8 <__aeabi_dcmpeq>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d1e1      	bne.n	800a166 <pow+0x1fa>
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4b1a      	ldr	r3, [pc, #104]	; (800a210 <pow+0x2a4>)
 800a1a6:	e7dc      	b.n	800a162 <pow+0x1f6>
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f7f6 fc02 	bl	80009b8 <__aeabi_dcmpeq>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	f43f af4b 	beq.w	800a050 <pow+0xe4>
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	4649      	mov	r1, r9
 800a1be:	f002 fa5f 	bl	800c680 <finite>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	f43f af44 	beq.w	800a050 <pow+0xe4>
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	f002 fa58 	bl	800c680 <finite>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	f43f af3d 	beq.w	800a050 <pow+0xe4>
 800a1d6:	2304      	movs	r3, #4
 800a1d8:	9304      	str	r3, [sp, #16]
 800a1da:	4b0b      	ldr	r3, [pc, #44]	; (800a208 <pow+0x29c>)
 800a1dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a1e0:	9305      	str	r3, [sp, #20]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2400      	movs	r4, #0
 800a1e6:	930c      	str	r3, [sp, #48]	; 0x30
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a1ee:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800a1f2:	e7b8      	b.n	800a166 <pow+0x1fa>
 800a1f4:	a804      	add	r0, sp, #16
 800a1f6:	f002 facf 	bl	800c798 <matherr>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	f47f af1e 	bne.w	800a03c <pow+0xd0>
 800a200:	e7b5      	b.n	800a16e <pow+0x202>
 800a202:	bf00      	nop
 800a204:	200000c4 	.word	0x200000c4
 800a208:	0800e591 	.word	0x0800e591
 800a20c:	3ff00000 	.word	0x3ff00000
 800a210:	fff00000 	.word	0xfff00000
 800a214:	3fe00000 	.word	0x3fe00000
 800a218:	47efffff 	.word	0x47efffff
 800a21c:	c7efffff 	.word	0xc7efffff
 800a220:	7ff00000 	.word	0x7ff00000

0800a224 <sqrt>:
 800a224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	b08b      	sub	sp, #44	; 0x2c
 800a22a:	4604      	mov	r4, r0
 800a22c:	460d      	mov	r5, r1
 800a22e:	f001 fafb 	bl	800b828 <__ieee754_sqrt>
 800a232:	4b24      	ldr	r3, [pc, #144]	; (800a2c4 <sqrt+0xa0>)
 800a234:	4680      	mov	r8, r0
 800a236:	f993 a000 	ldrsb.w	sl, [r3]
 800a23a:	4689      	mov	r9, r1
 800a23c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a240:	d02b      	beq.n	800a29a <sqrt+0x76>
 800a242:	4622      	mov	r2, r4
 800a244:	462b      	mov	r3, r5
 800a246:	4620      	mov	r0, r4
 800a248:	4629      	mov	r1, r5
 800a24a:	f7f6 fbe7 	bl	8000a1c <__aeabi_dcmpun>
 800a24e:	4683      	mov	fp, r0
 800a250:	bb18      	cbnz	r0, 800a29a <sqrt+0x76>
 800a252:	2600      	movs	r6, #0
 800a254:	2700      	movs	r7, #0
 800a256:	4632      	mov	r2, r6
 800a258:	463b      	mov	r3, r7
 800a25a:	4620      	mov	r0, r4
 800a25c:	4629      	mov	r1, r5
 800a25e:	f7f6 fbb5 	bl	80009cc <__aeabi_dcmplt>
 800a262:	b1d0      	cbz	r0, 800a29a <sqrt+0x76>
 800a264:	2301      	movs	r3, #1
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	4b17      	ldr	r3, [pc, #92]	; (800a2c8 <sqrt+0xa4>)
 800a26a:	f8cd b020 	str.w	fp, [sp, #32]
 800a26e:	9301      	str	r3, [sp, #4]
 800a270:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a274:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a278:	f1ba 0f00 	cmp.w	sl, #0
 800a27c:	d112      	bne.n	800a2a4 <sqrt+0x80>
 800a27e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a282:	4668      	mov	r0, sp
 800a284:	f002 fa88 	bl	800c798 <matherr>
 800a288:	b1b8      	cbz	r0, 800a2ba <sqrt+0x96>
 800a28a:	9b08      	ldr	r3, [sp, #32]
 800a28c:	b11b      	cbz	r3, 800a296 <sqrt+0x72>
 800a28e:	f002 fb8f 	bl	800c9b0 <__errno>
 800a292:	9b08      	ldr	r3, [sp, #32]
 800a294:	6003      	str	r3, [r0, #0]
 800a296:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a29a:	4640      	mov	r0, r8
 800a29c:	4649      	mov	r1, r9
 800a29e:	b00b      	add	sp, #44	; 0x2c
 800a2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a4:	4632      	mov	r2, r6
 800a2a6:	463b      	mov	r3, r7
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	f7f6 fa46 	bl	800073c <__aeabi_ddiv>
 800a2b0:	f1ba 0f02 	cmp.w	sl, #2
 800a2b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a2b8:	d1e3      	bne.n	800a282 <sqrt+0x5e>
 800a2ba:	f002 fb79 	bl	800c9b0 <__errno>
 800a2be:	2321      	movs	r3, #33	; 0x21
 800a2c0:	6003      	str	r3, [r0, #0]
 800a2c2:	e7e2      	b.n	800a28a <sqrt+0x66>
 800a2c4:	200000c4 	.word	0x200000c4
 800a2c8:	0800e595 	.word	0x0800e595
 800a2cc:	00000000 	.word	0x00000000

0800a2d0 <__ieee754_asin>:
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	4bc4      	ldr	r3, [pc, #784]	; (800a5e8 <__ieee754_asin+0x318>)
 800a2d6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a2da:	b087      	sub	sp, #28
 800a2dc:	429f      	cmp	r7, r3
 800a2de:	4604      	mov	r4, r0
 800a2e0:	460d      	mov	r5, r1
 800a2e2:	9103      	str	r1, [sp, #12]
 800a2e4:	dd2a      	ble.n	800a33c <__ieee754_asin+0x6c>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800a2ec:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800a2f0:	433b      	orrs	r3, r7
 800a2f2:	d114      	bne.n	800a31e <__ieee754_asin+0x4e>
 800a2f4:	a3a2      	add	r3, pc, #648	; (adr r3, 800a580 <__ieee754_asin+0x2b0>)
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	f7f6 f8f5 	bl	80004e8 <__aeabi_dmul>
 800a2fe:	a3a2      	add	r3, pc, #648	; (adr r3, 800a588 <__ieee754_asin+0x2b8>)
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	4606      	mov	r6, r0
 800a306:	460f      	mov	r7, r1
 800a308:	4620      	mov	r0, r4
 800a30a:	4629      	mov	r1, r5
 800a30c:	f7f6 f8ec 	bl	80004e8 <__aeabi_dmul>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4630      	mov	r0, r6
 800a316:	4639      	mov	r1, r7
 800a318:	f7f5 ff30 	bl	800017c <__adddf3>
 800a31c:	e007      	b.n	800a32e <__ieee754_asin+0x5e>
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	f7f5 ff29 	bl	8000178 <__aeabi_dsub>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	f7f6 fa07 	bl	800073c <__aeabi_ddiv>
 800a32e:	4604      	mov	r4, r0
 800a330:	460d      	mov	r5, r1
 800a332:	4620      	mov	r0, r4
 800a334:	4629      	mov	r1, r5
 800a336:	b007      	add	sp, #28
 800a338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33c:	4bab      	ldr	r3, [pc, #684]	; (800a5ec <__ieee754_asin+0x31c>)
 800a33e:	429f      	cmp	r7, r3
 800a340:	dc0e      	bgt.n	800a360 <__ieee754_asin+0x90>
 800a342:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800a346:	f280 80ab 	bge.w	800a4a0 <__ieee754_asin+0x1d0>
 800a34a:	a391      	add	r3, pc, #580	; (adr r3, 800a590 <__ieee754_asin+0x2c0>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ff14 	bl	800017c <__adddf3>
 800a354:	2200      	movs	r2, #0
 800a356:	4ba6      	ldr	r3, [pc, #664]	; (800a5f0 <__ieee754_asin+0x320>)
 800a358:	f7f6 fb56 	bl	8000a08 <__aeabi_dcmpgt>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d1e8      	bne.n	800a332 <__ieee754_asin+0x62>
 800a360:	4620      	mov	r0, r4
 800a362:	4629      	mov	r1, r5
 800a364:	f7ff fccc 	bl	8009d00 <fabs>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	2000      	movs	r0, #0
 800a36e:	49a0      	ldr	r1, [pc, #640]	; (800a5f0 <__ieee754_asin+0x320>)
 800a370:	f7f5 ff02 	bl	8000178 <__aeabi_dsub>
 800a374:	2200      	movs	r2, #0
 800a376:	4b9f      	ldr	r3, [pc, #636]	; (800a5f4 <__ieee754_asin+0x324>)
 800a378:	f7f6 f8b6 	bl	80004e8 <__aeabi_dmul>
 800a37c:	a386      	add	r3, pc, #536	; (adr r3, 800a598 <__ieee754_asin+0x2c8>)
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	4604      	mov	r4, r0
 800a384:	460d      	mov	r5, r1
 800a386:	f7f6 f8af 	bl	80004e8 <__aeabi_dmul>
 800a38a:	a385      	add	r3, pc, #532	; (adr r3, 800a5a0 <__ieee754_asin+0x2d0>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f5 fef4 	bl	800017c <__adddf3>
 800a394:	4622      	mov	r2, r4
 800a396:	462b      	mov	r3, r5
 800a398:	f7f6 f8a6 	bl	80004e8 <__aeabi_dmul>
 800a39c:	a382      	add	r3, pc, #520	; (adr r3, 800a5a8 <__ieee754_asin+0x2d8>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f5 fee9 	bl	8000178 <__aeabi_dsub>
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	462b      	mov	r3, r5
 800a3aa:	f7f6 f89d 	bl	80004e8 <__aeabi_dmul>
 800a3ae:	a380      	add	r3, pc, #512	; (adr r3, 800a5b0 <__ieee754_asin+0x2e0>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7f5 fee2 	bl	800017c <__adddf3>
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	462b      	mov	r3, r5
 800a3bc:	f7f6 f894 	bl	80004e8 <__aeabi_dmul>
 800a3c0:	a37d      	add	r3, pc, #500	; (adr r3, 800a5b8 <__ieee754_asin+0x2e8>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7f5 fed7 	bl	8000178 <__aeabi_dsub>
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	462b      	mov	r3, r5
 800a3ce:	f7f6 f88b 	bl	80004e8 <__aeabi_dmul>
 800a3d2:	a37b      	add	r3, pc, #492	; (adr r3, 800a5c0 <__ieee754_asin+0x2f0>)
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	f7f5 fed0 	bl	800017c <__adddf3>
 800a3dc:	4622      	mov	r2, r4
 800a3de:	462b      	mov	r3, r5
 800a3e0:	f7f6 f882 	bl	80004e8 <__aeabi_dmul>
 800a3e4:	a378      	add	r3, pc, #480	; (adr r3, 800a5c8 <__ieee754_asin+0x2f8>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	4680      	mov	r8, r0
 800a3ec:	4689      	mov	r9, r1
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	f7f6 f879 	bl	80004e8 <__aeabi_dmul>
 800a3f6:	a376      	add	r3, pc, #472	; (adr r3, 800a5d0 <__ieee754_asin+0x300>)
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	f7f5 febc 	bl	8000178 <__aeabi_dsub>
 800a400:	4622      	mov	r2, r4
 800a402:	462b      	mov	r3, r5
 800a404:	f7f6 f870 	bl	80004e8 <__aeabi_dmul>
 800a408:	a373      	add	r3, pc, #460	; (adr r3, 800a5d8 <__ieee754_asin+0x308>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	f7f5 feb5 	bl	800017c <__adddf3>
 800a412:	4622      	mov	r2, r4
 800a414:	462b      	mov	r3, r5
 800a416:	f7f6 f867 	bl	80004e8 <__aeabi_dmul>
 800a41a:	a371      	add	r3, pc, #452	; (adr r3, 800a5e0 <__ieee754_asin+0x310>)
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	f7f5 feaa 	bl	8000178 <__aeabi_dsub>
 800a424:	4622      	mov	r2, r4
 800a426:	462b      	mov	r3, r5
 800a428:	f7f6 f85e 	bl	80004e8 <__aeabi_dmul>
 800a42c:	4b70      	ldr	r3, [pc, #448]	; (800a5f0 <__ieee754_asin+0x320>)
 800a42e:	2200      	movs	r2, #0
 800a430:	f7f5 fea4 	bl	800017c <__adddf3>
 800a434:	e9cd 0100 	strd	r0, r1, [sp]
 800a438:	4620      	mov	r0, r4
 800a43a:	4629      	mov	r1, r5
 800a43c:	f001 f9f4 	bl	800b828 <__ieee754_sqrt>
 800a440:	4b6d      	ldr	r3, [pc, #436]	; (800a5f8 <__ieee754_asin+0x328>)
 800a442:	4682      	mov	sl, r0
 800a444:	429f      	cmp	r7, r3
 800a446:	468b      	mov	fp, r1
 800a448:	f340 80d8 	ble.w	800a5fc <__ieee754_asin+0x32c>
 800a44c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a450:	4640      	mov	r0, r8
 800a452:	4649      	mov	r1, r9
 800a454:	f7f6 f972 	bl	800073c <__aeabi_ddiv>
 800a458:	4652      	mov	r2, sl
 800a45a:	465b      	mov	r3, fp
 800a45c:	f7f6 f844 	bl	80004e8 <__aeabi_dmul>
 800a460:	4652      	mov	r2, sl
 800a462:	465b      	mov	r3, fp
 800a464:	f7f5 fe8a 	bl	800017c <__adddf3>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	f7f5 fe86 	bl	800017c <__adddf3>
 800a470:	a345      	add	r3, pc, #276	; (adr r3, 800a588 <__ieee754_asin+0x2b8>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	f7f5 fe7f 	bl	8000178 <__aeabi_dsub>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	a140      	add	r1, pc, #256	; (adr r1, 800a580 <__ieee754_asin+0x2b0>)
 800a480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a484:	f7f5 fe78 	bl	8000178 <__aeabi_dsub>
 800a488:	9b03      	ldr	r3, [sp, #12]
 800a48a:	4604      	mov	r4, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	bfdc      	itt	le
 800a490:	4602      	movle	r2, r0
 800a492:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a496:	460d      	mov	r5, r1
 800a498:	bfdc      	itt	le
 800a49a:	4614      	movle	r4, r2
 800a49c:	461d      	movle	r5, r3
 800a49e:	e748      	b.n	800a332 <__ieee754_asin+0x62>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	f7f6 f820 	bl	80004e8 <__aeabi_dmul>
 800a4a8:	a33b      	add	r3, pc, #236	; (adr r3, 800a598 <__ieee754_asin+0x2c8>)
 800a4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	460f      	mov	r7, r1
 800a4b2:	f7f6 f819 	bl	80004e8 <__aeabi_dmul>
 800a4b6:	a33a      	add	r3, pc, #232	; (adr r3, 800a5a0 <__ieee754_asin+0x2d0>)
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f7f5 fe5e 	bl	800017c <__adddf3>
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	f7f6 f810 	bl	80004e8 <__aeabi_dmul>
 800a4c8:	a337      	add	r3, pc, #220	; (adr r3, 800a5a8 <__ieee754_asin+0x2d8>)
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	f7f5 fe53 	bl	8000178 <__aeabi_dsub>
 800a4d2:	4632      	mov	r2, r6
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	f7f6 f807 	bl	80004e8 <__aeabi_dmul>
 800a4da:	a335      	add	r3, pc, #212	; (adr r3, 800a5b0 <__ieee754_asin+0x2e0>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	f7f5 fe4c 	bl	800017c <__adddf3>
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	f7f5 fffe 	bl	80004e8 <__aeabi_dmul>
 800a4ec:	a332      	add	r3, pc, #200	; (adr r3, 800a5b8 <__ieee754_asin+0x2e8>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	f7f5 fe41 	bl	8000178 <__aeabi_dsub>
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	463b      	mov	r3, r7
 800a4fa:	f7f5 fff5 	bl	80004e8 <__aeabi_dmul>
 800a4fe:	a330      	add	r3, pc, #192	; (adr r3, 800a5c0 <__ieee754_asin+0x2f0>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f7f5 fe3a 	bl	800017c <__adddf3>
 800a508:	4632      	mov	r2, r6
 800a50a:	463b      	mov	r3, r7
 800a50c:	f7f5 ffec 	bl	80004e8 <__aeabi_dmul>
 800a510:	a32d      	add	r3, pc, #180	; (adr r3, 800a5c8 <__ieee754_asin+0x2f8>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	4680      	mov	r8, r0
 800a518:	4689      	mov	r9, r1
 800a51a:	4630      	mov	r0, r6
 800a51c:	4639      	mov	r1, r7
 800a51e:	f7f5 ffe3 	bl	80004e8 <__aeabi_dmul>
 800a522:	a32b      	add	r3, pc, #172	; (adr r3, 800a5d0 <__ieee754_asin+0x300>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	f7f5 fe26 	bl	8000178 <__aeabi_dsub>
 800a52c:	4632      	mov	r2, r6
 800a52e:	463b      	mov	r3, r7
 800a530:	f7f5 ffda 	bl	80004e8 <__aeabi_dmul>
 800a534:	a328      	add	r3, pc, #160	; (adr r3, 800a5d8 <__ieee754_asin+0x308>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f7f5 fe1f 	bl	800017c <__adddf3>
 800a53e:	4632      	mov	r2, r6
 800a540:	463b      	mov	r3, r7
 800a542:	f7f5 ffd1 	bl	80004e8 <__aeabi_dmul>
 800a546:	a326      	add	r3, pc, #152	; (adr r3, 800a5e0 <__ieee754_asin+0x310>)
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	f7f5 fe14 	bl	8000178 <__aeabi_dsub>
 800a550:	4632      	mov	r2, r6
 800a552:	463b      	mov	r3, r7
 800a554:	f7f5 ffc8 	bl	80004e8 <__aeabi_dmul>
 800a558:	2200      	movs	r2, #0
 800a55a:	4b25      	ldr	r3, [pc, #148]	; (800a5f0 <__ieee754_asin+0x320>)
 800a55c:	f7f5 fe0e 	bl	800017c <__adddf3>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	4640      	mov	r0, r8
 800a566:	4649      	mov	r1, r9
 800a568:	f7f6 f8e8 	bl	800073c <__aeabi_ddiv>
 800a56c:	4622      	mov	r2, r4
 800a56e:	462b      	mov	r3, r5
 800a570:	f7f5 ffba 	bl	80004e8 <__aeabi_dmul>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	4620      	mov	r0, r4
 800a57a:	4629      	mov	r1, r5
 800a57c:	e6cc      	b.n	800a318 <__ieee754_asin+0x48>
 800a57e:	bf00      	nop
 800a580:	54442d18 	.word	0x54442d18
 800a584:	3ff921fb 	.word	0x3ff921fb
 800a588:	33145c07 	.word	0x33145c07
 800a58c:	3c91a626 	.word	0x3c91a626
 800a590:	8800759c 	.word	0x8800759c
 800a594:	7e37e43c 	.word	0x7e37e43c
 800a598:	0dfdf709 	.word	0x0dfdf709
 800a59c:	3f023de1 	.word	0x3f023de1
 800a5a0:	7501b288 	.word	0x7501b288
 800a5a4:	3f49efe0 	.word	0x3f49efe0
 800a5a8:	b5688f3b 	.word	0xb5688f3b
 800a5ac:	3fa48228 	.word	0x3fa48228
 800a5b0:	0e884455 	.word	0x0e884455
 800a5b4:	3fc9c155 	.word	0x3fc9c155
 800a5b8:	03eb6f7d 	.word	0x03eb6f7d
 800a5bc:	3fd4d612 	.word	0x3fd4d612
 800a5c0:	55555555 	.word	0x55555555
 800a5c4:	3fc55555 	.word	0x3fc55555
 800a5c8:	b12e9282 	.word	0xb12e9282
 800a5cc:	3fb3b8c5 	.word	0x3fb3b8c5
 800a5d0:	1b8d0159 	.word	0x1b8d0159
 800a5d4:	3fe6066c 	.word	0x3fe6066c
 800a5d8:	9c598ac8 	.word	0x9c598ac8
 800a5dc:	40002ae5 	.word	0x40002ae5
 800a5e0:	1c8a2d4b 	.word	0x1c8a2d4b
 800a5e4:	40033a27 	.word	0x40033a27
 800a5e8:	3fefffff 	.word	0x3fefffff
 800a5ec:	3fdfffff 	.word	0x3fdfffff
 800a5f0:	3ff00000 	.word	0x3ff00000
 800a5f4:	3fe00000 	.word	0x3fe00000
 800a5f8:	3fef3332 	.word	0x3fef3332
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	460f      	mov	r7, r1
 800a602:	f7f5 fdbb 	bl	800017c <__adddf3>
 800a606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a60a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a60e:	4640      	mov	r0, r8
 800a610:	4649      	mov	r1, r9
 800a612:	f7f6 f893 	bl	800073c <__aeabi_ddiv>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a61e:	f7f5 ff63 	bl	80004e8 <__aeabi_dmul>
 800a622:	2600      	movs	r6, #0
 800a624:	4680      	mov	r8, r0
 800a626:	4689      	mov	r9, r1
 800a628:	4632      	mov	r2, r6
 800a62a:	465b      	mov	r3, fp
 800a62c:	4630      	mov	r0, r6
 800a62e:	4659      	mov	r1, fp
 800a630:	f7f5 ff5a 	bl	80004e8 <__aeabi_dmul>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4620      	mov	r0, r4
 800a63a:	4629      	mov	r1, r5
 800a63c:	f7f5 fd9c 	bl	8000178 <__aeabi_dsub>
 800a640:	4632      	mov	r2, r6
 800a642:	4604      	mov	r4, r0
 800a644:	460d      	mov	r5, r1
 800a646:	465b      	mov	r3, fp
 800a648:	4650      	mov	r0, sl
 800a64a:	4659      	mov	r1, fp
 800a64c:	f7f5 fd96 	bl	800017c <__adddf3>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	4620      	mov	r0, r4
 800a656:	4629      	mov	r1, r5
 800a658:	f7f6 f870 	bl	800073c <__aeabi_ddiv>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	f7f5 fd8c 	bl	800017c <__adddf3>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	a113      	add	r1, pc, #76	; (adr r1, 800a6b8 <__ieee754_asin+0x3e8>)
 800a66a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a66e:	f7f5 fd83 	bl	8000178 <__aeabi_dsub>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4640      	mov	r0, r8
 800a678:	4649      	mov	r1, r9
 800a67a:	f7f5 fd7d 	bl	8000178 <__aeabi_dsub>
 800a67e:	4632      	mov	r2, r6
 800a680:	4604      	mov	r4, r0
 800a682:	460d      	mov	r5, r1
 800a684:	465b      	mov	r3, fp
 800a686:	4630      	mov	r0, r6
 800a688:	4639      	mov	r1, r7
 800a68a:	f7f5 fd77 	bl	800017c <__adddf3>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	a10b      	add	r1, pc, #44	; (adr r1, 800a6c0 <__ieee754_asin+0x3f0>)
 800a694:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a698:	f7f5 fd6e 	bl	8000178 <__aeabi_dsub>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	f7f5 fd68 	bl	8000178 <__aeabi_dsub>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	a104      	add	r1, pc, #16	; (adr r1, 800a6c0 <__ieee754_asin+0x3f0>)
 800a6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6b2:	e6e7      	b.n	800a484 <__ieee754_asin+0x1b4>
 800a6b4:	f3af 8000 	nop.w
 800a6b8:	33145c07 	.word	0x33145c07
 800a6bc:	3c91a626 	.word	0x3c91a626
 800a6c0:	54442d18 	.word	0x54442d18
 800a6c4:	3fe921fb 	.word	0x3fe921fb

0800a6c8 <__ieee754_log>:
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a6d0:	b087      	sub	sp, #28
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	da24      	bge.n	800a724 <__ieee754_log+0x5c>
 800a6da:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a6de:	4304      	orrs	r4, r0
 800a6e0:	d108      	bne.n	800a6f4 <__ieee754_log+0x2c>
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	49cb      	ldr	r1, [pc, #812]	; (800aa18 <__ieee754_log+0x350>)
 800a6ea:	f7f6 f827 	bl	800073c <__aeabi_ddiv>
 800a6ee:	b007      	add	sp, #28
 800a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f4:	2900      	cmp	r1, #0
 800a6f6:	da04      	bge.n	800a702 <__ieee754_log+0x3a>
 800a6f8:	f7f5 fd3e 	bl	8000178 <__aeabi_dsub>
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2300      	movs	r3, #0
 800a700:	e7f3      	b.n	800a6ea <__ieee754_log+0x22>
 800a702:	2200      	movs	r2, #0
 800a704:	4bc5      	ldr	r3, [pc, #788]	; (800aa1c <__ieee754_log+0x354>)
 800a706:	f7f5 feef 	bl	80004e8 <__aeabi_dmul>
 800a70a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	460d      	mov	r5, r1
 800a714:	49c2      	ldr	r1, [pc, #776]	; (800aa20 <__ieee754_log+0x358>)
 800a716:	428d      	cmp	r5, r1
 800a718:	dd06      	ble.n	800a728 <__ieee754_log+0x60>
 800a71a:	4610      	mov	r0, r2
 800a71c:	4619      	mov	r1, r3
 800a71e:	f7f5 fd2d 	bl	800017c <__adddf3>
 800a722:	e7e4      	b.n	800a6ee <__ieee754_log+0x26>
 800a724:	2600      	movs	r6, #0
 800a726:	e7f5      	b.n	800a714 <__ieee754_log+0x4c>
 800a728:	152c      	asrs	r4, r5, #20
 800a72a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a72e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800a732:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a736:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800a73a:	4426      	add	r6, r4
 800a73c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800a740:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800a744:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800a748:	ea41 0305 	orr.w	r3, r1, r5
 800a74c:	4610      	mov	r0, r2
 800a74e:	4619      	mov	r1, r3
 800a750:	2200      	movs	r2, #0
 800a752:	4bb4      	ldr	r3, [pc, #720]	; (800aa24 <__ieee754_log+0x35c>)
 800a754:	f7f5 fd10 	bl	8000178 <__aeabi_dsub>
 800a758:	1cab      	adds	r3, r5, #2
 800a75a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a75e:	2b02      	cmp	r3, #2
 800a760:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800a764:	4682      	mov	sl, r0
 800a766:	468b      	mov	fp, r1
 800a768:	f04f 0200 	mov.w	r2, #0
 800a76c:	dc53      	bgt.n	800a816 <__ieee754_log+0x14e>
 800a76e:	2300      	movs	r3, #0
 800a770:	f7f6 f922 	bl	80009b8 <__aeabi_dcmpeq>
 800a774:	b1d0      	cbz	r0, 800a7ac <__ieee754_log+0xe4>
 800a776:	2c00      	cmp	r4, #0
 800a778:	f000 8120 	beq.w	800a9bc <__ieee754_log+0x2f4>
 800a77c:	4620      	mov	r0, r4
 800a77e:	f7f5 fe49 	bl	8000414 <__aeabi_i2d>
 800a782:	a391      	add	r3, pc, #580	; (adr r3, 800a9c8 <__ieee754_log+0x300>)
 800a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a788:	4606      	mov	r6, r0
 800a78a:	460f      	mov	r7, r1
 800a78c:	f7f5 feac 	bl	80004e8 <__aeabi_dmul>
 800a790:	a38f      	add	r3, pc, #572	; (adr r3, 800a9d0 <__ieee754_log+0x308>)
 800a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a796:	4604      	mov	r4, r0
 800a798:	460d      	mov	r5, r1
 800a79a:	4630      	mov	r0, r6
 800a79c:	4639      	mov	r1, r7
 800a79e:	f7f5 fea3 	bl	80004e8 <__aeabi_dmul>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	e7b8      	b.n	800a71e <__ieee754_log+0x56>
 800a7ac:	a38a      	add	r3, pc, #552	; (adr r3, 800a9d8 <__ieee754_log+0x310>)
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	4659      	mov	r1, fp
 800a7b6:	f7f5 fe97 	bl	80004e8 <__aeabi_dmul>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	2000      	movs	r0, #0
 800a7c0:	4999      	ldr	r1, [pc, #612]	; (800aa28 <__ieee754_log+0x360>)
 800a7c2:	f7f5 fcd9 	bl	8000178 <__aeabi_dsub>
 800a7c6:	4652      	mov	r2, sl
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	460f      	mov	r7, r1
 800a7cc:	465b      	mov	r3, fp
 800a7ce:	4650      	mov	r0, sl
 800a7d0:	4659      	mov	r1, fp
 800a7d2:	f7f5 fe89 	bl	80004e8 <__aeabi_dmul>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4630      	mov	r0, r6
 800a7dc:	4639      	mov	r1, r7
 800a7de:	f7f5 fe83 	bl	80004e8 <__aeabi_dmul>
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	460f      	mov	r7, r1
 800a7e6:	b914      	cbnz	r4, 800a7ee <__ieee754_log+0x126>
 800a7e8:	4632      	mov	r2, r6
 800a7ea:	463b      	mov	r3, r7
 800a7ec:	e0a0      	b.n	800a930 <__ieee754_log+0x268>
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7f5 fe10 	bl	8000414 <__aeabi_i2d>
 800a7f4:	a374      	add	r3, pc, #464	; (adr r3, 800a9c8 <__ieee754_log+0x300>)
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	4680      	mov	r8, r0
 800a7fc:	4689      	mov	r9, r1
 800a7fe:	f7f5 fe73 	bl	80004e8 <__aeabi_dmul>
 800a802:	a373      	add	r3, pc, #460	; (adr r3, 800a9d0 <__ieee754_log+0x308>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	4604      	mov	r4, r0
 800a80a:	460d      	mov	r5, r1
 800a80c:	4640      	mov	r0, r8
 800a80e:	4649      	mov	r1, r9
 800a810:	f7f5 fe6a 	bl	80004e8 <__aeabi_dmul>
 800a814:	e0a5      	b.n	800a962 <__ieee754_log+0x29a>
 800a816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a81a:	f7f5 fcaf 	bl	800017c <__adddf3>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	4650      	mov	r0, sl
 800a824:	4659      	mov	r1, fp
 800a826:	f7f5 ff89 	bl	800073c <__aeabi_ddiv>
 800a82a:	e9cd 0100 	strd	r0, r1, [sp]
 800a82e:	4620      	mov	r0, r4
 800a830:	f7f5 fdf0 	bl	8000414 <__aeabi_i2d>
 800a834:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a83c:	4610      	mov	r0, r2
 800a83e:	4619      	mov	r1, r3
 800a840:	f7f5 fe52 	bl	80004e8 <__aeabi_dmul>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a84c:	f7f5 fe4c 	bl	80004e8 <__aeabi_dmul>
 800a850:	a363      	add	r3, pc, #396	; (adr r3, 800a9e0 <__ieee754_log+0x318>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	4680      	mov	r8, r0
 800a858:	4689      	mov	r9, r1
 800a85a:	f7f5 fe45 	bl	80004e8 <__aeabi_dmul>
 800a85e:	a362      	add	r3, pc, #392	; (adr r3, 800a9e8 <__ieee754_log+0x320>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f7f5 fc8a 	bl	800017c <__adddf3>
 800a868:	4642      	mov	r2, r8
 800a86a:	464b      	mov	r3, r9
 800a86c:	f7f5 fe3c 	bl	80004e8 <__aeabi_dmul>
 800a870:	a35f      	add	r3, pc, #380	; (adr r3, 800a9f0 <__ieee754_log+0x328>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f5 fc81 	bl	800017c <__adddf3>
 800a87a:	4642      	mov	r2, r8
 800a87c:	464b      	mov	r3, r9
 800a87e:	f7f5 fe33 	bl	80004e8 <__aeabi_dmul>
 800a882:	a35d      	add	r3, pc, #372	; (adr r3, 800a9f8 <__ieee754_log+0x330>)
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	f7f5 fc78 	bl	800017c <__adddf3>
 800a88c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a890:	f7f5 fe2a 	bl	80004e8 <__aeabi_dmul>
 800a894:	a35a      	add	r3, pc, #360	; (adr r3, 800aa00 <__ieee754_log+0x338>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a89e:	4640      	mov	r0, r8
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	f7f5 fe21 	bl	80004e8 <__aeabi_dmul>
 800a8a6:	a358      	add	r3, pc, #352	; (adr r3, 800aa08 <__ieee754_log+0x340>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	f7f5 fc66 	bl	800017c <__adddf3>
 800a8b0:	4642      	mov	r2, r8
 800a8b2:	464b      	mov	r3, r9
 800a8b4:	f7f5 fe18 	bl	80004e8 <__aeabi_dmul>
 800a8b8:	a355      	add	r3, pc, #340	; (adr r3, 800aa10 <__ieee754_log+0x348>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 fc5d 	bl	800017c <__adddf3>
 800a8c2:	4642      	mov	r2, r8
 800a8c4:	464b      	mov	r3, r9
 800a8c6:	f7f5 fe0f 	bl	80004e8 <__aeabi_dmul>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8d2:	f7f5 fc53 	bl	800017c <__adddf3>
 800a8d6:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800a8da:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a8de:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800a8e2:	3551      	adds	r5, #81	; 0x51
 800a8e4:	4335      	orrs	r5, r6
 800a8e6:	2d00      	cmp	r5, #0
 800a8e8:	4680      	mov	r8, r0
 800a8ea:	4689      	mov	r9, r1
 800a8ec:	dd48      	ble.n	800a980 <__ieee754_log+0x2b8>
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	4b4d      	ldr	r3, [pc, #308]	; (800aa28 <__ieee754_log+0x360>)
 800a8f2:	4650      	mov	r0, sl
 800a8f4:	4659      	mov	r1, fp
 800a8f6:	f7f5 fdf7 	bl	80004e8 <__aeabi_dmul>
 800a8fa:	4652      	mov	r2, sl
 800a8fc:	465b      	mov	r3, fp
 800a8fe:	f7f5 fdf3 	bl	80004e8 <__aeabi_dmul>
 800a902:	4602      	mov	r2, r0
 800a904:	460b      	mov	r3, r1
 800a906:	4606      	mov	r6, r0
 800a908:	460f      	mov	r7, r1
 800a90a:	4640      	mov	r0, r8
 800a90c:	4649      	mov	r1, r9
 800a90e:	f7f5 fc35 	bl	800017c <__adddf3>
 800a912:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a916:	f7f5 fde7 	bl	80004e8 <__aeabi_dmul>
 800a91a:	4680      	mov	r8, r0
 800a91c:	4689      	mov	r9, r1
 800a91e:	b964      	cbnz	r4, 800a93a <__ieee754_log+0x272>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	4630      	mov	r0, r6
 800a926:	4639      	mov	r1, r7
 800a928:	f7f5 fc26 	bl	8000178 <__aeabi_dsub>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	4650      	mov	r0, sl
 800a932:	4659      	mov	r1, fp
 800a934:	f7f5 fc20 	bl	8000178 <__aeabi_dsub>
 800a938:	e6d9      	b.n	800a6ee <__ieee754_log+0x26>
 800a93a:	a323      	add	r3, pc, #140	; (adr r3, 800a9c8 <__ieee754_log+0x300>)
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a944:	f7f5 fdd0 	bl	80004e8 <__aeabi_dmul>
 800a948:	a321      	add	r3, pc, #132	; (adr r3, 800a9d0 <__ieee754_log+0x308>)
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	4604      	mov	r4, r0
 800a950:	460d      	mov	r5, r1
 800a952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a956:	f7f5 fdc7 	bl	80004e8 <__aeabi_dmul>
 800a95a:	4642      	mov	r2, r8
 800a95c:	464b      	mov	r3, r9
 800a95e:	f7f5 fc0d 	bl	800017c <__adddf3>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	4630      	mov	r0, r6
 800a968:	4639      	mov	r1, r7
 800a96a:	f7f5 fc05 	bl	8000178 <__aeabi_dsub>
 800a96e:	4652      	mov	r2, sl
 800a970:	465b      	mov	r3, fp
 800a972:	f7f5 fc01 	bl	8000178 <__aeabi_dsub>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4620      	mov	r0, r4
 800a97c:	4629      	mov	r1, r5
 800a97e:	e7d9      	b.n	800a934 <__ieee754_log+0x26c>
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	4650      	mov	r0, sl
 800a986:	4659      	mov	r1, fp
 800a988:	f7f5 fbf6 	bl	8000178 <__aeabi_dsub>
 800a98c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a990:	f7f5 fdaa 	bl	80004e8 <__aeabi_dmul>
 800a994:	4606      	mov	r6, r0
 800a996:	460f      	mov	r7, r1
 800a998:	2c00      	cmp	r4, #0
 800a99a:	f43f af25 	beq.w	800a7e8 <__ieee754_log+0x120>
 800a99e:	a30a      	add	r3, pc, #40	; (adr r3, 800a9c8 <__ieee754_log+0x300>)
 800a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9a8:	f7f5 fd9e 	bl	80004e8 <__aeabi_dmul>
 800a9ac:	a308      	add	r3, pc, #32	; (adr r3, 800a9d0 <__ieee754_log+0x308>)
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	460d      	mov	r5, r1
 800a9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ba:	e729      	b.n	800a810 <__ieee754_log+0x148>
 800a9bc:	2000      	movs	r0, #0
 800a9be:	2100      	movs	r1, #0
 800a9c0:	e695      	b.n	800a6ee <__ieee754_log+0x26>
 800a9c2:	bf00      	nop
 800a9c4:	f3af 8000 	nop.w
 800a9c8:	fee00000 	.word	0xfee00000
 800a9cc:	3fe62e42 	.word	0x3fe62e42
 800a9d0:	35793c76 	.word	0x35793c76
 800a9d4:	3dea39ef 	.word	0x3dea39ef
 800a9d8:	55555555 	.word	0x55555555
 800a9dc:	3fd55555 	.word	0x3fd55555
 800a9e0:	df3e5244 	.word	0xdf3e5244
 800a9e4:	3fc2f112 	.word	0x3fc2f112
 800a9e8:	96cb03de 	.word	0x96cb03de
 800a9ec:	3fc74664 	.word	0x3fc74664
 800a9f0:	94229359 	.word	0x94229359
 800a9f4:	3fd24924 	.word	0x3fd24924
 800a9f8:	55555593 	.word	0x55555593
 800a9fc:	3fe55555 	.word	0x3fe55555
 800aa00:	d078c69f 	.word	0xd078c69f
 800aa04:	3fc39a09 	.word	0x3fc39a09
 800aa08:	1d8e78af 	.word	0x1d8e78af
 800aa0c:	3fcc71c5 	.word	0x3fcc71c5
 800aa10:	9997fa04 	.word	0x9997fa04
 800aa14:	3fd99999 	.word	0x3fd99999
 800aa18:	c3500000 	.word	0xc3500000
 800aa1c:	43500000 	.word	0x43500000
 800aa20:	7fefffff 	.word	0x7fefffff
 800aa24:	3ff00000 	.word	0x3ff00000
 800aa28:	3fe00000 	.word	0x3fe00000
 800aa2c:	00000000 	.word	0x00000000

0800aa30 <__ieee754_pow>:
 800aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa34:	b091      	sub	sp, #68	; 0x44
 800aa36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa3a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800aa3e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800aa42:	ea55 0302 	orrs.w	r3, r5, r2
 800aa46:	4607      	mov	r7, r0
 800aa48:	4688      	mov	r8, r1
 800aa4a:	f000 84b7 	beq.w	800b3bc <__ieee754_pow+0x98c>
 800aa4e:	4b80      	ldr	r3, [pc, #512]	; (800ac50 <__ieee754_pow+0x220>)
 800aa50:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800aa54:	429c      	cmp	r4, r3
 800aa56:	4689      	mov	r9, r1
 800aa58:	4682      	mov	sl, r0
 800aa5a:	dc09      	bgt.n	800aa70 <__ieee754_pow+0x40>
 800aa5c:	d103      	bne.n	800aa66 <__ieee754_pow+0x36>
 800aa5e:	b938      	cbnz	r0, 800aa70 <__ieee754_pow+0x40>
 800aa60:	42a5      	cmp	r5, r4
 800aa62:	dc0d      	bgt.n	800aa80 <__ieee754_pow+0x50>
 800aa64:	e001      	b.n	800aa6a <__ieee754_pow+0x3a>
 800aa66:	429d      	cmp	r5, r3
 800aa68:	dc02      	bgt.n	800aa70 <__ieee754_pow+0x40>
 800aa6a:	429d      	cmp	r5, r3
 800aa6c:	d10e      	bne.n	800aa8c <__ieee754_pow+0x5c>
 800aa6e:	b16a      	cbz	r2, 800aa8c <__ieee754_pow+0x5c>
 800aa70:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800aa74:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aa78:	ea54 030a 	orrs.w	r3, r4, sl
 800aa7c:	f000 849e 	beq.w	800b3bc <__ieee754_pow+0x98c>
 800aa80:	4874      	ldr	r0, [pc, #464]	; (800ac54 <__ieee754_pow+0x224>)
 800aa82:	b011      	add	sp, #68	; 0x44
 800aa84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa88:	f001 be88 	b.w	800c79c <nan>
 800aa8c:	f1b9 0f00 	cmp.w	r9, #0
 800aa90:	da53      	bge.n	800ab3a <__ieee754_pow+0x10a>
 800aa92:	4b71      	ldr	r3, [pc, #452]	; (800ac58 <__ieee754_pow+0x228>)
 800aa94:	429d      	cmp	r5, r3
 800aa96:	dc4e      	bgt.n	800ab36 <__ieee754_pow+0x106>
 800aa98:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800aa9c:	429d      	cmp	r5, r3
 800aa9e:	dd4c      	ble.n	800ab3a <__ieee754_pow+0x10a>
 800aaa0:	152b      	asrs	r3, r5, #20
 800aaa2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aaa6:	2b14      	cmp	r3, #20
 800aaa8:	dd28      	ble.n	800aafc <__ieee754_pow+0xcc>
 800aaaa:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800aaae:	fa22 f103 	lsr.w	r1, r2, r3
 800aab2:	fa01 f303 	lsl.w	r3, r1, r3
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d13f      	bne.n	800ab3a <__ieee754_pow+0x10a>
 800aaba:	f001 0101 	and.w	r1, r1, #1
 800aabe:	f1c1 0302 	rsb	r3, r1, #2
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	2a00      	cmp	r2, #0
 800aac6:	d15c      	bne.n	800ab82 <__ieee754_pow+0x152>
 800aac8:	4b61      	ldr	r3, [pc, #388]	; (800ac50 <__ieee754_pow+0x220>)
 800aaca:	429d      	cmp	r5, r3
 800aacc:	d126      	bne.n	800ab1c <__ieee754_pow+0xec>
 800aace:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aad2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aad6:	ea53 030a 	orrs.w	r3, r3, sl
 800aada:	f000 846f 	beq.w	800b3bc <__ieee754_pow+0x98c>
 800aade:	4b5f      	ldr	r3, [pc, #380]	; (800ac5c <__ieee754_pow+0x22c>)
 800aae0:	429c      	cmp	r4, r3
 800aae2:	dd2c      	ble.n	800ab3e <__ieee754_pow+0x10e>
 800aae4:	2e00      	cmp	r6, #0
 800aae6:	f280 846f 	bge.w	800b3c8 <__ieee754_pow+0x998>
 800aaea:	f04f 0b00 	mov.w	fp, #0
 800aaee:	f04f 0c00 	mov.w	ip, #0
 800aaf2:	4658      	mov	r0, fp
 800aaf4:	4661      	mov	r1, ip
 800aaf6:	b011      	add	sp, #68	; 0x44
 800aaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aafc:	2a00      	cmp	r2, #0
 800aafe:	d13e      	bne.n	800ab7e <__ieee754_pow+0x14e>
 800ab00:	f1c3 0314 	rsb	r3, r3, #20
 800ab04:	fa45 f103 	asr.w	r1, r5, r3
 800ab08:	fa01 f303 	lsl.w	r3, r1, r3
 800ab0c:	42ab      	cmp	r3, r5
 800ab0e:	f040 8463 	bne.w	800b3d8 <__ieee754_pow+0x9a8>
 800ab12:	f001 0101 	and.w	r1, r1, #1
 800ab16:	f1c1 0302 	rsb	r3, r1, #2
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	4b50      	ldr	r3, [pc, #320]	; (800ac60 <__ieee754_pow+0x230>)
 800ab1e:	429d      	cmp	r5, r3
 800ab20:	d114      	bne.n	800ab4c <__ieee754_pow+0x11c>
 800ab22:	2e00      	cmp	r6, #0
 800ab24:	f280 8454 	bge.w	800b3d0 <__ieee754_pow+0x9a0>
 800ab28:	463a      	mov	r2, r7
 800ab2a:	4643      	mov	r3, r8
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	494c      	ldr	r1, [pc, #304]	; (800ac60 <__ieee754_pow+0x230>)
 800ab30:	f7f5 fe04 	bl	800073c <__aeabi_ddiv>
 800ab34:	e013      	b.n	800ab5e <__ieee754_pow+0x12e>
 800ab36:	2302      	movs	r3, #2
 800ab38:	e7c3      	b.n	800aac2 <__ieee754_pow+0x92>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e7c1      	b.n	800aac2 <__ieee754_pow+0x92>
 800ab3e:	2e00      	cmp	r6, #0
 800ab40:	dad3      	bge.n	800aaea <__ieee754_pow+0xba>
 800ab42:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ab46:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ab4a:	e7d2      	b.n	800aaf2 <__ieee754_pow+0xc2>
 800ab4c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800ab50:	d108      	bne.n	800ab64 <__ieee754_pow+0x134>
 800ab52:	463a      	mov	r2, r7
 800ab54:	4643      	mov	r3, r8
 800ab56:	4638      	mov	r0, r7
 800ab58:	4641      	mov	r1, r8
 800ab5a:	f7f5 fcc5 	bl	80004e8 <__aeabi_dmul>
 800ab5e:	4683      	mov	fp, r0
 800ab60:	468c      	mov	ip, r1
 800ab62:	e7c6      	b.n	800aaf2 <__ieee754_pow+0xc2>
 800ab64:	4b3f      	ldr	r3, [pc, #252]	; (800ac64 <__ieee754_pow+0x234>)
 800ab66:	429e      	cmp	r6, r3
 800ab68:	d10b      	bne.n	800ab82 <__ieee754_pow+0x152>
 800ab6a:	f1b9 0f00 	cmp.w	r9, #0
 800ab6e:	db08      	blt.n	800ab82 <__ieee754_pow+0x152>
 800ab70:	4638      	mov	r0, r7
 800ab72:	4641      	mov	r1, r8
 800ab74:	b011      	add	sp, #68	; 0x44
 800ab76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab7a:	f000 be55 	b.w	800b828 <__ieee754_sqrt>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	4638      	mov	r0, r7
 800ab84:	4641      	mov	r1, r8
 800ab86:	f7ff f8bb 	bl	8009d00 <fabs>
 800ab8a:	4683      	mov	fp, r0
 800ab8c:	468c      	mov	ip, r1
 800ab8e:	f1ba 0f00 	cmp.w	sl, #0
 800ab92:	d12b      	bne.n	800abec <__ieee754_pow+0x1bc>
 800ab94:	b124      	cbz	r4, 800aba0 <__ieee754_pow+0x170>
 800ab96:	4b32      	ldr	r3, [pc, #200]	; (800ac60 <__ieee754_pow+0x230>)
 800ab98:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d125      	bne.n	800abec <__ieee754_pow+0x1bc>
 800aba0:	2e00      	cmp	r6, #0
 800aba2:	da07      	bge.n	800abb4 <__ieee754_pow+0x184>
 800aba4:	465a      	mov	r2, fp
 800aba6:	4663      	mov	r3, ip
 800aba8:	2000      	movs	r0, #0
 800abaa:	492d      	ldr	r1, [pc, #180]	; (800ac60 <__ieee754_pow+0x230>)
 800abac:	f7f5 fdc6 	bl	800073c <__aeabi_ddiv>
 800abb0:	4683      	mov	fp, r0
 800abb2:	468c      	mov	ip, r1
 800abb4:	f1b9 0f00 	cmp.w	r9, #0
 800abb8:	da9b      	bge.n	800aaf2 <__ieee754_pow+0xc2>
 800abba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800abbe:	9b00      	ldr	r3, [sp, #0]
 800abc0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800abc4:	4323      	orrs	r3, r4
 800abc6:	d108      	bne.n	800abda <__ieee754_pow+0x1aa>
 800abc8:	465a      	mov	r2, fp
 800abca:	4663      	mov	r3, ip
 800abcc:	4658      	mov	r0, fp
 800abce:	4661      	mov	r1, ip
 800abd0:	f7f5 fad2 	bl	8000178 <__aeabi_dsub>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	e7aa      	b.n	800ab30 <__ieee754_pow+0x100>
 800abda:	9b00      	ldr	r3, [sp, #0]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d188      	bne.n	800aaf2 <__ieee754_pow+0xc2>
 800abe0:	4658      	mov	r0, fp
 800abe2:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800abe6:	4683      	mov	fp, r0
 800abe8:	469c      	mov	ip, r3
 800abea:	e782      	b.n	800aaf2 <__ieee754_pow+0xc2>
 800abec:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800abf0:	f109 33ff 	add.w	r3, r9, #4294967295
 800abf4:	930d      	str	r3, [sp, #52]	; 0x34
 800abf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abf8:	9b00      	ldr	r3, [sp, #0]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	d104      	bne.n	800ac08 <__ieee754_pow+0x1d8>
 800abfe:	463a      	mov	r2, r7
 800ac00:	4643      	mov	r3, r8
 800ac02:	4638      	mov	r0, r7
 800ac04:	4641      	mov	r1, r8
 800ac06:	e7e3      	b.n	800abd0 <__ieee754_pow+0x1a0>
 800ac08:	4b17      	ldr	r3, [pc, #92]	; (800ac68 <__ieee754_pow+0x238>)
 800ac0a:	429d      	cmp	r5, r3
 800ac0c:	f340 80fe 	ble.w	800ae0c <__ieee754_pow+0x3dc>
 800ac10:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ac14:	429d      	cmp	r5, r3
 800ac16:	dd0b      	ble.n	800ac30 <__ieee754_pow+0x200>
 800ac18:	4b10      	ldr	r3, [pc, #64]	; (800ac5c <__ieee754_pow+0x22c>)
 800ac1a:	429c      	cmp	r4, r3
 800ac1c:	dc0e      	bgt.n	800ac3c <__ieee754_pow+0x20c>
 800ac1e:	2e00      	cmp	r6, #0
 800ac20:	f6bf af63 	bge.w	800aaea <__ieee754_pow+0xba>
 800ac24:	a308      	add	r3, pc, #32	; (adr r3, 800ac48 <__ieee754_pow+0x218>)
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	e794      	b.n	800ab5a <__ieee754_pow+0x12a>
 800ac30:	4b0e      	ldr	r3, [pc, #56]	; (800ac6c <__ieee754_pow+0x23c>)
 800ac32:	429c      	cmp	r4, r3
 800ac34:	ddf3      	ble.n	800ac1e <__ieee754_pow+0x1ee>
 800ac36:	4b0a      	ldr	r3, [pc, #40]	; (800ac60 <__ieee754_pow+0x230>)
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	dd19      	ble.n	800ac70 <__ieee754_pow+0x240>
 800ac3c:	2e00      	cmp	r6, #0
 800ac3e:	dcf1      	bgt.n	800ac24 <__ieee754_pow+0x1f4>
 800ac40:	e753      	b.n	800aaea <__ieee754_pow+0xba>
 800ac42:	bf00      	nop
 800ac44:	f3af 8000 	nop.w
 800ac48:	8800759c 	.word	0x8800759c
 800ac4c:	7e37e43c 	.word	0x7e37e43c
 800ac50:	7ff00000 	.word	0x7ff00000
 800ac54:	0800e590 	.word	0x0800e590
 800ac58:	433fffff 	.word	0x433fffff
 800ac5c:	3fefffff 	.word	0x3fefffff
 800ac60:	3ff00000 	.word	0x3ff00000
 800ac64:	3fe00000 	.word	0x3fe00000
 800ac68:	41e00000 	.word	0x41e00000
 800ac6c:	3feffffe 	.word	0x3feffffe
 800ac70:	4661      	mov	r1, ip
 800ac72:	2200      	movs	r2, #0
 800ac74:	4b60      	ldr	r3, [pc, #384]	; (800adf8 <__ieee754_pow+0x3c8>)
 800ac76:	4658      	mov	r0, fp
 800ac78:	f7f5 fa7e 	bl	8000178 <__aeabi_dsub>
 800ac7c:	a354      	add	r3, pc, #336	; (adr r3, 800add0 <__ieee754_pow+0x3a0>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	4604      	mov	r4, r0
 800ac84:	460d      	mov	r5, r1
 800ac86:	f7f5 fc2f 	bl	80004e8 <__aeabi_dmul>
 800ac8a:	a353      	add	r3, pc, #332	; (adr r3, 800add8 <__ieee754_pow+0x3a8>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	4606      	mov	r6, r0
 800ac92:	460f      	mov	r7, r1
 800ac94:	4620      	mov	r0, r4
 800ac96:	4629      	mov	r1, r5
 800ac98:	f7f5 fc26 	bl	80004e8 <__aeabi_dmul>
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	4682      	mov	sl, r0
 800aca0:	468b      	mov	fp, r1
 800aca2:	4b56      	ldr	r3, [pc, #344]	; (800adfc <__ieee754_pow+0x3cc>)
 800aca4:	4620      	mov	r0, r4
 800aca6:	4629      	mov	r1, r5
 800aca8:	f7f5 fc1e 	bl	80004e8 <__aeabi_dmul>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	a14b      	add	r1, pc, #300	; (adr r1, 800ade0 <__ieee754_pow+0x3b0>)
 800acb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acb6:	f7f5 fa5f 	bl	8000178 <__aeabi_dsub>
 800acba:	4622      	mov	r2, r4
 800acbc:	462b      	mov	r3, r5
 800acbe:	f7f5 fc13 	bl	80004e8 <__aeabi_dmul>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	2000      	movs	r0, #0
 800acc8:	494d      	ldr	r1, [pc, #308]	; (800ae00 <__ieee754_pow+0x3d0>)
 800acca:	f7f5 fa55 	bl	8000178 <__aeabi_dsub>
 800acce:	4622      	mov	r2, r4
 800acd0:	462b      	mov	r3, r5
 800acd2:	4680      	mov	r8, r0
 800acd4:	4689      	mov	r9, r1
 800acd6:	4620      	mov	r0, r4
 800acd8:	4629      	mov	r1, r5
 800acda:	f7f5 fc05 	bl	80004e8 <__aeabi_dmul>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4640      	mov	r0, r8
 800ace4:	4649      	mov	r1, r9
 800ace6:	f7f5 fbff 	bl	80004e8 <__aeabi_dmul>
 800acea:	a33f      	add	r3, pc, #252	; (adr r3, 800ade8 <__ieee754_pow+0x3b8>)
 800acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf0:	f7f5 fbfa 	bl	80004e8 <__aeabi_dmul>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4650      	mov	r0, sl
 800acfa:	4659      	mov	r1, fp
 800acfc:	f7f5 fa3c 	bl	8000178 <__aeabi_dsub>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	4604      	mov	r4, r0
 800ad06:	460d      	mov	r5, r1
 800ad08:	4630      	mov	r0, r6
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	f7f5 fa36 	bl	800017c <__adddf3>
 800ad10:	2000      	movs	r0, #0
 800ad12:	468b      	mov	fp, r1
 800ad14:	4682      	mov	sl, r0
 800ad16:	4632      	mov	r2, r6
 800ad18:	463b      	mov	r3, r7
 800ad1a:	f7f5 fa2d 	bl	8000178 <__aeabi_dsub>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	4620      	mov	r0, r4
 800ad24:	4629      	mov	r1, r5
 800ad26:	f7f5 fa27 	bl	8000178 <__aeabi_dsub>
 800ad2a:	9b00      	ldr	r3, [sp, #0]
 800ad2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	4313      	orrs	r3, r2
 800ad32:	f04f 0300 	mov.w	r3, #0
 800ad36:	bf0c      	ite	eq
 800ad38:	4c32      	ldreq	r4, [pc, #200]	; (800ae04 <__ieee754_pow+0x3d4>)
 800ad3a:	4c2f      	ldrne	r4, [pc, #188]	; (800adf8 <__ieee754_pow+0x3c8>)
 800ad3c:	4606      	mov	r6, r0
 800ad3e:	e9cd 3400 	strd	r3, r4, [sp]
 800ad42:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad46:	2400      	movs	r4, #0
 800ad48:	460f      	mov	r7, r1
 800ad4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad4e:	4622      	mov	r2, r4
 800ad50:	462b      	mov	r3, r5
 800ad52:	f7f5 fa11 	bl	8000178 <__aeabi_dsub>
 800ad56:	4652      	mov	r2, sl
 800ad58:	465b      	mov	r3, fp
 800ad5a:	f7f5 fbc5 	bl	80004e8 <__aeabi_dmul>
 800ad5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad62:	4680      	mov	r8, r0
 800ad64:	4689      	mov	r9, r1
 800ad66:	4630      	mov	r0, r6
 800ad68:	4639      	mov	r1, r7
 800ad6a:	f7f5 fbbd 	bl	80004e8 <__aeabi_dmul>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 fa01 	bl	800017c <__adddf3>
 800ad7a:	4622      	mov	r2, r4
 800ad7c:	462b      	mov	r3, r5
 800ad7e:	4680      	mov	r8, r0
 800ad80:	4689      	mov	r9, r1
 800ad82:	4650      	mov	r0, sl
 800ad84:	4659      	mov	r1, fp
 800ad86:	f7f5 fbaf 	bl	80004e8 <__aeabi_dmul>
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	460d      	mov	r5, r1
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4602      	mov	r2, r0
 800ad92:	4649      	mov	r1, r9
 800ad94:	4640      	mov	r0, r8
 800ad96:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ad9a:	f7f5 f9ef 	bl	800017c <__adddf3>
 800ad9e:	4b1a      	ldr	r3, [pc, #104]	; (800ae08 <__ieee754_pow+0x3d8>)
 800ada0:	4682      	mov	sl, r0
 800ada2:	4299      	cmp	r1, r3
 800ada4:	460f      	mov	r7, r1
 800ada6:	460e      	mov	r6, r1
 800ada8:	f340 82e1 	ble.w	800b36e <__ieee754_pow+0x93e>
 800adac:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800adb0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800adb4:	4303      	orrs	r3, r0
 800adb6:	f000 81db 	beq.w	800b170 <__ieee754_pow+0x740>
 800adba:	a30d      	add	r3, pc, #52	; (adr r3, 800adf0 <__ieee754_pow+0x3c0>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adc4:	f7f5 fb90 	bl	80004e8 <__aeabi_dmul>
 800adc8:	a309      	add	r3, pc, #36	; (adr r3, 800adf0 <__ieee754_pow+0x3c0>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	e6c4      	b.n	800ab5a <__ieee754_pow+0x12a>
 800add0:	60000000 	.word	0x60000000
 800add4:	3ff71547 	.word	0x3ff71547
 800add8:	f85ddf44 	.word	0xf85ddf44
 800addc:	3e54ae0b 	.word	0x3e54ae0b
 800ade0:	55555555 	.word	0x55555555
 800ade4:	3fd55555 	.word	0x3fd55555
 800ade8:	652b82fe 	.word	0x652b82fe
 800adec:	3ff71547 	.word	0x3ff71547
 800adf0:	8800759c 	.word	0x8800759c
 800adf4:	7e37e43c 	.word	0x7e37e43c
 800adf8:	3ff00000 	.word	0x3ff00000
 800adfc:	3fd00000 	.word	0x3fd00000
 800ae00:	3fe00000 	.word	0x3fe00000
 800ae04:	bff00000 	.word	0xbff00000
 800ae08:	408fffff 	.word	0x408fffff
 800ae0c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ae10:	f04f 0200 	mov.w	r2, #0
 800ae14:	da08      	bge.n	800ae28 <__ieee754_pow+0x3f8>
 800ae16:	4658      	mov	r0, fp
 800ae18:	4bcd      	ldr	r3, [pc, #820]	; (800b150 <__ieee754_pow+0x720>)
 800ae1a:	4661      	mov	r1, ip
 800ae1c:	f7f5 fb64 	bl	80004e8 <__aeabi_dmul>
 800ae20:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ae24:	4683      	mov	fp, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	1523      	asrs	r3, r4, #20
 800ae2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ae2e:	4413      	add	r3, r2
 800ae30:	930c      	str	r3, [sp, #48]	; 0x30
 800ae32:	4bc8      	ldr	r3, [pc, #800]	; (800b154 <__ieee754_pow+0x724>)
 800ae34:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ae38:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ae3c:	429c      	cmp	r4, r3
 800ae3e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ae42:	dd08      	ble.n	800ae56 <__ieee754_pow+0x426>
 800ae44:	4bc4      	ldr	r3, [pc, #784]	; (800b158 <__ieee754_pow+0x728>)
 800ae46:	429c      	cmp	r4, r3
 800ae48:	f340 815b 	ble.w	800b102 <__ieee754_pow+0x6d2>
 800ae4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae4e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ae52:	3301      	adds	r3, #1
 800ae54:	930c      	str	r3, [sp, #48]	; 0x30
 800ae56:	f04f 0800 	mov.w	r8, #0
 800ae5a:	4658      	mov	r0, fp
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	4bbf      	ldr	r3, [pc, #764]	; (800b15c <__ieee754_pow+0x72c>)
 800ae60:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800ae64:	444b      	add	r3, r9
 800ae66:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae6a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ae6e:	461a      	mov	r2, r3
 800ae70:	4623      	mov	r3, r4
 800ae72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ae76:	f7f5 f97f 	bl	8000178 <__aeabi_dsub>
 800ae7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae86:	f7f5 f979 	bl	800017c <__adddf3>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	2000      	movs	r0, #0
 800ae90:	49b3      	ldr	r1, [pc, #716]	; (800b160 <__ieee754_pow+0x730>)
 800ae92:	f7f5 fc53 	bl	800073c <__aeabi_ddiv>
 800ae96:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4630      	mov	r0, r6
 800aea0:	4639      	mov	r1, r7
 800aea2:	f7f5 fb21 	bl	80004e8 <__aeabi_dmul>
 800aea6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aeaa:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800aeae:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	106d      	asrs	r5, r5, #1
 800aeb8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aebc:	9304      	str	r3, [sp, #16]
 800aebe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800aec2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aec6:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800aeca:	4650      	mov	r0, sl
 800aecc:	4659      	mov	r1, fp
 800aece:	4614      	mov	r4, r2
 800aed0:	461d      	mov	r5, r3
 800aed2:	f7f5 fb09 	bl	80004e8 <__aeabi_dmul>
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	4630      	mov	r0, r6
 800aedc:	4639      	mov	r1, r7
 800aede:	f7f5 f94b 	bl	8000178 <__aeabi_dsub>
 800aee2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aee6:	4606      	mov	r6, r0
 800aee8:	460f      	mov	r7, r1
 800aeea:	4620      	mov	r0, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7f5 f943 	bl	8000178 <__aeabi_dsub>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aefa:	f7f5 f93d 	bl	8000178 <__aeabi_dsub>
 800aefe:	4652      	mov	r2, sl
 800af00:	465b      	mov	r3, fp
 800af02:	f7f5 faf1 	bl	80004e8 <__aeabi_dmul>
 800af06:	4602      	mov	r2, r0
 800af08:	460b      	mov	r3, r1
 800af0a:	4630      	mov	r0, r6
 800af0c:	4639      	mov	r1, r7
 800af0e:	f7f5 f933 	bl	8000178 <__aeabi_dsub>
 800af12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800af16:	f7f5 fae7 	bl	80004e8 <__aeabi_dmul>
 800af1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af22:	4610      	mov	r0, r2
 800af24:	4619      	mov	r1, r3
 800af26:	f7f5 fadf 	bl	80004e8 <__aeabi_dmul>
 800af2a:	a377      	add	r3, pc, #476	; (adr r3, 800b108 <__ieee754_pow+0x6d8>)
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	4604      	mov	r4, r0
 800af32:	460d      	mov	r5, r1
 800af34:	f7f5 fad8 	bl	80004e8 <__aeabi_dmul>
 800af38:	a375      	add	r3, pc, #468	; (adr r3, 800b110 <__ieee754_pow+0x6e0>)
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	f7f5 f91d 	bl	800017c <__adddf3>
 800af42:	4622      	mov	r2, r4
 800af44:	462b      	mov	r3, r5
 800af46:	f7f5 facf 	bl	80004e8 <__aeabi_dmul>
 800af4a:	a373      	add	r3, pc, #460	; (adr r3, 800b118 <__ieee754_pow+0x6e8>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	f7f5 f914 	bl	800017c <__adddf3>
 800af54:	4622      	mov	r2, r4
 800af56:	462b      	mov	r3, r5
 800af58:	f7f5 fac6 	bl	80004e8 <__aeabi_dmul>
 800af5c:	a370      	add	r3, pc, #448	; (adr r3, 800b120 <__ieee754_pow+0x6f0>)
 800af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af62:	f7f5 f90b 	bl	800017c <__adddf3>
 800af66:	4622      	mov	r2, r4
 800af68:	462b      	mov	r3, r5
 800af6a:	f7f5 fabd 	bl	80004e8 <__aeabi_dmul>
 800af6e:	a36e      	add	r3, pc, #440	; (adr r3, 800b128 <__ieee754_pow+0x6f8>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 f902 	bl	800017c <__adddf3>
 800af78:	4622      	mov	r2, r4
 800af7a:	462b      	mov	r3, r5
 800af7c:	f7f5 fab4 	bl	80004e8 <__aeabi_dmul>
 800af80:	a36b      	add	r3, pc, #428	; (adr r3, 800b130 <__ieee754_pow+0x700>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	f7f5 f8f9 	bl	800017c <__adddf3>
 800af8a:	4622      	mov	r2, r4
 800af8c:	4606      	mov	r6, r0
 800af8e:	460f      	mov	r7, r1
 800af90:	462b      	mov	r3, r5
 800af92:	4620      	mov	r0, r4
 800af94:	4629      	mov	r1, r5
 800af96:	f7f5 faa7 	bl	80004e8 <__aeabi_dmul>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	4630      	mov	r0, r6
 800afa0:	4639      	mov	r1, r7
 800afa2:	f7f5 faa1 	bl	80004e8 <__aeabi_dmul>
 800afa6:	4604      	mov	r4, r0
 800afa8:	460d      	mov	r5, r1
 800afaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afae:	4652      	mov	r2, sl
 800afb0:	465b      	mov	r3, fp
 800afb2:	f7f5 f8e3 	bl	800017c <__adddf3>
 800afb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800afba:	f7f5 fa95 	bl	80004e8 <__aeabi_dmul>
 800afbe:	4622      	mov	r2, r4
 800afc0:	462b      	mov	r3, r5
 800afc2:	f7f5 f8db 	bl	800017c <__adddf3>
 800afc6:	4652      	mov	r2, sl
 800afc8:	4606      	mov	r6, r0
 800afca:	460f      	mov	r7, r1
 800afcc:	465b      	mov	r3, fp
 800afce:	4650      	mov	r0, sl
 800afd0:	4659      	mov	r1, fp
 800afd2:	f7f5 fa89 	bl	80004e8 <__aeabi_dmul>
 800afd6:	2200      	movs	r2, #0
 800afd8:	4b62      	ldr	r3, [pc, #392]	; (800b164 <__ieee754_pow+0x734>)
 800afda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800afde:	f7f5 f8cd 	bl	800017c <__adddf3>
 800afe2:	4632      	mov	r2, r6
 800afe4:	463b      	mov	r3, r7
 800afe6:	f7f5 f8c9 	bl	800017c <__adddf3>
 800afea:	9804      	ldr	r0, [sp, #16]
 800afec:	460d      	mov	r5, r1
 800afee:	4604      	mov	r4, r0
 800aff0:	4602      	mov	r2, r0
 800aff2:	460b      	mov	r3, r1
 800aff4:	4650      	mov	r0, sl
 800aff6:	4659      	mov	r1, fp
 800aff8:	f7f5 fa76 	bl	80004e8 <__aeabi_dmul>
 800affc:	2200      	movs	r2, #0
 800affe:	4682      	mov	sl, r0
 800b000:	468b      	mov	fp, r1
 800b002:	4b58      	ldr	r3, [pc, #352]	; (800b164 <__ieee754_pow+0x734>)
 800b004:	4620      	mov	r0, r4
 800b006:	4629      	mov	r1, r5
 800b008:	f7f5 f8b6 	bl	8000178 <__aeabi_dsub>
 800b00c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b010:	f7f5 f8b2 	bl	8000178 <__aeabi_dsub>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	4630      	mov	r0, r6
 800b01a:	4639      	mov	r1, r7
 800b01c:	f7f5 f8ac 	bl	8000178 <__aeabi_dsub>
 800b020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b024:	f7f5 fa60 	bl	80004e8 <__aeabi_dmul>
 800b028:	4622      	mov	r2, r4
 800b02a:	4606      	mov	r6, r0
 800b02c:	460f      	mov	r7, r1
 800b02e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b032:	462b      	mov	r3, r5
 800b034:	f7f5 fa58 	bl	80004e8 <__aeabi_dmul>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	4630      	mov	r0, r6
 800b03e:	4639      	mov	r1, r7
 800b040:	f7f5 f89c 	bl	800017c <__adddf3>
 800b044:	4606      	mov	r6, r0
 800b046:	460f      	mov	r7, r1
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4650      	mov	r0, sl
 800b04e:	4659      	mov	r1, fp
 800b050:	f7f5 f894 	bl	800017c <__adddf3>
 800b054:	a338      	add	r3, pc, #224	; (adr r3, 800b138 <__ieee754_pow+0x708>)
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	9804      	ldr	r0, [sp, #16]
 800b05c:	460d      	mov	r5, r1
 800b05e:	4604      	mov	r4, r0
 800b060:	f7f5 fa42 	bl	80004e8 <__aeabi_dmul>
 800b064:	4652      	mov	r2, sl
 800b066:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b06a:	465b      	mov	r3, fp
 800b06c:	4620      	mov	r0, r4
 800b06e:	4629      	mov	r1, r5
 800b070:	f7f5 f882 	bl	8000178 <__aeabi_dsub>
 800b074:	4602      	mov	r2, r0
 800b076:	460b      	mov	r3, r1
 800b078:	4630      	mov	r0, r6
 800b07a:	4639      	mov	r1, r7
 800b07c:	f7f5 f87c 	bl	8000178 <__aeabi_dsub>
 800b080:	a32f      	add	r3, pc, #188	; (adr r3, 800b140 <__ieee754_pow+0x710>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	f7f5 fa2f 	bl	80004e8 <__aeabi_dmul>
 800b08a:	a32f      	add	r3, pc, #188	; (adr r3, 800b148 <__ieee754_pow+0x718>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	4606      	mov	r6, r0
 800b092:	460f      	mov	r7, r1
 800b094:	4620      	mov	r0, r4
 800b096:	4629      	mov	r1, r5
 800b098:	f7f5 fa26 	bl	80004e8 <__aeabi_dmul>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	f7f5 f86a 	bl	800017c <__adddf3>
 800b0a8:	4b2f      	ldr	r3, [pc, #188]	; (800b168 <__ieee754_pow+0x738>)
 800b0aa:	444b      	add	r3, r9
 800b0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b0:	f7f5 f864 	bl	800017c <__adddf3>
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b0b8:	460d      	mov	r5, r1
 800b0ba:	f7f5 f9ab 	bl	8000414 <__aeabi_i2d>
 800b0be:	4606      	mov	r6, r0
 800b0c0:	460f      	mov	r7, r1
 800b0c2:	4b2a      	ldr	r3, [pc, #168]	; (800b16c <__ieee754_pow+0x73c>)
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	444b      	add	r3, r9
 800b0c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0cc:	462b      	mov	r3, r5
 800b0ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0d2:	f7f5 f853 	bl	800017c <__adddf3>
 800b0d6:	4642      	mov	r2, r8
 800b0d8:	464b      	mov	r3, r9
 800b0da:	f7f5 f84f 	bl	800017c <__adddf3>
 800b0de:	4632      	mov	r2, r6
 800b0e0:	463b      	mov	r3, r7
 800b0e2:	f7f5 f84b 	bl	800017c <__adddf3>
 800b0e6:	9804      	ldr	r0, [sp, #16]
 800b0e8:	4632      	mov	r2, r6
 800b0ea:	463b      	mov	r3, r7
 800b0ec:	4682      	mov	sl, r0
 800b0ee:	468b      	mov	fp, r1
 800b0f0:	f7f5 f842 	bl	8000178 <__aeabi_dsub>
 800b0f4:	4642      	mov	r2, r8
 800b0f6:	464b      	mov	r3, r9
 800b0f8:	f7f5 f83e 	bl	8000178 <__aeabi_dsub>
 800b0fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b100:	e60b      	b.n	800ad1a <__ieee754_pow+0x2ea>
 800b102:	f04f 0801 	mov.w	r8, #1
 800b106:	e6a8      	b.n	800ae5a <__ieee754_pow+0x42a>
 800b108:	4a454eef 	.word	0x4a454eef
 800b10c:	3fca7e28 	.word	0x3fca7e28
 800b110:	93c9db65 	.word	0x93c9db65
 800b114:	3fcd864a 	.word	0x3fcd864a
 800b118:	a91d4101 	.word	0xa91d4101
 800b11c:	3fd17460 	.word	0x3fd17460
 800b120:	518f264d 	.word	0x518f264d
 800b124:	3fd55555 	.word	0x3fd55555
 800b128:	db6fabff 	.word	0xdb6fabff
 800b12c:	3fdb6db6 	.word	0x3fdb6db6
 800b130:	33333303 	.word	0x33333303
 800b134:	3fe33333 	.word	0x3fe33333
 800b138:	e0000000 	.word	0xe0000000
 800b13c:	3feec709 	.word	0x3feec709
 800b140:	dc3a03fd 	.word	0xdc3a03fd
 800b144:	3feec709 	.word	0x3feec709
 800b148:	145b01f5 	.word	0x145b01f5
 800b14c:	be3e2fe0 	.word	0xbe3e2fe0
 800b150:	43400000 	.word	0x43400000
 800b154:	0003988e 	.word	0x0003988e
 800b158:	000bb679 	.word	0x000bb679
 800b15c:	0800e5a0 	.word	0x0800e5a0
 800b160:	3ff00000 	.word	0x3ff00000
 800b164:	40080000 	.word	0x40080000
 800b168:	0800e5c0 	.word	0x0800e5c0
 800b16c:	0800e5b0 	.word	0x0800e5b0
 800b170:	a39b      	add	r3, pc, #620	; (adr r3, 800b3e0 <__ieee754_pow+0x9b0>)
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	4640      	mov	r0, r8
 800b178:	4649      	mov	r1, r9
 800b17a:	f7f4 ffff 	bl	800017c <__adddf3>
 800b17e:	4622      	mov	r2, r4
 800b180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b184:	462b      	mov	r3, r5
 800b186:	4650      	mov	r0, sl
 800b188:	4639      	mov	r1, r7
 800b18a:	f7f4 fff5 	bl	8000178 <__aeabi_dsub>
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b196:	f7f5 fc37 	bl	8000a08 <__aeabi_dcmpgt>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	f47f ae0d 	bne.w	800adba <__ieee754_pow+0x38a>
 800b1a0:	4aa3      	ldr	r2, [pc, #652]	; (800b430 <__ieee754_pow+0xa00>)
 800b1a2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	f340 8103 	ble.w	800b3b2 <__ieee754_pow+0x982>
 800b1ac:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	151b      	asrs	r3, r3, #20
 800b1b4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b1b8:	fa4a f303 	asr.w	r3, sl, r3
 800b1bc:	4433      	add	r3, r6
 800b1be:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b1c2:	4f9c      	ldr	r7, [pc, #624]	; (800b434 <__ieee754_pow+0xa04>)
 800b1c4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b1c8:	4117      	asrs	r7, r2
 800b1ca:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b1ce:	ea23 0107 	bic.w	r1, r3, r7
 800b1d2:	f1c2 0214 	rsb	r2, r2, #20
 800b1d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b1da:	fa4a fa02 	asr.w	sl, sl, r2
 800b1de:	2e00      	cmp	r6, #0
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	bfb8      	it	lt
 800b1ea:	f1ca 0a00 	rsblt	sl, sl, #0
 800b1ee:	f7f4 ffc3 	bl	8000178 <__aeabi_dsub>
 800b1f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1fa:	4642      	mov	r2, r8
 800b1fc:	464b      	mov	r3, r9
 800b1fe:	f7f4 ffbd 	bl	800017c <__adddf3>
 800b202:	a379      	add	r3, pc, #484	; (adr r3, 800b3e8 <__ieee754_pow+0x9b8>)
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	2000      	movs	r0, #0
 800b20a:	460d      	mov	r5, r1
 800b20c:	4604      	mov	r4, r0
 800b20e:	f7f5 f96b 	bl	80004e8 <__aeabi_dmul>
 800b212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b216:	4606      	mov	r6, r0
 800b218:	460f      	mov	r7, r1
 800b21a:	4620      	mov	r0, r4
 800b21c:	4629      	mov	r1, r5
 800b21e:	f7f4 ffab 	bl	8000178 <__aeabi_dsub>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	4640      	mov	r0, r8
 800b228:	4649      	mov	r1, r9
 800b22a:	f7f4 ffa5 	bl	8000178 <__aeabi_dsub>
 800b22e:	a370      	add	r3, pc, #448	; (adr r3, 800b3f0 <__ieee754_pow+0x9c0>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	f7f5 f958 	bl	80004e8 <__aeabi_dmul>
 800b238:	a36f      	add	r3, pc, #444	; (adr r3, 800b3f8 <__ieee754_pow+0x9c8>)
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	4680      	mov	r8, r0
 800b240:	4689      	mov	r9, r1
 800b242:	4620      	mov	r0, r4
 800b244:	4629      	mov	r1, r5
 800b246:	f7f5 f94f 	bl	80004e8 <__aeabi_dmul>
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	4640      	mov	r0, r8
 800b250:	4649      	mov	r1, r9
 800b252:	f7f4 ff93 	bl	800017c <__adddf3>
 800b256:	4604      	mov	r4, r0
 800b258:	460d      	mov	r5, r1
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	4630      	mov	r0, r6
 800b260:	4639      	mov	r1, r7
 800b262:	f7f4 ff8b 	bl	800017c <__adddf3>
 800b266:	4632      	mov	r2, r6
 800b268:	463b      	mov	r3, r7
 800b26a:	4680      	mov	r8, r0
 800b26c:	4689      	mov	r9, r1
 800b26e:	f7f4 ff83 	bl	8000178 <__aeabi_dsub>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4620      	mov	r0, r4
 800b278:	4629      	mov	r1, r5
 800b27a:	f7f4 ff7d 	bl	8000178 <__aeabi_dsub>
 800b27e:	4642      	mov	r2, r8
 800b280:	4606      	mov	r6, r0
 800b282:	460f      	mov	r7, r1
 800b284:	464b      	mov	r3, r9
 800b286:	4640      	mov	r0, r8
 800b288:	4649      	mov	r1, r9
 800b28a:	f7f5 f92d 	bl	80004e8 <__aeabi_dmul>
 800b28e:	a35c      	add	r3, pc, #368	; (adr r3, 800b400 <__ieee754_pow+0x9d0>)
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	4604      	mov	r4, r0
 800b296:	460d      	mov	r5, r1
 800b298:	f7f5 f926 	bl	80004e8 <__aeabi_dmul>
 800b29c:	a35a      	add	r3, pc, #360	; (adr r3, 800b408 <__ieee754_pow+0x9d8>)
 800b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a2:	f7f4 ff69 	bl	8000178 <__aeabi_dsub>
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	462b      	mov	r3, r5
 800b2aa:	f7f5 f91d 	bl	80004e8 <__aeabi_dmul>
 800b2ae:	a358      	add	r3, pc, #352	; (adr r3, 800b410 <__ieee754_pow+0x9e0>)
 800b2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b4:	f7f4 ff62 	bl	800017c <__adddf3>
 800b2b8:	4622      	mov	r2, r4
 800b2ba:	462b      	mov	r3, r5
 800b2bc:	f7f5 f914 	bl	80004e8 <__aeabi_dmul>
 800b2c0:	a355      	add	r3, pc, #340	; (adr r3, 800b418 <__ieee754_pow+0x9e8>)
 800b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c6:	f7f4 ff57 	bl	8000178 <__aeabi_dsub>
 800b2ca:	4622      	mov	r2, r4
 800b2cc:	462b      	mov	r3, r5
 800b2ce:	f7f5 f90b 	bl	80004e8 <__aeabi_dmul>
 800b2d2:	a353      	add	r3, pc, #332	; (adr r3, 800b420 <__ieee754_pow+0x9f0>)
 800b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d8:	f7f4 ff50 	bl	800017c <__adddf3>
 800b2dc:	4622      	mov	r2, r4
 800b2de:	462b      	mov	r3, r5
 800b2e0:	f7f5 f902 	bl	80004e8 <__aeabi_dmul>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	4649      	mov	r1, r9
 800b2ec:	f7f4 ff44 	bl	8000178 <__aeabi_dsub>
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	4649      	mov	r1, r9
 800b2fc:	f7f5 f8f4 	bl	80004e8 <__aeabi_dmul>
 800b300:	2200      	movs	r2, #0
 800b302:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b30a:	4620      	mov	r0, r4
 800b30c:	4629      	mov	r1, r5
 800b30e:	f7f4 ff33 	bl	8000178 <__aeabi_dsub>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b31a:	f7f5 fa0f 	bl	800073c <__aeabi_ddiv>
 800b31e:	4632      	mov	r2, r6
 800b320:	4604      	mov	r4, r0
 800b322:	460d      	mov	r5, r1
 800b324:	463b      	mov	r3, r7
 800b326:	4640      	mov	r0, r8
 800b328:	4649      	mov	r1, r9
 800b32a:	f7f5 f8dd 	bl	80004e8 <__aeabi_dmul>
 800b32e:	4632      	mov	r2, r6
 800b330:	463b      	mov	r3, r7
 800b332:	f7f4 ff23 	bl	800017c <__adddf3>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4620      	mov	r0, r4
 800b33c:	4629      	mov	r1, r5
 800b33e:	f7f4 ff1b 	bl	8000178 <__aeabi_dsub>
 800b342:	4642      	mov	r2, r8
 800b344:	464b      	mov	r3, r9
 800b346:	f7f4 ff17 	bl	8000178 <__aeabi_dsub>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	2000      	movs	r0, #0
 800b350:	4939      	ldr	r1, [pc, #228]	; (800b438 <__ieee754_pow+0xa08>)
 800b352:	f7f4 ff11 	bl	8000178 <__aeabi_dsub>
 800b356:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b35a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b35e:	da2b      	bge.n	800b3b8 <__ieee754_pow+0x988>
 800b360:	4652      	mov	r2, sl
 800b362:	f001 faad 	bl	800c8c0 <scalbn>
 800b366:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b36a:	f7ff bbf6 	b.w	800ab5a <__ieee754_pow+0x12a>
 800b36e:	4b33      	ldr	r3, [pc, #204]	; (800b43c <__ieee754_pow+0xa0c>)
 800b370:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b374:	429f      	cmp	r7, r3
 800b376:	f77f af13 	ble.w	800b1a0 <__ieee754_pow+0x770>
 800b37a:	4b31      	ldr	r3, [pc, #196]	; (800b440 <__ieee754_pow+0xa10>)
 800b37c:	440b      	add	r3, r1
 800b37e:	4303      	orrs	r3, r0
 800b380:	d00b      	beq.n	800b39a <__ieee754_pow+0x96a>
 800b382:	a329      	add	r3, pc, #164	; (adr r3, 800b428 <__ieee754_pow+0x9f8>)
 800b384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b38c:	f7f5 f8ac 	bl	80004e8 <__aeabi_dmul>
 800b390:	a325      	add	r3, pc, #148	; (adr r3, 800b428 <__ieee754_pow+0x9f8>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7ff bbe0 	b.w	800ab5a <__ieee754_pow+0x12a>
 800b39a:	4622      	mov	r2, r4
 800b39c:	462b      	mov	r3, r5
 800b39e:	f7f4 feeb 	bl	8000178 <__aeabi_dsub>
 800b3a2:	4642      	mov	r2, r8
 800b3a4:	464b      	mov	r3, r9
 800b3a6:	f7f5 fb25 	bl	80009f4 <__aeabi_dcmpge>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	f43f aef8 	beq.w	800b1a0 <__ieee754_pow+0x770>
 800b3b0:	e7e7      	b.n	800b382 <__ieee754_pow+0x952>
 800b3b2:	f04f 0a00 	mov.w	sl, #0
 800b3b6:	e71e      	b.n	800b1f6 <__ieee754_pow+0x7c6>
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	e7d4      	b.n	800b366 <__ieee754_pow+0x936>
 800b3bc:	f04f 0b00 	mov.w	fp, #0
 800b3c0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b438 <__ieee754_pow+0xa08>
 800b3c4:	f7ff bb95 	b.w	800aaf2 <__ieee754_pow+0xc2>
 800b3c8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b3cc:	f7ff bb91 	b.w	800aaf2 <__ieee754_pow+0xc2>
 800b3d0:	4638      	mov	r0, r7
 800b3d2:	4641      	mov	r1, r8
 800b3d4:	f7ff bbc3 	b.w	800ab5e <__ieee754_pow+0x12e>
 800b3d8:	9200      	str	r2, [sp, #0]
 800b3da:	f7ff bb9f 	b.w	800ab1c <__ieee754_pow+0xec>
 800b3de:	bf00      	nop
 800b3e0:	652b82fe 	.word	0x652b82fe
 800b3e4:	3c971547 	.word	0x3c971547
 800b3e8:	00000000 	.word	0x00000000
 800b3ec:	3fe62e43 	.word	0x3fe62e43
 800b3f0:	fefa39ef 	.word	0xfefa39ef
 800b3f4:	3fe62e42 	.word	0x3fe62e42
 800b3f8:	0ca86c39 	.word	0x0ca86c39
 800b3fc:	be205c61 	.word	0xbe205c61
 800b400:	72bea4d0 	.word	0x72bea4d0
 800b404:	3e663769 	.word	0x3e663769
 800b408:	c5d26bf1 	.word	0xc5d26bf1
 800b40c:	3ebbbd41 	.word	0x3ebbbd41
 800b410:	af25de2c 	.word	0xaf25de2c
 800b414:	3f11566a 	.word	0x3f11566a
 800b418:	16bebd93 	.word	0x16bebd93
 800b41c:	3f66c16c 	.word	0x3f66c16c
 800b420:	5555553e 	.word	0x5555553e
 800b424:	3fc55555 	.word	0x3fc55555
 800b428:	c2f8f359 	.word	0xc2f8f359
 800b42c:	01a56e1f 	.word	0x01a56e1f
 800b430:	3fe00000 	.word	0x3fe00000
 800b434:	000fffff 	.word	0x000fffff
 800b438:	3ff00000 	.word	0x3ff00000
 800b43c:	4090cbff 	.word	0x4090cbff
 800b440:	3f6f3400 	.word	0x3f6f3400
 800b444:	00000000 	.word	0x00000000

0800b448 <__ieee754_rem_pio2>:
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	4614      	mov	r4, r2
 800b44e:	4ac2      	ldr	r2, [pc, #776]	; (800b758 <__ieee754_rem_pio2+0x310>)
 800b450:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b454:	4592      	cmp	sl, r2
 800b456:	b08d      	sub	sp, #52	; 0x34
 800b458:	468b      	mov	fp, r1
 800b45a:	dc07      	bgt.n	800b46c <__ieee754_rem_pio2+0x24>
 800b45c:	2200      	movs	r2, #0
 800b45e:	2300      	movs	r3, #0
 800b460:	e9c4 0100 	strd	r0, r1, [r4]
 800b464:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b468:	2500      	movs	r5, #0
 800b46a:	e023      	b.n	800b4b4 <__ieee754_rem_pio2+0x6c>
 800b46c:	4abb      	ldr	r2, [pc, #748]	; (800b75c <__ieee754_rem_pio2+0x314>)
 800b46e:	4592      	cmp	sl, r2
 800b470:	dc71      	bgt.n	800b556 <__ieee754_rem_pio2+0x10e>
 800b472:	a3ab      	add	r3, pc, #684	; (adr r3, 800b720 <__ieee754_rem_pio2+0x2d8>)
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	2900      	cmp	r1, #0
 800b47a:	4db9      	ldr	r5, [pc, #740]	; (800b760 <__ieee754_rem_pio2+0x318>)
 800b47c:	dd36      	ble.n	800b4ec <__ieee754_rem_pio2+0xa4>
 800b47e:	f7f4 fe7b 	bl	8000178 <__aeabi_dsub>
 800b482:	45aa      	cmp	sl, r5
 800b484:	4606      	mov	r6, r0
 800b486:	460f      	mov	r7, r1
 800b488:	d018      	beq.n	800b4bc <__ieee754_rem_pio2+0x74>
 800b48a:	a3a7      	add	r3, pc, #668	; (adr r3, 800b728 <__ieee754_rem_pio2+0x2e0>)
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	f7f4 fe72 	bl	8000178 <__aeabi_dsub>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	4630      	mov	r0, r6
 800b49a:	e9c4 2300 	strd	r2, r3, [r4]
 800b49e:	4639      	mov	r1, r7
 800b4a0:	f7f4 fe6a 	bl	8000178 <__aeabi_dsub>
 800b4a4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b728 <__ieee754_rem_pio2+0x2e0>)
 800b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4aa:	f7f4 fe65 	bl	8000178 <__aeabi_dsub>
 800b4ae:	2501      	movs	r5, #1
 800b4b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	b00d      	add	sp, #52	; 0x34
 800b4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4bc:	a39c      	add	r3, pc, #624	; (adr r3, 800b730 <__ieee754_rem_pio2+0x2e8>)
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	f7f4 fe59 	bl	8000178 <__aeabi_dsub>
 800b4c6:	a39c      	add	r3, pc, #624	; (adr r3, 800b738 <__ieee754_rem_pio2+0x2f0>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	4606      	mov	r6, r0
 800b4ce:	460f      	mov	r7, r1
 800b4d0:	f7f4 fe52 	bl	8000178 <__aeabi_dsub>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4630      	mov	r0, r6
 800b4da:	e9c4 2300 	strd	r2, r3, [r4]
 800b4de:	4639      	mov	r1, r7
 800b4e0:	f7f4 fe4a 	bl	8000178 <__aeabi_dsub>
 800b4e4:	a394      	add	r3, pc, #592	; (adr r3, 800b738 <__ieee754_rem_pio2+0x2f0>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	e7de      	b.n	800b4aa <__ieee754_rem_pio2+0x62>
 800b4ec:	f7f4 fe46 	bl	800017c <__adddf3>
 800b4f0:	45aa      	cmp	sl, r5
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	460f      	mov	r7, r1
 800b4f6:	d016      	beq.n	800b526 <__ieee754_rem_pio2+0xde>
 800b4f8:	a38b      	add	r3, pc, #556	; (adr r3, 800b728 <__ieee754_rem_pio2+0x2e0>)
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f7f4 fe3d 	bl	800017c <__adddf3>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	4630      	mov	r0, r6
 800b508:	e9c4 2300 	strd	r2, r3, [r4]
 800b50c:	4639      	mov	r1, r7
 800b50e:	f7f4 fe33 	bl	8000178 <__aeabi_dsub>
 800b512:	a385      	add	r3, pc, #532	; (adr r3, 800b728 <__ieee754_rem_pio2+0x2e0>)
 800b514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b518:	f7f4 fe30 	bl	800017c <__adddf3>
 800b51c:	f04f 35ff 	mov.w	r5, #4294967295
 800b520:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b524:	e7c6      	b.n	800b4b4 <__ieee754_rem_pio2+0x6c>
 800b526:	a382      	add	r3, pc, #520	; (adr r3, 800b730 <__ieee754_rem_pio2+0x2e8>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7f4 fe26 	bl	800017c <__adddf3>
 800b530:	a381      	add	r3, pc, #516	; (adr r3, 800b738 <__ieee754_rem_pio2+0x2f0>)
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	4606      	mov	r6, r0
 800b538:	460f      	mov	r7, r1
 800b53a:	f7f4 fe1f 	bl	800017c <__adddf3>
 800b53e:	4602      	mov	r2, r0
 800b540:	460b      	mov	r3, r1
 800b542:	4630      	mov	r0, r6
 800b544:	e9c4 2300 	strd	r2, r3, [r4]
 800b548:	4639      	mov	r1, r7
 800b54a:	f7f4 fe15 	bl	8000178 <__aeabi_dsub>
 800b54e:	a37a      	add	r3, pc, #488	; (adr r3, 800b738 <__ieee754_rem_pio2+0x2f0>)
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	e7e0      	b.n	800b518 <__ieee754_rem_pio2+0xd0>
 800b556:	4a83      	ldr	r2, [pc, #524]	; (800b764 <__ieee754_rem_pio2+0x31c>)
 800b558:	4592      	cmp	sl, r2
 800b55a:	f300 80d2 	bgt.w	800b702 <__ieee754_rem_pio2+0x2ba>
 800b55e:	f7fe fbcf 	bl	8009d00 <fabs>
 800b562:	a377      	add	r3, pc, #476	; (adr r3, 800b740 <__ieee754_rem_pio2+0x2f8>)
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	4606      	mov	r6, r0
 800b56a:	460f      	mov	r7, r1
 800b56c:	f7f4 ffbc 	bl	80004e8 <__aeabi_dmul>
 800b570:	2200      	movs	r2, #0
 800b572:	4b7d      	ldr	r3, [pc, #500]	; (800b768 <__ieee754_rem_pio2+0x320>)
 800b574:	f7f4 fe02 	bl	800017c <__adddf3>
 800b578:	f7f5 fa66 	bl	8000a48 <__aeabi_d2iz>
 800b57c:	4605      	mov	r5, r0
 800b57e:	f7f4 ff49 	bl	8000414 <__aeabi_i2d>
 800b582:	a367      	add	r3, pc, #412	; (adr r3, 800b720 <__ieee754_rem_pio2+0x2d8>)
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b58c:	f7f4 ffac 	bl	80004e8 <__aeabi_dmul>
 800b590:	4602      	mov	r2, r0
 800b592:	460b      	mov	r3, r1
 800b594:	4630      	mov	r0, r6
 800b596:	4639      	mov	r1, r7
 800b598:	f7f4 fdee 	bl	8000178 <__aeabi_dsub>
 800b59c:	a362      	add	r3, pc, #392	; (adr r3, 800b728 <__ieee754_rem_pio2+0x2e0>)
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	460f      	mov	r7, r1
 800b5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5aa:	f7f4 ff9d 	bl	80004e8 <__aeabi_dmul>
 800b5ae:	2d1f      	cmp	r5, #31
 800b5b0:	4680      	mov	r8, r0
 800b5b2:	4689      	mov	r9, r1
 800b5b4:	dc0e      	bgt.n	800b5d4 <__ieee754_rem_pio2+0x18c>
 800b5b6:	4b6d      	ldr	r3, [pc, #436]	; (800b76c <__ieee754_rem_pio2+0x324>)
 800b5b8:	1e6a      	subs	r2, r5, #1
 800b5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5be:	4553      	cmp	r3, sl
 800b5c0:	d008      	beq.n	800b5d4 <__ieee754_rem_pio2+0x18c>
 800b5c2:	4642      	mov	r2, r8
 800b5c4:	464b      	mov	r3, r9
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	f7f4 fdd5 	bl	8000178 <__aeabi_dsub>
 800b5ce:	e9c4 0100 	strd	r0, r1, [r4]
 800b5d2:	e011      	b.n	800b5f8 <__ieee754_rem_pio2+0x1b0>
 800b5d4:	464b      	mov	r3, r9
 800b5d6:	4642      	mov	r2, r8
 800b5d8:	4630      	mov	r0, r6
 800b5da:	4639      	mov	r1, r7
 800b5dc:	f7f4 fdcc 	bl	8000178 <__aeabi_dsub>
 800b5e0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b5e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b5e8:	ebaa 0303 	sub.w	r3, sl, r3
 800b5ec:	2b10      	cmp	r3, #16
 800b5ee:	dc1f      	bgt.n	800b630 <__ieee754_rem_pio2+0x1e8>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	e9c4 2300 	strd	r2, r3, [r4]
 800b5f8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	4653      	mov	r3, sl
 800b600:	4639      	mov	r1, r7
 800b602:	f7f4 fdb9 	bl	8000178 <__aeabi_dsub>
 800b606:	4642      	mov	r2, r8
 800b608:	464b      	mov	r3, r9
 800b60a:	f7f4 fdb5 	bl	8000178 <__aeabi_dsub>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	f1bb 0f00 	cmp.w	fp, #0
 800b616:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b61a:	f6bf af4b 	bge.w	800b4b4 <__ieee754_rem_pio2+0x6c>
 800b61e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800b622:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800b626:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b62a:	60e1      	str	r1, [r4, #12]
 800b62c:	426d      	negs	r5, r5
 800b62e:	e741      	b.n	800b4b4 <__ieee754_rem_pio2+0x6c>
 800b630:	a33f      	add	r3, pc, #252	; (adr r3, 800b730 <__ieee754_rem_pio2+0x2e8>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b63a:	f7f4 ff55 	bl	80004e8 <__aeabi_dmul>
 800b63e:	4680      	mov	r8, r0
 800b640:	4689      	mov	r9, r1
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	4630      	mov	r0, r6
 800b648:	4639      	mov	r1, r7
 800b64a:	f7f4 fd95 	bl	8000178 <__aeabi_dsub>
 800b64e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	4630      	mov	r0, r6
 800b658:	4639      	mov	r1, r7
 800b65a:	f7f4 fd8d 	bl	8000178 <__aeabi_dsub>
 800b65e:	4642      	mov	r2, r8
 800b660:	464b      	mov	r3, r9
 800b662:	f7f4 fd89 	bl	8000178 <__aeabi_dsub>
 800b666:	a334      	add	r3, pc, #208	; (adr r3, 800b738 <__ieee754_rem_pio2+0x2f0>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	4606      	mov	r6, r0
 800b66e:	460f      	mov	r7, r1
 800b670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b674:	f7f4 ff38 	bl	80004e8 <__aeabi_dmul>
 800b678:	4632      	mov	r2, r6
 800b67a:	463b      	mov	r3, r7
 800b67c:	f7f4 fd7c 	bl	8000178 <__aeabi_dsub>
 800b680:	460b      	mov	r3, r1
 800b682:	4602      	mov	r2, r0
 800b684:	4680      	mov	r8, r0
 800b686:	4689      	mov	r9, r1
 800b688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b68c:	f7f4 fd74 	bl	8000178 <__aeabi_dsub>
 800b690:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b694:	ebaa 0a03 	sub.w	sl, sl, r3
 800b698:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800b69c:	dc06      	bgt.n	800b6ac <__ieee754_rem_pio2+0x264>
 800b69e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	e9c4 2300 	strd	r2, r3, [r4]
 800b6aa:	e7a5      	b.n	800b5f8 <__ieee754_rem_pio2+0x1b0>
 800b6ac:	a326      	add	r3, pc, #152	; (adr r3, 800b748 <__ieee754_rem_pio2+0x300>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6b6:	f7f4 ff17 	bl	80004e8 <__aeabi_dmul>
 800b6ba:	4680      	mov	r8, r0
 800b6bc:	4689      	mov	r9, r1
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6c6:	f7f4 fd57 	bl	8000178 <__aeabi_dsub>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	460f      	mov	r7, r1
 800b6d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6d6:	f7f4 fd4f 	bl	8000178 <__aeabi_dsub>
 800b6da:	4642      	mov	r2, r8
 800b6dc:	464b      	mov	r3, r9
 800b6de:	f7f4 fd4b 	bl	8000178 <__aeabi_dsub>
 800b6e2:	a31b      	add	r3, pc, #108	; (adr r3, 800b750 <__ieee754_rem_pio2+0x308>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	4680      	mov	r8, r0
 800b6ea:	4689      	mov	r9, r1
 800b6ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6f0:	f7f4 fefa 	bl	80004e8 <__aeabi_dmul>
 800b6f4:	4642      	mov	r2, r8
 800b6f6:	464b      	mov	r3, r9
 800b6f8:	f7f4 fd3e 	bl	8000178 <__aeabi_dsub>
 800b6fc:	4680      	mov	r8, r0
 800b6fe:	4689      	mov	r9, r1
 800b700:	e75f      	b.n	800b5c2 <__ieee754_rem_pio2+0x17a>
 800b702:	4a1b      	ldr	r2, [pc, #108]	; (800b770 <__ieee754_rem_pio2+0x328>)
 800b704:	4592      	cmp	sl, r2
 800b706:	dd35      	ble.n	800b774 <__ieee754_rem_pio2+0x32c>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	f7f4 fd34 	bl	8000178 <__aeabi_dsub>
 800b710:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b714:	e9c4 0100 	strd	r0, r1, [r4]
 800b718:	e6a6      	b.n	800b468 <__ieee754_rem_pio2+0x20>
 800b71a:	bf00      	nop
 800b71c:	f3af 8000 	nop.w
 800b720:	54400000 	.word	0x54400000
 800b724:	3ff921fb 	.word	0x3ff921fb
 800b728:	1a626331 	.word	0x1a626331
 800b72c:	3dd0b461 	.word	0x3dd0b461
 800b730:	1a600000 	.word	0x1a600000
 800b734:	3dd0b461 	.word	0x3dd0b461
 800b738:	2e037073 	.word	0x2e037073
 800b73c:	3ba3198a 	.word	0x3ba3198a
 800b740:	6dc9c883 	.word	0x6dc9c883
 800b744:	3fe45f30 	.word	0x3fe45f30
 800b748:	2e000000 	.word	0x2e000000
 800b74c:	3ba3198a 	.word	0x3ba3198a
 800b750:	252049c1 	.word	0x252049c1
 800b754:	397b839a 	.word	0x397b839a
 800b758:	3fe921fb 	.word	0x3fe921fb
 800b75c:	4002d97b 	.word	0x4002d97b
 800b760:	3ff921fb 	.word	0x3ff921fb
 800b764:	413921fb 	.word	0x413921fb
 800b768:	3fe00000 	.word	0x3fe00000
 800b76c:	0800e5d0 	.word	0x0800e5d0
 800b770:	7fefffff 	.word	0x7fefffff
 800b774:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b778:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b77c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b780:	460f      	mov	r7, r1
 800b782:	4606      	mov	r6, r0
 800b784:	f7f5 f960 	bl	8000a48 <__aeabi_d2iz>
 800b788:	f7f4 fe44 	bl	8000414 <__aeabi_i2d>
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	4630      	mov	r0, r6
 800b792:	4639      	mov	r1, r7
 800b794:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b798:	f7f4 fcee 	bl	8000178 <__aeabi_dsub>
 800b79c:	2200      	movs	r2, #0
 800b79e:	4b20      	ldr	r3, [pc, #128]	; (800b820 <__ieee754_rem_pio2+0x3d8>)
 800b7a0:	f7f4 fea2 	bl	80004e8 <__aeabi_dmul>
 800b7a4:	460f      	mov	r7, r1
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	f7f5 f94e 	bl	8000a48 <__aeabi_d2iz>
 800b7ac:	f7f4 fe32 	bl	8000414 <__aeabi_i2d>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	4639      	mov	r1, r7
 800b7b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7bc:	f7f4 fcdc 	bl	8000178 <__aeabi_dsub>
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	4b17      	ldr	r3, [pc, #92]	; (800b820 <__ieee754_rem_pio2+0x3d8>)
 800b7c4:	f7f4 fe90 	bl	80004e8 <__aeabi_dmul>
 800b7c8:	f04f 0803 	mov.w	r8, #3
 800b7cc:	2600      	movs	r6, #0
 800b7ce:	2700      	movs	r7, #0
 800b7d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b7d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b7d8:	4632      	mov	r2, r6
 800b7da:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b7de:	463b      	mov	r3, r7
 800b7e0:	f108 3aff 	add.w	sl, r8, #4294967295
 800b7e4:	f7f5 f8e8 	bl	80009b8 <__aeabi_dcmpeq>
 800b7e8:	b9b8      	cbnz	r0, 800b81a <__ieee754_rem_pio2+0x3d2>
 800b7ea:	4b0e      	ldr	r3, [pc, #56]	; (800b824 <__ieee754_rem_pio2+0x3dc>)
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	9301      	str	r3, [sp, #4]
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	a806      	add	r0, sp, #24
 800b7f8:	4643      	mov	r3, r8
 800b7fa:	f000 f97f 	bl	800bafc <__kernel_rem_pio2>
 800b7fe:	f1bb 0f00 	cmp.w	fp, #0
 800b802:	4605      	mov	r5, r0
 800b804:	f6bf ae56 	bge.w	800b4b4 <__ieee754_rem_pio2+0x6c>
 800b808:	6863      	ldr	r3, [r4, #4]
 800b80a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b80e:	6063      	str	r3, [r4, #4]
 800b810:	68e3      	ldr	r3, [r4, #12]
 800b812:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b816:	60e3      	str	r3, [r4, #12]
 800b818:	e708      	b.n	800b62c <__ieee754_rem_pio2+0x1e4>
 800b81a:	46d0      	mov	r8, sl
 800b81c:	e7dc      	b.n	800b7d8 <__ieee754_rem_pio2+0x390>
 800b81e:	bf00      	nop
 800b820:	41700000 	.word	0x41700000
 800b824:	0800e650 	.word	0x0800e650

0800b828 <__ieee754_sqrt>:
 800b828:	4b54      	ldr	r3, [pc, #336]	; (800b97c <__ieee754_sqrt+0x154>)
 800b82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b82e:	438b      	bics	r3, r1
 800b830:	4606      	mov	r6, r0
 800b832:	460d      	mov	r5, r1
 800b834:	460a      	mov	r2, r1
 800b836:	460c      	mov	r4, r1
 800b838:	d10f      	bne.n	800b85a <__ieee754_sqrt+0x32>
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	f7f4 fe53 	bl	80004e8 <__aeabi_dmul>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4630      	mov	r0, r6
 800b848:	4629      	mov	r1, r5
 800b84a:	f7f4 fc97 	bl	800017c <__adddf3>
 800b84e:	4606      	mov	r6, r0
 800b850:	460d      	mov	r5, r1
 800b852:	4630      	mov	r0, r6
 800b854:	4629      	mov	r1, r5
 800b856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b85a:	2900      	cmp	r1, #0
 800b85c:	4607      	mov	r7, r0
 800b85e:	4603      	mov	r3, r0
 800b860:	dc0e      	bgt.n	800b880 <__ieee754_sqrt+0x58>
 800b862:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b866:	ea5c 0707 	orrs.w	r7, ip, r7
 800b86a:	d0f2      	beq.n	800b852 <__ieee754_sqrt+0x2a>
 800b86c:	b141      	cbz	r1, 800b880 <__ieee754_sqrt+0x58>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	f7f4 fc81 	bl	8000178 <__aeabi_dsub>
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	f7f4 ff5f 	bl	800073c <__aeabi_ddiv>
 800b87e:	e7e6      	b.n	800b84e <__ieee754_sqrt+0x26>
 800b880:	1512      	asrs	r2, r2, #20
 800b882:	d074      	beq.n	800b96e <__ieee754_sqrt+0x146>
 800b884:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b888:	07d5      	lsls	r5, r2, #31
 800b88a:	f04f 0500 	mov.w	r5, #0
 800b88e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b892:	bf48      	it	mi
 800b894:	0fd9      	lsrmi	r1, r3, #31
 800b896:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b89a:	bf44      	itt	mi
 800b89c:	005b      	lslmi	r3, r3, #1
 800b89e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b8a2:	1051      	asrs	r1, r2, #1
 800b8a4:	0fda      	lsrs	r2, r3, #31
 800b8a6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	2216      	movs	r2, #22
 800b8ae:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b8b2:	005b      	lsls	r3, r3, #1
 800b8b4:	1987      	adds	r7, r0, r6
 800b8b6:	42a7      	cmp	r7, r4
 800b8b8:	bfde      	ittt	le
 800b8ba:	19b8      	addle	r0, r7, r6
 800b8bc:	1be4      	suble	r4, r4, r7
 800b8be:	19ad      	addle	r5, r5, r6
 800b8c0:	0fdf      	lsrs	r7, r3, #31
 800b8c2:	3a01      	subs	r2, #1
 800b8c4:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b8c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b8cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b8d0:	d1f0      	bne.n	800b8b4 <__ieee754_sqrt+0x8c>
 800b8d2:	f04f 0c20 	mov.w	ip, #32
 800b8d6:	4696      	mov	lr, r2
 800b8d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b8dc:	4284      	cmp	r4, r0
 800b8de:	eb06 070e 	add.w	r7, r6, lr
 800b8e2:	dc02      	bgt.n	800b8ea <__ieee754_sqrt+0xc2>
 800b8e4:	d112      	bne.n	800b90c <__ieee754_sqrt+0xe4>
 800b8e6:	429f      	cmp	r7, r3
 800b8e8:	d810      	bhi.n	800b90c <__ieee754_sqrt+0xe4>
 800b8ea:	2f00      	cmp	r7, #0
 800b8ec:	eb07 0e06 	add.w	lr, r7, r6
 800b8f0:	da42      	bge.n	800b978 <__ieee754_sqrt+0x150>
 800b8f2:	f1be 0f00 	cmp.w	lr, #0
 800b8f6:	db3f      	blt.n	800b978 <__ieee754_sqrt+0x150>
 800b8f8:	f100 0801 	add.w	r8, r0, #1
 800b8fc:	1a24      	subs	r4, r4, r0
 800b8fe:	4640      	mov	r0, r8
 800b900:	429f      	cmp	r7, r3
 800b902:	bf88      	it	hi
 800b904:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800b908:	1bdb      	subs	r3, r3, r7
 800b90a:	4432      	add	r2, r6
 800b90c:	0064      	lsls	r4, r4, #1
 800b90e:	f1bc 0c01 	subs.w	ip, ip, #1
 800b912:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b916:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b91a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b91e:	d1dd      	bne.n	800b8dc <__ieee754_sqrt+0xb4>
 800b920:	4323      	orrs	r3, r4
 800b922:	d006      	beq.n	800b932 <__ieee754_sqrt+0x10a>
 800b924:	1c54      	adds	r4, r2, #1
 800b926:	bf0b      	itete	eq
 800b928:	4662      	moveq	r2, ip
 800b92a:	3201      	addne	r2, #1
 800b92c:	3501      	addeq	r5, #1
 800b92e:	f022 0201 	bicne.w	r2, r2, #1
 800b932:	106b      	asrs	r3, r5, #1
 800b934:	0852      	lsrs	r2, r2, #1
 800b936:	07e8      	lsls	r0, r5, #31
 800b938:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b93c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b940:	bf48      	it	mi
 800b942:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b946:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b94a:	4616      	mov	r6, r2
 800b94c:	e781      	b.n	800b852 <__ieee754_sqrt+0x2a>
 800b94e:	0adc      	lsrs	r4, r3, #11
 800b950:	3915      	subs	r1, #21
 800b952:	055b      	lsls	r3, r3, #21
 800b954:	2c00      	cmp	r4, #0
 800b956:	d0fa      	beq.n	800b94e <__ieee754_sqrt+0x126>
 800b958:	02e6      	lsls	r6, r4, #11
 800b95a:	d50a      	bpl.n	800b972 <__ieee754_sqrt+0x14a>
 800b95c:	f1c2 0020 	rsb	r0, r2, #32
 800b960:	fa23 f000 	lsr.w	r0, r3, r0
 800b964:	1e55      	subs	r5, r2, #1
 800b966:	4093      	lsls	r3, r2
 800b968:	4304      	orrs	r4, r0
 800b96a:	1b4a      	subs	r2, r1, r5
 800b96c:	e78a      	b.n	800b884 <__ieee754_sqrt+0x5c>
 800b96e:	4611      	mov	r1, r2
 800b970:	e7f0      	b.n	800b954 <__ieee754_sqrt+0x12c>
 800b972:	0064      	lsls	r4, r4, #1
 800b974:	3201      	adds	r2, #1
 800b976:	e7ef      	b.n	800b958 <__ieee754_sqrt+0x130>
 800b978:	4680      	mov	r8, r0
 800b97a:	e7bf      	b.n	800b8fc <__ieee754_sqrt+0xd4>
 800b97c:	7ff00000 	.word	0x7ff00000

0800b980 <__kernel_cos>:
 800b980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b988:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b98c:	4680      	mov	r8, r0
 800b98e:	460f      	mov	r7, r1
 800b990:	e9cd 2300 	strd	r2, r3, [sp]
 800b994:	da04      	bge.n	800b9a0 <__kernel_cos+0x20>
 800b996:	f7f5 f857 	bl	8000a48 <__aeabi_d2iz>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	f000 8086 	beq.w	800baac <__kernel_cos+0x12c>
 800b9a0:	4642      	mov	r2, r8
 800b9a2:	463b      	mov	r3, r7
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	f7f4 fd9e 	bl	80004e8 <__aeabi_dmul>
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	4b4e      	ldr	r3, [pc, #312]	; (800bae8 <__kernel_cos+0x168>)
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	460d      	mov	r5, r1
 800b9b4:	f7f4 fd98 	bl	80004e8 <__aeabi_dmul>
 800b9b8:	a33f      	add	r3, pc, #252	; (adr r3, 800bab8 <__kernel_cos+0x138>)
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	4682      	mov	sl, r0
 800b9c0:	468b      	mov	fp, r1
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	f7f4 fd8f 	bl	80004e8 <__aeabi_dmul>
 800b9ca:	a33d      	add	r3, pc, #244	; (adr r3, 800bac0 <__kernel_cos+0x140>)
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f7f4 fbd4 	bl	800017c <__adddf3>
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	462b      	mov	r3, r5
 800b9d8:	f7f4 fd86 	bl	80004e8 <__aeabi_dmul>
 800b9dc:	a33a      	add	r3, pc, #232	; (adr r3, 800bac8 <__kernel_cos+0x148>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f7f4 fbc9 	bl	8000178 <__aeabi_dsub>
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	462b      	mov	r3, r5
 800b9ea:	f7f4 fd7d 	bl	80004e8 <__aeabi_dmul>
 800b9ee:	a338      	add	r3, pc, #224	; (adr r3, 800bad0 <__kernel_cos+0x150>)
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f7f4 fbc2 	bl	800017c <__adddf3>
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	462b      	mov	r3, r5
 800b9fc:	f7f4 fd74 	bl	80004e8 <__aeabi_dmul>
 800ba00:	a335      	add	r3, pc, #212	; (adr r3, 800bad8 <__kernel_cos+0x158>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	f7f4 fbb7 	bl	8000178 <__aeabi_dsub>
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	462b      	mov	r3, r5
 800ba0e:	f7f4 fd6b 	bl	80004e8 <__aeabi_dmul>
 800ba12:	a333      	add	r3, pc, #204	; (adr r3, 800bae0 <__kernel_cos+0x160>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f7f4 fbb0 	bl	800017c <__adddf3>
 800ba1c:	4622      	mov	r2, r4
 800ba1e:	462b      	mov	r3, r5
 800ba20:	f7f4 fd62 	bl	80004e8 <__aeabi_dmul>
 800ba24:	4622      	mov	r2, r4
 800ba26:	462b      	mov	r3, r5
 800ba28:	f7f4 fd5e 	bl	80004e8 <__aeabi_dmul>
 800ba2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba30:	4604      	mov	r4, r0
 800ba32:	460d      	mov	r5, r1
 800ba34:	4640      	mov	r0, r8
 800ba36:	4639      	mov	r1, r7
 800ba38:	f7f4 fd56 	bl	80004e8 <__aeabi_dmul>
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4602      	mov	r2, r0
 800ba40:	4629      	mov	r1, r5
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7f4 fb98 	bl	8000178 <__aeabi_dsub>
 800ba48:	4b28      	ldr	r3, [pc, #160]	; (800baec <__kernel_cos+0x16c>)
 800ba4a:	4680      	mov	r8, r0
 800ba4c:	429e      	cmp	r6, r3
 800ba4e:	4689      	mov	r9, r1
 800ba50:	dc0e      	bgt.n	800ba70 <__kernel_cos+0xf0>
 800ba52:	4602      	mov	r2, r0
 800ba54:	460b      	mov	r3, r1
 800ba56:	4650      	mov	r0, sl
 800ba58:	4659      	mov	r1, fp
 800ba5a:	f7f4 fb8d 	bl	8000178 <__aeabi_dsub>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	2000      	movs	r0, #0
 800ba62:	460b      	mov	r3, r1
 800ba64:	4922      	ldr	r1, [pc, #136]	; (800baf0 <__kernel_cos+0x170>)
 800ba66:	f7f4 fb87 	bl	8000178 <__aeabi_dsub>
 800ba6a:	b003      	add	sp, #12
 800ba6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba70:	2400      	movs	r4, #0
 800ba72:	4b20      	ldr	r3, [pc, #128]	; (800baf4 <__kernel_cos+0x174>)
 800ba74:	4622      	mov	r2, r4
 800ba76:	429e      	cmp	r6, r3
 800ba78:	bfcc      	ite	gt
 800ba7a:	4d1f      	ldrgt	r5, [pc, #124]	; (800baf8 <__kernel_cos+0x178>)
 800ba7c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ba80:	462b      	mov	r3, r5
 800ba82:	2000      	movs	r0, #0
 800ba84:	491a      	ldr	r1, [pc, #104]	; (800baf0 <__kernel_cos+0x170>)
 800ba86:	f7f4 fb77 	bl	8000178 <__aeabi_dsub>
 800ba8a:	4622      	mov	r2, r4
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	460f      	mov	r7, r1
 800ba90:	462b      	mov	r3, r5
 800ba92:	4650      	mov	r0, sl
 800ba94:	4659      	mov	r1, fp
 800ba96:	f7f4 fb6f 	bl	8000178 <__aeabi_dsub>
 800ba9a:	4642      	mov	r2, r8
 800ba9c:	464b      	mov	r3, r9
 800ba9e:	f7f4 fb6b 	bl	8000178 <__aeabi_dsub>
 800baa2:	4602      	mov	r2, r0
 800baa4:	460b      	mov	r3, r1
 800baa6:	4630      	mov	r0, r6
 800baa8:	4639      	mov	r1, r7
 800baaa:	e7dc      	b.n	800ba66 <__kernel_cos+0xe6>
 800baac:	2000      	movs	r0, #0
 800baae:	4910      	ldr	r1, [pc, #64]	; (800baf0 <__kernel_cos+0x170>)
 800bab0:	e7db      	b.n	800ba6a <__kernel_cos+0xea>
 800bab2:	bf00      	nop
 800bab4:	f3af 8000 	nop.w
 800bab8:	be8838d4 	.word	0xbe8838d4
 800babc:	bda8fae9 	.word	0xbda8fae9
 800bac0:	bdb4b1c4 	.word	0xbdb4b1c4
 800bac4:	3e21ee9e 	.word	0x3e21ee9e
 800bac8:	809c52ad 	.word	0x809c52ad
 800bacc:	3e927e4f 	.word	0x3e927e4f
 800bad0:	19cb1590 	.word	0x19cb1590
 800bad4:	3efa01a0 	.word	0x3efa01a0
 800bad8:	16c15177 	.word	0x16c15177
 800badc:	3f56c16c 	.word	0x3f56c16c
 800bae0:	5555554c 	.word	0x5555554c
 800bae4:	3fa55555 	.word	0x3fa55555
 800bae8:	3fe00000 	.word	0x3fe00000
 800baec:	3fd33332 	.word	0x3fd33332
 800baf0:	3ff00000 	.word	0x3ff00000
 800baf4:	3fe90000 	.word	0x3fe90000
 800baf8:	3fd20000 	.word	0x3fd20000

0800bafc <__kernel_rem_pio2>:
 800bafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb00:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bb04:	9307      	str	r3, [sp, #28]
 800bb06:	9104      	str	r1, [sp, #16]
 800bb08:	4bbf      	ldr	r3, [pc, #764]	; (800be08 <__kernel_rem_pio2+0x30c>)
 800bb0a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800bb0c:	1ed4      	subs	r4, r2, #3
 800bb0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb12:	2500      	movs	r5, #0
 800bb14:	9302      	str	r3, [sp, #8]
 800bb16:	9b07      	ldr	r3, [sp, #28]
 800bb18:	9008      	str	r0, [sp, #32]
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	9306      	str	r3, [sp, #24]
 800bb1e:	2318      	movs	r3, #24
 800bb20:	fb94 f4f3 	sdiv	r4, r4, r3
 800bb24:	f06f 0317 	mvn.w	r3, #23
 800bb28:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800bb2c:	fb04 3303 	mla	r3, r4, r3, r3
 800bb30:	eb03 0a02 	add.w	sl, r3, r2
 800bb34:	9a06      	ldr	r2, [sp, #24]
 800bb36:	9b02      	ldr	r3, [sp, #8]
 800bb38:	1aa7      	subs	r7, r4, r2
 800bb3a:	eb03 0802 	add.w	r8, r3, r2
 800bb3e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bb40:	2200      	movs	r2, #0
 800bb42:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bb46:	2300      	movs	r3, #0
 800bb48:	ae1e      	add	r6, sp, #120	; 0x78
 800bb4a:	4545      	cmp	r5, r8
 800bb4c:	dd14      	ble.n	800bb78 <__kernel_rem_pio2+0x7c>
 800bb4e:	2600      	movs	r6, #0
 800bb50:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800bb54:	9b02      	ldr	r3, [sp, #8]
 800bb56:	429e      	cmp	r6, r3
 800bb58:	dc39      	bgt.n	800bbce <__kernel_rem_pio2+0xd2>
 800bb5a:	9b08      	ldr	r3, [sp, #32]
 800bb5c:	f04f 0800 	mov.w	r8, #0
 800bb60:	3b08      	subs	r3, #8
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	9b07      	ldr	r3, [sp, #28]
 800bb66:	f04f 0900 	mov.w	r9, #0
 800bb6a:	199d      	adds	r5, r3, r6
 800bb6c:	ab20      	add	r3, sp, #128	; 0x80
 800bb6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bb72:	9305      	str	r3, [sp, #20]
 800bb74:	2700      	movs	r7, #0
 800bb76:	e023      	b.n	800bbc0 <__kernel_rem_pio2+0xc4>
 800bb78:	42ef      	cmn	r7, r5
 800bb7a:	d40b      	bmi.n	800bb94 <__kernel_rem_pio2+0x98>
 800bb7c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bb80:	e9cd 2300 	strd	r2, r3, [sp]
 800bb84:	f7f4 fc46 	bl	8000414 <__aeabi_i2d>
 800bb88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb8c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800bb90:	3501      	adds	r5, #1
 800bb92:	e7da      	b.n	800bb4a <__kernel_rem_pio2+0x4e>
 800bb94:	4610      	mov	r0, r2
 800bb96:	4619      	mov	r1, r3
 800bb98:	e7f8      	b.n	800bb8c <__kernel_rem_pio2+0x90>
 800bb9a:	9905      	ldr	r1, [sp, #20]
 800bb9c:	9d00      	ldr	r5, [sp, #0]
 800bb9e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800bba2:	9105      	str	r1, [sp, #20]
 800bba4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800bba8:	9500      	str	r5, [sp, #0]
 800bbaa:	f7f4 fc9d 	bl	80004e8 <__aeabi_dmul>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	4649      	mov	r1, r9
 800bbb6:	f7f4 fae1 	bl	800017c <__adddf3>
 800bbba:	4680      	mov	r8, r0
 800bbbc:	4689      	mov	r9, r1
 800bbbe:	3701      	adds	r7, #1
 800bbc0:	9b06      	ldr	r3, [sp, #24]
 800bbc2:	429f      	cmp	r7, r3
 800bbc4:	dde9      	ble.n	800bb9a <__kernel_rem_pio2+0x9e>
 800bbc6:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800bbca:	3601      	adds	r6, #1
 800bbcc:	e7c2      	b.n	800bb54 <__kernel_rem_pio2+0x58>
 800bbce:	9b02      	ldr	r3, [sp, #8]
 800bbd0:	aa0c      	add	r2, sp, #48	; 0x30
 800bbd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbd8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bbda:	9f02      	ldr	r7, [sp, #8]
 800bbdc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bbe0:	930a      	str	r3, [sp, #40]	; 0x28
 800bbe2:	2600      	movs	r6, #0
 800bbe4:	ab98      	add	r3, sp, #608	; 0x260
 800bbe6:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800bbea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bbf2:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800bbf6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800bbfa:	ab98      	add	r3, sp, #608	; 0x260
 800bbfc:	445b      	add	r3, fp
 800bbfe:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800bc02:	1bbb      	subs	r3, r7, r6
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	dc71      	bgt.n	800bcec <__kernel_rem_pio2+0x1f0>
 800bc08:	4652      	mov	r2, sl
 800bc0a:	4640      	mov	r0, r8
 800bc0c:	4649      	mov	r1, r9
 800bc0e:	f000 fe57 	bl	800c8c0 <scalbn>
 800bc12:	2200      	movs	r2, #0
 800bc14:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bc18:	4604      	mov	r4, r0
 800bc1a:	460d      	mov	r5, r1
 800bc1c:	f7f4 fc64 	bl	80004e8 <__aeabi_dmul>
 800bc20:	f000 fd36 	bl	800c690 <floor>
 800bc24:	2200      	movs	r2, #0
 800bc26:	4b79      	ldr	r3, [pc, #484]	; (800be0c <__kernel_rem_pio2+0x310>)
 800bc28:	f7f4 fc5e 	bl	80004e8 <__aeabi_dmul>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4620      	mov	r0, r4
 800bc32:	4629      	mov	r1, r5
 800bc34:	f7f4 faa0 	bl	8000178 <__aeabi_dsub>
 800bc38:	460d      	mov	r5, r1
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	f7f4 ff04 	bl	8000a48 <__aeabi_d2iz>
 800bc40:	9005      	str	r0, [sp, #20]
 800bc42:	f7f4 fbe7 	bl	8000414 <__aeabi_i2d>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	f7f4 fa93 	bl	8000178 <__aeabi_dsub>
 800bc52:	f1ba 0f00 	cmp.w	sl, #0
 800bc56:	4680      	mov	r8, r0
 800bc58:	4689      	mov	r9, r1
 800bc5a:	dd6c      	ble.n	800bd36 <__kernel_rem_pio2+0x23a>
 800bc5c:	1e7a      	subs	r2, r7, #1
 800bc5e:	ab0c      	add	r3, sp, #48	; 0x30
 800bc60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bc64:	f1ca 0118 	rsb	r1, sl, #24
 800bc68:	9c05      	ldr	r4, [sp, #20]
 800bc6a:	fa40 f301 	asr.w	r3, r0, r1
 800bc6e:	441c      	add	r4, r3
 800bc70:	408b      	lsls	r3, r1
 800bc72:	1ac0      	subs	r0, r0, r3
 800bc74:	ab0c      	add	r3, sp, #48	; 0x30
 800bc76:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bc7a:	f1ca 0317 	rsb	r3, sl, #23
 800bc7e:	9405      	str	r4, [sp, #20]
 800bc80:	fa40 f303 	asr.w	r3, r0, r3
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	9b00      	ldr	r3, [sp, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	dd62      	ble.n	800bd52 <__kernel_rem_pio2+0x256>
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bc92:	4614      	mov	r4, r2
 800bc94:	9b05      	ldr	r3, [sp, #20]
 800bc96:	3301      	adds	r3, #1
 800bc98:	9305      	str	r3, [sp, #20]
 800bc9a:	4297      	cmp	r7, r2
 800bc9c:	f300 809f 	bgt.w	800bdde <__kernel_rem_pio2+0x2e2>
 800bca0:	f1ba 0f00 	cmp.w	sl, #0
 800bca4:	dd07      	ble.n	800bcb6 <__kernel_rem_pio2+0x1ba>
 800bca6:	f1ba 0f01 	cmp.w	sl, #1
 800bcaa:	f000 80bb 	beq.w	800be24 <__kernel_rem_pio2+0x328>
 800bcae:	f1ba 0f02 	cmp.w	sl, #2
 800bcb2:	f000 80c1 	beq.w	800be38 <__kernel_rem_pio2+0x33c>
 800bcb6:	9b00      	ldr	r3, [sp, #0]
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d14a      	bne.n	800bd52 <__kernel_rem_pio2+0x256>
 800bcbc:	4642      	mov	r2, r8
 800bcbe:	464b      	mov	r3, r9
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	4953      	ldr	r1, [pc, #332]	; (800be10 <__kernel_rem_pio2+0x314>)
 800bcc4:	f7f4 fa58 	bl	8000178 <__aeabi_dsub>
 800bcc8:	4680      	mov	r8, r0
 800bcca:	4689      	mov	r9, r1
 800bccc:	2c00      	cmp	r4, #0
 800bcce:	d040      	beq.n	800bd52 <__kernel_rem_pio2+0x256>
 800bcd0:	4652      	mov	r2, sl
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	494e      	ldr	r1, [pc, #312]	; (800be10 <__kernel_rem_pio2+0x314>)
 800bcd6:	f000 fdf3 	bl	800c8c0 <scalbn>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4640      	mov	r0, r8
 800bce0:	4649      	mov	r1, r9
 800bce2:	f7f4 fa49 	bl	8000178 <__aeabi_dsub>
 800bce6:	4680      	mov	r8, r0
 800bce8:	4689      	mov	r9, r1
 800bcea:	e032      	b.n	800bd52 <__kernel_rem_pio2+0x256>
 800bcec:	2200      	movs	r2, #0
 800bcee:	4b49      	ldr	r3, [pc, #292]	; (800be14 <__kernel_rem_pio2+0x318>)
 800bcf0:	4640      	mov	r0, r8
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	f7f4 fbf8 	bl	80004e8 <__aeabi_dmul>
 800bcf8:	f7f4 fea6 	bl	8000a48 <__aeabi_d2iz>
 800bcfc:	f7f4 fb8a 	bl	8000414 <__aeabi_i2d>
 800bd00:	2200      	movs	r2, #0
 800bd02:	4b45      	ldr	r3, [pc, #276]	; (800be18 <__kernel_rem_pio2+0x31c>)
 800bd04:	e9cd 0100 	strd	r0, r1, [sp]
 800bd08:	f7f4 fbee 	bl	80004e8 <__aeabi_dmul>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4640      	mov	r0, r8
 800bd12:	4649      	mov	r1, r9
 800bd14:	f7f4 fa30 	bl	8000178 <__aeabi_dsub>
 800bd18:	f7f4 fe96 	bl	8000a48 <__aeabi_d2iz>
 800bd1c:	ab0c      	add	r3, sp, #48	; 0x30
 800bd1e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800bd22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bd26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd2a:	f7f4 fa27 	bl	800017c <__adddf3>
 800bd2e:	3601      	adds	r6, #1
 800bd30:	4680      	mov	r8, r0
 800bd32:	4689      	mov	r9, r1
 800bd34:	e765      	b.n	800bc02 <__kernel_rem_pio2+0x106>
 800bd36:	d105      	bne.n	800bd44 <__kernel_rem_pio2+0x248>
 800bd38:	1e7b      	subs	r3, r7, #1
 800bd3a:	aa0c      	add	r2, sp, #48	; 0x30
 800bd3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bd40:	15c3      	asrs	r3, r0, #23
 800bd42:	e79f      	b.n	800bc84 <__kernel_rem_pio2+0x188>
 800bd44:	2200      	movs	r2, #0
 800bd46:	4b35      	ldr	r3, [pc, #212]	; (800be1c <__kernel_rem_pio2+0x320>)
 800bd48:	f7f4 fe54 	bl	80009f4 <__aeabi_dcmpge>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d143      	bne.n	800bdd8 <__kernel_rem_pio2+0x2dc>
 800bd50:	9000      	str	r0, [sp, #0]
 800bd52:	2200      	movs	r2, #0
 800bd54:	2300      	movs	r3, #0
 800bd56:	4640      	mov	r0, r8
 800bd58:	4649      	mov	r1, r9
 800bd5a:	f7f4 fe2d 	bl	80009b8 <__aeabi_dcmpeq>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	f000 80c3 	beq.w	800beea <__kernel_rem_pio2+0x3ee>
 800bd64:	1e7c      	subs	r4, r7, #1
 800bd66:	4623      	mov	r3, r4
 800bd68:	2200      	movs	r2, #0
 800bd6a:	9902      	ldr	r1, [sp, #8]
 800bd6c:	428b      	cmp	r3, r1
 800bd6e:	da6a      	bge.n	800be46 <__kernel_rem_pio2+0x34a>
 800bd70:	2a00      	cmp	r2, #0
 800bd72:	f000 8084 	beq.w	800be7e <__kernel_rem_pio2+0x382>
 800bd76:	ab0c      	add	r3, sp, #48	; 0x30
 800bd78:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bd7c:	f1aa 0a18 	sub.w	sl, sl, #24
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f000 80b0 	beq.w	800bee6 <__kernel_rem_pio2+0x3ea>
 800bd86:	4652      	mov	r2, sl
 800bd88:	2000      	movs	r0, #0
 800bd8a:	4921      	ldr	r1, [pc, #132]	; (800be10 <__kernel_rem_pio2+0x314>)
 800bd8c:	f000 fd98 	bl	800c8c0 <scalbn>
 800bd90:	4625      	mov	r5, r4
 800bd92:	4606      	mov	r6, r0
 800bd94:	460f      	mov	r7, r1
 800bd96:	f04f 0a00 	mov.w	sl, #0
 800bd9a:	00e3      	lsls	r3, r4, #3
 800bd9c:	aa98      	add	r2, sp, #608	; 0x260
 800bd9e:	eb02 0803 	add.w	r8, r2, r3
 800bda2:	f8df b070 	ldr.w	fp, [pc, #112]	; 800be14 <__kernel_rem_pio2+0x318>
 800bda6:	9306      	str	r3, [sp, #24]
 800bda8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800bdac:	2d00      	cmp	r5, #0
 800bdae:	f280 80d2 	bge.w	800bf56 <__kernel_rem_pio2+0x45a>
 800bdb2:	2500      	movs	r5, #0
 800bdb4:	9a06      	ldr	r2, [sp, #24]
 800bdb6:	ab98      	add	r3, sp, #608	; 0x260
 800bdb8:	189e      	adds	r6, r3, r2
 800bdba:	3ea8      	subs	r6, #168	; 0xa8
 800bdbc:	1b63      	subs	r3, r4, r5
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f2c0 80f9 	blt.w	800bfb6 <__kernel_rem_pio2+0x4ba>
 800bdc4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800be20 <__kernel_rem_pio2+0x324>
 800bdc8:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800bdcc:	f04f 0a00 	mov.w	sl, #0
 800bdd0:	f04f 0b00 	mov.w	fp, #0
 800bdd4:	2700      	movs	r7, #0
 800bdd6:	e0e2      	b.n	800bf9e <__kernel_rem_pio2+0x4a2>
 800bdd8:	2302      	movs	r3, #2
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	e756      	b.n	800bc8c <__kernel_rem_pio2+0x190>
 800bdde:	ab0c      	add	r3, sp, #48	; 0x30
 800bde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde4:	b94c      	cbnz	r4, 800bdfa <__kernel_rem_pio2+0x2fe>
 800bde6:	b12b      	cbz	r3, 800bdf4 <__kernel_rem_pio2+0x2f8>
 800bde8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bdec:	a80c      	add	r0, sp, #48	; 0x30
 800bdee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	3201      	adds	r2, #1
 800bdf6:	461c      	mov	r4, r3
 800bdf8:	e74f      	b.n	800bc9a <__kernel_rem_pio2+0x19e>
 800bdfa:	1acb      	subs	r3, r1, r3
 800bdfc:	a80c      	add	r0, sp, #48	; 0x30
 800bdfe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800be02:	4623      	mov	r3, r4
 800be04:	e7f6      	b.n	800bdf4 <__kernel_rem_pio2+0x2f8>
 800be06:	bf00      	nop
 800be08:	0800e798 	.word	0x0800e798
 800be0c:	40200000 	.word	0x40200000
 800be10:	3ff00000 	.word	0x3ff00000
 800be14:	3e700000 	.word	0x3e700000
 800be18:	41700000 	.word	0x41700000
 800be1c:	3fe00000 	.word	0x3fe00000
 800be20:	0800e750 	.word	0x0800e750
 800be24:	1e7a      	subs	r2, r7, #1
 800be26:	ab0c      	add	r3, sp, #48	; 0x30
 800be28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800be30:	a90c      	add	r1, sp, #48	; 0x30
 800be32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800be36:	e73e      	b.n	800bcb6 <__kernel_rem_pio2+0x1ba>
 800be38:	1e7a      	subs	r2, r7, #1
 800be3a:	ab0c      	add	r3, sp, #48	; 0x30
 800be3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800be44:	e7f4      	b.n	800be30 <__kernel_rem_pio2+0x334>
 800be46:	a90c      	add	r1, sp, #48	; 0x30
 800be48:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	430a      	orrs	r2, r1
 800be50:	e78b      	b.n	800bd6a <__kernel_rem_pio2+0x26e>
 800be52:	3401      	adds	r4, #1
 800be54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800be58:	2a00      	cmp	r2, #0
 800be5a:	d0fa      	beq.n	800be52 <__kernel_rem_pio2+0x356>
 800be5c:	ab98      	add	r3, sp, #608	; 0x260
 800be5e:	449b      	add	fp, r3
 800be60:	9b07      	ldr	r3, [sp, #28]
 800be62:	1c7e      	adds	r6, r7, #1
 800be64:	19dd      	adds	r5, r3, r7
 800be66:	ab98      	add	r3, sp, #608	; 0x260
 800be68:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800be6c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800be70:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800be74:	443c      	add	r4, r7
 800be76:	42b4      	cmp	r4, r6
 800be78:	da04      	bge.n	800be84 <__kernel_rem_pio2+0x388>
 800be7a:	4627      	mov	r7, r4
 800be7c:	e6b1      	b.n	800bbe2 <__kernel_rem_pio2+0xe6>
 800be7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be80:	2401      	movs	r4, #1
 800be82:	e7e7      	b.n	800be54 <__kernel_rem_pio2+0x358>
 800be84:	f105 0308 	add.w	r3, r5, #8
 800be88:	9309      	str	r3, [sp, #36]	; 0x24
 800be8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be8c:	2700      	movs	r7, #0
 800be8e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800be92:	f7f4 fabf 	bl	8000414 <__aeabi_i2d>
 800be96:	f04f 0800 	mov.w	r8, #0
 800be9a:	f04f 0900 	mov.w	r9, #0
 800be9e:	9b08      	ldr	r3, [sp, #32]
 800bea0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bea4:	3b08      	subs	r3, #8
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	f105 0310 	add.w	r3, r5, #16
 800beac:	9305      	str	r3, [sp, #20]
 800beae:	9b06      	ldr	r3, [sp, #24]
 800beb0:	429f      	cmp	r7, r3
 800beb2:	dd04      	ble.n	800bebe <__kernel_rem_pio2+0x3c2>
 800beb4:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800beb8:	3601      	adds	r6, #1
 800beba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bebc:	e7db      	b.n	800be76 <__kernel_rem_pio2+0x37a>
 800bebe:	9905      	ldr	r1, [sp, #20]
 800bec0:	9d00      	ldr	r5, [sp, #0]
 800bec2:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800bec6:	9105      	str	r1, [sp, #20]
 800bec8:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800becc:	9500      	str	r5, [sp, #0]
 800bece:	f7f4 fb0b 	bl	80004e8 <__aeabi_dmul>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	4640      	mov	r0, r8
 800bed8:	4649      	mov	r1, r9
 800beda:	f7f4 f94f 	bl	800017c <__adddf3>
 800bede:	3701      	adds	r7, #1
 800bee0:	4680      	mov	r8, r0
 800bee2:	4689      	mov	r9, r1
 800bee4:	e7e3      	b.n	800beae <__kernel_rem_pio2+0x3b2>
 800bee6:	3c01      	subs	r4, #1
 800bee8:	e745      	b.n	800bd76 <__kernel_rem_pio2+0x27a>
 800beea:	f1ca 0200 	rsb	r2, sl, #0
 800beee:	4640      	mov	r0, r8
 800bef0:	4649      	mov	r1, r9
 800bef2:	f000 fce5 	bl	800c8c0 <scalbn>
 800bef6:	2200      	movs	r2, #0
 800bef8:	4ba3      	ldr	r3, [pc, #652]	; (800c188 <__kernel_rem_pio2+0x68c>)
 800befa:	4604      	mov	r4, r0
 800befc:	460d      	mov	r5, r1
 800befe:	f7f4 fd79 	bl	80009f4 <__aeabi_dcmpge>
 800bf02:	b1f8      	cbz	r0, 800bf44 <__kernel_rem_pio2+0x448>
 800bf04:	2200      	movs	r2, #0
 800bf06:	4ba1      	ldr	r3, [pc, #644]	; (800c18c <__kernel_rem_pio2+0x690>)
 800bf08:	4620      	mov	r0, r4
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	f7f4 faec 	bl	80004e8 <__aeabi_dmul>
 800bf10:	f7f4 fd9a 	bl	8000a48 <__aeabi_d2iz>
 800bf14:	4606      	mov	r6, r0
 800bf16:	f7f4 fa7d 	bl	8000414 <__aeabi_i2d>
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	4b9a      	ldr	r3, [pc, #616]	; (800c188 <__kernel_rem_pio2+0x68c>)
 800bf1e:	f7f4 fae3 	bl	80004e8 <__aeabi_dmul>
 800bf22:	460b      	mov	r3, r1
 800bf24:	4602      	mov	r2, r0
 800bf26:	4629      	mov	r1, r5
 800bf28:	4620      	mov	r0, r4
 800bf2a:	f7f4 f925 	bl	8000178 <__aeabi_dsub>
 800bf2e:	f7f4 fd8b 	bl	8000a48 <__aeabi_d2iz>
 800bf32:	1c7c      	adds	r4, r7, #1
 800bf34:	ab0c      	add	r3, sp, #48	; 0x30
 800bf36:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bf3a:	f10a 0a18 	add.w	sl, sl, #24
 800bf3e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800bf42:	e720      	b.n	800bd86 <__kernel_rem_pio2+0x28a>
 800bf44:	4620      	mov	r0, r4
 800bf46:	4629      	mov	r1, r5
 800bf48:	f7f4 fd7e 	bl	8000a48 <__aeabi_d2iz>
 800bf4c:	ab0c      	add	r3, sp, #48	; 0x30
 800bf4e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bf52:	463c      	mov	r4, r7
 800bf54:	e717      	b.n	800bd86 <__kernel_rem_pio2+0x28a>
 800bf56:	ab0c      	add	r3, sp, #48	; 0x30
 800bf58:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf5c:	f7f4 fa5a 	bl	8000414 <__aeabi_i2d>
 800bf60:	4632      	mov	r2, r6
 800bf62:	463b      	mov	r3, r7
 800bf64:	f7f4 fac0 	bl	80004e8 <__aeabi_dmul>
 800bf68:	4652      	mov	r2, sl
 800bf6a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800bf6e:	465b      	mov	r3, fp
 800bf70:	4630      	mov	r0, r6
 800bf72:	4639      	mov	r1, r7
 800bf74:	f7f4 fab8 	bl	80004e8 <__aeabi_dmul>
 800bf78:	3d01      	subs	r5, #1
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	460f      	mov	r7, r1
 800bf7e:	e715      	b.n	800bdac <__kernel_rem_pio2+0x2b0>
 800bf80:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800bf84:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800bf88:	f7f4 faae 	bl	80004e8 <__aeabi_dmul>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	460b      	mov	r3, r1
 800bf90:	4650      	mov	r0, sl
 800bf92:	4659      	mov	r1, fp
 800bf94:	f7f4 f8f2 	bl	800017c <__adddf3>
 800bf98:	4682      	mov	sl, r0
 800bf9a:	468b      	mov	fp, r1
 800bf9c:	3701      	adds	r7, #1
 800bf9e:	9b02      	ldr	r3, [sp, #8]
 800bfa0:	429f      	cmp	r7, r3
 800bfa2:	dc01      	bgt.n	800bfa8 <__kernel_rem_pio2+0x4ac>
 800bfa4:	42bd      	cmp	r5, r7
 800bfa6:	daeb      	bge.n	800bf80 <__kernel_rem_pio2+0x484>
 800bfa8:	ab48      	add	r3, sp, #288	; 0x120
 800bfaa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bfae:	e9c3 ab00 	strd	sl, fp, [r3]
 800bfb2:	3501      	adds	r5, #1
 800bfb4:	e702      	b.n	800bdbc <__kernel_rem_pio2+0x2c0>
 800bfb6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	d86c      	bhi.n	800c096 <__kernel_rem_pio2+0x59a>
 800bfbc:	e8df f003 	tbb	[pc, r3]
 800bfc0:	022f2f59 	.word	0x022f2f59
 800bfc4:	9a06      	ldr	r2, [sp, #24]
 800bfc6:	ab48      	add	r3, sp, #288	; 0x120
 800bfc8:	189d      	adds	r5, r3, r2
 800bfca:	46aa      	mov	sl, r5
 800bfcc:	46a3      	mov	fp, r4
 800bfce:	f1bb 0f00 	cmp.w	fp, #0
 800bfd2:	f300 8087 	bgt.w	800c0e4 <__kernel_rem_pio2+0x5e8>
 800bfd6:	46a2      	mov	sl, r4
 800bfd8:	f1ba 0f01 	cmp.w	sl, #1
 800bfdc:	f300 809f 	bgt.w	800c11e <__kernel_rem_pio2+0x622>
 800bfe0:	2700      	movs	r7, #0
 800bfe2:	463e      	mov	r6, r7
 800bfe4:	9d06      	ldr	r5, [sp, #24]
 800bfe6:	ab48      	add	r3, sp, #288	; 0x120
 800bfe8:	3508      	adds	r5, #8
 800bfea:	441d      	add	r5, r3
 800bfec:	2c01      	cmp	r4, #1
 800bfee:	f300 80b3 	bgt.w	800c158 <__kernel_rem_pio2+0x65c>
 800bff2:	9b00      	ldr	r3, [sp, #0]
 800bff4:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800bff6:	9849      	ldr	r0, [sp, #292]	; 0x124
 800bff8:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800bffa:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f040 80b5 	bne.w	800c16c <__kernel_rem_pio2+0x670>
 800c002:	4603      	mov	r3, r0
 800c004:	462a      	mov	r2, r5
 800c006:	9804      	ldr	r0, [sp, #16]
 800c008:	e9c0 2300 	strd	r2, r3, [r0]
 800c00c:	4622      	mov	r2, r4
 800c00e:	460b      	mov	r3, r1
 800c010:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c014:	463a      	mov	r2, r7
 800c016:	4633      	mov	r3, r6
 800c018:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c01c:	e03b      	b.n	800c096 <__kernel_rem_pio2+0x59a>
 800c01e:	f04f 0c00 	mov.w	ip, #0
 800c022:	4626      	mov	r6, r4
 800c024:	4667      	mov	r7, ip
 800c026:	9d06      	ldr	r5, [sp, #24]
 800c028:	ab48      	add	r3, sp, #288	; 0x120
 800c02a:	3508      	adds	r5, #8
 800c02c:	441d      	add	r5, r3
 800c02e:	2e00      	cmp	r6, #0
 800c030:	da42      	bge.n	800c0b8 <__kernel_rem_pio2+0x5bc>
 800c032:	9b00      	ldr	r3, [sp, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d049      	beq.n	800c0cc <__kernel_rem_pio2+0x5d0>
 800c038:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800c03c:	4662      	mov	r2, ip
 800c03e:	460b      	mov	r3, r1
 800c040:	9904      	ldr	r1, [sp, #16]
 800c042:	2601      	movs	r6, #1
 800c044:	e9c1 2300 	strd	r2, r3, [r1]
 800c048:	a948      	add	r1, sp, #288	; 0x120
 800c04a:	463b      	mov	r3, r7
 800c04c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c050:	f7f4 f892 	bl	8000178 <__aeabi_dsub>
 800c054:	4684      	mov	ip, r0
 800c056:	460f      	mov	r7, r1
 800c058:	ad48      	add	r5, sp, #288	; 0x120
 800c05a:	42b4      	cmp	r4, r6
 800c05c:	da38      	bge.n	800c0d0 <__kernel_rem_pio2+0x5d4>
 800c05e:	9b00      	ldr	r3, [sp, #0]
 800c060:	b10b      	cbz	r3, 800c066 <__kernel_rem_pio2+0x56a>
 800c062:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c066:	4662      	mov	r2, ip
 800c068:	463b      	mov	r3, r7
 800c06a:	9904      	ldr	r1, [sp, #16]
 800c06c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c070:	e011      	b.n	800c096 <__kernel_rem_pio2+0x59a>
 800c072:	2700      	movs	r7, #0
 800c074:	463d      	mov	r5, r7
 800c076:	9b06      	ldr	r3, [sp, #24]
 800c078:	aa98      	add	r2, sp, #608	; 0x260
 800c07a:	4413      	add	r3, r2
 800c07c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800c080:	2c00      	cmp	r4, #0
 800c082:	da0f      	bge.n	800c0a4 <__kernel_rem_pio2+0x5a8>
 800c084:	9b00      	ldr	r3, [sp, #0]
 800c086:	b10b      	cbz	r3, 800c08c <__kernel_rem_pio2+0x590>
 800c088:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800c08c:	463a      	mov	r2, r7
 800c08e:	462b      	mov	r3, r5
 800c090:	9904      	ldr	r1, [sp, #16]
 800c092:	e9c1 2300 	strd	r2, r3, [r1]
 800c096:	9b05      	ldr	r3, [sp, #20]
 800c098:	f003 0007 	and.w	r0, r3, #7
 800c09c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a4:	4638      	mov	r0, r7
 800c0a6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	f7f4 f866 	bl	800017c <__adddf3>
 800c0b0:	3c01      	subs	r4, #1
 800c0b2:	4607      	mov	r7, r0
 800c0b4:	460d      	mov	r5, r1
 800c0b6:	e7e3      	b.n	800c080 <__kernel_rem_pio2+0x584>
 800c0b8:	4660      	mov	r0, ip
 800c0ba:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c0be:	4639      	mov	r1, r7
 800c0c0:	f7f4 f85c 	bl	800017c <__adddf3>
 800c0c4:	3e01      	subs	r6, #1
 800c0c6:	4684      	mov	ip, r0
 800c0c8:	460f      	mov	r7, r1
 800c0ca:	e7b0      	b.n	800c02e <__kernel_rem_pio2+0x532>
 800c0cc:	4639      	mov	r1, r7
 800c0ce:	e7b5      	b.n	800c03c <__kernel_rem_pio2+0x540>
 800c0d0:	4660      	mov	r0, ip
 800c0d2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	f7f4 f850 	bl	800017c <__adddf3>
 800c0dc:	3601      	adds	r6, #1
 800c0de:	4684      	mov	ip, r0
 800c0e0:	460f      	mov	r7, r1
 800c0e2:	e7ba      	b.n	800c05a <__kernel_rem_pio2+0x55e>
 800c0e4:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800c0e8:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0f4:	f7f4 f842 	bl	800017c <__adddf3>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	460f      	mov	r7, r1
 800c100:	4640      	mov	r0, r8
 800c102:	4649      	mov	r1, r9
 800c104:	f7f4 f838 	bl	8000178 <__aeabi_dsub>
 800c108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c10c:	f7f4 f836 	bl	800017c <__adddf3>
 800c110:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c114:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c118:	e9ca 6700 	strd	r6, r7, [sl]
 800c11c:	e757      	b.n	800bfce <__kernel_rem_pio2+0x4d2>
 800c11e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800c122:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800c126:	4630      	mov	r0, r6
 800c128:	4639      	mov	r1, r7
 800c12a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c12e:	f7f4 f825 	bl	800017c <__adddf3>
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	4680      	mov	r8, r0
 800c138:	4689      	mov	r9, r1
 800c13a:	4630      	mov	r0, r6
 800c13c:	4639      	mov	r1, r7
 800c13e:	f7f4 f81b 	bl	8000178 <__aeabi_dsub>
 800c142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c146:	f7f4 f819 	bl	800017c <__adddf3>
 800c14a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c14e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c152:	e9c5 8900 	strd	r8, r9, [r5]
 800c156:	e73f      	b.n	800bfd8 <__kernel_rem_pio2+0x4dc>
 800c158:	4638      	mov	r0, r7
 800c15a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c15e:	4631      	mov	r1, r6
 800c160:	f7f4 f80c 	bl	800017c <__adddf3>
 800c164:	3c01      	subs	r4, #1
 800c166:	4607      	mov	r7, r0
 800c168:	460e      	mov	r6, r1
 800c16a:	e73f      	b.n	800bfec <__kernel_rem_pio2+0x4f0>
 800c16c:	9b04      	ldr	r3, [sp, #16]
 800c16e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c172:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c176:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c17a:	601d      	str	r5, [r3, #0]
 800c17c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c180:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c184:	615e      	str	r6, [r3, #20]
 800c186:	e786      	b.n	800c096 <__kernel_rem_pio2+0x59a>
 800c188:	41700000 	.word	0x41700000
 800c18c:	3e700000 	.word	0x3e700000

0800c190 <__kernel_sin>:
 800c190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c194:	b086      	sub	sp, #24
 800c196:	e9cd 2300 	strd	r2, r3, [sp]
 800c19a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c19e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c1a2:	4682      	mov	sl, r0
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c1a8:	da03      	bge.n	800c1b2 <__kernel_sin+0x22>
 800c1aa:	f7f4 fc4d 	bl	8000a48 <__aeabi_d2iz>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	d050      	beq.n	800c254 <__kernel_sin+0xc4>
 800c1b2:	4652      	mov	r2, sl
 800c1b4:	4623      	mov	r3, r4
 800c1b6:	4650      	mov	r0, sl
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	f7f4 f995 	bl	80004e8 <__aeabi_dmul>
 800c1be:	4606      	mov	r6, r0
 800c1c0:	460f      	mov	r7, r1
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4650      	mov	r0, sl
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	f7f4 f98d 	bl	80004e8 <__aeabi_dmul>
 800c1ce:	a33e      	add	r3, pc, #248	; (adr r3, 800c2c8 <__kernel_sin+0x138>)
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	4680      	mov	r8, r0
 800c1d6:	4689      	mov	r9, r1
 800c1d8:	4630      	mov	r0, r6
 800c1da:	4639      	mov	r1, r7
 800c1dc:	f7f4 f984 	bl	80004e8 <__aeabi_dmul>
 800c1e0:	a33b      	add	r3, pc, #236	; (adr r3, 800c2d0 <__kernel_sin+0x140>)
 800c1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e6:	f7f3 ffc7 	bl	8000178 <__aeabi_dsub>
 800c1ea:	4632      	mov	r2, r6
 800c1ec:	463b      	mov	r3, r7
 800c1ee:	f7f4 f97b 	bl	80004e8 <__aeabi_dmul>
 800c1f2:	a339      	add	r3, pc, #228	; (adr r3, 800c2d8 <__kernel_sin+0x148>)
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	f7f3 ffc0 	bl	800017c <__adddf3>
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	463b      	mov	r3, r7
 800c200:	f7f4 f972 	bl	80004e8 <__aeabi_dmul>
 800c204:	a336      	add	r3, pc, #216	; (adr r3, 800c2e0 <__kernel_sin+0x150>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f7f3 ffb5 	bl	8000178 <__aeabi_dsub>
 800c20e:	4632      	mov	r2, r6
 800c210:	463b      	mov	r3, r7
 800c212:	f7f4 f969 	bl	80004e8 <__aeabi_dmul>
 800c216:	a334      	add	r3, pc, #208	; (adr r3, 800c2e8 <__kernel_sin+0x158>)
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	f7f3 ffae 	bl	800017c <__adddf3>
 800c220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c224:	b9dd      	cbnz	r5, 800c25e <__kernel_sin+0xce>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	4630      	mov	r0, r6
 800c22c:	4639      	mov	r1, r7
 800c22e:	f7f4 f95b 	bl	80004e8 <__aeabi_dmul>
 800c232:	a32f      	add	r3, pc, #188	; (adr r3, 800c2f0 <__kernel_sin+0x160>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f7f3 ff9e 	bl	8000178 <__aeabi_dsub>
 800c23c:	4642      	mov	r2, r8
 800c23e:	464b      	mov	r3, r9
 800c240:	f7f4 f952 	bl	80004e8 <__aeabi_dmul>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	4650      	mov	r0, sl
 800c24a:	4621      	mov	r1, r4
 800c24c:	f7f3 ff96 	bl	800017c <__adddf3>
 800c250:	4682      	mov	sl, r0
 800c252:	460c      	mov	r4, r1
 800c254:	4650      	mov	r0, sl
 800c256:	4621      	mov	r1, r4
 800c258:	b006      	add	sp, #24
 800c25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c25e:	2200      	movs	r2, #0
 800c260:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c264:	4b24      	ldr	r3, [pc, #144]	; (800c2f8 <__kernel_sin+0x168>)
 800c266:	f7f4 f93f 	bl	80004e8 <__aeabi_dmul>
 800c26a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c26e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c272:	4640      	mov	r0, r8
 800c274:	4649      	mov	r1, r9
 800c276:	f7f4 f937 	bl	80004e8 <__aeabi_dmul>
 800c27a:	4602      	mov	r2, r0
 800c27c:	460b      	mov	r3, r1
 800c27e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c282:	f7f3 ff79 	bl	8000178 <__aeabi_dsub>
 800c286:	4632      	mov	r2, r6
 800c288:	463b      	mov	r3, r7
 800c28a:	f7f4 f92d 	bl	80004e8 <__aeabi_dmul>
 800c28e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c292:	f7f3 ff71 	bl	8000178 <__aeabi_dsub>
 800c296:	a316      	add	r3, pc, #88	; (adr r3, 800c2f0 <__kernel_sin+0x160>)
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	4606      	mov	r6, r0
 800c29e:	460f      	mov	r7, r1
 800c2a0:	4640      	mov	r0, r8
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	f7f4 f920 	bl	80004e8 <__aeabi_dmul>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	4639      	mov	r1, r7
 800c2b0:	f7f3 ff64 	bl	800017c <__adddf3>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	4650      	mov	r0, sl
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	f7f3 ff5c 	bl	8000178 <__aeabi_dsub>
 800c2c0:	e7c6      	b.n	800c250 <__kernel_sin+0xc0>
 800c2c2:	bf00      	nop
 800c2c4:	f3af 8000 	nop.w
 800c2c8:	5acfd57c 	.word	0x5acfd57c
 800c2cc:	3de5d93a 	.word	0x3de5d93a
 800c2d0:	8a2b9ceb 	.word	0x8a2b9ceb
 800c2d4:	3e5ae5e6 	.word	0x3e5ae5e6
 800c2d8:	57b1fe7d 	.word	0x57b1fe7d
 800c2dc:	3ec71de3 	.word	0x3ec71de3
 800c2e0:	19c161d5 	.word	0x19c161d5
 800c2e4:	3f2a01a0 	.word	0x3f2a01a0
 800c2e8:	1110f8a6 	.word	0x1110f8a6
 800c2ec:	3f811111 	.word	0x3f811111
 800c2f0:	55555549 	.word	0x55555549
 800c2f4:	3fc55555 	.word	0x3fc55555
 800c2f8:	3fe00000 	.word	0x3fe00000
 800c2fc:	00000000 	.word	0x00000000

0800c300 <__kernel_tan>:
 800c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c304:	461f      	mov	r7, r3
 800c306:	4bda      	ldr	r3, [pc, #872]	; (800c670 <__kernel_tan+0x370>)
 800c308:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c30c:	b089      	sub	sp, #36	; 0x24
 800c30e:	429e      	cmp	r6, r3
 800c310:	4682      	mov	sl, r0
 800c312:	468b      	mov	fp, r1
 800c314:	4690      	mov	r8, r2
 800c316:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800c31a:	9105      	str	r1, [sp, #20]
 800c31c:	dc21      	bgt.n	800c362 <__kernel_tan+0x62>
 800c31e:	f7f4 fb93 	bl	8000a48 <__aeabi_d2iz>
 800c322:	2800      	cmp	r0, #0
 800c324:	d140      	bne.n	800c3a8 <__kernel_tan+0xa8>
 800c326:	4652      	mov	r2, sl
 800c328:	f109 0301 	add.w	r3, r9, #1
 800c32c:	4313      	orrs	r3, r2
 800c32e:	4333      	orrs	r3, r6
 800c330:	d110      	bne.n	800c354 <__kernel_tan+0x54>
 800c332:	4650      	mov	r0, sl
 800c334:	4659      	mov	r1, fp
 800c336:	f7fd fce3 	bl	8009d00 <fabs>
 800c33a:	4602      	mov	r2, r0
 800c33c:	2000      	movs	r0, #0
 800c33e:	460b      	mov	r3, r1
 800c340:	49cc      	ldr	r1, [pc, #816]	; (800c674 <__kernel_tan+0x374>)
 800c342:	f7f4 f9fb 	bl	800073c <__aeabi_ddiv>
 800c346:	4682      	mov	sl, r0
 800c348:	468b      	mov	fp, r1
 800c34a:	4650      	mov	r0, sl
 800c34c:	4659      	mov	r1, fp
 800c34e:	b009      	add	sp, #36	; 0x24
 800c350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c354:	f1b9 0f01 	cmp.w	r9, #1
 800c358:	d0f7      	beq.n	800c34a <__kernel_tan+0x4a>
 800c35a:	465b      	mov	r3, fp
 800c35c:	2000      	movs	r0, #0
 800c35e:	49c6      	ldr	r1, [pc, #792]	; (800c678 <__kernel_tan+0x378>)
 800c360:	e7ef      	b.n	800c342 <__kernel_tan+0x42>
 800c362:	4bc6      	ldr	r3, [pc, #792]	; (800c67c <__kernel_tan+0x37c>)
 800c364:	429e      	cmp	r6, r3
 800c366:	dd1f      	ble.n	800c3a8 <__kernel_tan+0xa8>
 800c368:	2900      	cmp	r1, #0
 800c36a:	da04      	bge.n	800c376 <__kernel_tan+0x76>
 800c36c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c370:	469b      	mov	fp, r3
 800c372:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c376:	4652      	mov	r2, sl
 800c378:	a19f      	add	r1, pc, #636	; (adr r1, 800c5f8 <__kernel_tan+0x2f8>)
 800c37a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c37e:	465b      	mov	r3, fp
 800c380:	f7f3 fefa 	bl	8000178 <__aeabi_dsub>
 800c384:	4604      	mov	r4, r0
 800c386:	460d      	mov	r5, r1
 800c388:	a19d      	add	r1, pc, #628	; (adr r1, 800c600 <__kernel_tan+0x300>)
 800c38a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c38e:	4642      	mov	r2, r8
 800c390:	463b      	mov	r3, r7
 800c392:	f7f3 fef1 	bl	8000178 <__aeabi_dsub>
 800c396:	4622      	mov	r2, r4
 800c398:	462b      	mov	r3, r5
 800c39a:	f7f3 feef 	bl	800017c <__adddf3>
 800c39e:	f04f 0800 	mov.w	r8, #0
 800c3a2:	4682      	mov	sl, r0
 800c3a4:	468b      	mov	fp, r1
 800c3a6:	4647      	mov	r7, r8
 800c3a8:	4652      	mov	r2, sl
 800c3aa:	465b      	mov	r3, fp
 800c3ac:	4650      	mov	r0, sl
 800c3ae:	4659      	mov	r1, fp
 800c3b0:	f7f4 f89a 	bl	80004e8 <__aeabi_dmul>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	e9cd 0100 	strd	r0, r1, [sp]
 800c3bc:	f7f4 f894 	bl	80004e8 <__aeabi_dmul>
 800c3c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	460d      	mov	r5, r1
 800c3c8:	4650      	mov	r0, sl
 800c3ca:	4659      	mov	r1, fp
 800c3cc:	f7f4 f88c 	bl	80004e8 <__aeabi_dmul>
 800c3d0:	a38d      	add	r3, pc, #564	; (adr r3, 800c608 <__kernel_tan+0x308>)
 800c3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3da:	4620      	mov	r0, r4
 800c3dc:	4629      	mov	r1, r5
 800c3de:	f7f4 f883 	bl	80004e8 <__aeabi_dmul>
 800c3e2:	a38b      	add	r3, pc, #556	; (adr r3, 800c610 <__kernel_tan+0x310>)
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	f7f3 fec8 	bl	800017c <__adddf3>
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	462b      	mov	r3, r5
 800c3f0:	f7f4 f87a 	bl	80004e8 <__aeabi_dmul>
 800c3f4:	a388      	add	r3, pc, #544	; (adr r3, 800c618 <__kernel_tan+0x318>)
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	f7f3 febf 	bl	800017c <__adddf3>
 800c3fe:	4622      	mov	r2, r4
 800c400:	462b      	mov	r3, r5
 800c402:	f7f4 f871 	bl	80004e8 <__aeabi_dmul>
 800c406:	a386      	add	r3, pc, #536	; (adr r3, 800c620 <__kernel_tan+0x320>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f7f3 feb6 	bl	800017c <__adddf3>
 800c410:	4622      	mov	r2, r4
 800c412:	462b      	mov	r3, r5
 800c414:	f7f4 f868 	bl	80004e8 <__aeabi_dmul>
 800c418:	a383      	add	r3, pc, #524	; (adr r3, 800c628 <__kernel_tan+0x328>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f7f3 fead 	bl	800017c <__adddf3>
 800c422:	4622      	mov	r2, r4
 800c424:	462b      	mov	r3, r5
 800c426:	f7f4 f85f 	bl	80004e8 <__aeabi_dmul>
 800c42a:	a381      	add	r3, pc, #516	; (adr r3, 800c630 <__kernel_tan+0x330>)
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	f7f3 fea4 	bl	800017c <__adddf3>
 800c434:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c438:	f7f4 f856 	bl	80004e8 <__aeabi_dmul>
 800c43c:	a37e      	add	r3, pc, #504	; (adr r3, 800c638 <__kernel_tan+0x338>)
 800c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c442:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c446:	4620      	mov	r0, r4
 800c448:	4629      	mov	r1, r5
 800c44a:	f7f4 f84d 	bl	80004e8 <__aeabi_dmul>
 800c44e:	a37c      	add	r3, pc, #496	; (adr r3, 800c640 <__kernel_tan+0x340>)
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	f7f3 fe92 	bl	800017c <__adddf3>
 800c458:	4622      	mov	r2, r4
 800c45a:	462b      	mov	r3, r5
 800c45c:	f7f4 f844 	bl	80004e8 <__aeabi_dmul>
 800c460:	a379      	add	r3, pc, #484	; (adr r3, 800c648 <__kernel_tan+0x348>)
 800c462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c466:	f7f3 fe89 	bl	800017c <__adddf3>
 800c46a:	4622      	mov	r2, r4
 800c46c:	462b      	mov	r3, r5
 800c46e:	f7f4 f83b 	bl	80004e8 <__aeabi_dmul>
 800c472:	a377      	add	r3, pc, #476	; (adr r3, 800c650 <__kernel_tan+0x350>)
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f7f3 fe80 	bl	800017c <__adddf3>
 800c47c:	4622      	mov	r2, r4
 800c47e:	462b      	mov	r3, r5
 800c480:	f7f4 f832 	bl	80004e8 <__aeabi_dmul>
 800c484:	a374      	add	r3, pc, #464	; (adr r3, 800c658 <__kernel_tan+0x358>)
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	f7f3 fe77 	bl	800017c <__adddf3>
 800c48e:	4622      	mov	r2, r4
 800c490:	462b      	mov	r3, r5
 800c492:	f7f4 f829 	bl	80004e8 <__aeabi_dmul>
 800c496:	a372      	add	r3, pc, #456	; (adr r3, 800c660 <__kernel_tan+0x360>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	f7f3 fe6e 	bl	800017c <__adddf3>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4a8:	f7f3 fe68 	bl	800017c <__adddf3>
 800c4ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4b0:	f7f4 f81a 	bl	80004e8 <__aeabi_dmul>
 800c4b4:	4642      	mov	r2, r8
 800c4b6:	463b      	mov	r3, r7
 800c4b8:	f7f3 fe60 	bl	800017c <__adddf3>
 800c4bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4c0:	f7f4 f812 	bl	80004e8 <__aeabi_dmul>
 800c4c4:	4642      	mov	r2, r8
 800c4c6:	463b      	mov	r3, r7
 800c4c8:	f7f3 fe58 	bl	800017c <__adddf3>
 800c4cc:	a366      	add	r3, pc, #408	; (adr r3, 800c668 <__kernel_tan+0x368>)
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	460d      	mov	r5, r1
 800c4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4da:	f7f4 f805 	bl	80004e8 <__aeabi_dmul>
 800c4de:	4622      	mov	r2, r4
 800c4e0:	462b      	mov	r3, r5
 800c4e2:	f7f3 fe4b 	bl	800017c <__adddf3>
 800c4e6:	e9cd 0100 	strd	r0, r1, [sp]
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	4659      	mov	r1, fp
 800c4f0:	4650      	mov	r0, sl
 800c4f2:	f7f3 fe43 	bl	800017c <__adddf3>
 800c4f6:	4b61      	ldr	r3, [pc, #388]	; (800c67c <__kernel_tan+0x37c>)
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	429e      	cmp	r6, r3
 800c4fc:	460d      	mov	r5, r1
 800c4fe:	dd3d      	ble.n	800c57c <__kernel_tan+0x27c>
 800c500:	4648      	mov	r0, r9
 800c502:	f7f3 ff87 	bl	8000414 <__aeabi_i2d>
 800c506:	4622      	mov	r2, r4
 800c508:	4680      	mov	r8, r0
 800c50a:	4689      	mov	r9, r1
 800c50c:	462b      	mov	r3, r5
 800c50e:	4620      	mov	r0, r4
 800c510:	4629      	mov	r1, r5
 800c512:	f7f3 ffe9 	bl	80004e8 <__aeabi_dmul>
 800c516:	4642      	mov	r2, r8
 800c518:	4606      	mov	r6, r0
 800c51a:	460f      	mov	r7, r1
 800c51c:	464b      	mov	r3, r9
 800c51e:	4620      	mov	r0, r4
 800c520:	4629      	mov	r1, r5
 800c522:	f7f3 fe2b 	bl	800017c <__adddf3>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	4630      	mov	r0, r6
 800c52c:	4639      	mov	r1, r7
 800c52e:	f7f4 f905 	bl	800073c <__aeabi_ddiv>
 800c532:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c536:	f7f3 fe1f 	bl	8000178 <__aeabi_dsub>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	4650      	mov	r0, sl
 800c540:	4659      	mov	r1, fp
 800c542:	f7f3 fe19 	bl	8000178 <__aeabi_dsub>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	f7f3 fe17 	bl	800017c <__adddf3>
 800c54e:	4602      	mov	r2, r0
 800c550:	460b      	mov	r3, r1
 800c552:	4640      	mov	r0, r8
 800c554:	4649      	mov	r1, r9
 800c556:	f7f3 fe0f 	bl	8000178 <__aeabi_dsub>
 800c55a:	9b05      	ldr	r3, [sp, #20]
 800c55c:	4604      	mov	r4, r0
 800c55e:	1798      	asrs	r0, r3, #30
 800c560:	f000 0002 	and.w	r0, r0, #2
 800c564:	f1c0 0001 	rsb	r0, r0, #1
 800c568:	460d      	mov	r5, r1
 800c56a:	f7f3 ff53 	bl	8000414 <__aeabi_i2d>
 800c56e:	4602      	mov	r2, r0
 800c570:	460b      	mov	r3, r1
 800c572:	4620      	mov	r0, r4
 800c574:	4629      	mov	r1, r5
 800c576:	f7f3 ffb7 	bl	80004e8 <__aeabi_dmul>
 800c57a:	e6e4      	b.n	800c346 <__kernel_tan+0x46>
 800c57c:	f1b9 0f01 	cmp.w	r9, #1
 800c580:	d036      	beq.n	800c5f0 <__kernel_tan+0x2f0>
 800c582:	460f      	mov	r7, r1
 800c584:	4602      	mov	r2, r0
 800c586:	460b      	mov	r3, r1
 800c588:	2000      	movs	r0, #0
 800c58a:	493b      	ldr	r1, [pc, #236]	; (800c678 <__kernel_tan+0x378>)
 800c58c:	f7f4 f8d6 	bl	800073c <__aeabi_ddiv>
 800c590:	2600      	movs	r6, #0
 800c592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c596:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c59a:	4652      	mov	r2, sl
 800c59c:	465b      	mov	r3, fp
 800c59e:	4630      	mov	r0, r6
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	f7f3 fde9 	bl	8000178 <__aeabi_dsub>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5ae:	f7f3 fde3 	bl	8000178 <__aeabi_dsub>
 800c5b2:	4632      	mov	r2, r6
 800c5b4:	462b      	mov	r3, r5
 800c5b6:	f7f3 ff97 	bl	80004e8 <__aeabi_dmul>
 800c5ba:	4632      	mov	r2, r6
 800c5bc:	4682      	mov	sl, r0
 800c5be:	468b      	mov	fp, r1
 800c5c0:	462b      	mov	r3, r5
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	4639      	mov	r1, r7
 800c5c6:	f7f3 ff8f 	bl	80004e8 <__aeabi_dmul>
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	4b29      	ldr	r3, [pc, #164]	; (800c674 <__kernel_tan+0x374>)
 800c5ce:	f7f3 fdd5 	bl	800017c <__adddf3>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4650      	mov	r0, sl
 800c5d8:	4659      	mov	r1, fp
 800c5da:	f7f3 fdcf 	bl	800017c <__adddf3>
 800c5de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5e2:	f7f3 ff81 	bl	80004e8 <__aeabi_dmul>
 800c5e6:	4632      	mov	r2, r6
 800c5e8:	462b      	mov	r3, r5
 800c5ea:	f7f3 fdc7 	bl	800017c <__adddf3>
 800c5ee:	e6aa      	b.n	800c346 <__kernel_tan+0x46>
 800c5f0:	4682      	mov	sl, r0
 800c5f2:	468b      	mov	fp, r1
 800c5f4:	e6a9      	b.n	800c34a <__kernel_tan+0x4a>
 800c5f6:	bf00      	nop
 800c5f8:	54442d18 	.word	0x54442d18
 800c5fc:	3fe921fb 	.word	0x3fe921fb
 800c600:	33145c07 	.word	0x33145c07
 800c604:	3c81a626 	.word	0x3c81a626
 800c608:	74bf7ad4 	.word	0x74bf7ad4
 800c60c:	3efb2a70 	.word	0x3efb2a70
 800c610:	32f0a7e9 	.word	0x32f0a7e9
 800c614:	3f12b80f 	.word	0x3f12b80f
 800c618:	1a8d1068 	.word	0x1a8d1068
 800c61c:	3f3026f7 	.word	0x3f3026f7
 800c620:	fee08315 	.word	0xfee08315
 800c624:	3f57dbc8 	.word	0x3f57dbc8
 800c628:	e96e8493 	.word	0xe96e8493
 800c62c:	3f8226e3 	.word	0x3f8226e3
 800c630:	1bb341fe 	.word	0x1bb341fe
 800c634:	3faba1ba 	.word	0x3faba1ba
 800c638:	db605373 	.word	0xdb605373
 800c63c:	bef375cb 	.word	0xbef375cb
 800c640:	a03792a6 	.word	0xa03792a6
 800c644:	3f147e88 	.word	0x3f147e88
 800c648:	f2f26501 	.word	0xf2f26501
 800c64c:	3f4344d8 	.word	0x3f4344d8
 800c650:	c9560328 	.word	0xc9560328
 800c654:	3f6d6d22 	.word	0x3f6d6d22
 800c658:	8406d637 	.word	0x8406d637
 800c65c:	3f9664f4 	.word	0x3f9664f4
 800c660:	1110fe7a 	.word	0x1110fe7a
 800c664:	3fc11111 	.word	0x3fc11111
 800c668:	55555563 	.word	0x55555563
 800c66c:	3fd55555 	.word	0x3fd55555
 800c670:	3e2fffff 	.word	0x3e2fffff
 800c674:	3ff00000 	.word	0x3ff00000
 800c678:	bff00000 	.word	0xbff00000
 800c67c:	3fe59427 	.word	0x3fe59427

0800c680 <finite>:
 800c680:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800c684:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800c688:	0fc0      	lsrs	r0, r0, #31
 800c68a:	4770      	bx	lr
 800c68c:	0000      	movs	r0, r0
	...

0800c690 <floor>:
 800c690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c694:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c698:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c69c:	2e13      	cmp	r6, #19
 800c69e:	4607      	mov	r7, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	dc35      	bgt.n	800c714 <floor+0x84>
 800c6a8:	2e00      	cmp	r6, #0
 800c6aa:	da16      	bge.n	800c6da <floor+0x4a>
 800c6ac:	a336      	add	r3, pc, #216	; (adr r3, 800c788 <floor+0xf8>)
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	f7f3 fd63 	bl	800017c <__adddf3>
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	f7f4 f9a5 	bl	8000a08 <__aeabi_dcmpgt>
 800c6be:	b148      	cbz	r0, 800c6d4 <floor+0x44>
 800c6c0:	2c00      	cmp	r4, #0
 800c6c2:	da5b      	bge.n	800c77c <floor+0xec>
 800c6c4:	2500      	movs	r5, #0
 800c6c6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c6ca:	4a31      	ldr	r2, [pc, #196]	; (800c790 <floor+0x100>)
 800c6cc:	433b      	orrs	r3, r7
 800c6ce:	42ab      	cmp	r3, r5
 800c6d0:	bf18      	it	ne
 800c6d2:	4614      	movne	r4, r2
 800c6d4:	4623      	mov	r3, r4
 800c6d6:	462f      	mov	r7, r5
 800c6d8:	e026      	b.n	800c728 <floor+0x98>
 800c6da:	4a2e      	ldr	r2, [pc, #184]	; (800c794 <floor+0x104>)
 800c6dc:	fa42 f806 	asr.w	r8, r2, r6
 800c6e0:	ea01 0208 	and.w	r2, r1, r8
 800c6e4:	4302      	orrs	r2, r0
 800c6e6:	d01f      	beq.n	800c728 <floor+0x98>
 800c6e8:	a327      	add	r3, pc, #156	; (adr r3, 800c788 <floor+0xf8>)
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	f7f3 fd45 	bl	800017c <__adddf3>
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	f7f4 f987 	bl	8000a08 <__aeabi_dcmpgt>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d0ea      	beq.n	800c6d4 <floor+0x44>
 800c6fe:	2c00      	cmp	r4, #0
 800c700:	bfbe      	ittt	lt
 800c702:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c706:	fa43 f606 	asrlt.w	r6, r3, r6
 800c70a:	19a4      	addlt	r4, r4, r6
 800c70c:	ea24 0408 	bic.w	r4, r4, r8
 800c710:	2500      	movs	r5, #0
 800c712:	e7df      	b.n	800c6d4 <floor+0x44>
 800c714:	2e33      	cmp	r6, #51	; 0x33
 800c716:	dd0b      	ble.n	800c730 <floor+0xa0>
 800c718:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c71c:	d104      	bne.n	800c728 <floor+0x98>
 800c71e:	4602      	mov	r2, r0
 800c720:	f7f3 fd2c 	bl	800017c <__adddf3>
 800c724:	4607      	mov	r7, r0
 800c726:	460b      	mov	r3, r1
 800c728:	4638      	mov	r0, r7
 800c72a:	4619      	mov	r1, r3
 800c72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c730:	f04f 32ff 	mov.w	r2, #4294967295
 800c734:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c738:	fa22 f808 	lsr.w	r8, r2, r8
 800c73c:	ea18 0f00 	tst.w	r8, r0
 800c740:	d0f2      	beq.n	800c728 <floor+0x98>
 800c742:	a311      	add	r3, pc, #68	; (adr r3, 800c788 <floor+0xf8>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fd18 	bl	800017c <__adddf3>
 800c74c:	2200      	movs	r2, #0
 800c74e:	2300      	movs	r3, #0
 800c750:	f7f4 f95a 	bl	8000a08 <__aeabi_dcmpgt>
 800c754:	2800      	cmp	r0, #0
 800c756:	d0bd      	beq.n	800c6d4 <floor+0x44>
 800c758:	2c00      	cmp	r4, #0
 800c75a:	da02      	bge.n	800c762 <floor+0xd2>
 800c75c:	2e14      	cmp	r6, #20
 800c75e:	d103      	bne.n	800c768 <floor+0xd8>
 800c760:	3401      	adds	r4, #1
 800c762:	ea25 0508 	bic.w	r5, r5, r8
 800c766:	e7b5      	b.n	800c6d4 <floor+0x44>
 800c768:	2301      	movs	r3, #1
 800c76a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c76e:	fa03 f606 	lsl.w	r6, r3, r6
 800c772:	4435      	add	r5, r6
 800c774:	42bd      	cmp	r5, r7
 800c776:	bf38      	it	cc
 800c778:	18e4      	addcc	r4, r4, r3
 800c77a:	e7f2      	b.n	800c762 <floor+0xd2>
 800c77c:	2500      	movs	r5, #0
 800c77e:	462c      	mov	r4, r5
 800c780:	e7a8      	b.n	800c6d4 <floor+0x44>
 800c782:	bf00      	nop
 800c784:	f3af 8000 	nop.w
 800c788:	8800759c 	.word	0x8800759c
 800c78c:	7e37e43c 	.word	0x7e37e43c
 800c790:	bff00000 	.word	0xbff00000
 800c794:	000fffff 	.word	0x000fffff

0800c798 <matherr>:
 800c798:	2000      	movs	r0, #0
 800c79a:	4770      	bx	lr

0800c79c <nan>:
 800c79c:	2000      	movs	r0, #0
 800c79e:	4901      	ldr	r1, [pc, #4]	; (800c7a4 <nan+0x8>)
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	7ff80000 	.word	0x7ff80000

0800c7a8 <rint>:
 800c7a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c7ae:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800c7b2:	f1bc 0f13 	cmp.w	ip, #19
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	4606      	mov	r6, r0
 800c7be:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800c7c2:	dc5a      	bgt.n	800c87a <rint+0xd2>
 800c7c4:	f1bc 0f00 	cmp.w	ip, #0
 800c7c8:	da2b      	bge.n	800c822 <rint+0x7a>
 800c7ca:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c7ce:	4302      	orrs	r2, r0
 800c7d0:	d023      	beq.n	800c81a <rint+0x72>
 800c7d2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c7d6:	4302      	orrs	r2, r0
 800c7d8:	4256      	negs	r6, r2
 800c7da:	4316      	orrs	r6, r2
 800c7dc:	0c4b      	lsrs	r3, r1, #17
 800c7de:	0b36      	lsrs	r6, r6, #12
 800c7e0:	4934      	ldr	r1, [pc, #208]	; (800c8b4 <rint+0x10c>)
 800c7e2:	045b      	lsls	r3, r3, #17
 800c7e4:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800c7e8:	ea46 0503 	orr.w	r5, r6, r3
 800c7ec:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	462b      	mov	r3, r5
 800c7f4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	4629      	mov	r1, r5
 800c7fc:	f7f3 fcbe 	bl	800017c <__adddf3>
 800c800:	e9cd 0100 	strd	r0, r1, [sp]
 800c804:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c808:	462b      	mov	r3, r5
 800c80a:	4622      	mov	r2, r4
 800c80c:	f7f3 fcb4 	bl	8000178 <__aeabi_dsub>
 800c810:	4604      	mov	r4, r0
 800c812:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c816:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800c81a:	4620      	mov	r0, r4
 800c81c:	4629      	mov	r1, r5
 800c81e:	b003      	add	sp, #12
 800c820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c822:	4a25      	ldr	r2, [pc, #148]	; (800c8b8 <rint+0x110>)
 800c824:	fa42 f20c 	asr.w	r2, r2, ip
 800c828:	4011      	ands	r1, r2
 800c82a:	4301      	orrs	r1, r0
 800c82c:	d0f5      	beq.n	800c81a <rint+0x72>
 800c82e:	0852      	lsrs	r2, r2, #1
 800c830:	ea05 0102 	and.w	r1, r5, r2
 800c834:	ea50 0601 	orrs.w	r6, r0, r1
 800c838:	d00c      	beq.n	800c854 <rint+0xac>
 800c83a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c83e:	f1bc 0f13 	cmp.w	ip, #19
 800c842:	bf0c      	ite	eq
 800c844:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800c848:	2600      	movne	r6, #0
 800c84a:	ea25 0202 	bic.w	r2, r5, r2
 800c84e:	fa43 f30c 	asr.w	r3, r3, ip
 800c852:	4313      	orrs	r3, r2
 800c854:	4917      	ldr	r1, [pc, #92]	; (800c8b4 <rint+0x10c>)
 800c856:	4632      	mov	r2, r6
 800c858:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800c85c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c860:	4620      	mov	r0, r4
 800c862:	4629      	mov	r1, r5
 800c864:	f7f3 fc8a 	bl	800017c <__adddf3>
 800c868:	e9cd 0100 	strd	r0, r1, [sp]
 800c86c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c870:	4622      	mov	r2, r4
 800c872:	462b      	mov	r3, r5
 800c874:	f7f3 fc80 	bl	8000178 <__aeabi_dsub>
 800c878:	e008      	b.n	800c88c <rint+0xe4>
 800c87a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800c87e:	dd08      	ble.n	800c892 <rint+0xea>
 800c880:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800c884:	d1c9      	bne.n	800c81a <rint+0x72>
 800c886:	4602      	mov	r2, r0
 800c888:	f7f3 fc78 	bl	800017c <__adddf3>
 800c88c:	4604      	mov	r4, r0
 800c88e:	460d      	mov	r5, r1
 800c890:	e7c3      	b.n	800c81a <rint+0x72>
 800c892:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800c896:	f04f 32ff 	mov.w	r2, #4294967295
 800c89a:	40ca      	lsrs	r2, r1
 800c89c:	4210      	tst	r0, r2
 800c89e:	d0bc      	beq.n	800c81a <rint+0x72>
 800c8a0:	0852      	lsrs	r2, r2, #1
 800c8a2:	4210      	tst	r0, r2
 800c8a4:	bf1f      	itttt	ne
 800c8a6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800c8aa:	ea20 0202 	bicne.w	r2, r0, r2
 800c8ae:	410e      	asrne	r6, r1
 800c8b0:	4316      	orrne	r6, r2
 800c8b2:	e7cf      	b.n	800c854 <rint+0xac>
 800c8b4:	0800e7a8 	.word	0x0800e7a8
 800c8b8:	000fffff 	.word	0x000fffff
 800c8bc:	00000000 	.word	0x00000000

0800c8c0 <scalbn>:
 800c8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c2:	4616      	mov	r6, r2
 800c8c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c8c8:	4604      	mov	r4, r0
 800c8ca:	460d      	mov	r5, r1
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	b982      	cbnz	r2, 800c8f2 <scalbn+0x32>
 800c8d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8d4:	4303      	orrs	r3, r0
 800c8d6:	d034      	beq.n	800c942 <scalbn+0x82>
 800c8d8:	4b2d      	ldr	r3, [pc, #180]	; (800c990 <scalbn+0xd0>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f7f3 fe04 	bl	80004e8 <__aeabi_dmul>
 800c8e0:	4b2c      	ldr	r3, [pc, #176]	; (800c994 <scalbn+0xd4>)
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	429e      	cmp	r6, r3
 800c8e6:	460d      	mov	r5, r1
 800c8e8:	da0d      	bge.n	800c906 <scalbn+0x46>
 800c8ea:	a325      	add	r3, pc, #148	; (adr r3, 800c980 <scalbn+0xc0>)
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	e01c      	b.n	800c92c <scalbn+0x6c>
 800c8f2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800c8f6:	42ba      	cmp	r2, r7
 800c8f8:	d109      	bne.n	800c90e <scalbn+0x4e>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	f7f3 fc3e 	bl	800017c <__adddf3>
 800c900:	4604      	mov	r4, r0
 800c902:	460d      	mov	r5, r1
 800c904:	e01d      	b.n	800c942 <scalbn+0x82>
 800c906:	460b      	mov	r3, r1
 800c908:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c90c:	3a36      	subs	r2, #54	; 0x36
 800c90e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c912:	4432      	add	r2, r6
 800c914:	428a      	cmp	r2, r1
 800c916:	dd0c      	ble.n	800c932 <scalbn+0x72>
 800c918:	4622      	mov	r2, r4
 800c91a:	462b      	mov	r3, r5
 800c91c:	a11a      	add	r1, pc, #104	; (adr r1, 800c988 <scalbn+0xc8>)
 800c91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c922:	f000 f83b 	bl	800c99c <copysign>
 800c926:	a318      	add	r3, pc, #96	; (adr r3, 800c988 <scalbn+0xc8>)
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	f7f3 fddc 	bl	80004e8 <__aeabi_dmul>
 800c930:	e7e6      	b.n	800c900 <scalbn+0x40>
 800c932:	2a00      	cmp	r2, #0
 800c934:	dd08      	ble.n	800c948 <scalbn+0x88>
 800c936:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c93a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c93e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c942:	4620      	mov	r0, r4
 800c944:	4629      	mov	r1, r5
 800c946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c948:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c94c:	da0b      	bge.n	800c966 <scalbn+0xa6>
 800c94e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c952:	429e      	cmp	r6, r3
 800c954:	4622      	mov	r2, r4
 800c956:	462b      	mov	r3, r5
 800c958:	dce0      	bgt.n	800c91c <scalbn+0x5c>
 800c95a:	a109      	add	r1, pc, #36	; (adr r1, 800c980 <scalbn+0xc0>)
 800c95c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c960:	f000 f81c 	bl	800c99c <copysign>
 800c964:	e7c1      	b.n	800c8ea <scalbn+0x2a>
 800c966:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c96a:	3236      	adds	r2, #54	; 0x36
 800c96c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c970:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c974:	4620      	mov	r0, r4
 800c976:	4629      	mov	r1, r5
 800c978:	2200      	movs	r2, #0
 800c97a:	4b07      	ldr	r3, [pc, #28]	; (800c998 <scalbn+0xd8>)
 800c97c:	e7d6      	b.n	800c92c <scalbn+0x6c>
 800c97e:	bf00      	nop
 800c980:	c2f8f359 	.word	0xc2f8f359
 800c984:	01a56e1f 	.word	0x01a56e1f
 800c988:	8800759c 	.word	0x8800759c
 800c98c:	7e37e43c 	.word	0x7e37e43c
 800c990:	43500000 	.word	0x43500000
 800c994:	ffff3cb0 	.word	0xffff3cb0
 800c998:	3c900000 	.word	0x3c900000

0800c99c <copysign>:
 800c99c:	b530      	push	{r4, r5, lr}
 800c99e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c9a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9a6:	ea42 0503 	orr.w	r5, r2, r3
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	bd30      	pop	{r4, r5, pc}
	...

0800c9b0 <__errno>:
 800c9b0:	4b01      	ldr	r3, [pc, #4]	; (800c9b8 <__errno+0x8>)
 800c9b2:	6818      	ldr	r0, [r3, #0]
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	20000060 	.word	0x20000060

0800c9bc <_init>:
 800c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9be:	bf00      	nop
 800c9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c2:	bc08      	pop	{r3}
 800c9c4:	469e      	mov	lr, r3
 800c9c6:	4770      	bx	lr

0800c9c8 <_fini>:
 800c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ca:	bf00      	nop
 800c9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ce:	bc08      	pop	{r3}
 800c9d0:	469e      	mov	lr, r3
 800c9d2:	4770      	bx	lr
