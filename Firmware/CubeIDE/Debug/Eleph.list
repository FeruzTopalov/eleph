
Eleph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce04  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001de8  0800cf38  0800cf38  0001cf38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed20  0800ed20  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ed20  0800ed20  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ed20  0800ed20  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed20  0800ed20  0001ed20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed24  0800ed24  0001ed24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800ed28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001070  200000c8  0800edec  000200c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001138  0800edec  00021138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a585  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000208f  00000000  00000000  0002a672  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  0002c708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008f8  00000000  00000000  0002d140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ab5f  00000000  00000000  0002da38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d8a  00000000  00000000  00038597  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003b310  00000000  00000000  00040321  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007b631  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c94  00000000  00000000  0007b6ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000c8 	.word	0x200000c8
 800014c:	00000000 	.word	0x00000000
 8000150:	0800cf1c 	.word	0x0800cf1c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000cc 	.word	0x200000cc
 800016c:	0800cf1c 	.word	0x0800cf1c

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_d2iz>:
 8000a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a50:	d215      	bcs.n	8000a7e <__aeabi_d2iz+0x36>
 8000a52:	d511      	bpl.n	8000a78 <__aeabi_d2iz+0x30>
 8000a54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d912      	bls.n	8000a84 <__aeabi_d2iz+0x3c>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d105      	bne.n	8000a90 <__aeabi_d2iz+0x48>
 8000a84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	bf08      	it	eq
 8000a8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2uiz>:
 8000a98:	004a      	lsls	r2, r1, #1
 8000a9a:	d211      	bcs.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d211      	bcs.n	8000ac6 <__aeabi_d2uiz+0x2e>
 8000aa2:	d50d      	bpl.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d40e      	bmi.n	8000acc <__aeabi_d2uiz+0x34>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_d2uiz+0x3a>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_frsub>:
 8000b78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	e002      	b.n	8000b84 <__addsf3>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_fsub>:
 8000b80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b84 <__addsf3>:
 8000b84:	0042      	lsls	r2, r0, #1
 8000b86:	bf1f      	itttt	ne
 8000b88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b8c:	ea92 0f03 	teqne	r2, r3
 8000b90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b98:	d06a      	beq.n	8000c70 <__addsf3+0xec>
 8000b9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba2:	bfc1      	itttt	gt
 8000ba4:	18d2      	addgt	r2, r2, r3
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	4048      	eorgt	r0, r1
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	bfb8      	it	lt
 8000bae:	425b      	neglt	r3, r3
 8000bb0:	2b19      	cmp	r3, #25
 8000bb2:	bf88      	it	hi
 8000bb4:	4770      	bxhi	lr
 8000bb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4249      	negne	r1, r1
 8000bd6:	ea92 0f03 	teq	r2, r3
 8000bda:	d03f      	beq.n	8000c5c <__addsf3+0xd8>
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	fa41 fc03 	asr.w	ip, r1, r3
 8000be4:	eb10 000c 	adds.w	r0, r0, ip
 8000be8:	f1c3 0320 	rsb	r3, r3, #32
 8000bec:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf4:	d502      	bpl.n	8000bfc <__addsf3+0x78>
 8000bf6:	4249      	negs	r1, r1
 8000bf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c00:	d313      	bcc.n	8000c2a <__addsf3+0xa6>
 8000c02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c06:	d306      	bcc.n	8000c16 <__addsf3+0x92>
 8000c08:	0840      	lsrs	r0, r0, #1
 8000c0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0e:	f102 0201 	add.w	r2, r2, #1
 8000c12:	2afe      	cmp	r2, #254	; 0xfe
 8000c14:	d251      	bcs.n	8000cba <__addsf3+0x136>
 8000c16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1e:	bf08      	it	eq
 8000c20:	f020 0001 	biceq.w	r0, r0, #1
 8000c24:	ea40 0003 	orr.w	r0, r0, r3
 8000c28:	4770      	bx	lr
 8000c2a:	0049      	lsls	r1, r1, #1
 8000c2c:	eb40 0000 	adc.w	r0, r0, r0
 8000c30:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	d1ed      	bne.n	8000c16 <__addsf3+0x92>
 8000c3a:	fab0 fc80 	clz	ip, r0
 8000c3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c42:	ebb2 020c 	subs.w	r2, r2, ip
 8000c46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4a:	bfaa      	itet	ge
 8000c4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c50:	4252      	neglt	r2, r2
 8000c52:	4318      	orrge	r0, r3
 8000c54:	bfbc      	itt	lt
 8000c56:	40d0      	lsrlt	r0, r2
 8000c58:	4318      	orrlt	r0, r3
 8000c5a:	4770      	bx	lr
 8000c5c:	f092 0f00 	teq	r2, #0
 8000c60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c64:	bf06      	itte	eq
 8000c66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6a:	3201      	addeq	r2, #1
 8000c6c:	3b01      	subne	r3, #1
 8000c6e:	e7b5      	b.n	8000bdc <__addsf3+0x58>
 8000c70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c78:	bf18      	it	ne
 8000c7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7e:	d021      	beq.n	8000cc4 <__addsf3+0x140>
 8000c80:	ea92 0f03 	teq	r2, r3
 8000c84:	d004      	beq.n	8000c90 <__addsf3+0x10c>
 8000c86:	f092 0f00 	teq	r2, #0
 8000c8a:	bf08      	it	eq
 8000c8c:	4608      	moveq	r0, r1
 8000c8e:	4770      	bx	lr
 8000c90:	ea90 0f01 	teq	r0, r1
 8000c94:	bf1c      	itt	ne
 8000c96:	2000      	movne	r0, #0
 8000c98:	4770      	bxne	lr
 8000c9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9e:	d104      	bne.n	8000caa <__addsf3+0x126>
 8000ca0:	0040      	lsls	r0, r0, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca8:	4770      	bx	lr
 8000caa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cae:	bf3c      	itt	cc
 8000cb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bxcc	lr
 8000cb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc2:	4770      	bx	lr
 8000cc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc8:	bf16      	itet	ne
 8000cca:	4608      	movne	r0, r1
 8000ccc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd0:	4601      	movne	r1, r0
 8000cd2:	0242      	lsls	r2, r0, #9
 8000cd4:	bf06      	itte	eq
 8000cd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cda:	ea90 0f01 	teqeq	r0, r1
 8000cde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_ui2f>:
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e004      	b.n	8000cf4 <__aeabi_i2f+0x8>
 8000cea:	bf00      	nop

08000cec <__aeabi_i2f>:
 8000cec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf0:	bf48      	it	mi
 8000cf2:	4240      	negmi	r0, r0
 8000cf4:	ea5f 0c00 	movs.w	ip, r0
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d00:	4601      	mov	r1, r0
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	e01c      	b.n	8000d42 <__aeabi_l2f+0x2a>

08000d08 <__aeabi_ul2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e00a      	b.n	8000d2c <__aeabi_l2f+0x14>
 8000d16:	bf00      	nop

08000d18 <__aeabi_l2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__aeabi_l2f+0x14>
 8000d26:	4240      	negs	r0, r0
 8000d28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2c:	ea5f 0c01 	movs.w	ip, r1
 8000d30:	bf02      	ittt	eq
 8000d32:	4684      	moveq	ip, r0
 8000d34:	4601      	moveq	r1, r0
 8000d36:	2000      	moveq	r0, #0
 8000d38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d3c:	bf08      	it	eq
 8000d3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d46:	fabc f28c 	clz	r2, ip
 8000d4a:	3a08      	subs	r2, #8
 8000d4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d50:	db10      	blt.n	8000d74 <__aeabi_l2f+0x5c>
 8000d52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d56:	4463      	add	r3, ip
 8000d58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d64:	fa20 f202 	lsr.w	r2, r0, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	f020 0001 	biceq.w	r0, r0, #1
 8000d72:	4770      	bx	lr
 8000d74:	f102 0220 	add.w	r2, r2, #32
 8000d78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d84:	fa21 f202 	lsr.w	r2, r1, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d92:	4770      	bx	lr

08000d94 <__aeabi_fmul>:
 8000d94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d9c:	bf1e      	ittt	ne
 8000d9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da2:	ea92 0f0c 	teqne	r2, ip
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d06f      	beq.n	8000e8c <__aeabi_fmul+0xf8>
 8000dac:	441a      	add	r2, r3
 8000dae:	ea80 0c01 	eor.w	ip, r0, r1
 8000db2:	0240      	lsls	r0, r0, #9
 8000db4:	bf18      	it	ne
 8000db6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dba:	d01e      	beq.n	8000dfa <__aeabi_fmul+0x66>
 8000dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd4:	bf3e      	ittt	cc
 8000dd6:	0049      	lslcc	r1, r1, #1
 8000dd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	ea40 0001 	orr.w	r0, r0, r1
 8000de2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000de6:	2afd      	cmp	r2, #253	; 0xfd
 8000de8:	d81d      	bhi.n	8000e26 <__aeabi_fmul+0x92>
 8000dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df2:	bf08      	it	eq
 8000df4:	f020 0001 	biceq.w	r0, r0, #1
 8000df8:	4770      	bx	lr
 8000dfa:	f090 0f00 	teq	r0, #0
 8000dfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e02:	bf08      	it	eq
 8000e04:	0249      	lsleq	r1, r1, #9
 8000e06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e0e:	3a7f      	subs	r2, #127	; 0x7f
 8000e10:	bfc2      	ittt	gt
 8000e12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1a:	4770      	bxgt	lr
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	3a01      	subs	r2, #1
 8000e26:	dc5d      	bgt.n	8000ee4 <__aeabi_fmul+0x150>
 8000e28:	f112 0f19 	cmn.w	r2, #25
 8000e2c:	bfdc      	itt	le
 8000e2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e32:	4770      	bxle	lr
 8000e34:	f1c2 0200 	rsb	r2, r2, #0
 8000e38:	0041      	lsls	r1, r0, #1
 8000e3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e3e:	f1c2 0220 	rsb	r2, r2, #32
 8000e42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4a:	f140 0000 	adc.w	r0, r0, #0
 8000e4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e52:	bf08      	it	eq
 8000e54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e58:	4770      	bx	lr
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xce>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fmul+0xe6>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e78f      	b.n	8000dac <__aeabi_fmul+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	bf18      	it	ne
 8000e96:	ea93 0f0c 	teqne	r3, ip
 8000e9a:	d00a      	beq.n	8000eb2 <__aeabi_fmul+0x11e>
 8000e9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea0:	bf18      	it	ne
 8000ea2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea6:	d1d8      	bne.n	8000e5a <__aeabi_fmul+0xc6>
 8000ea8:	ea80 0001 	eor.w	r0, r0, r1
 8000eac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb0:	4770      	bx	lr
 8000eb2:	f090 0f00 	teq	r0, #0
 8000eb6:	bf17      	itett	ne
 8000eb8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	f091 0f00 	teqne	r1, #0
 8000ec2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ec6:	d014      	beq.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	d101      	bne.n	8000ed2 <__aeabi_fmul+0x13e>
 8000ece:	0242      	lsls	r2, r0, #9
 8000ed0:	d10f      	bne.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ed2:	ea93 0f0c 	teq	r3, ip
 8000ed6:	d103      	bne.n	8000ee0 <__aeabi_fmul+0x14c>
 8000ed8:	024b      	lsls	r3, r1, #9
 8000eda:	bf18      	it	ne
 8000edc:	4608      	movne	r0, r1
 8000ede:	d108      	bne.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ee0:	ea80 0001 	eor.w	r0, r0, r1
 8000ee4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef0:	4770      	bx	lr
 8000ef2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efa:	4770      	bx	lr

08000efc <__aeabi_fdiv>:
 8000efc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f04:	bf1e      	ittt	ne
 8000f06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0a:	ea92 0f0c 	teqne	r2, ip
 8000f0e:	ea93 0f0c 	teqne	r3, ip
 8000f12:	d069      	beq.n	8000fe8 <__aeabi_fdiv+0xec>
 8000f14:	eba2 0203 	sub.w	r2, r2, r3
 8000f18:	ea80 0c01 	eor.w	ip, r0, r1
 8000f1c:	0249      	lsls	r1, r1, #9
 8000f1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f22:	d037      	beq.n	8000f94 <__aeabi_fdiv+0x98>
 8000f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f34:	428b      	cmp	r3, r1
 8000f36:	bf38      	it	cc
 8000f38:	005b      	lslcc	r3, r3, #1
 8000f3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f42:	428b      	cmp	r3, r1
 8000f44:	bf24      	itt	cs
 8000f46:	1a5b      	subcs	r3, r3, r1
 8000f48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f50:	bf24      	itt	cs
 8000f52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f5e:	bf24      	itt	cs
 8000f60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f6c:	bf24      	itt	cs
 8000f6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	bf18      	it	ne
 8000f7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f7e:	d1e0      	bne.n	8000f42 <__aeabi_fdiv+0x46>
 8000f80:	2afd      	cmp	r2, #253	; 0xfd
 8000f82:	f63f af50 	bhi.w	8000e26 <__aeabi_fmul+0x92>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f8c:	bf08      	it	eq
 8000f8e:	f020 0001 	biceq.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f9c:	327f      	adds	r2, #127	; 0x7f
 8000f9e:	bfc2      	ittt	gt
 8000fa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fa8:	4770      	bxgt	lr
 8000faa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	3a01      	subs	r2, #1
 8000fb4:	e737      	b.n	8000e26 <__aeabi_fmul+0x92>
 8000fb6:	f092 0f00 	teq	r2, #0
 8000fba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0040      	lsleq	r0, r0, #1
 8000fc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fc6:	3a01      	subeq	r2, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xc2>
 8000fca:	ea40 000c 	orr.w	r0, r0, ip
 8000fce:	f093 0f00 	teq	r3, #0
 8000fd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	bf02      	ittt	eq
 8000fd8:	0049      	lsleq	r1, r1, #1
 8000fda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fde:	3b01      	subeq	r3, #1
 8000fe0:	d0f9      	beq.n	8000fd6 <__aeabi_fdiv+0xda>
 8000fe2:	ea41 010c 	orr.w	r1, r1, ip
 8000fe6:	e795      	b.n	8000f14 <__aeabi_fdiv+0x18>
 8000fe8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fec:	ea92 0f0c 	teq	r2, ip
 8000ff0:	d108      	bne.n	8001004 <__aeabi_fdiv+0x108>
 8000ff2:	0242      	lsls	r2, r0, #9
 8000ff4:	f47f af7d 	bne.w	8000ef2 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	f47f af70 	bne.w	8000ee0 <__aeabi_fmul+0x14c>
 8001000:	4608      	mov	r0, r1
 8001002:	e776      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001004:	ea93 0f0c 	teq	r3, ip
 8001008:	d104      	bne.n	8001014 <__aeabi_fdiv+0x118>
 800100a:	024b      	lsls	r3, r1, #9
 800100c:	f43f af4c 	beq.w	8000ea8 <__aeabi_fmul+0x114>
 8001010:	4608      	mov	r0, r1
 8001012:	e76e      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001014:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001018:	bf18      	it	ne
 800101a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800101e:	d1ca      	bne.n	8000fb6 <__aeabi_fdiv+0xba>
 8001020:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001024:	f47f af5c 	bne.w	8000ee0 <__aeabi_fmul+0x14c>
 8001028:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800102c:	f47f af3c 	bne.w	8000ea8 <__aeabi_fmul+0x114>
 8001030:	e75f      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001032:	bf00      	nop

08001034 <__gesf2>:
 8001034:	f04f 3cff 	mov.w	ip, #4294967295
 8001038:	e006      	b.n	8001048 <__cmpsf2+0x4>
 800103a:	bf00      	nop

0800103c <__lesf2>:
 800103c:	f04f 0c01 	mov.w	ip, #1
 8001040:	e002      	b.n	8001048 <__cmpsf2+0x4>
 8001042:	bf00      	nop

08001044 <__cmpsf2>:
 8001044:	f04f 0c01 	mov.w	ip, #1
 8001048:	f84d cd04 	str.w	ip, [sp, #-4]!
 800104c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001050:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	bf18      	it	ne
 800105a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800105e:	d011      	beq.n	8001084 <__cmpsf2+0x40>
 8001060:	b001      	add	sp, #4
 8001062:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001066:	bf18      	it	ne
 8001068:	ea90 0f01 	teqne	r0, r1
 800106c:	bf58      	it	pl
 800106e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001072:	bf88      	it	hi
 8001074:	17c8      	asrhi	r0, r1, #31
 8001076:	bf38      	it	cc
 8001078:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800107c:	bf18      	it	ne
 800107e:	f040 0001 	orrne.w	r0, r0, #1
 8001082:	4770      	bx	lr
 8001084:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001088:	d102      	bne.n	8001090 <__cmpsf2+0x4c>
 800108a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800108e:	d105      	bne.n	800109c <__cmpsf2+0x58>
 8001090:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001094:	d1e4      	bne.n	8001060 <__cmpsf2+0x1c>
 8001096:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109a:	d0e1      	beq.n	8001060 <__cmpsf2+0x1c>
 800109c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <__aeabi_cfrcmple>:
 80010a4:	4684      	mov	ip, r0
 80010a6:	4608      	mov	r0, r1
 80010a8:	4661      	mov	r1, ip
 80010aa:	e7ff      	b.n	80010ac <__aeabi_cfcmpeq>

080010ac <__aeabi_cfcmpeq>:
 80010ac:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ae:	f7ff ffc9 	bl	8001044 <__cmpsf2>
 80010b2:	2800      	cmp	r0, #0
 80010b4:	bf48      	it	mi
 80010b6:	f110 0f00 	cmnmi.w	r0, #0
 80010ba:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010bc <__aeabi_fcmpeq>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff fff4 	bl	80010ac <__aeabi_cfcmpeq>
 80010c4:	bf0c      	ite	eq
 80010c6:	2001      	moveq	r0, #1
 80010c8:	2000      	movne	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmplt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffea 	bl	80010ac <__aeabi_cfcmpeq>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmple>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffe0 	bl	80010ac <__aeabi_cfcmpeq>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpge>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffd2 	bl	80010a4 <__aeabi_cfrcmple>
 8001100:	bf94      	ite	ls
 8001102:	2001      	movls	r0, #1
 8001104:	2000      	movhi	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmpgt>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffc8 	bl	80010a4 <__aeabi_cfrcmple>
 8001114:	bf34      	ite	cc
 8001116:	2001      	movcc	r0, #1
 8001118:	2000      	movcs	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_f2iz>:
 8001120:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001124:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001128:	d30f      	bcc.n	800114a <__aeabi_f2iz+0x2a>
 800112a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001132:	d90d      	bls.n	8001150 <__aeabi_f2iz+0x30>
 8001134:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800113c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001140:	fa23 f002 	lsr.w	r0, r3, r2
 8001144:	bf18      	it	ne
 8001146:	4240      	negne	r0, r0
 8001148:	4770      	bx	lr
 800114a:	f04f 0000 	mov.w	r0, #0
 800114e:	4770      	bx	lr
 8001150:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001154:	d101      	bne.n	800115a <__aeabi_f2iz+0x3a>
 8001156:	0242      	lsls	r2, r0, #9
 8001158:	d105      	bne.n	8001166 <__aeabi_f2iz+0x46>
 800115a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800115e:	bf08      	it	eq
 8001160:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr

0800116c <__aeabi_f2uiz>:
 800116c:	0042      	lsls	r2, r0, #1
 800116e:	d20e      	bcs.n	800118e <__aeabi_f2uiz+0x22>
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30b      	bcc.n	800118e <__aeabi_f2uiz+0x22>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d409      	bmi.n	8001194 <__aeabi_f2uiz+0x28>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	fa23 f002 	lsr.w	r0, r3, r2
 800118c:	4770      	bx	lr
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	4770      	bx	lr
 8001194:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001198:	d101      	bne.n	800119e <__aeabi_f2uiz+0x32>
 800119a:	0242      	lsls	r2, r0, #9
 800119c:	d102      	bne.n	80011a4 <__aeabi_f2uiz+0x38>
 800119e:	f04f 30ff 	mov.w	r0, #4294967295
 80011a2:	4770      	bx	lr
 80011a4:	f04f 0000 	mov.w	r0, #0
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop

080011ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <SystemInit+0x5c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <SystemInit+0x5c>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <SystemInit+0x5c>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4911      	ldr	r1, [pc, #68]	; (8001208 <SystemInit+0x5c>)
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <SystemInit+0x60>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <SystemInit+0x5c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <SystemInit+0x5c>)
 80011ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <SystemInit+0x5c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <SystemInit+0x5c>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <SystemInit+0x5c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <SystemInit+0x5c>)
 80011ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80011ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SystemInit+0x5c>)
 80011f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011f6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80011f8:	f000 f80c 	bl	8001214 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SystemInit+0x64>)
 80011fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001202:	609a      	str	r2, [r3, #8]
#endif 
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000
 800120c:	f8ff0000 	.word	0xf8ff0000
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8001218:	f000 f802 	bl	8001220 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800122e:	4b39      	ldr	r3, [pc, #228]	; (8001314 <SetSysClockTo24+0xf4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a38      	ldr	r2, [pc, #224]	; (8001314 <SetSysClockTo24+0xf4>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800123a:	4b36      	ldr	r3, [pc, #216]	; (8001314 <SetSysClockTo24+0xf4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d103      	bne.n	8001258 <SetSysClockTo24+0x38>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001256:	d1f0      	bne.n	800123a <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001258:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <SetSysClockTo24+0xf4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001264:	2301      	movs	r3, #1
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	e001      	b.n	800126e <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d149      	bne.n	8001308 <SetSysClockTo24+0xe8>
  {
#if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL 
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <SetSysClockTo24+0xf8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <SetSysClockTo24+0xf8>)
 800127a:	f043 0310 	orr.w	r3, r3, #16
 800127e:	6013      	str	r3, [r2, #0]

    /* Flash 0 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <SetSysClockTo24+0xf8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a24      	ldr	r2, [pc, #144]	; (8001318 <SetSysClockTo24+0xf8>)
 8001286:	f023 0303 	bic.w	r3, r3, #3
 800128a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <SetSysClockTo24+0xf8>)
 800128e:	4a22      	ldr	r2, [pc, #136]	; (8001318 <SetSysClockTo24+0xf8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6013      	str	r3, [r2, #0]
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV8; 		// 24 MHz / 8 = 3 MHz
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <SetSysClockTo24+0xf4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <SetSysClockTo24+0xf4>)
 800129a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800129e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;		// 3 MHz / 1
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <SetSysClockTo24+0xf4>)
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <SetSysClockTo24+0xf4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;		// 3 MHz / 1
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <SetSysClockTo24+0xf4>)
 80012aa:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <SetSysClockTo24+0xf4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	6053      	str	r3, [r2, #4]
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
#else    
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <SetSysClockTo24+0xf4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4a17      	ldr	r2, [pc, #92]	; (8001314 <SetSysClockTo24+0xf4>)
 80012b6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80012ba:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <SetSysClockTo24+0xf4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a14      	ldr	r2, [pc, #80]	; (8001314 <SetSysClockTo24+0xf4>)
 80012c2:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 80012c6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <SetSysClockTo24+0xf4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a11      	ldr	r2, [pc, #68]	; (8001314 <SetSysClockTo24+0xf4>)
 80012ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80012d4:	bf00      	nop
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <SetSysClockTo24+0xf4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f9      	beq.n	80012d6 <SetSysClockTo24+0xb6>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <SetSysClockTo24+0xf4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <SetSysClockTo24+0xf4>)
 80012e8:	f023 0303 	bic.w	r3, r3, #3
 80012ec:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <SetSysClockTo24+0xf4>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <SetSysClockTo24+0xf4>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80012fa:	bf00      	nop
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SetSysClockTo24+0xf4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d1f9      	bne.n	80012fc <SetSysClockTo24+0xdc>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	40022000 	.word	0x40022000

0800131c <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	2201      	movs	r2, #1
 800132e:	fa02 f103 	lsl.w	r1, r2, r3
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <NVIC_EnableIRQ+0x2c>)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	095b      	lsrs	r3, r3, #5
 800133a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100

0800134c <adc_init>:



//ADC Init
void adc_init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    //ADC prescaller
    RCC->CFGR &= ~RCC_CFGR_ADCPRE;      //div by 8
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <adc_init+0xa0>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a25      	ldr	r2, [pc, #148]	; (80013ec <adc_init+0xa0>)
 8001356:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800135a:	6053      	str	r3, [r2, #4]
    
    //ADC clock on
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <adc_init+0xa0>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <adc_init+0xa0>)
 8001362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001366:	6193      	str	r3, [r2, #24]
    
    //Sample time
    ADC1->SMPR2 |= ADC_SMPR2_SMP0_1;    //13.5 cycles
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <adc_init+0xa4>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <adc_init+0xa4>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	6113      	str	r3, [r2, #16]
    
    //Number of conversions in regular sequence
    ADC1->SQR1 &= ~ADC_SQR1_L;          //1 conversion
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <adc_init+0xa4>)
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <adc_init+0xa4>)
 800137a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800137e:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    //First channel in regular sequence
    ADC1->SQR3 &= ~ADC_SQR3_SQ1;        //channel #0
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <adc_init+0xa4>)
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <adc_init+0xa4>)
 8001386:	f023 031f 	bic.w	r3, r3, #31
 800138a:	6353      	str	r3, [r2, #52]	; 0x34
    
    //Extermal trigger enable for regular sequence
    ADC1->CR2 |= ADC_CR2_EXTTRIG;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <adc_init+0xa4>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <adc_init+0xa4>)
 8001392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001396:	6093      	str	r3, [r2, #8]
    
    //Event to start regular sequence
    ADC1->CR2 |= ADC_CR2_EXTSEL;        //start by software
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <adc_init+0xa4>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <adc_init+0xa4>)
 800139e:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80013a2:	6093      	str	r3, [r2, #8]
    
    //ADC enable
    ADC1->CR2 |= ADC_CR2_ADON;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <adc_init+0xa4>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <adc_init+0xa4>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6093      	str	r3, [r2, #8]
    
    //Calibration
    delay_cyc(10000);
 80013b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80013b4:	f007 f97c 	bl	80086b0 <delay_cyc>
    ADC1->CR2 |= ADC_CR2_CAL;           //start cal
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <adc_init+0xa4>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <adc_init+0xa4>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6093      	str	r3, [r2, #8]
    while (ADC1->CR2 & ADC_CR2_CAL);    //wait
 80013c4:	bf00      	nop
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <adc_init+0xa4>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f9      	bne.n	80013c6 <adc_init+0x7a>

    //Interrupt at the end of the conversion
    ADC1->CR1 |= ADC_CR1_EOCIE;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <adc_init+0xa4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <adc_init+0xa4>)
 80013d8:	f043 0320 	orr.w	r3, r3, #32
 80013dc:	6053      	str	r3, [r2, #4]
    NVIC_EnableIRQ(ADC1_2_IRQn);
 80013de:	2012      	movs	r0, #18
 80013e0:	f7ff ff9c 	bl	800131c <NVIC_EnableIRQ>

    adc_clock_disable();
 80013e4:	f000 f806 	bl	80013f4 <adc_clock_disable>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40012400 	.word	0x40012400

080013f4 <adc_clock_disable>:



void adc_clock_disable(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB2ENR, RCC_APB2ENR_ADC1EN) = 0;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <adc_clock_disable+0x14>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	42420324 	.word	0x42420324

0800140c <adc_clock_enable>:



void adc_clock_enable(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB2ENR, RCC_APB2ENR_ADC1EN) = 1;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <adc_clock_enable+0x14>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	42420324 	.word	0x42420324

08001424 <adc_start_bat_voltage_reading>:



//Start ADC reading
void adc_start_bat_voltage_reading(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	bat_mon_on();	//Enable resistive divider and wait a bit
 8001428:	f000 fcec 	bl	8001e04 <bat_mon_on>
	adc_clock_enable();
 800142c:	f7ff ffee 	bl	800140c <adc_clock_enable>
	delay_cyc(10);
 8001430:	200a      	movs	r0, #10
 8001432:	f007 f93d 	bl	80086b0 <delay_cyc>

	//Start conversion
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <adc_start_bat_voltage_reading+0x24>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	4a03      	ldr	r2, [pc, #12]	; (8001448 <adc_start_bat_voltage_reading+0x24>)
 800143c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001440:	6093      	str	r3, [r2, #8]
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40012400 	.word	0x40012400
 800144c:	00000000 	.word	0x00000000

08001450 <adc_read_bat_voltage_result>:



//Read the ADC conversion result; return 1 if battery low is detected
uint8_t adc_read_bat_voltage_result(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	bat_mon_off();	//Disable resistive divider
 8001454:	f000 fce2 	bl	8001e1c <bat_mon_off>

	//Convert
	bat_voltage = 2 * ((ADC1->DR * vref) / 4096);     //x2 due to resistive voltage divider before ADC input
 8001458:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <adc_read_bat_voltage_result+0x108>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fc41 	bl	8000ce4 <__aeabi_ui2f>
 8001462:	4602      	mov	r2, r0
 8001464:	4b3d      	ldr	r3, [pc, #244]	; (800155c <adc_read_bat_voltage_result+0x10c>)
 8001466:	4619      	mov	r1, r3
 8001468:	4610      	mov	r0, r2
 800146a:	f7ff fc93 	bl	8000d94 <__aeabi_fmul>
 800146e:	4603      	mov	r3, r0
 8001470:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fd41 	bl	8000efc <__aeabi_fdiv>
 800147a:	4603      	mov	r3, r0
 800147c:	4619      	mov	r1, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fb80 	bl	8000b84 <__addsf3>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <adc_read_bat_voltage_result+0x110>)
 800148a:	601a      	str	r2, [r3, #0]

	adc_clock_disable();
 800148c:	f7ff ffb2 	bl	80013f4 <adc_clock_disable>

	//Refresh flags
	if (bat_voltage > V_BATTERY_75_TO_100)
 8001490:	4b33      	ldr	r3, [pc, #204]	; (8001560 <adc_read_bat_voltage_result+0x110>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe ffcf 	bl	8000438 <__aeabi_f2d>
 800149a:	a327      	add	r3, pc, #156	; (adr r3, 8001538 <adc_read_bat_voltage_result+0xe8>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7ff fab2 	bl	8000a08 <__aeabi_dcmpgt>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d004      	beq.n	80014b4 <adc_read_bat_voltage_result+0x64>
	{
		set_device_flags(FLAGS_BATTERY, FLAG_BATTERY_75_TO_100);
 80014aa:	2104      	movs	r1, #4
 80014ac:	2001      	movs	r0, #1
 80014ae:	f001 fa0b 	bl	80028c8 <set_device_flags>
 80014b2:	e03b      	b.n	800152c <adc_read_bat_voltage_result+0xdc>
	}
	else if (bat_voltage > V_BATTERY_50_TO_75)
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <adc_read_bat_voltage_result+0x110>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffbd 	bl	8000438 <__aeabi_f2d>
 80014be:	a320      	add	r3, pc, #128	; (adr r3, 8001540 <adc_read_bat_voltage_result+0xf0>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff faa0 	bl	8000a08 <__aeabi_dcmpgt>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d004      	beq.n	80014d8 <adc_read_bat_voltage_result+0x88>
	{
		set_device_flags(FLAGS_BATTERY, FLAG_BATTERY_50_TO_75);
 80014ce:	2103      	movs	r1, #3
 80014d0:	2001      	movs	r0, #1
 80014d2:	f001 f9f9 	bl	80028c8 <set_device_flags>
 80014d6:	e029      	b.n	800152c <adc_read_bat_voltage_result+0xdc>
	}
	else if (bat_voltage > V_BATTERY_25_TO_50)
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <adc_read_bat_voltage_result+0x110>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe ffab 	bl	8000438 <__aeabi_f2d>
 80014e2:	a319      	add	r3, pc, #100	; (adr r3, 8001548 <adc_read_bat_voltage_result+0xf8>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff fa8e 	bl	8000a08 <__aeabi_dcmpgt>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <adc_read_bat_voltage_result+0xac>
	{
		set_device_flags(FLAGS_BATTERY, FLAG_BATTERY_25_TO_50);
 80014f2:	2102      	movs	r1, #2
 80014f4:	2001      	movs	r0, #1
 80014f6:	f001 f9e7 	bl	80028c8 <set_device_flags>
 80014fa:	e017      	b.n	800152c <adc_read_bat_voltage_result+0xdc>
	}
	else if (bat_voltage > V_BATTERY_10_TO_25)
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <adc_read_bat_voltage_result+0x110>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe ff99 	bl	8000438 <__aeabi_f2d>
 8001506:	a312      	add	r3, pc, #72	; (adr r3, 8001550 <adc_read_bat_voltage_result+0x100>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff fa7c 	bl	8000a08 <__aeabi_dcmpgt>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <adc_read_bat_voltage_result+0xd0>
	{
		set_device_flags(FLAGS_BATTERY, FLAG_BATTERY_10_TO_25);
 8001516:	2101      	movs	r1, #1
 8001518:	2001      	movs	r0, #1
 800151a:	f001 f9d5 	bl	80028c8 <set_device_flags>
 800151e:	e005      	b.n	800152c <adc_read_bat_voltage_result+0xdc>
	}
	else
	{
		set_device_flags(FLAGS_BATTERY, FLAG_BATTERY_0_TO_10);
 8001520:	2100      	movs	r1, #0
 8001522:	2001      	movs	r0, #1
 8001524:	f001 f9d0 	bl	80028c8 <set_device_flags>
		return 1;
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <adc_read_bat_voltage_result+0xde>
	}

    return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	f3af 8000 	nop.w
 8001538:	33333333 	.word	0x33333333
 800153c:	400f3333 	.word	0x400f3333
 8001540:	cccccccd 	.word	0xcccccccd
 8001544:	400ccccc 	.word	0x400ccccc
 8001548:	66666666 	.word	0x66666666
 800154c:	400a6666 	.word	0x400a6666
 8001550:	cccccccd 	.word	0xcccccccd
 8001554:	4008cccc 	.word	0x4008cccc
 8001558:	40012400 	.word	0x40012400
 800155c:	40533333 	.word	0x40533333
 8001560:	20000128 	.word	0x20000128

08001564 <adc_check_bat_voltage>:



//Check battery voltage with predefined interval
void adc_check_bat_voltage(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	bat_interval_counter++;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <adc_check_bat_voltage+0x28>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <adc_check_bat_voltage+0x28>)
 8001572:	701a      	strb	r2, [r3, #0]

    if (bat_interval_counter >= GET_BAT_VOLTAGE_INTERVAL)
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <adc_check_bat_voltage+0x28>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b09      	cmp	r3, #9
 800157a:	d904      	bls.n	8001586 <adc_check_bat_voltage+0x22>
    {
    	bat_interval_counter = 0;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <adc_check_bat_voltage+0x28>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]

    	adc_start_bat_voltage_reading();
 8001582:	f7ff ff4f 	bl	8001424 <adc_start_bat_voltage_reading>
    }
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200000e4 	.word	0x200000e4

08001590 <get_bat_voltage_value>:



float get_bat_voltage_value(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	return bat_voltage;
 8001594:	4b02      	ldr	r3, [pc, #8]	; (80015a0 <get_bat_voltage_value+0x10>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	20000128 	.word	0x20000128

080015a4 <scan_buttons>:



//button return code = {ButtonNumber(0...BUTTONS_NUM-1) * BUTTON_ACTIONS_NUM + BUTTON_ACTION(_SHORT)(_LONG)} + 1
uint8_t scan_buttons(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
	idr_register_copy = GPIOA->IDR;             //save pins data
 80015aa:	4b55      	ldr	r3, [pc, #340]	; (8001700 <scan_buttons+0x15c>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	4a55      	ldr	r2, [pc, #340]	; (8001704 <scan_buttons+0x160>)
 80015b0:	6013      	str	r3, [r2, #0]
	idr_register_copy &= (GPIO_IDR_IDR1 |       //mask needed pins
 80015b2:	4b54      	ldr	r3, [pc, #336]	; (8001704 <scan_buttons+0x160>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80015ba:	4a52      	ldr	r2, [pc, #328]	; (8001704 <scan_buttons+0x160>)
 80015bc:	6013      	str	r3, [r2, #0]
						  GPIO_IDR_IDR2 |
						  GPIO_IDR_IDR3 |
						  GPIO_IDR_IDR4 |
						  GPIO_IDR_IDR5);

	idr_register_copy >>= 1;            //align bits to the right, now IDR1(PA1) is in LSBit position
 80015be:	4b51      	ldr	r3, [pc, #324]	; (8001704 <scan_buttons+0x160>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <scan_buttons+0x160>)
 80015c6:	6013      	str	r3, [r2, #0]

	for (uint8_t i = 0; i < BUTTONS_NUM; i++)       //update buttons state
 80015c8:	2300      	movs	r3, #0
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	e020      	b.n	8001610 <scan_buttons+0x6c>
	{
		if (idr_register_copy & ((uint32_t)1 << i)) //check pin state
 80015ce:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <scan_buttons+0x160>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	fa22 f303 	lsr.w	r3, r2, r3
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00a      	beq.n	80015f6 <scan_buttons+0x52>
		{
			button_prev_state[i] = button_state[i];	// if input pin = 1
 80015e0:	79fa      	ldrb	r2, [r7, #7]
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	4948      	ldr	r1, [pc, #288]	; (8001708 <scan_buttons+0x164>)
 80015e6:	5c89      	ldrb	r1, [r1, r2]
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <scan_buttons+0x168>)
 80015ea:	54d1      	strb	r1, [r2, r3]
			button_state[i] = BUTTON_RELEASED;
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4a46      	ldr	r2, [pc, #280]	; (8001708 <scan_buttons+0x164>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	54d1      	strb	r1, [r2, r3]
 80015f4:	e009      	b.n	800160a <scan_buttons+0x66>
		}
		else
		{
			button_prev_state[i] = button_state[i];	// if input pin = 0
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	4943      	ldr	r1, [pc, #268]	; (8001708 <scan_buttons+0x164>)
 80015fc:	5c89      	ldrb	r1, [r1, r2]
 80015fe:	4a43      	ldr	r2, [pc, #268]	; (800170c <scan_buttons+0x168>)
 8001600:	54d1      	strb	r1, [r2, r3]
			button_state[i] = BUTTON_PRESSED;
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4a40      	ldr	r2, [pc, #256]	; (8001708 <scan_buttons+0x164>)
 8001606:	2100      	movs	r1, #0
 8001608:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < BUTTONS_NUM; i++)       //update buttons state
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	3301      	adds	r3, #1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2b04      	cmp	r3, #4
 8001614:	d9db      	bls.n	80015ce <scan_buttons+0x2a>
		}
	}

	for (uint8_t i = 0; i < BUTTONS_NUM; i++)       //check click duration. short click after button released (and before timeout overflow); long click after timeout overflow
 8001616:	2300      	movs	r3, #0
 8001618:	71bb      	strb	r3, [r7, #6]
 800161a:	e067      	b.n	80016ec <scan_buttons+0x148>
	{
		if ((button_state[i] == BUTTON_PRESSED) && (button_pressed_counter[i] < BUTTON_PRESSED_COUNTER_MAX))   //increase timeout counter, update overflow states
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	4a3a      	ldr	r2, [pc, #232]	; (8001708 <scan_buttons+0x164>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d123      	bne.n	800166e <scan_buttons+0xca>
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	4a39      	ldr	r2, [pc, #228]	; (8001710 <scan_buttons+0x16c>)
 800162a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800162e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001632:	4293      	cmp	r3, r2
 8001634:	d01b      	beq.n	800166e <scan_buttons+0xca>
		{
			button_pressed_counter[i]++;
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	4a35      	ldr	r2, [pc, #212]	; (8001710 <scan_buttons+0x16c>)
 800163a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800163e:	3201      	adds	r2, #1
 8001640:	b291      	uxth	r1, r2
 8001642:	4a33      	ldr	r2, [pc, #204]	; (8001710 <scan_buttons+0x16c>)
 8001644:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			timeout_prev_state[i] = timeout_state[i];
 8001648:	79ba      	ldrb	r2, [r7, #6]
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	4931      	ldr	r1, [pc, #196]	; (8001714 <scan_buttons+0x170>)
 800164e:	5c89      	ldrb	r1, [r1, r2]
 8001650:	4a31      	ldr	r2, [pc, #196]	; (8001718 <scan_buttons+0x174>)
 8001652:	54d1      	strb	r1, [r2, r3]
			timeout_state[i] = (button_pressed_counter[i] > BUTTON_PRESSED_COUNTER_THRESHOLD);     //overflow or not? 1 or 0?
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <scan_buttons+0x16c>)
 8001658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800165c:	2b4b      	cmp	r3, #75	; 0x4b
 800165e:	bf8c      	ite	hi
 8001660:	2301      	movhi	r3, #1
 8001662:	2300      	movls	r3, #0
 8001664:	b2da      	uxtb	r2, r3
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	4611      	mov	r1, r2
 800166a:	4a2a      	ldr	r2, [pc, #168]	; (8001714 <scan_buttons+0x170>)
 800166c:	54d1      	strb	r1, [r2, r3]
		}

		if ((button_state[i] == BUTTON_RELEASED) && (button_prev_state[i] == BUTTON_PRESSED))   //button has been released
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	4a25      	ldr	r2, [pc, #148]	; (8001708 <scan_buttons+0x164>)
 8001672:	5cd3      	ldrb	r3, [r2, r3]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d126      	bne.n	80016c6 <scan_buttons+0x122>
 8001678:	79bb      	ldrb	r3, [r7, #6]
 800167a:	4a24      	ldr	r2, [pc, #144]	; (800170c <scan_buttons+0x168>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d121      	bne.n	80016c6 <scan_buttons+0x122>
		{
			uint16_t button_pressed_counter_copy = button_pressed_counter[i];
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	4a22      	ldr	r2, [pc, #136]	; (8001710 <scan_buttons+0x16c>)
 8001686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800168a:	80bb      	strh	r3, [r7, #4]
			button_pressed_counter[i] = 0;
 800168c:	79bb      	ldrb	r3, [r7, #6]
 800168e:	4a20      	ldr	r2, [pc, #128]	; (8001710 <scan_buttons+0x16c>)
 8001690:	2100      	movs	r1, #0
 8001692:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if ((timeout_state[i] == TIMEOUT_NO_OVERFLOW) & (button_pressed_counter_copy >= BUTTON_PRESSED_COUNTER_MIN))
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <scan_buttons+0x170>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf0c      	ite	eq
 80016a0:	2301      	moveq	r3, #1
 80016a2:	2300      	movne	r3, #0
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	88bb      	ldrh	r3, [r7, #4]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	bf8c      	ite	hi
 80016ac:	2301      	movhi	r3, #1
 80016ae:	2300      	movls	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4013      	ands	r3, r2
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <scan_buttons+0x122>
			{
				return (i * BUTTON_ACTIONS_NUM + BUTTON_ACTION_SHORT) + 1;              //if before overflow, then short click
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	e016      	b.n	80016f4 <scan_buttons+0x150>
			}
		}

		if ((timeout_state[i] == TIMEOUT_OVERFLOW) && (timeout_prev_state[i] == TIMEOUT_NO_OVERFLOW))   //overflow occured
 80016c6:	79bb      	ldrb	r3, [r7, #6]
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <scan_buttons+0x170>)
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d10a      	bne.n	80016e6 <scan_buttons+0x142>
 80016d0:	79bb      	ldrb	r3, [r7, #6]
 80016d2:	4a11      	ldr	r2, [pc, #68]	; (8001718 <scan_buttons+0x174>)
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d105      	bne.n	80016e6 <scan_buttons+0x142>
		{
			return (i * BUTTON_ACTIONS_NUM + BUTTON_ACTION_LONG) + 1;   //long click
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	3301      	adds	r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	e006      	b.n	80016f4 <scan_buttons+0x150>
	for (uint8_t i = 0; i < BUTTONS_NUM; i++)       //check click duration. short click after button released (and before timeout overflow); long click after timeout overflow
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	3301      	adds	r3, #1
 80016ea:	71bb      	strb	r3, [r7, #6]
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d994      	bls.n	800161c <scan_buttons+0x78>
		}
	}

    return BTN_NO_ACTION;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40010800 	.word	0x40010800
 8001704:	200000e8 	.word	0x200000e8
 8001708:	20000000 	.word	0x20000000
 800170c:	20000008 	.word	0x20000008
 8001710:	200000ec 	.word	0x200000ec
 8001714:	200000f8 	.word	0x200000f8
 8001718:	20000100 	.word	0x20000100

0800171c <NVIC_EnableIRQ>:
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	2201      	movs	r2, #1
 800172e:	fa02 f103 	lsl.w	r1, r2, r3
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <NVIC_EnableIRQ+0x2c>)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	095b      	lsrs	r3, r3, #5
 800173a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100

0800174c <gpio_init>:



//Initialization of all used ports
void gpio_init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    //Port A
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001750:	4b98      	ldr	r3, [pc, #608]	; (80019b4 <gpio_init+0x268>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a97      	ldr	r2, [pc, #604]	; (80019b4 <gpio_init+0x268>)
 8001756:	f043 0304 	orr.w	r3, r3, #4
 800175a:	6193      	str	r3, [r2, #24]
    
    //PA0 - ADC0 (Battery voltage)
    GPIOA->CRL &= ~GPIO_CRL_MODE0;      //input mode
 800175c:	4b96      	ldr	r3, [pc, #600]	; (80019b8 <gpio_init+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a95      	ldr	r2, [pc, #596]	; (80019b8 <gpio_init+0x26c>)
 8001762:	f023 0303 	bic.w	r3, r3, #3
 8001766:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF0;       //analog input
 8001768:	4b93      	ldr	r3, [pc, #588]	; (80019b8 <gpio_init+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a92      	ldr	r2, [pc, #584]	; (80019b8 <gpio_init+0x26c>)
 800176e:	f023 030c 	bic.w	r3, r3, #12
 8001772:	6013      	str	r3, [r2, #0]
    
    //PA1 - Button 1
    GPIOA->CRL &= ~GPIO_CRL_MODE1;      //input mode
 8001774:	4b90      	ldr	r3, [pc, #576]	; (80019b8 <gpio_init+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a8f      	ldr	r2, [pc, #572]	; (80019b8 <gpio_init+0x26c>)
 800177a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800177e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF1_0;     //input with pull
 8001780:	4b8d      	ldr	r3, [pc, #564]	; (80019b8 <gpio_init+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a8c      	ldr	r2, [pc, #560]	; (80019b8 <gpio_init+0x26c>)
 8001786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800178a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF1_1; 
 800178c:	4b8a      	ldr	r3, [pc, #552]	; (80019b8 <gpio_init+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a89      	ldr	r2, [pc, #548]	; (80019b8 <gpio_init+0x26c>)
 8001792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001796:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= GPIO_ODR_ODR1;        //pull-up on
 8001798:	4b87      	ldr	r3, [pc, #540]	; (80019b8 <gpio_init+0x26c>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a86      	ldr	r2, [pc, #536]	; (80019b8 <gpio_init+0x26c>)
 800179e:	f043 0302 	orr.w	r3, r3, #2
 80017a2:	60d3      	str	r3, [r2, #12]
    
    //PA2 - Button 2
    GPIOA->CRL &= ~GPIO_CRL_MODE2;      //input mode
 80017a4:	4b84      	ldr	r3, [pc, #528]	; (80019b8 <gpio_init+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a83      	ldr	r2, [pc, #524]	; (80019b8 <gpio_init+0x26c>)
 80017aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ae:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF2_0;     //input with pull
 80017b0:	4b81      	ldr	r3, [pc, #516]	; (80019b8 <gpio_init+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a80      	ldr	r2, [pc, #512]	; (80019b8 <gpio_init+0x26c>)
 80017b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017ba:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF2_1; 
 80017bc:	4b7e      	ldr	r3, [pc, #504]	; (80019b8 <gpio_init+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a7d      	ldr	r2, [pc, #500]	; (80019b8 <gpio_init+0x26c>)
 80017c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017c6:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= GPIO_ODR_ODR2;        //pull-up on
 80017c8:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <gpio_init+0x26c>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a7a      	ldr	r2, [pc, #488]	; (80019b8 <gpio_init+0x26c>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	60d3      	str	r3, [r2, #12]
    
    //PA3 - Button 3
    GPIOA->CRL &= ~GPIO_CRL_MODE3;      //input mode
 80017d4:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <gpio_init+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a77      	ldr	r2, [pc, #476]	; (80019b8 <gpio_init+0x26c>)
 80017da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017de:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF3_0;     //input with pull
 80017e0:	4b75      	ldr	r3, [pc, #468]	; (80019b8 <gpio_init+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a74      	ldr	r2, [pc, #464]	; (80019b8 <gpio_init+0x26c>)
 80017e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017ea:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF3_1; 
 80017ec:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <gpio_init+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a71      	ldr	r2, [pc, #452]	; (80019b8 <gpio_init+0x26c>)
 80017f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f6:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= GPIO_ODR_ODR3;        //pull-up on
 80017f8:	4b6f      	ldr	r3, [pc, #444]	; (80019b8 <gpio_init+0x26c>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4a6e      	ldr	r2, [pc, #440]	; (80019b8 <gpio_init+0x26c>)
 80017fe:	f043 0308 	orr.w	r3, r3, #8
 8001802:	60d3      	str	r3, [r2, #12]
    
    //PA4 - Button 4
    GPIOA->CRL &= ~GPIO_CRL_MODE4;      //input mode
 8001804:	4b6c      	ldr	r3, [pc, #432]	; (80019b8 <gpio_init+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a6b      	ldr	r2, [pc, #428]	; (80019b8 <gpio_init+0x26c>)
 800180a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800180e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF4_0;     //input with pull
 8001810:	4b69      	ldr	r3, [pc, #420]	; (80019b8 <gpio_init+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a68      	ldr	r2, [pc, #416]	; (80019b8 <gpio_init+0x26c>)
 8001816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF4_1; 
 800181c:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <gpio_init+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a65      	ldr	r2, [pc, #404]	; (80019b8 <gpio_init+0x26c>)
 8001822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001826:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= GPIO_ODR_ODR4;        //pull-up on
 8001828:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <gpio_init+0x26c>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a62      	ldr	r2, [pc, #392]	; (80019b8 <gpio_init+0x26c>)
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	60d3      	str	r3, [r2, #12]
    
    //PA5 - Button 5
    GPIOA->CRL &= ~GPIO_CRL_MODE5;      //input mode
 8001834:	4b60      	ldr	r3, [pc, #384]	; (80019b8 <gpio_init+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5f      	ldr	r2, [pc, #380]	; (80019b8 <gpio_init+0x26c>)
 800183a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800183e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF5_0;     //input with pull
 8001840:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <gpio_init+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a5c      	ldr	r2, [pc, #368]	; (80019b8 <gpio_init+0x26c>)
 8001846:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800184a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF5_1; 
 800184c:	4b5a      	ldr	r3, [pc, #360]	; (80019b8 <gpio_init+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a59      	ldr	r2, [pc, #356]	; (80019b8 <gpio_init+0x26c>)
 8001852:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001856:	6013      	str	r3, [r2, #0]
    GPIOA->ODR |= GPIO_ODR_ODR5;        //pull-up on
 8001858:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <gpio_init+0x26c>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4a56      	ldr	r2, [pc, #344]	; (80019b8 <gpio_init+0x26c>)
 800185e:	f043 0320 	orr.w	r3, r3, #32
 8001862:	60d3      	str	r3, [r2, #12]
    
    //PA6 - Battery monitor switch
    GPIOA->CRL &= ~GPIO_CRL_MODE6_0;    //output 2 MHz
 8001864:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <gpio_init+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a53      	ldr	r2, [pc, #332]	; (80019b8 <gpio_init+0x26c>)
 800186a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800186e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE6_1;
 8001870:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <gpio_init+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a50      	ldr	r2, [pc, #320]	; (80019b8 <gpio_init+0x26c>)
 8001876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800187a:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF6;       //output push-pull
 800187c:	4b4e      	ldr	r3, [pc, #312]	; (80019b8 <gpio_init+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a4d      	ldr	r2, [pc, #308]	; (80019b8 <gpio_init+0x26c>)
 8001882:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001886:	6013      	str	r3, [r2, #0]

    //PA7 - Piezo Buzzer (PWM)
    GPIOA->CRL &= ~GPIO_CRL_MODE7_0;  	//output 2 MHz
 8001888:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <gpio_init+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a4a      	ldr	r2, [pc, #296]	; (80019b8 <gpio_init+0x26c>)
 800188e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001892:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_MODE7_1;
 8001894:	4b48      	ldr	r3, [pc, #288]	; (80019b8 <gpio_init+0x26c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a47      	ldr	r2, [pc, #284]	; (80019b8 <gpio_init+0x26c>)
 800189a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800189e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_CNF7_0;    	//alternate output push-pull
 80018a0:	4b45      	ldr	r3, [pc, #276]	; (80019b8 <gpio_init+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <gpio_init+0x26c>)
 80018a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018aa:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF7_1;
 80018ac:	4b42      	ldr	r3, [pc, #264]	; (80019b8 <gpio_init+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a41      	ldr	r2, [pc, #260]	; (80019b8 <gpio_init+0x26c>)
 80018b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018b6:	6013      	str	r3, [r2, #0]

    //PA8 - RES (SSD1306)
    GPIOA->CRH &= ~GPIO_CRH_MODE8_0;    //output 2 MHz
 80018b8:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <gpio_init+0x26c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a3e      	ldr	r2, [pc, #248]	; (80019b8 <gpio_init+0x26c>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_MODE8_1;
 80018c4:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <gpio_init+0x26c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a3b      	ldr	r2, [pc, #236]	; (80019b8 <gpio_init+0x26c>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF8;      	//output push-pull
 80018d0:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <gpio_init+0x26c>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a38      	ldr	r2, [pc, #224]	; (80019b8 <gpio_init+0x26c>)
 80018d6:	f023 030c 	bic.w	r3, r3, #12
 80018da:	6053      	str	r3, [r2, #4]
    
    //PA9 - USART TX1 (Debug out)
    GPIOA->CRH &= ~GPIO_CRH_MODE9_0;    //output 2 MHz
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <gpio_init+0x26c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <gpio_init+0x26c>)
 80018e2:	f023 0310 	bic.w	r3, r3, #16
 80018e6:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_MODE9_1;
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <gpio_init+0x26c>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a32      	ldr	r2, [pc, #200]	; (80019b8 <gpio_init+0x26c>)
 80018ee:	f043 0320 	orr.w	r3, r3, #32
 80018f2:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF9_0;     //alternate output push-pull
 80018f4:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <gpio_init+0x26c>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <gpio_init+0x26c>)
 80018fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018fe:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF9_1;
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <gpio_init+0x26c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <gpio_init+0x26c>)
 8001906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190a:	6053      	str	r3, [r2, #4]
    
    //PA10 - USART RX1 (GPS NMEA here)
    GPIOA->CRH &= ~GPIO_CRH_MODE10;     //input
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <gpio_init+0x26c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <gpio_init+0x26c>)
 8001912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001916:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0;     //alternate input floating
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <gpio_init+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4a26      	ldr	r2, [pc, #152]	; (80019b8 <gpio_init+0x26c>)
 800191e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001922:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF10_1;
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <gpio_init+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <gpio_init+0x26c>)
 800192a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800192e:	6053      	str	r3, [r2, #4]
    
    //PA11 - GPS (PPS interrupt)
    GPIOA->CRH &= ~GPIO_CRH_MODE11;     //input mode
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <gpio_init+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <gpio_init+0x26c>)
 8001936:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800193a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF11_0;    //input with pull
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <gpio_init+0x26c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <gpio_init+0x26c>)
 8001942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001946:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF11_1; 
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <gpio_init+0x26c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <gpio_init+0x26c>)
 800194e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001952:	6053      	str	r3, [r2, #4]
    GPIOA->ODR &= ~GPIO_ODR_ODR11;      //pull-down
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <gpio_init+0x26c>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <gpio_init+0x26c>)
 800195a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800195e:	60d3      	str	r3, [r2, #12]
    
    //PA12 - CTS (SI4463)
    GPIOA->CRH &= ~GPIO_CRH_MODE11;     //input mode
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <gpio_init+0x26c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <gpio_init+0x26c>)
 8001966:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800196a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF11_0;    //input with pull
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <gpio_init+0x26c>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <gpio_init+0x26c>)
 8001972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001976:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF11_1; 
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <gpio_init+0x26c>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <gpio_init+0x26c>)
 800197e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001982:	6053      	str	r3, [r2, #4]
    GPIOA->ODR &= ~GPIO_ODR_ODR11;      //pull-down
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <gpio_init+0x26c>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <gpio_init+0x26c>)
 800198a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800198e:	60d3      	str	r3, [r2, #12]
    
    //PA15 - CS (SI4463)
    GPIOA->CRH &= ~GPIO_CRH_MODE15_0;   //output 2 MHz
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <gpio_init+0x26c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <gpio_init+0x26c>)
 8001996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_MODE15_1;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <gpio_init+0x26c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <gpio_init+0x26c>)
 80019a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019a6:	6053      	str	r3, [r2, #4]
    GPIOA->CRH &= ~GPIO_CRH_CNF15;      //output push-pull
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <gpio_init+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a02      	ldr	r2, [pc, #8]	; (80019b8 <gpio_init+0x26c>)
 80019ae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80019b2:	e003      	b.n	80019bc <gpio_init+0x270>
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010800 	.word	0x40010800
 80019bc:	6053      	str	r3, [r2, #4]
    
    

    //Port B
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80019be:	4b95      	ldr	r3, [pc, #596]	; (8001c14 <gpio_init+0x4c8>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4a94      	ldr	r2, [pc, #592]	; (8001c14 <gpio_init+0x4c8>)
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	6193      	str	r3, [r2, #24]
    
    //PB0 - Red LED
    GPIOB->CRL &= ~GPIO_CRL_MODE0_0;    //output 2 MHz
 80019ca:	4b93      	ldr	r3, [pc, #588]	; (8001c18 <gpio_init+0x4cc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a92      	ldr	r2, [pc, #584]	; (8001c18 <gpio_init+0x4cc>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_MODE0_1;
 80019d6:	4b90      	ldr	r3, [pc, #576]	; (8001c18 <gpio_init+0x4cc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a8f      	ldr	r2, [pc, #572]	; (8001c18 <gpio_init+0x4cc>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF0;       //output push-pull
 80019e2:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <gpio_init+0x4cc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a8c      	ldr	r2, [pc, #560]	; (8001c18 <gpio_init+0x4cc>)
 80019e8:	f023 030c 	bic.w	r3, r3, #12
 80019ec:	6013      	str	r3, [r2, #0]
    
    //PB1 - Green LED
    GPIOB->CRL &= ~GPIO_CRL_MODE1_0;    //output 2 MHz
 80019ee:	4b8a      	ldr	r3, [pc, #552]	; (8001c18 <gpio_init+0x4cc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a89      	ldr	r2, [pc, #548]	; (8001c18 <gpio_init+0x4cc>)
 80019f4:	f023 0310 	bic.w	r3, r3, #16
 80019f8:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_MODE1_1;
 80019fa:	4b87      	ldr	r3, [pc, #540]	; (8001c18 <gpio_init+0x4cc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a86      	ldr	r2, [pc, #536]	; (8001c18 <gpio_init+0x4cc>)
 8001a00:	f043 0320 	orr.w	r3, r3, #32
 8001a04:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF1;       //output push-pull
 8001a06:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <gpio_init+0x4cc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a83      	ldr	r2, [pc, #524]	; (8001c18 <gpio_init+0x4cc>)
 8001a0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a10:	6013      	str	r3, [r2, #0]
    
    //PB3 - SCK (SI4463)
    GPIOB->CRL &= ~GPIO_CRL_MODE3_0;    //output 2 MHz
 8001a12:	4b81      	ldr	r3, [pc, #516]	; (8001c18 <gpio_init+0x4cc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a80      	ldr	r2, [pc, #512]	; (8001c18 <gpio_init+0x4cc>)
 8001a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a1c:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_MODE3_1;
 8001a1e:	4b7e      	ldr	r3, [pc, #504]	; (8001c18 <gpio_init+0x4cc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a7d      	ldr	r2, [pc, #500]	; (8001c18 <gpio_init+0x4cc>)
 8001a24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a28:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF3_0;     //alternate output push-pull
 8001a2a:	4b7b      	ldr	r3, [pc, #492]	; (8001c18 <gpio_init+0x4cc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7a      	ldr	r2, [pc, #488]	; (8001c18 <gpio_init+0x4cc>)
 8001a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a34:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_CNF3_1;
 8001a36:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <gpio_init+0x4cc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a77      	ldr	r2, [pc, #476]	; (8001c18 <gpio_init+0x4cc>)
 8001a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a40:	6013      	str	r3, [r2, #0]
    
    //PB4 - MISO (SI4463)
    GPIOB->CRL &= ~GPIO_CRL_MODE4;      //input mode
 8001a42:	4b75      	ldr	r3, [pc, #468]	; (8001c18 <gpio_init+0x4cc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a74      	ldr	r2, [pc, #464]	; (8001c18 <gpio_init+0x4cc>)
 8001a48:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a4c:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_CNF4_0;      //floating input
 8001a4e:	4b72      	ldr	r3, [pc, #456]	; (8001c18 <gpio_init+0x4cc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a71      	ldr	r2, [pc, #452]	; (8001c18 <gpio_init+0x4cc>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF4_1;
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <gpio_init+0x4cc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6e      	ldr	r2, [pc, #440]	; (8001c18 <gpio_init+0x4cc>)
 8001a60:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001a64:	6013      	str	r3, [r2, #0]
    
    //PB5 - MOSI (SI4463)
    GPIOB->CRL &= ~GPIO_CRL_MODE5_0;    //output 2 MHz
 8001a66:	4b6c      	ldr	r3, [pc, #432]	; (8001c18 <gpio_init+0x4cc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6b      	ldr	r2, [pc, #428]	; (8001c18 <gpio_init+0x4cc>)
 8001a6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a70:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_MODE5_1;
 8001a72:	4b69      	ldr	r3, [pc, #420]	; (8001c18 <gpio_init+0x4cc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a68      	ldr	r2, [pc, #416]	; (8001c18 <gpio_init+0x4cc>)
 8001a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a7c:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF5_0;     //alternate output push-pull
 8001a7e:	4b66      	ldr	r3, [pc, #408]	; (8001c18 <gpio_init+0x4cc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a65      	ldr	r2, [pc, #404]	; (8001c18 <gpio_init+0x4cc>)
 8001a84:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a88:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_CNF5_1;
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <gpio_init+0x4cc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a62      	ldr	r2, [pc, #392]	; (8001c18 <gpio_init+0x4cc>)
 8001a90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a94:	6013      	str	r3, [r2, #0]
    
    //PB6 - IRQn (SI4463 interrupt)
    GPIOB->CRL &= ~GPIO_CRL_MODE6;      //input mode
 8001a96:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <gpio_init+0x4cc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a5f      	ldr	r2, [pc, #380]	; (8001c18 <gpio_init+0x4cc>)
 8001a9c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001aa0:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF6_0;     //input with pull
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <gpio_init+0x4cc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a5c      	ldr	r2, [pc, #368]	; (8001c18 <gpio_init+0x4cc>)
 8001aa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001aac:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_CNF6_1;
 8001aae:	4b5a      	ldr	r3, [pc, #360]	; (8001c18 <gpio_init+0x4cc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a59      	ldr	r2, [pc, #356]	; (8001c18 <gpio_init+0x4cc>)
 8001ab4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ab8:	6013      	str	r3, [r2, #0]
    GPIOB->ODR |= GPIO_ODR_ODR6;        //pull-up
 8001aba:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <gpio_init+0x4cc>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4a56      	ldr	r2, [pc, #344]	; (8001c18 <gpio_init+0x4cc>)
 8001ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac4:	60d3      	str	r3, [r2, #12]
    
    //PB7 - SDN (SI4463)
    GPIOB->CRL &= ~GPIO_CRL_MODE7_0;    //output 2 MHz
 8001ac6:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <gpio_init+0x4cc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a53      	ldr	r2, [pc, #332]	; (8001c18 <gpio_init+0x4cc>)
 8001acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= GPIO_CRL_MODE7_1;
 8001ad2:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <gpio_init+0x4cc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a50      	ldr	r2, [pc, #320]	; (8001c18 <gpio_init+0x4cc>)
 8001ad8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001adc:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= ~GPIO_CRL_CNF7;       //output push-pull
 8001ade:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <gpio_init+0x4cc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a4d      	ldr	r2, [pc, #308]	; (8001c18 <gpio_init+0x4cc>)
 8001ae4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001ae8:	6013      	str	r3, [r2, #0]
    
    //PB10 - I2C SCL
    GPIOB->CRH &= ~GPIO_CRH_MODE10_0;   //output 2 MHz
 8001aea:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <gpio_init+0x4cc>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4a4a      	ldr	r2, [pc, #296]	; (8001c18 <gpio_init+0x4cc>)
 8001af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af4:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_MODE10_1;
 8001af6:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <gpio_init+0x4cc>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4a47      	ldr	r2, [pc, #284]	; (8001c18 <gpio_init+0x4cc>)
 8001afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b00:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_CNF10;       //alternate function open-drain
 8001b02:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <gpio_init+0x4cc>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a44      	ldr	r2, [pc, #272]	; (8001c18 <gpio_init+0x4cc>)
 8001b08:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001b0c:	6053      	str	r3, [r2, #4]
    
    //PB11 - I2C SDA
    GPIOB->CRH &= ~GPIO_CRH_MODE11_0;   //output 2 MHz
 8001b0e:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <gpio_init+0x4cc>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4a41      	ldr	r2, [pc, #260]	; (8001c18 <gpio_init+0x4cc>)
 8001b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b18:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_MODE11_1;
 8001b1a:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <gpio_init+0x4cc>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a3e      	ldr	r2, [pc, #248]	; (8001c18 <gpio_init+0x4cc>)
 8001b20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b24:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_CNF11;       //alternate function open-drain
 8001b26:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <gpio_init+0x4cc>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4a3b      	ldr	r2, [pc, #236]	; (8001c18 <gpio_init+0x4cc>)
 8001b2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b30:	6053      	str	r3, [r2, #4]
    
    //PB12 - CS (SSD1306)
    GPIOB->CRH &= ~GPIO_CRH_MODE12_0;   //output 2 MHz
 8001b32:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <gpio_init+0x4cc>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a38      	ldr	r2, [pc, #224]	; (8001c18 <gpio_init+0x4cc>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3c:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_MODE12_1;
 8001b3e:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <gpio_init+0x4cc>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4a35      	ldr	r2, [pc, #212]	; (8001c18 <gpio_init+0x4cc>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~GPIO_CRH_CNF12;      //output push-pull
 8001b4a:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <gpio_init+0x4cc>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4a32      	ldr	r2, [pc, #200]	; (8001c18 <gpio_init+0x4cc>)
 8001b50:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001b54:	6053      	str	r3, [r2, #4]
    
    //PB13 - SCK (SSD1306)
    GPIOB->CRH &= ~GPIO_CRH_MODE13_0;   //output 2 MHz
 8001b56:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <gpio_init+0x4cc>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4a2f      	ldr	r2, [pc, #188]	; (8001c18 <gpio_init+0x4cc>)
 8001b5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b60:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_MODE13_1;
 8001b62:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <gpio_init+0x4cc>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4a2c      	ldr	r2, [pc, #176]	; (8001c18 <gpio_init+0x4cc>)
 8001b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b6c:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~GPIO_CRH_CNF13_0;    //alternate output push-pull
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <gpio_init+0x4cc>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4a29      	ldr	r2, [pc, #164]	; (8001c18 <gpio_init+0x4cc>)
 8001b74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b78:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_CNF13_1;
 8001b7a:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <gpio_init+0x4cc>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4a26      	ldr	r2, [pc, #152]	; (8001c18 <gpio_init+0x4cc>)
 8001b80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b84:	6053      	str	r3, [r2, #4]
    
    //PB14 - D/C (SSD1306)
    GPIOB->CRH &= ~GPIO_CRH_MODE14_0;   //output 2 MHz
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <gpio_init+0x4cc>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <gpio_init+0x4cc>)
 8001b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b90:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_MODE14_1;
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <gpio_init+0x4cc>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4a20      	ldr	r2, [pc, #128]	; (8001c18 <gpio_init+0x4cc>)
 8001b98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~GPIO_CRH_CNF14;      //output push-pull
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <gpio_init+0x4cc>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <gpio_init+0x4cc>)
 8001ba4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001ba8:	6053      	str	r3, [r2, #4]
    
    //PB15 - MOSI (SSD1306)
    GPIOB->CRH &= ~GPIO_CRH_MODE15_0;   //output 2 MHz
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <gpio_init+0x4cc>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4a1a      	ldr	r2, [pc, #104]	; (8001c18 <gpio_init+0x4cc>)
 8001bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_MODE15_1;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <gpio_init+0x4cc>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <gpio_init+0x4cc>)
 8001bbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bc0:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~GPIO_CRH_CNF15_0;    //alternate output push-pull
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <gpio_init+0x4cc>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <gpio_init+0x4cc>)
 8001bc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bcc:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_CNF15_1;
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <gpio_init+0x4cc>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <gpio_init+0x4cc>)
 8001bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bd8:	6053      	str	r3, [r2, #4]
    
    

    //Port C																	//todo: disable whole port C to lower power consumption
    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <gpio_init+0x4c8>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <gpio_init+0x4c8>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	6193      	str	r3, [r2, #24]
    
    //PC13 - Blue led
    GPIOC->CRH &= ~GPIO_CRH_MODE13_0;   //output 2 MHz
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <gpio_init+0x4d0>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <gpio_init+0x4d0>)
 8001bec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001bf0:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= GPIO_CRH_MODE13_1;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <gpio_init+0x4d0>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <gpio_init+0x4d0>)
 8001bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfc:	6053      	str	r3, [r2, #4]
    GPIOC->CRH &= ~GPIO_CRH_CNF13;      //output push-pull
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <gpio_init+0x4d0>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <gpio_init+0x4d0>)
 8001c04:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001c08:	6053      	str	r3, [r2, #4]
    led_board_off();
 8001c0a:	f000 f877 	bl	8001cfc <led_board_off>
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40010c00 	.word	0x40010c00
 8001c1c:	40011000 	.word	0x40011000

08001c20 <ext_int_init>:



//Init external interrupts
void ext_int_init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;         //enable afio clock
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <ext_int_init+0x6c>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <ext_int_init+0x6c>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6193      	str	r3, [r2, #24]
    
    //PA11 GPS PPS interrupt on rising edge
    AFIO->EXTICR[2] |= AFIO_EXTICR3_EXTI11_PA;  //exti 11 source is port A
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <ext_int_init+0x70>)
 8001c32:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <ext_int_init+0x70>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	6113      	str	r3, [r2, #16]
    EXTI->RTSR |= EXTI_RTSR_TR11;               //interrupt 11 on rising edge
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <ext_int_init+0x74>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <ext_int_init+0x74>)
 8001c3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c42:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= EXTI_IMR_MR11;                 //unmask interrupt 11
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <ext_int_init+0x74>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <ext_int_init+0x74>)
 8001c4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c4e:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(EXTI15_10_IRQn);             //enable interrupt
 8001c50:	2028      	movs	r0, #40	; 0x28
 8001c52:	f7ff fd63 	bl	800171c <NVIC_EnableIRQ>
    
    //PB6 SI4463 RX interrupt on falling edge
    AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI6_PB;   //exti 6 source is port B
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <ext_int_init+0x70>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <ext_int_init+0x70>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	60d3      	str	r3, [r2, #12]
    EXTI->FTSR |= EXTI_FTSR_TR6;                //interrupt 6 on falling edge
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <ext_int_init+0x74>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <ext_int_init+0x74>)
 8001c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6c:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= EXTI_IMR_MR6;                  //unmask interrupt 6
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <ext_int_init+0x74>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <ext_int_init+0x74>)
 8001c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c78:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(EXTI9_5_IRQn);               //enable interrupt
 8001c7a:	2017      	movs	r0, #23
 8001c7c:	f7ff fd4e 	bl	800171c <NVIC_EnableIRQ>
    
    EXTI->PR = (uint32_t)0x0007FFFF;            //clear all pending interrupts
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <ext_int_init+0x74>)
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <ext_int_init+0x78>)
 8001c84:	615a      	str	r2, [r3, #20]
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40010000 	.word	0x40010000
 8001c94:	40010400 	.word	0x40010400
 8001c98:	0007ffff 	.word	0x0007ffff

08001c9c <led_red_on>:



//Red led on
void led_red_on(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS0;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <led_red_on+0x14>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	611a      	str	r2, [r3, #16]
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40010c00 	.word	0x40010c00

08001cb4 <led_red_off>:



//Red led off
void led_red_off(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR0;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <led_red_off+0x14>)
 8001cba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cbe:	611a      	str	r2, [r3, #16]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40010c00 	.word	0x40010c00

08001ccc <led_green_on>:



//Red green on
void led_green_on(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS1;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <led_green_on+0x14>)
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	611a      	str	r2, [r3, #16]
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40010c00 	.word	0x40010c00

08001ce4 <led_green_off>:



//Red green off
void led_green_off(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR1;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <led_green_off+0x14>)
 8001cea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cee:	611a      	str	r2, [r3, #16]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40010c00 	.word	0x40010c00

08001cfc <led_board_off>:



//Blue led off
void led_board_off(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
    GPIOC->BSRR = GPIO_BSRR_BS13;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <led_board_off+0x14>)
 8001d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d06:	611a      	str	r2, [r3, #16]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40011000 	.word	0x40011000

08001d14 <sdn_si4463_active>:



//SDN SI4463 active
void sdn_si4463_active(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS7;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <sdn_si4463_active+0x14>)
 8001d1a:	2280      	movs	r2, #128	; 0x80
 8001d1c:	611a      	str	r2, [r3, #16]
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40010c00 	.word	0x40010c00

08001d2c <sdn_si4463_inactive>:



//SDN SI4463 inactive
void sdn_si4463_inactive(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR7;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <sdn_si4463_inactive+0x14>)
 8001d32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d36:	611a      	str	r2, [r3, #16]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40010c00 	.word	0x40010c00

08001d44 <cs_si4463_active>:



//CS SI4463 active
void cs_si4463_active(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BR15;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <cs_si4463_active+0x14>)
 8001d4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d4e:	611a      	str	r2, [r3, #16]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	40010800 	.word	0x40010800

08001d5c <cs_si4463_inactive>:



//CS SI4463 inactive
void cs_si4463_inactive(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BS15;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <cs_si4463_inactive+0x14>)
 8001d62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d66:	611a      	str	r2, [r3, #16]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	40010800 	.word	0x40010800

08001d74 <res_ssd1306_active>:



//RES SSD1306 active
void res_ssd1306_active(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BR8;
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <res_ssd1306_active+0x14>)
 8001d7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d7e:	611a      	str	r2, [r3, #16]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	40010800 	.word	0x40010800

08001d8c <res_ssd1306_inactive>:



//RES SSD1306 inactive
void res_ssd1306_inactive(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BS8;
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <res_ssd1306_inactive+0x14>)
 8001d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d96:	611a      	str	r2, [r3, #16]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40010800 	.word	0x40010800

08001da4 <ssd1306_data_mode>:



//Data mode SSD1306
void ssd1306_data_mode(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS14;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <ssd1306_data_mode+0x14>)
 8001daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dae:	611a      	str	r2, [r3, #16]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40010c00 	.word	0x40010c00

08001dbc <ssd1306_command_mode>:



//Command mode SSD1306
void ssd1306_command_mode(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR14;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <ssd1306_command_mode+0x14>)
 8001dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dc6:	611a      	str	r2, [r3, #16]
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	40010c00 	.word	0x40010c00

08001dd4 <cs_ssd1306_active>:



//CS SSD1306 active
void cs_ssd1306_active(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BR12;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <cs_ssd1306_active+0x14>)
 8001dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dde:	611a      	str	r2, [r3, #16]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40010c00 	.word	0x40010c00

08001dec <cs_ssd1306_inactive>:



//CS SSD1306 inactive
void cs_ssd1306_inactive(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
    GPIOB->BSRR = GPIO_BSRR_BS12;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <cs_ssd1306_inactive+0x14>)
 8001df2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df6:	611a      	str	r2, [r3, #16]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	40010c00 	.word	0x40010c00

08001e04 <bat_mon_on>:



//Battery monitoring on
void bat_mon_on(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BS6;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <bat_mon_on+0x14>)
 8001e0a:	2240      	movs	r2, #64	; 0x40
 8001e0c:	611a      	str	r2, [r3, #16]
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40010800 	.word	0x40010800

08001e1c <bat_mon_off>:



//Battery monitoring off
void bat_mon_off(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
    GPIOA->BSRR = GPIO_BSRR_BR6;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <bat_mon_off+0x14>)
 8001e22:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e26:	611a      	str	r2, [r3, #16]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	40010800 	.word	0x40010800

08001e34 <parse_gps>:



//Parse all gps fields all together
uint8_t parse_gps(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	memset(&gps_raw, 0, sizeof(gps_raw));
 8001e38:	226c      	movs	r2, #108	; 0x6c
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4811      	ldr	r0, [pc, #68]	; (8001e84 <parse_gps+0x50>)
 8001e3e:	f008 f846 	bl	8009ece <memset>
	if (parse_RMC() && parse_GGA() && parse_GSA() && parse_GSV())
 8001e42:	f000 f9c3 	bl	80021cc <parse_RMC>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d017      	beq.n	8001e7c <parse_gps+0x48>
 8001e4c:	f000 fa98 	bl	8002380 <parse_GGA>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d012      	beq.n	8001e7c <parse_gps+0x48>
 8001e56:	f000 fb09 	bl	800246c <parse_GSA>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00d      	beq.n	8001e7c <parse_gps+0x48>
 8001e60:	f000 fb7a 	bl	8002558 <parse_GSV>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d008      	beq.n	8001e7c <parse_gps+0x48>
	{
		memset(&gps_num, 0, sizeof(gps_num));
 8001e6a:	2240      	movs	r2, #64	; 0x40
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <parse_gps+0x54>)
 8001e70:	f008 f82d 	bl	8009ece <memset>
		gps_raw_convert_to_numerical();
 8001e74:	f000 f80a 	bl	8001e8c <gps_raw_convert_to_numerical>
		return 1;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <parse_gps+0x4a>
	}
	else
	{
		return 0;
 8001e7c:	2300      	movs	r3, #0
	}
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000588 	.word	0x20000588
 8001e88:	20000138 	.word	0x20000138

08001e8c <gps_raw_convert_to_numerical>:



//Converts gps_raw data (symbols) to gps_num data (numbers) with conversions if needed
void gps_raw_convert_to_numerical(void)
{
 8001e8c:	b598      	push	{r3, r4, r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
    //Time
    tmp_char[0] = gps_raw.time[0];
 8001e90:	4b8b      	ldr	r3, [pc, #556]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	4b8b      	ldr	r3, [pc, #556]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001e96:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.time[1];
 8001e98:	4b89      	ldr	r3, [pc, #548]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001e9a:	785a      	ldrb	r2, [r3, #1]
 8001e9c:	4b89      	ldr	r3, [pc, #548]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001e9e:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001ea0:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	709a      	strb	r2, [r3, #2]
    gps_num.hour = (uint8_t)atoi32(&tmp_char[0]);
 8001ea6:	4887      	ldr	r0, [pc, #540]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001ea8:	f006 fdb2 	bl	8008a10 <atoi32>
 8001eac:	4603      	mov	r3, r0
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b85      	ldr	r3, [pc, #532]	; (80020c8 <gps_raw_convert_to_numerical+0x23c>)
 8001eb2:	701a      	strb	r2, [r3, #0]

    tmp_char[0] = gps_raw.time[2];
 8001eb4:	4b82      	ldr	r3, [pc, #520]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001eb6:	789a      	ldrb	r2, [r3, #2]
 8001eb8:	4b82      	ldr	r3, [pc, #520]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001eba:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.time[3];
 8001ebc:	4b80      	ldr	r3, [pc, #512]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001ebe:	78da      	ldrb	r2, [r3, #3]
 8001ec0:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001ec2:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001ec4:	4b7f      	ldr	r3, [pc, #508]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	709a      	strb	r2, [r3, #2]
    gps_num.minute = (uint8_t)atoi32(&tmp_char[0]);
 8001eca:	487e      	ldr	r0, [pc, #504]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001ecc:	f006 fda0 	bl	8008a10 <atoi32>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b7c      	ldr	r3, [pc, #496]	; (80020c8 <gps_raw_convert_to_numerical+0x23c>)
 8001ed6:	705a      	strb	r2, [r3, #1]

    tmp_char[0] = gps_raw.time[4];
 8001ed8:	4b79      	ldr	r3, [pc, #484]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001eda:	791a      	ldrb	r2, [r3, #4]
 8001edc:	4b79      	ldr	r3, [pc, #484]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001ede:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.time[5];
 8001ee0:	4b77      	ldr	r3, [pc, #476]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001ee2:	795a      	ldrb	r2, [r3, #5]
 8001ee4:	4b77      	ldr	r3, [pc, #476]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001ee6:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001ee8:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	709a      	strb	r2, [r3, #2]
    gps_num.second = (uint8_t)atoi32(&tmp_char[0]);
 8001eee:	4875      	ldr	r0, [pc, #468]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001ef0:	f006 fd8e 	bl	8008a10 <atoi32>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b73      	ldr	r3, [pc, #460]	; (80020c8 <gps_raw_convert_to_numerical+0x23c>)
 8001efa:	709a      	strb	r2, [r3, #2]

    //Date
    tmp_char[0] = gps_raw.date[0];
 8001efc:	4b70      	ldr	r3, [pc, #448]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001efe:	7b1a      	ldrb	r2, [r3, #12]
 8001f00:	4b70      	ldr	r3, [pc, #448]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f02:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.date[1];
 8001f04:	4b6e      	ldr	r3, [pc, #440]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001f06:	7b5a      	ldrb	r2, [r3, #13]
 8001f08:	4b6e      	ldr	r3, [pc, #440]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f0a:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001f0c:	4b6d      	ldr	r3, [pc, #436]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	709a      	strb	r2, [r3, #2]
    gps_num.day = (uint8_t)atoi32(&tmp_char[0]);
 8001f12:	486c      	ldr	r0, [pc, #432]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f14:	f006 fd7c 	bl	8008a10 <atoi32>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <gps_raw_convert_to_numerical+0x23c>)
 8001f1e:	70da      	strb	r2, [r3, #3]

    tmp_char[0] = gps_raw.date[2];
 8001f20:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001f22:	7b9a      	ldrb	r2, [r3, #14]
 8001f24:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f26:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.date[3];
 8001f28:	4b65      	ldr	r3, [pc, #404]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001f2a:	7bda      	ldrb	r2, [r3, #15]
 8001f2c:	4b65      	ldr	r3, [pc, #404]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f2e:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001f30:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	709a      	strb	r2, [r3, #2]
    gps_num.month = (uint8_t)atoi32(&tmp_char[0]);
 8001f36:	4863      	ldr	r0, [pc, #396]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f38:	f006 fd6a 	bl	8008a10 <atoi32>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <gps_raw_convert_to_numerical+0x23c>)
 8001f42:	711a      	strb	r2, [r3, #4]

    tmp_char[0] = gps_raw.date[4];
 8001f44:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001f46:	7c1a      	ldrb	r2, [r3, #16]
 8001f48:	4b5e      	ldr	r3, [pc, #376]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f4a:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.date[5];
 8001f4c:	4b5c      	ldr	r3, [pc, #368]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001f4e:	7c5a      	ldrb	r2, [r3, #17]
 8001f50:	4b5c      	ldr	r3, [pc, #368]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f52:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001f54:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	709a      	strb	r2, [r3, #2]
    gps_num.year = (uint8_t)atoi32(&tmp_char[0]);
 8001f5a:	485a      	ldr	r0, [pc, #360]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f5c:	f006 fd58 	bl	8008a10 <atoi32>
 8001f60:	4603      	mov	r3, r0
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <gps_raw_convert_to_numerical+0x23c>)
 8001f66:	715a      	strb	r2, [r3, #5]

    //Latitude
    tmp_char[0] = gps_raw.latitude[0];
 8001f68:	4b55      	ldr	r3, [pc, #340]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001f6a:	7d5a      	ldrb	r2, [r3, #21]
 8001f6c:	4b55      	ldr	r3, [pc, #340]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f6e:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.latitude[1];
 8001f70:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001f72:	7d9a      	ldrb	r2, [r3, #22]
 8001f74:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f76:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = 0;
 8001f78:	4b52      	ldr	r3, [pc, #328]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	709a      	strb	r2, [r3, #2]
    tmp_uint8 = (uint8_t)atoi32(&tmp_char[0]);          //int part of lat
 8001f7e:	4851      	ldr	r0, [pc, #324]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8001f80:	f006 fd46 	bl	8008a10 <atoi32>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b50      	ldr	r3, [pc, #320]	; (80020cc <gps_raw_convert_to_numerical+0x240>)
 8001f8a:	701a      	strb	r2, [r3, #0]
    tmp_float = atof32(&(gps_raw.latitude[2]));        //frac part of lat
 8001f8c:	4850      	ldr	r0, [pc, #320]	; (80020d0 <gps_raw_convert_to_numerical+0x244>)
 8001f8e:	f006 fb9f 	bl	80086d0 <atof32>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 8001f96:	601a      	str	r2, [r3, #0]

    tmp_float /= 60.0;                                  //convert ddmm.mmmm to dd.dddddd
 8001f98:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	494e      	ldr	r1, [pc, #312]	; (80020d8 <gps_raw_convert_to_numerical+0x24c>)
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe ffac 	bl	8000efc <__aeabi_fdiv>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 8001faa:	601a      	str	r2, [r3, #0]
    tmp_float += tmp_uint8;
 8001fac:	4b47      	ldr	r3, [pc, #284]	; (80020cc <gps_raw_convert_to_numerical+0x240>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fe9b 	bl	8000cec <__aeabi_i2f>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f7fe fde0 	bl	8000b84 <__addsf3>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b42      	ldr	r3, [pc, #264]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 8001fca:	601a      	str	r2, [r3, #0]

    if (gps_raw.ns[0] == 'S')
 8001fcc:	4b3c      	ldr	r3, [pc, #240]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8001fce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fd2:	2b53      	cmp	r3, #83	; 0x53
 8001fd4:	d110      	bne.n	8001ff8 <gps_raw_convert_to_numerical+0x16c>
    {
        gps_num.latitude.in_deg = tmp_float * -1.0;    //negative (southern) latitudes
 8001fd6:	4b3f      	ldr	r3, [pc, #252]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fa2c 	bl	8000438 <__aeabi_f2d>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	460c      	mov	r4, r1
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	f7fe fd76 	bl	8000ad8 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ff2:	4a35      	ldr	r2, [pc, #212]	; (80020c8 <gps_raw_convert_to_numerical+0x23c>)
 8001ff4:	6093      	str	r3, [r2, #8]
 8001ff6:	e003      	b.n	8002000 <gps_raw_convert_to_numerical+0x174>
    }
    else
    {
        gps_num.latitude.in_deg = tmp_float;
 8001ff8:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a32      	ldr	r2, [pc, #200]	; (80020c8 <gps_raw_convert_to_numerical+0x23c>)
 8001ffe:	6093      	str	r3, [r2, #8]
    }

    gps_num.latitude.in_rad = gps_num.latitude.in_deg * deg_to_rad;
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <gps_raw_convert_to_numerical+0x23c>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa17 	bl	8000438 <__aeabi_f2d>
 800200a:	4b34      	ldr	r3, [pc, #208]	; (80020dc <gps_raw_convert_to_numerical+0x250>)
 800200c:	cb18      	ldmia	r3, {r3, r4}
 800200e:	461a      	mov	r2, r3
 8002010:	4623      	mov	r3, r4
 8002012:	f7fe fa69 	bl	80004e8 <__aeabi_dmul>
 8002016:	4603      	mov	r3, r0
 8002018:	460c      	mov	r4, r1
 800201a:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <gps_raw_convert_to_numerical+0x23c>)
 800201c:	e9c2 3404 	strd	r3, r4, [r2, #16]

    //Longitude
    tmp_char[0] = gps_raw.longitude[0];
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8002022:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8002028:	701a      	strb	r2, [r3, #0]
    tmp_char[1] = gps_raw.longitude[1];
 800202a:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 800202c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8002032:	705a      	strb	r2, [r3, #1]
    tmp_char[2] = gps_raw.longitude[2];
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8002036:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 800203c:	709a      	strb	r2, [r3, #2]
    tmp_char[3] = 0;
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8002040:	2200      	movs	r2, #0
 8002042:	70da      	strb	r2, [r3, #3]
    tmp_uint8 = (uint8_t)atoi32(&tmp_char[0]);          //int part of lon
 8002044:	481f      	ldr	r0, [pc, #124]	; (80020c4 <gps_raw_convert_to_numerical+0x238>)
 8002046:	f006 fce3 	bl	8008a10 <atoi32>
 800204a:	4603      	mov	r3, r0
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <gps_raw_convert_to_numerical+0x240>)
 8002050:	701a      	strb	r2, [r3, #0]
    tmp_float = atof32(&(gps_raw.longitude[3]));       //frac part of lon
 8002052:	4823      	ldr	r0, [pc, #140]	; (80020e0 <gps_raw_convert_to_numerical+0x254>)
 8002054:	f006 fb3c 	bl	80086d0 <atof32>
 8002058:	4602      	mov	r2, r0
 800205a:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 800205c:	601a      	str	r2, [r3, #0]

    tmp_float /= 60.0;                                  //convert dddmm.mmmm to ddd.dddddd
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	491d      	ldr	r1, [pc, #116]	; (80020d8 <gps_raw_convert_to_numerical+0x24c>)
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe ff49 	bl	8000efc <__aeabi_fdiv>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 8002070:	601a      	str	r2, [r3, #0]
    tmp_float += tmp_uint8;
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <gps_raw_convert_to_numerical+0x240>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fe38 	bl	8000cec <__aeabi_i2f>
 800207c:	4602      	mov	r2, r0
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4619      	mov	r1, r3
 8002084:	4610      	mov	r0, r2
 8002086:	f7fe fd7d 	bl	8000b84 <__addsf3>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 8002090:	601a      	str	r2, [r3, #0]

    if (gps_raw.ew[0] == 'W')
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <gps_raw_convert_to_numerical+0x234>)
 8002094:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002098:	2b57      	cmp	r3, #87	; 0x57
 800209a:	d123      	bne.n	80020e4 <gps_raw_convert_to_numerical+0x258>
    {
        gps_num.longitude.in_deg = tmp_float * -1.0;   //negative (western) longitudes
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <gps_raw_convert_to_numerical+0x248>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f9c9 	bl	8000438 <__aeabi_f2d>
 80020a6:	4603      	mov	r3, r0
 80020a8:	460c      	mov	r4, r1
 80020aa:	4618      	mov	r0, r3
 80020ac:	4621      	mov	r1, r4
 80020ae:	f7fe fd13 	bl	8000ad8 <__aeabi_d2f>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020b8:	4a03      	ldr	r2, [pc, #12]	; (80020c8 <gps_raw_convert_to_numerical+0x23c>)
 80020ba:	6193      	str	r3, [r2, #24]
 80020bc:	e016      	b.n	80020ec <gps_raw_convert_to_numerical+0x260>
 80020be:	bf00      	nop
 80020c0:	20000588 	.word	0x20000588
 80020c4:	20000178 	.word	0x20000178
 80020c8:	20000138 	.word	0x20000138
 80020cc:	200005f4 	.word	0x200005f4
 80020d0:	2000059f 	.word	0x2000059f
 80020d4:	20000130 	.word	0x20000130
 80020d8:	42700000 	.word	0x42700000
 80020dc:	0800d4a8 	.word	0x0800d4a8
 80020e0:	200005b0 	.word	0x200005b0
    }
    else
    {
        gps_num.longitude.in_deg = tmp_float;
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <gps_raw_convert_to_numerical+0x310>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2d      	ldr	r2, [pc, #180]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 80020ea:	6193      	str	r3, [r2, #24]
    }

    gps_num.longitude.in_rad = gps_num.longitude.in_deg * deg_to_rad;
 80020ec:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f9a1 	bl	8000438 <__aeabi_f2d>
 80020f6:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <gps_raw_convert_to_numerical+0x318>)
 80020f8:	cb18      	ldmia	r3, {r3, r4}
 80020fa:	461a      	mov	r2, r3
 80020fc:	4623      	mov	r3, r4
 80020fe:	f7fe f9f3 	bl	80004e8 <__aeabi_dmul>
 8002102:	4603      	mov	r3, r0
 8002104:	460c      	mov	r4, r1
 8002106:	4a26      	ldr	r2, [pc, #152]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 8002108:	e9c2 3408 	strd	r3, r4, [r2, #32]

    //Speed
    gps_num.speed = atof32(&(gps_raw.speed[0])) * knots_to_kph;
 800210c:	4826      	ldr	r0, [pc, #152]	; (80021a8 <gps_raw_convert_to_numerical+0x31c>)
 800210e:	f006 fadf 	bl	80086d0 <atof32>
 8002112:	4602      	mov	r2, r0
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <gps_raw_convert_to_numerical+0x320>)
 8002116:	4619      	mov	r1, r3
 8002118:	4610      	mov	r0, r2
 800211a:	f7fe fe3b 	bl	8000d94 <__aeabi_fmul>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 8002124:	629a      	str	r2, [r3, #40]	; 0x28

    //Course
    gps_num.course = atof32(&(gps_raw.course[0]));
 8002126:	4822      	ldr	r0, [pc, #136]	; (80021b0 <gps_raw_convert_to_numerical+0x324>)
 8002128:	f006 fad2 	bl	80086d0 <atof32>
 800212c:	4602      	mov	r2, r0
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c

    //Altitude
    gps_num.altitude = atof32(&(gps_raw.altitude[0]));
 8002132:	4820      	ldr	r0, [pc, #128]	; (80021b4 <gps_raw_convert_to_numerical+0x328>)
 8002134:	f006 facc 	bl	80086d0 <atof32>
 8002138:	4602      	mov	r2, r0
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 800213c:	631a      	str	r2, [r3, #48]	; 0x30

    //Satellites
    gps_num.sat_view = (uint8_t)atoi32(&(gps_raw.sat_view[0]));
 800213e:	481e      	ldr	r0, [pc, #120]	; (80021b8 <gps_raw_convert_to_numerical+0x32c>)
 8002140:	f006 fc66 	bl	8008a10 <atoi32>
 8002144:	4603      	mov	r3, r0
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 800214a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    gps_num.sat_used = (uint8_t)atoi32(&(gps_raw.sat_used[0]));
 800214e:	481b      	ldr	r0, [pc, #108]	; (80021bc <gps_raw_convert_to_numerical+0x330>)
 8002150:	f006 fc5e 	bl	8008a10 <atoi32>
 8002154:	4603      	mov	r3, r0
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    //Status, Mode, PDOP
    if (gps_raw.status[0] == 'A')
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <gps_raw_convert_to_numerical+0x334>)
 8002160:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002164:	2b41      	cmp	r3, #65	; 0x41
 8002166:	d104      	bne.n	8002172 <gps_raw_convert_to_numerical+0x2e6>
    {
        gps_num.status = GPS_DATA_VALID;
 8002168:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8002170:	e003      	b.n	800217a <gps_raw_convert_to_numerical+0x2ee>
    }
    else
    {
        gps_num.status = GPS_DATA_INVALID;
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }

    gps_num.mode = (uint8_t)atoi32(&(gps_raw.mode[0]));
 800217a:	4812      	ldr	r0, [pc, #72]	; (80021c4 <gps_raw_convert_to_numerical+0x338>)
 800217c:	f006 fc48 	bl	8008a10 <atoi32>
 8002180:	4603      	mov	r3, r0
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 8002186:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

    gps_num.pdop = atof32(&(gps_raw.pdop[0]));
 800218a:	480f      	ldr	r0, [pc, #60]	; (80021c8 <gps_raw_convert_to_numerical+0x33c>)
 800218c:	f006 faa0 	bl	80086d0 <atof32>
 8002190:	4602      	mov	r2, r0
 8002192:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <gps_raw_convert_to_numerical+0x314>)
 8002194:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002196:	bf00      	nop
 8002198:	bd98      	pop	{r3, r4, r7, pc}
 800219a:	bf00      	nop
 800219c:	20000130 	.word	0x20000130
 80021a0:	20000138 	.word	0x20000138
 80021a4:	0800d4a8 	.word	0x0800d4a8
 80021a8:	200005be 	.word	0x200005be
 80021ac:	3fed0e56 	.word	0x3fed0e56
 80021b0:	200005c8 	.word	0x200005c8
 80021b4:	200005d4 	.word	0x200005d4
 80021b8:	200005de 	.word	0x200005de
 80021bc:	200005e3 	.word	0x200005e3
 80021c0:	20000588 	.word	0x20000588
 80021c4:	200005e8 	.word	0x200005e8
 80021c8:	200005ec 	.word	0x200005ec

080021cc <parse_RMC>:



//Parse RMC sentence
uint8_t parse_RMC(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
    uint8_t comma = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	71fb      	strb	r3, [r7, #7]
    uint8_t sym = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	71bb      	strb	r3, [r7, #6]
    uint16_t pos = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	80bb      	strh	r3, [r7, #4]
    
    while (!((nmea_data[pos] == '$') &&
 80021de:	e002      	b.n	80021e6 <parse_RMC+0x1a>
            (nmea_data[pos + 3] == 'R') &&
            (nmea_data[pos + 4] == 'M') &&
            (nmea_data[pos + 5] == 'C')) && pos < UART_BUF_LEN)      //search for start pos
    {
    pos++;
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	3301      	adds	r3, #1
 80021e4:	80bb      	strh	r3, [r7, #4]
    while (!((nmea_data[pos] == '$') &&
 80021e6:	88bb      	ldrh	r3, [r7, #4]
 80021e8:	4a63      	ldr	r2, [pc, #396]	; (8002378 <parse_RMC+0x1ac>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	2b24      	cmp	r3, #36	; 0x24
 80021ee:	d111      	bne.n	8002214 <parse_RMC+0x48>
            (nmea_data[pos + 3] == 'R') &&
 80021f0:	88bb      	ldrh	r3, [r7, #4]
 80021f2:	3303      	adds	r3, #3
 80021f4:	4a60      	ldr	r2, [pc, #384]	; (8002378 <parse_RMC+0x1ac>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 80021f8:	2b52      	cmp	r3, #82	; 0x52
 80021fa:	d10b      	bne.n	8002214 <parse_RMC+0x48>
            (nmea_data[pos + 4] == 'M') &&
 80021fc:	88bb      	ldrh	r3, [r7, #4]
 80021fe:	3304      	adds	r3, #4
 8002200:	4a5d      	ldr	r2, [pc, #372]	; (8002378 <parse_RMC+0x1ac>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
            (nmea_data[pos + 3] == 'R') &&
 8002204:	2b4d      	cmp	r3, #77	; 0x4d
 8002206:	d105      	bne.n	8002214 <parse_RMC+0x48>
            (nmea_data[pos + 5] == 'C')) && pos < UART_BUF_LEN)      //search for start pos
 8002208:	88bb      	ldrh	r3, [r7, #4]
 800220a:	3305      	adds	r3, #5
 800220c:	4a5a      	ldr	r2, [pc, #360]	; (8002378 <parse_RMC+0x1ac>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 8002210:	2b43      	cmp	r3, #67	; 0x43
 8002212:	d003      	beq.n	800221c <parse_RMC+0x50>
            (nmea_data[pos + 5] == 'C')) && pos < UART_BUF_LEN)      //search for start pos
 8002214:	88bb      	ldrh	r3, [r7, #4]
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d3e1      	bcc.n	80021e0 <parse_RMC+0x14>
    }
    
    if(nmea_checksum(pos) == 0)
 800221c:	88bb      	ldrh	r3, [r7, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fa02 	bl	8002628 <nmea_checksum>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <parse_RMC+0x62>
    {
        return 0;           //checksum error
 800222a:	2300      	movs	r3, #0
 800222c:	e0a0      	b.n	8002370 <parse_RMC+0x1a4>
    }
    
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 800222e:	88bb      	ldrh	r3, [r7, #4]
 8002230:	3306      	adds	r3, #6
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	e096      	b.n	8002364 <parse_RMC+0x198>
    {
        if (nmea_data[i] == '*') return 1;       //end of the sentence
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	4a4f      	ldr	r2, [pc, #316]	; (8002378 <parse_RMC+0x1ac>)
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	2b2a      	cmp	r3, #42	; 0x2a
 800223e:	d101      	bne.n	8002244 <parse_RMC+0x78>
 8002240:	2301      	movs	r3, #1
 8002242:	e095      	b.n	8002370 <parse_RMC+0x1a4>
        
        if (nmea_data[i] == ',')
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	4a4c      	ldr	r2, [pc, #304]	; (8002378 <parse_RMC+0x1ac>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	2b2c      	cmp	r3, #44	; 0x2c
 800224c:	d105      	bne.n	800225a <parse_RMC+0x8e>
        {
            comma++;        //increase comma counter
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	3301      	adds	r3, #1
 8002252:	71fb      	strb	r3, [r7, #7]
            sym = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	71bb      	strb	r3, [r7, #6]
 8002258:	e081      	b.n	800235e <parse_RMC+0x192>
        }
        else
        {
            switch (comma)  //surfing through RMC data fields
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	3b01      	subs	r3, #1
 800225e:	2b08      	cmp	r3, #8
 8002260:	d87c      	bhi.n	800235c <parse_RMC+0x190>
 8002262:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <parse_RMC+0x9c>)
 8002264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002268:	0800228d 	.word	0x0800228d
 800226c:	080022a1 	.word	0x080022a1
 8002270:	080022b9 	.word	0x080022b9
 8002274:	080022cf 	.word	0x080022cf
 8002278:	080022e7 	.word	0x080022e7
 800227c:	080022ff 	.word	0x080022ff
 8002280:	08002317 	.word	0x08002317
 8002284:	0800232f 	.word	0x0800232f
 8002288:	08002347 	.word	0x08002347
            {
                case 1:
                    gps_raw.time[sym++] = nmea_data[i];
 800228c:	887a      	ldrh	r2, [r7, #2]
 800228e:	79bb      	ldrb	r3, [r7, #6]
 8002290:	1c59      	adds	r1, r3, #1
 8002292:	71b9      	strb	r1, [r7, #6]
 8002294:	4619      	mov	r1, r3
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <parse_RMC+0x1ac>)
 8002298:	5c9a      	ldrb	r2, [r3, r2]
 800229a:	4b38      	ldr	r3, [pc, #224]	; (800237c <parse_RMC+0x1b0>)
 800229c:	545a      	strb	r2, [r3, r1]
                    break;
 800229e:	e05e      	b.n	800235e <parse_RMC+0x192>
                case 2:
                    gps_raw.status[sym++] = nmea_data[i];
 80022a0:	887a      	ldrh	r2, [r7, #2]
 80022a2:	79bb      	ldrb	r3, [r7, #6]
 80022a4:	1c59      	adds	r1, r3, #1
 80022a6:	71b9      	strb	r1, [r7, #6]
 80022a8:	4619      	mov	r1, r3
 80022aa:	4b33      	ldr	r3, [pc, #204]	; (8002378 <parse_RMC+0x1ac>)
 80022ac:	5c9a      	ldrb	r2, [r3, r2]
 80022ae:	4b33      	ldr	r3, [pc, #204]	; (800237c <parse_RMC+0x1b0>)
 80022b0:	440b      	add	r3, r1
 80022b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    break;
 80022b6:	e052      	b.n	800235e <parse_RMC+0x192>
                case 3:
                    gps_raw.latitude[sym++] = nmea_data[i];
 80022b8:	887a      	ldrh	r2, [r7, #2]
 80022ba:	79bb      	ldrb	r3, [r7, #6]
 80022bc:	1c59      	adds	r1, r3, #1
 80022be:	71b9      	strb	r1, [r7, #6]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <parse_RMC+0x1ac>)
 80022c4:	5c9a      	ldrb	r2, [r3, r2]
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <parse_RMC+0x1b0>)
 80022c8:	440b      	add	r3, r1
 80022ca:	755a      	strb	r2, [r3, #21]
                    break;
 80022cc:	e047      	b.n	800235e <parse_RMC+0x192>
                case 4:
                    gps_raw.ns[sym++] = nmea_data[i];
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	79bb      	ldrb	r3, [r7, #6]
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	71b9      	strb	r1, [r7, #6]
 80022d6:	4619      	mov	r1, r3
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <parse_RMC+0x1ac>)
 80022da:	5c9a      	ldrb	r2, [r3, r2]
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <parse_RMC+0x1b0>)
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    break;
 80022e4:	e03b      	b.n	800235e <parse_RMC+0x192>
                case 5:
                    gps_raw.longitude[sym++] = nmea_data[i];
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	79bb      	ldrb	r3, [r7, #6]
 80022ea:	1c59      	adds	r1, r3, #1
 80022ec:	71b9      	strb	r1, [r7, #6]
 80022ee:	4619      	mov	r1, r3
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <parse_RMC+0x1ac>)
 80022f2:	5c9a      	ldrb	r2, [r3, r2]
 80022f4:	4b21      	ldr	r3, [pc, #132]	; (800237c <parse_RMC+0x1b0>)
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    break;
 80022fc:	e02f      	b.n	800235e <parse_RMC+0x192>
                case 6:
                    gps_raw.ew[sym++] = nmea_data[i];
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	1c59      	adds	r1, r3, #1
 8002304:	71b9      	strb	r1, [r7, #6]
 8002306:	4619      	mov	r1, r3
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <parse_RMC+0x1ac>)
 800230a:	5c9a      	ldrb	r2, [r3, r2]
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <parse_RMC+0x1b0>)
 800230e:	440b      	add	r3, r1
 8002310:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                    break;
 8002314:	e023      	b.n	800235e <parse_RMC+0x192>
                case 7:
                    gps_raw.speed[sym++] = nmea_data[i];
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	79bb      	ldrb	r3, [r7, #6]
 800231a:	1c59      	adds	r1, r3, #1
 800231c:	71b9      	strb	r1, [r7, #6]
 800231e:	4619      	mov	r1, r3
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <parse_RMC+0x1ac>)
 8002322:	5c9a      	ldrb	r2, [r3, r2]
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <parse_RMC+0x1b0>)
 8002326:	440b      	add	r3, r1
 8002328:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                    break;
 800232c:	e017      	b.n	800235e <parse_RMC+0x192>
                case 8:
                    gps_raw.course[sym++] = nmea_data[i];
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	79bb      	ldrb	r3, [r7, #6]
 8002332:	1c59      	adds	r1, r3, #1
 8002334:	71b9      	strb	r1, [r7, #6]
 8002336:	4619      	mov	r1, r3
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <parse_RMC+0x1ac>)
 800233a:	5c9a      	ldrb	r2, [r3, r2]
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <parse_RMC+0x1b0>)
 800233e:	440b      	add	r3, r1
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                    break;
 8002344:	e00b      	b.n	800235e <parse_RMC+0x192>
                case 9:
                    gps_raw.date[sym++] = nmea_data[i];
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	79bb      	ldrb	r3, [r7, #6]
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	71b9      	strb	r1, [r7, #6]
 800234e:	4619      	mov	r1, r3
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <parse_RMC+0x1ac>)
 8002352:	5c9a      	ldrb	r2, [r3, r2]
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <parse_RMC+0x1b0>)
 8002356:	440b      	add	r3, r1
 8002358:	731a      	strb	r2, [r3, #12]
                    break;
 800235a:	e000      	b.n	800235e <parse_RMC+0x192>
                default:
                    break;
 800235c:	bf00      	nop
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	3301      	adds	r3, #1
 8002362:	807b      	strh	r3, [r7, #2]
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236a:	f4ff af64 	bcc.w	8002236 <parse_RMC+0x6a>
            }
        }
    }
    return 1;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000188 	.word	0x20000188
 800237c:	20000588 	.word	0x20000588

08002380 <parse_GGA>:



//Parse GGA sentence
uint8_t parse_GGA(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
    uint8_t comma = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	71fb      	strb	r3, [r7, #7]
    uint8_t sym = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	71bb      	strb	r3, [r7, #6]
    uint16_t pos = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	80bb      	strh	r3, [r7, #4]
    
    while (!((nmea_data[pos] == '$') &&
 8002392:	e002      	b.n	800239a <parse_GGA+0x1a>
            (nmea_data[pos + 3] == 'G') &&
            (nmea_data[pos + 4] == 'G') &&
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
    {
    pos++;
 8002394:	88bb      	ldrh	r3, [r7, #4]
 8002396:	3301      	adds	r3, #1
 8002398:	80bb      	strh	r3, [r7, #4]
    while (!((nmea_data[pos] == '$') &&
 800239a:	88bb      	ldrh	r3, [r7, #4]
 800239c:	4a31      	ldr	r2, [pc, #196]	; (8002464 <parse_GGA+0xe4>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	2b24      	cmp	r3, #36	; 0x24
 80023a2:	d111      	bne.n	80023c8 <parse_GGA+0x48>
            (nmea_data[pos + 3] == 'G') &&
 80023a4:	88bb      	ldrh	r3, [r7, #4]
 80023a6:	3303      	adds	r3, #3
 80023a8:	4a2e      	ldr	r2, [pc, #184]	; (8002464 <parse_GGA+0xe4>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 80023ac:	2b47      	cmp	r3, #71	; 0x47
 80023ae:	d10b      	bne.n	80023c8 <parse_GGA+0x48>
            (nmea_data[pos + 4] == 'G') &&
 80023b0:	88bb      	ldrh	r3, [r7, #4]
 80023b2:	3304      	adds	r3, #4
 80023b4:	4a2b      	ldr	r2, [pc, #172]	; (8002464 <parse_GGA+0xe4>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
            (nmea_data[pos + 3] == 'G') &&
 80023b8:	2b47      	cmp	r3, #71	; 0x47
 80023ba:	d105      	bne.n	80023c8 <parse_GGA+0x48>
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
 80023bc:	88bb      	ldrh	r3, [r7, #4]
 80023be:	3305      	adds	r3, #5
 80023c0:	4a28      	ldr	r2, [pc, #160]	; (8002464 <parse_GGA+0xe4>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 80023c4:	2b41      	cmp	r3, #65	; 0x41
 80023c6:	d003      	beq.n	80023d0 <parse_GGA+0x50>
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
 80023c8:	88bb      	ldrh	r3, [r7, #4]
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ce:	d3e1      	bcc.n	8002394 <parse_GGA+0x14>
    }
    
    if(nmea_checksum(pos) == 0)
 80023d0:	88bb      	ldrh	r3, [r7, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f928 	bl	8002628 <nmea_checksum>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <parse_GGA+0x62>
    {
        return 0;           //checksum error
 80023de:	2300      	movs	r3, #0
 80023e0:	e03b      	b.n	800245a <parse_GGA+0xda>
    }
    
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 80023e2:	88bb      	ldrh	r3, [r7, #4]
 80023e4:	3306      	adds	r3, #6
 80023e6:	807b      	strh	r3, [r7, #2]
 80023e8:	e032      	b.n	8002450 <parse_GGA+0xd0>
    {
        if (nmea_data[i] == '*') return 1;       //end of the sentence
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <parse_GGA+0xe4>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	2b2a      	cmp	r3, #42	; 0x2a
 80023f2:	d101      	bne.n	80023f8 <parse_GGA+0x78>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e030      	b.n	800245a <parse_GGA+0xda>
        
        if (nmea_data[i] == ',')
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <parse_GGA+0xe4>)
 80023fc:	5cd3      	ldrb	r3, [r2, r3]
 80023fe:	2b2c      	cmp	r3, #44	; 0x2c
 8002400:	d105      	bne.n	800240e <parse_GGA+0x8e>
        {
            comma++;        //increase comma counter
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	3301      	adds	r3, #1
 8002406:	71fb      	strb	r3, [r7, #7]
            sym = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	71bb      	strb	r3, [r7, #6]
 800240c:	e01d      	b.n	800244a <parse_GGA+0xca>
        }
        else
        {
            switch (comma)  //surfing through GGA data fields
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	2b07      	cmp	r3, #7
 8002412:	d002      	beq.n	800241a <parse_GGA+0x9a>
 8002414:	2b09      	cmp	r3, #9
 8002416:	d00c      	beq.n	8002432 <parse_GGA+0xb2>
                    break;
                case 9:
                    gps_raw.altitude[sym++] = nmea_data[i];
                    break;
                default:
                    break;
 8002418:	e017      	b.n	800244a <parse_GGA+0xca>
                    gps_raw.sat_used[sym++] = nmea_data[i];
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	79bb      	ldrb	r3, [r7, #6]
 800241e:	1c59      	adds	r1, r3, #1
 8002420:	71b9      	strb	r1, [r7, #6]
 8002422:	4619      	mov	r1, r3
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <parse_GGA+0xe4>)
 8002426:	5c9a      	ldrb	r2, [r3, r2]
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <parse_GGA+0xe8>)
 800242a:	440b      	add	r3, r1
 800242c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
                    break;
 8002430:	e00b      	b.n	800244a <parse_GGA+0xca>
                    gps_raw.altitude[sym++] = nmea_data[i];
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	79bb      	ldrb	r3, [r7, #6]
 8002436:	1c59      	adds	r1, r3, #1
 8002438:	71b9      	strb	r1, [r7, #6]
 800243a:	4619      	mov	r1, r3
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <parse_GGA+0xe4>)
 800243e:	5c9a      	ldrb	r2, [r3, r2]
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <parse_GGA+0xe8>)
 8002442:	440b      	add	r3, r1
 8002444:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                    break;
 8002448:	bf00      	nop
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	3301      	adds	r3, #1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002456:	d3c8      	bcc.n	80023ea <parse_GGA+0x6a>
            }
        }
    }
    return 1;
 8002458:	2301      	movs	r3, #1
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000188 	.word	0x20000188
 8002468:	20000588 	.word	0x20000588

0800246c <parse_GSA>:



//Parse GSA sentence
uint8_t parse_GSA(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
    uint8_t comma = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	71fb      	strb	r3, [r7, #7]
    uint8_t sym = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	71bb      	strb	r3, [r7, #6]
    uint16_t pos = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	80bb      	strh	r3, [r7, #4]
    
    while (!((nmea_data[pos] == '$') &&
 800247e:	e002      	b.n	8002486 <parse_GSA+0x1a>
            (nmea_data[pos + 3] == 'G') &&
            (nmea_data[pos + 4] == 'S') &&
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
    {
    pos++;
 8002480:	88bb      	ldrh	r3, [r7, #4]
 8002482:	3301      	adds	r3, #1
 8002484:	80bb      	strh	r3, [r7, #4]
    while (!((nmea_data[pos] == '$') &&
 8002486:	88bb      	ldrh	r3, [r7, #4]
 8002488:	4a31      	ldr	r2, [pc, #196]	; (8002550 <parse_GSA+0xe4>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	2b24      	cmp	r3, #36	; 0x24
 800248e:	d111      	bne.n	80024b4 <parse_GSA+0x48>
            (nmea_data[pos + 3] == 'G') &&
 8002490:	88bb      	ldrh	r3, [r7, #4]
 8002492:	3303      	adds	r3, #3
 8002494:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <parse_GSA+0xe4>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 8002498:	2b47      	cmp	r3, #71	; 0x47
 800249a:	d10b      	bne.n	80024b4 <parse_GSA+0x48>
            (nmea_data[pos + 4] == 'S') &&
 800249c:	88bb      	ldrh	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <parse_GSA+0xe4>)
 80024a2:	5cd3      	ldrb	r3, [r2, r3]
            (nmea_data[pos + 3] == 'G') &&
 80024a4:	2b53      	cmp	r3, #83	; 0x53
 80024a6:	d105      	bne.n	80024b4 <parse_GSA+0x48>
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
 80024a8:	88bb      	ldrh	r3, [r7, #4]
 80024aa:	3305      	adds	r3, #5
 80024ac:	4a28      	ldr	r2, [pc, #160]	; (8002550 <parse_GSA+0xe4>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 80024b0:	2b41      	cmp	r3, #65	; 0x41
 80024b2:	d003      	beq.n	80024bc <parse_GSA+0x50>
            (nmea_data[pos + 5] == 'A')) && pos < UART_BUF_LEN)      //search for start pos
 80024b4:	88bb      	ldrh	r3, [r7, #4]
 80024b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ba:	d3e1      	bcc.n	8002480 <parse_GSA+0x14>
    }
    
    if(nmea_checksum(pos) == 0)
 80024bc:	88bb      	ldrh	r3, [r7, #4]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f8b2 	bl	8002628 <nmea_checksum>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <parse_GSA+0x62>
    {
        return 0;           //checksum error
 80024ca:	2300      	movs	r3, #0
 80024cc:	e03b      	b.n	8002546 <parse_GSA+0xda>
    }
    
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 80024ce:	88bb      	ldrh	r3, [r7, #4]
 80024d0:	3306      	adds	r3, #6
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	e032      	b.n	800253c <parse_GSA+0xd0>
    {
        if (nmea_data[i] == '*') return 1;       //end of the sentence
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <parse_GSA+0xe4>)
 80024da:	5cd3      	ldrb	r3, [r2, r3]
 80024dc:	2b2a      	cmp	r3, #42	; 0x2a
 80024de:	d101      	bne.n	80024e4 <parse_GSA+0x78>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e030      	b.n	8002546 <parse_GSA+0xda>
        
        if (nmea_data[i] == ',')
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <parse_GSA+0xe4>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	2b2c      	cmp	r3, #44	; 0x2c
 80024ec:	d105      	bne.n	80024fa <parse_GSA+0x8e>
        {
            comma++;        //increase comma counter
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	3301      	adds	r3, #1
 80024f2:	71fb      	strb	r3, [r7, #7]
            sym = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	71bb      	strb	r3, [r7, #6]
 80024f8:	e01d      	b.n	8002536 <parse_GSA+0xca>
        }
        else
        {
            switch (comma)  //surfing through GSA data fields
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d002      	beq.n	8002506 <parse_GSA+0x9a>
 8002500:	2b0f      	cmp	r3, #15
 8002502:	d00c      	beq.n	800251e <parse_GSA+0xb2>
                    break;
                case 15:
                    gps_raw.pdop[sym++] = nmea_data[i];
                    break;
                default:
                    break;
 8002504:	e017      	b.n	8002536 <parse_GSA+0xca>
                    gps_raw.mode[sym++] = nmea_data[i];
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	79bb      	ldrb	r3, [r7, #6]
 800250a:	1c59      	adds	r1, r3, #1
 800250c:	71b9      	strb	r1, [r7, #6]
 800250e:	4619      	mov	r1, r3
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <parse_GSA+0xe4>)
 8002512:	5c9a      	ldrb	r2, [r3, r2]
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <parse_GSA+0xe8>)
 8002516:	440b      	add	r3, r1
 8002518:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    break;
 800251c:	e00b      	b.n	8002536 <parse_GSA+0xca>
                    gps_raw.pdop[sym++] = nmea_data[i];
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	79bb      	ldrb	r3, [r7, #6]
 8002522:	1c59      	adds	r1, r3, #1
 8002524:	71b9      	strb	r1, [r7, #6]
 8002526:	4619      	mov	r1, r3
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <parse_GSA+0xe4>)
 800252a:	5c9a      	ldrb	r2, [r3, r2]
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <parse_GSA+0xe8>)
 800252e:	440b      	add	r3, r1
 8002530:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
                    break;
 8002534:	bf00      	nop
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	3301      	adds	r3, #1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002542:	d3c8      	bcc.n	80024d6 <parse_GSA+0x6a>
            }
        }
    }
    return 1;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000188 	.word	0x20000188
 8002554:	20000588 	.word	0x20000588

08002558 <parse_GSV>:



//Parse GSV sentence
uint8_t parse_GSV(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
    uint8_t comma = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	71fb      	strb	r3, [r7, #7]
    uint8_t sym = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	71bb      	strb	r3, [r7, #6]
    uint16_t pos = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	80bb      	strh	r3, [r7, #4]
    
    while (!((nmea_data[pos] == '$') &&
 800256a:	e002      	b.n	8002572 <parse_GSV+0x1a>
            (nmea_data[pos + 3] == 'G') &&
            (nmea_data[pos + 4] == 'S') &&
            (nmea_data[pos + 5] == 'V')) && pos < UART_BUF_LEN)      //search for start pos
    {
    pos++;
 800256c:	88bb      	ldrh	r3, [r7, #4]
 800256e:	3301      	adds	r3, #1
 8002570:	80bb      	strh	r3, [r7, #4]
    while (!((nmea_data[pos] == '$') &&
 8002572:	88bb      	ldrh	r3, [r7, #4]
 8002574:	4a2a      	ldr	r2, [pc, #168]	; (8002620 <parse_GSV+0xc8>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	2b24      	cmp	r3, #36	; 0x24
 800257a:	d111      	bne.n	80025a0 <parse_GSV+0x48>
            (nmea_data[pos + 3] == 'G') &&
 800257c:	88bb      	ldrh	r3, [r7, #4]
 800257e:	3303      	adds	r3, #3
 8002580:	4a27      	ldr	r2, [pc, #156]	; (8002620 <parse_GSV+0xc8>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 8002584:	2b47      	cmp	r3, #71	; 0x47
 8002586:	d10b      	bne.n	80025a0 <parse_GSV+0x48>
            (nmea_data[pos + 4] == 'S') &&
 8002588:	88bb      	ldrh	r3, [r7, #4]
 800258a:	3304      	adds	r3, #4
 800258c:	4a24      	ldr	r2, [pc, #144]	; (8002620 <parse_GSV+0xc8>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
            (nmea_data[pos + 3] == 'G') &&
 8002590:	2b53      	cmp	r3, #83	; 0x53
 8002592:	d105      	bne.n	80025a0 <parse_GSV+0x48>
            (nmea_data[pos + 5] == 'V')) && pos < UART_BUF_LEN)      //search for start pos
 8002594:	88bb      	ldrh	r3, [r7, #4]
 8002596:	3305      	adds	r3, #5
 8002598:	4a21      	ldr	r2, [pc, #132]	; (8002620 <parse_GSV+0xc8>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
    while (!((nmea_data[pos] == '$') &&
 800259c:	2b56      	cmp	r3, #86	; 0x56
 800259e:	d003      	beq.n	80025a8 <parse_GSV+0x50>
            (nmea_data[pos + 5] == 'V')) && pos < UART_BUF_LEN)      //search for start pos
 80025a0:	88bb      	ldrh	r3, [r7, #4]
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a6:	d3e1      	bcc.n	800256c <parse_GSV+0x14>
    }
    
    if(nmea_checksum(pos) == 0)
 80025a8:	88bb      	ldrh	r3, [r7, #4]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f83c 	bl	8002628 <nmea_checksum>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <parse_GSV+0x62>
    {
        return 0;           //checksum error
 80025b6:	2300      	movs	r3, #0
 80025b8:	e02d      	b.n	8002616 <parse_GSV+0xbe>
    }
    
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 80025ba:	88bb      	ldrh	r3, [r7, #4]
 80025bc:	3306      	adds	r3, #6
 80025be:	807b      	strh	r3, [r7, #2]
 80025c0:	e024      	b.n	800260c <parse_GSV+0xb4>
    {
        if (nmea_data[i] == '*') return 1;       //end of the sentence
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	4a16      	ldr	r2, [pc, #88]	; (8002620 <parse_GSV+0xc8>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	2b2a      	cmp	r3, #42	; 0x2a
 80025ca:	d101      	bne.n	80025d0 <parse_GSV+0x78>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e022      	b.n	8002616 <parse_GSV+0xbe>
        
        if (nmea_data[i] == ',')
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	4a13      	ldr	r2, [pc, #76]	; (8002620 <parse_GSV+0xc8>)
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	2b2c      	cmp	r3, #44	; 0x2c
 80025d8:	d105      	bne.n	80025e6 <parse_GSV+0x8e>
        {
            comma++;        //increase comma counter
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	3301      	adds	r3, #1
 80025de:	71fb      	strb	r3, [r7, #7]
            sym = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	71bb      	strb	r3, [r7, #6]
 80025e4:	e00f      	b.n	8002606 <parse_GSV+0xae>
        }
        else
        {
            switch (comma)  //surfing through GSV data fields
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d000      	beq.n	80025ee <parse_GSV+0x96>
            {
                case 3:
                    gps_raw.sat_view[sym++] = nmea_data[i];
                    break;
                default:
                    break;
 80025ec:	e00b      	b.n	8002606 <parse_GSV+0xae>
                    gps_raw.sat_view[sym++] = nmea_data[i];
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	1c59      	adds	r1, r3, #1
 80025f4:	71b9      	strb	r1, [r7, #6]
 80025f6:	4619      	mov	r1, r3
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <parse_GSV+0xc8>)
 80025fa:	5c9a      	ldrb	r2, [r3, r2]
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <parse_GSV+0xcc>)
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
                    break;
 8002604:	bf00      	nop
    for (uint16_t i = pos + 6; i < UART_BUF_LEN ; i++)          //i starts from the symbol right after "$GPRMC" string
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	3301      	adds	r3, #1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002612:	d3d6      	bcc.n	80025c2 <parse_GSV+0x6a>
            }
        }
    }
    return 1;
 8002614:	2301      	movs	r3, #1
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000188 	.word	0x20000188
 8002624:	20000588 	.word	0x20000588

08002628 <nmea_checksum>:



//NMEA checksum
uint8_t nmea_checksum(uint16_t pos)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
    uint8_t CheckSum = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
    uint8_t MessageCheckSum = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	73bb      	strb	r3, [r7, #14]
    
    pos++;                                      //pick up symbol right after $
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	3301      	adds	r3, #1
 800263e:	80fb      	strh	r3, [r7, #6]
    while (nmea_data[pos] != '*')
 8002640:	e00e      	b.n	8002660 <nmea_checksum+0x38>
    {
        CheckSum ^= nmea_data[pos];
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <nmea_checksum+0xbc>)
 8002646:	5cd2      	ldrb	r2, [r2, r3]
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	4053      	eors	r3, r2
 800264c:	73fb      	strb	r3, [r7, #15]
        if (++pos >= UART_BUF_LEN) return 0;    //check sum not found
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	3301      	adds	r3, #1
 8002652:	80fb      	strh	r3, [r7, #6]
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265a:	d301      	bcc.n	8002660 <nmea_checksum+0x38>
 800265c:	2300      	movs	r3, #0
 800265e:	e03b      	b.n	80026d8 <nmea_checksum+0xb0>
    while (nmea_data[pos] != '*')
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	4a20      	ldr	r2, [pc, #128]	; (80026e4 <nmea_checksum+0xbc>)
 8002664:	5cd3      	ldrb	r3, [r2, r3]
 8002666:	2b2a      	cmp	r3, #42	; 0x2a
 8002668:	d1eb      	bne.n	8002642 <nmea_checksum+0x1a>
    }
    
    if (nmea_data[++pos] > 0x40)
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	3301      	adds	r3, #1
 800266e:	80fb      	strh	r3, [r7, #6]
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <nmea_checksum+0xbc>)
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d907      	bls.n	800268a <nmea_checksum+0x62>
    {
        MessageCheckSum = (nmea_data[pos] - 0x37) << 4;   //ascii hex to number
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <nmea_checksum+0xbc>)
 800267e:	5cd3      	ldrb	r3, [r2, r3]
 8002680:	3b37      	subs	r3, #55	; 0x37
 8002682:	b2db      	uxtb	r3, r3
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	73bb      	strb	r3, [r7, #14]
 8002688:	e006      	b.n	8002698 <nmea_checksum+0x70>
    }
    else
    {
        MessageCheckSum = (nmea_data[pos] - 0x30) << 4;
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <nmea_checksum+0xbc>)
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	3b30      	subs	r3, #48	; 0x30
 8002692:	b2db      	uxtb	r3, r3
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	73bb      	strb	r3, [r7, #14]
    }
    
    if (nmea_data[++pos] > 0x40)
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	3301      	adds	r3, #1
 800269c:	80fb      	strh	r3, [r7, #6]
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <nmea_checksum+0xbc>)
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d908      	bls.n	80026ba <nmea_checksum+0x92>
    {
        MessageCheckSum += (nmea_data[pos] - 0x37);       //ascii hex to number
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <nmea_checksum+0xbc>)
 80026ac:	5cd2      	ldrb	r2, [r2, r3]
 80026ae:	7bbb      	ldrb	r3, [r7, #14]
 80026b0:	4413      	add	r3, r2
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3b37      	subs	r3, #55	; 0x37
 80026b6:	73bb      	strb	r3, [r7, #14]
 80026b8:	e007      	b.n	80026ca <nmea_checksum+0xa2>
    }
    else
    {
        MessageCheckSum += (nmea_data[pos] - 0x30);
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <nmea_checksum+0xbc>)
 80026be:	5cd2      	ldrb	r2, [r2, r3]
 80026c0:	7bbb      	ldrb	r3, [r7, #14]
 80026c2:	4413      	add	r3, r2
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3b30      	subs	r3, #48	; 0x30
 80026c8:	73bb      	strb	r3, [r7, #14]
    }
    
    if (MessageCheckSum == CheckSum)
 80026ca:	7bba      	ldrb	r2, [r7, #14]
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d101      	bne.n	80026d6 <nmea_checksum+0xae>
    {
        return 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <nmea_checksum+0xb0>
    }
    else
    {
        return 0;
 80026d6:	2300      	movs	r3, #0
    }
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000188 	.word	0x20000188

080026e8 <get_gps_status>:



uint8_t get_gps_status(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
	return gps_num.status;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <get_gps_status+0x14>)
 80026ee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000138 	.word	0x20000138

08002700 <get_nmea_buf>:



char *get_nmea_buf(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
	return &nmea_data[0];
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <get_nmea_buf+0x10>)
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000188 	.word	0x20000188

08002714 <get_gps_raw>:



struct gps_raw_struct *get_gps_raw(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
	return &gps_raw;
 8002718:	4b02      	ldr	r3, [pc, #8]	; (8002724 <get_gps_raw+0x10>)
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000588 	.word	0x20000588

08002728 <get_gps_num>:



struct gps_num_struct *get_gps_num(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
	return &gps_num;
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <get_gps_num+0x10>)
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000138 	.word	0x20000138

0800273c <i2c_init>:
#include "bit_band.h"



void i2c_init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
    //I2C config
    RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;     //enable i2c clock
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <i2c_init+0x68>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <i2c_init+0x68>)
 8002746:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800274a:	61d3      	str	r3, [r2, #28]
    
    I2C2->CR2 &= ~I2C_CR2_FREQ;             //clear bits before set
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <i2c_init+0x6c>)
 800274e:	889b      	ldrh	r3, [r3, #4]
 8002750:	b29b      	uxth	r3, r3
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <i2c_init+0x6c>)
 8002754:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002758:	b29b      	uxth	r3, r3
 800275a:	8093      	strh	r3, [r2, #4]
    I2C2->CR2 |= I2C_CR2_FREQ_1;            //2 MHz periph clock
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <i2c_init+0x6c>)
 800275e:	889b      	ldrh	r3, [r3, #4]
 8002760:	b29b      	uxth	r3, r3
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <i2c_init+0x6c>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	b29b      	uxth	r3, r3
 800276a:	8093      	strh	r3, [r2, #4]
    
    //Stndard mode
    I2C2->CCR |= (uint16_t)15;              //CCR = TSCL/(2 * TPCLK1); TSCL = 1 / 100kHz standard mode freq; TPCLK1 = 1 / APB1 clock 3 MHz
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <i2c_init+0x6c>)
 800276e:	8b9b      	ldrh	r3, [r3, #28]
 8002770:	b29b      	uxth	r3, r3
 8002772:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <i2c_init+0x6c>)
 8002774:	f043 030f 	orr.w	r3, r3, #15
 8002778:	b29b      	uxth	r3, r3
 800277a:	8393      	strh	r3, [r2, #28]
    I2C2->TRISE |= (uint16_t)4;             //TRISE = (Tr max/TPCLK1)+1; Tr max = 1000nS for standard mode
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <i2c_init+0x6c>)
 800277e:	8c1b      	ldrh	r3, [r3, #32]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <i2c_init+0x6c>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	b29b      	uxth	r3, r3
 800278a:	8413      	strh	r3, [r2, #32]
    
    I2C2->CR1 |= I2C_CR1_PE;                //enable i2c2
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <i2c_init+0x6c>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <i2c_init+0x6c>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	b29b      	uxth	r3, r3
 800279a:	8013      	strh	r3, [r2, #0]

    i2c_clock_disable();
 800279c:	f000 f806 	bl	80027ac <i2c_clock_disable>
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40005800 	.word	0x40005800

080027ac <i2c_clock_disable>:



void i2c_clock_disable(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB1ENR, RCC_APB1ENR_I2C2EN) = 0;
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <i2c_clock_disable+0x14>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	424203d8 	.word	0x424203d8

080027c4 <i2c_clock_enable>:



void i2c_clock_enable(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB1ENR, RCC_APB1ENR_I2C2EN) = 1;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <i2c_clock_enable+0x14>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	424203d8 	.word	0x424203d8

080027dc <init_lrns>:
uint8_t device_number;



void init_lrns(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
	//Clear mem
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 80027e2:	2301      	movs	r3, #1
 80027e4:	71fb      	strb	r3, [r7, #7]
 80027e6:	e017      	b.n	8002818 <init_lrns+0x3c>
    {
        memset(&gps_air[dev], 0, sizeof(gps_air[dev]));
 80027e8:	79fa      	ldrb	r2, [r7, #7]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4a2d      	ldr	r2, [pc, #180]	; (80028a8 <init_lrns+0xcc>)
 80027f4:	4413      	add	r3, r2
 80027f6:	2214      	movs	r2, #20
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f007 fb67 	bl	8009ece <memset>
        memset(&gps_rel[dev], 0, sizeof(gps_rel[dev]));
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4a29      	ldr	r2, [pc, #164]	; (80028ac <init_lrns+0xd0>)
 8002806:	4413      	add	r3, r2
 8002808:	2208      	movs	r2, #8
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f007 fb5e 	bl	8009ece <memset>
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	3301      	adds	r3, #1
 8002816:	71fb      	strb	r3, [r7, #7]
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	2b06      	cmp	r3, #6
 800281c:	d9e4      	bls.n	80027e8 <init_lrns+0xc>
    }

	//Get external things
	p_settings = get_settings();
 800281e:	f006 f9cf 	bl	8008bc0 <get_settings>
 8002822:	4602      	mov	r2, r0
 8002824:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <init_lrns+0xd4>)
 8002826:	601a      	str	r2, [r3, #0]
	p_gps_num = get_gps_num();
 8002828:	f7ff ff7e 	bl	8002728 <get_gps_num>
 800282c:	4602      	mov	r2, r0
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <init_lrns+0xd8>)
 8002830:	601a      	str	r2, [r3, #0]
	p_air_packet_tx = get_air_packet_tx();
 8002832:	f006 fc51 	bl	80090d8 <get_air_packet_tx>
 8002836:	4602      	mov	r2, r0
 8002838:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <init_lrns+0xdc>)
 800283a:	601a      	str	r2, [r3, #0]
	p_air_packet_rx = get_air_packet_rx();
 800283c:	f006 fc56 	bl	80090ec <get_air_packet_rx>
 8002840:	4602      	mov	r2, r0
 8002842:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <init_lrns+0xe0>)
 8002844:	601a      	str	r2, [r3, #0]

	//This device number
	device_number = p_settings->device_number;
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <init_lrns+0xd4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <init_lrns+0xe4>)
 800284e:	701a      	strb	r2, [r3, #0]

    //Exist flag
	dev_aux[device_number].exist_flag = 1;
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <init_lrns+0xe4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <init_lrns+0xe8>)
 8002858:	460b      	mov	r3, r1
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	440b      	add	r3, r1
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
    
    //ID
    gps_air[device_number].device_id[0] = p_settings->device_id[0];		//note: ID loads only once at startup
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <init_lrns+0xd4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a15      	ldr	r2, [pc, #84]	; (80028c0 <init_lrns+0xe4>)
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	4611      	mov	r1, r2
 8002870:	7858      	ldrb	r0, [r3, #1]
 8002872:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <init_lrns+0xcc>)
 8002874:	460b      	mov	r3, r1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	4602      	mov	r2, r0
 8002880:	701a      	strb	r2, [r3, #0]
    gps_air[device_number].device_id[1] = p_settings->device_id[1];
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <init_lrns+0xd4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <init_lrns+0xe4>)
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	4611      	mov	r1, r2
 800288c:	7898      	ldrb	r0, [r3, #2]
 800288e:	4a06      	ldr	r2, [pc, #24]	; (80028a8 <init_lrns+0xcc>)
 8002890:	460b      	mov	r3, r1
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3301      	adds	r3, #1
 800289c:	4602      	mov	r2, r0
 800289e:	701a      	strb	r2, [r3, #0]
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000740 	.word	0x20000740
 80028ac:	20000700 	.word	0x20000700
 80028b0:	2000061c 	.word	0x2000061c
 80028b4:	20000614 	.word	0x20000614
 80028b8:	2000073c 	.word	0x2000073c
 80028bc:	20000618 	.word	0x20000618
 80028c0:	20000738 	.word	0x20000738
 80028c4:	20000620 	.word	0x20000620

080028c8 <set_device_flags>:



//Set this device flags
void set_device_flags(uint8_t parameter_to_set, uint8_t parameter_value)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	460a      	mov	r2, r1
 80028d2:	71fb      	strb	r3, [r7, #7]
 80028d4:	4613      	mov	r3, r2
 80028d6:	71bb      	strb	r3, [r7, #6]
	uint8_t mask;
	uint8_t pos;

    switch (parameter_to_set)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	3b01      	subs	r3, #1
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d81f      	bhi.n	8002920 <set_device_flags+0x58>
 80028e0:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <set_device_flags+0x20>)
 80028e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e6:	bf00      	nop
 80028e8:	080028f9 	.word	0x080028f9
 80028ec:	08002903 	.word	0x08002903
 80028f0:	0800290d 	.word	0x0800290d
 80028f4:	08002917 	.word	0x08002917
    {
        case FLAGS_BATTERY:
        	mask = FLAGS_BATTERY_MASK;
 80028f8:	2307      	movs	r3, #7
 80028fa:	73fb      	strb	r3, [r7, #15]
            pos = FLAGS_BATTERY_POS;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73bb      	strb	r3, [r7, #14]
            break;
 8002900:	e00e      	b.n	8002920 <set_device_flags+0x58>

        case FLAGS_GPS_FIX:
        	mask = FLAGS_GPS_FIX_MASK;
 8002902:	2308      	movs	r3, #8
 8002904:	73fb      	strb	r3, [r7, #15]
            pos = FLAGS_GPS_FIX_POS;
 8002906:	2303      	movs	r3, #3
 8002908:	73bb      	strb	r3, [r7, #14]
            break;
 800290a:	e009      	b.n	8002920 <set_device_flags+0x58>

        case FLAGS_PDOP:
        	mask = FLAGS_PDOP_MASK;
 800290c:	2310      	movs	r3, #16
 800290e:	73fb      	strb	r3, [r7, #15]
            pos = FLAGS_PDOP_POS;
 8002910:	2304      	movs	r3, #4
 8002912:	73bb      	strb	r3, [r7, #14]
            break;
 8002914:	e004      	b.n	8002920 <set_device_flags+0x58>

        case FLAGS_ALARM:
        	mask = FLAGS_ALARM_MASK;
 8002916:	2320      	movs	r3, #32
 8002918:	73fb      	strb	r3, [r7, #15]
            pos = FLAGS_ALARM_POS;
 800291a:	2305      	movs	r3, #5
 800291c:	73bb      	strb	r3, [r7, #14]
            break;
 800291e:	bf00      	nop
    }

    gps_air[device_number].flags &= ~mask;             			//clear bits
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <set_device_flags+0xf4>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4619      	mov	r1, r3
 8002926:	4a26      	ldr	r2, [pc, #152]	; (80029c0 <set_device_flags+0xf8>)
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3302      	adds	r3, #2
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b25a      	sxtb	r2, r3
 8002938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293c:	43db      	mvns	r3, r3
 800293e:	b25b      	sxtb	r3, r3
 8002940:	4013      	ands	r3, r2
 8002942:	b25a      	sxtb	r2, r3
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <set_device_flags+0xf4>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	b2d0      	uxtb	r0, r2
 800294c:	4a1c      	ldr	r2, [pc, #112]	; (80029c0 <set_device_flags+0xf8>)
 800294e:	460b      	mov	r3, r1
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	3302      	adds	r3, #2
 800295a:	4602      	mov	r2, r0
 800295c:	701a      	strb	r2, [r3, #0]
	parameter_value &= (mask >> pos);   						//clear non-masked bits
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	fa42 f303 	asr.w	r3, r2, r3
 8002966:	b25a      	sxtb	r2, r3
 8002968:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800296c:	4013      	ands	r3, r2
 800296e:	b25b      	sxtb	r3, r3
 8002970:	71bb      	strb	r3, [r7, #6]
	gps_air[device_number].flags |= (parameter_value << pos);  	//add to flags
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <set_device_flags+0xf4>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <set_device_flags+0xf8>)
 800297a:	460b      	mov	r3, r1
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	3302      	adds	r3, #2
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b25a      	sxtb	r2, r3
 800298a:	79b9      	ldrb	r1, [r7, #6]
 800298c:	7bbb      	ldrb	r3, [r7, #14]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	b25b      	sxtb	r3, r3
 8002994:	4313      	orrs	r3, r2
 8002996:	b25a      	sxtb	r2, r3
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <set_device_flags+0xf4>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	b2d0      	uxtb	r0, r2
 80029a0:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <set_device_flags+0xf8>)
 80029a2:	460b      	mov	r3, r1
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	3302      	adds	r3, #2
 80029ae:	4602      	mov	r2, r0
 80029b0:	701a      	strb	r2, [r3, #0]
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	20000738 	.word	0x20000738
 80029c0:	20000740 	.word	0x20000740

080029c4 <get_device_flags>:



//Get any device flags
uint8_t get_device_flags(uint8_t dev_num, uint8_t parameter_to_get)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	460a      	mov	r2, r1
 80029ce:	71fb      	strb	r3, [r7, #7]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71bb      	strb	r3, [r7, #6]
	uint8_t mask;
	uint8_t pos;

    switch (parameter_to_get)
 80029d4:	79bb      	ldrb	r3, [r7, #6]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d81f      	bhi.n	8002a1c <get_device_flags+0x58>
 80029dc:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <get_device_flags+0x20>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	080029ff 	.word	0x080029ff
 80029ec:	08002a09 	.word	0x08002a09
 80029f0:	08002a13 	.word	0x08002a13
    {
		case FLAGS_BATTERY:
			mask = FLAGS_BATTERY_MASK;
 80029f4:	2307      	movs	r3, #7
 80029f6:	73fb      	strb	r3, [r7, #15]
			pos = FLAGS_BATTERY_POS;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73bb      	strb	r3, [r7, #14]
			break;
 80029fc:	e00e      	b.n	8002a1c <get_device_flags+0x58>

		case FLAGS_GPS_FIX:
			mask = FLAGS_GPS_FIX_MASK;
 80029fe:	2308      	movs	r3, #8
 8002a00:	73fb      	strb	r3, [r7, #15]
			pos = FLAGS_GPS_FIX_POS;
 8002a02:	2303      	movs	r3, #3
 8002a04:	73bb      	strb	r3, [r7, #14]
			break;
 8002a06:	e009      	b.n	8002a1c <get_device_flags+0x58>

		case FLAGS_PDOP:
			mask = FLAGS_PDOP_MASK;
 8002a08:	2310      	movs	r3, #16
 8002a0a:	73fb      	strb	r3, [r7, #15]
			pos = FLAGS_PDOP_POS;
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	73bb      	strb	r3, [r7, #14]
			break;
 8002a10:	e004      	b.n	8002a1c <get_device_flags+0x58>

		case FLAGS_ALARM:
			mask = FLAGS_ALARM_MASK;
 8002a12:	2320      	movs	r3, #32
 8002a14:	73fb      	strb	r3, [r7, #15]
			pos = FLAGS_ALARM_POS;
 8002a16:	2305      	movs	r3, #5
 8002a18:	73bb      	strb	r3, [r7, #14]
			break;
 8002a1a:	bf00      	nop
    }

    return (gps_air[dev_num].flags & mask) >> pos;
 8002a1c:	79fa      	ldrb	r2, [r7, #7]
 8002a1e:	490a      	ldr	r1, [pc, #40]	; (8002a48 <get_device_flags+0x84>)
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	4013      	ands	r3, r2
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	fa42 f303 	asr.w	r3, r2, r3
 8002a3c:	b2db      	uxtb	r3, r3
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	20000740 	.word	0x20000740

08002a4c <check_alarms>:



//Check alarm status of each device and make red led on if any alarm exist
uint8_t check_alarms(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
    uint8_t led_status = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	71fb      	strb	r3, [r7, #7]

    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002a56:	2301      	movs	r3, #1
 8002a58:	71bb      	strb	r3, [r7, #6]
 8002a5a:	e00c      	b.n	8002a76 <check_alarms+0x2a>
    {
        if (get_device_flags(dev, FLAGS_ALARM) == FLAG_ALARM_ON)
 8002a5c:	79bb      	ldrb	r3, [r7, #6]
 8002a5e:	2104      	movs	r1, #4
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ffaf 	bl	80029c4 <get_device_flags>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <check_alarms+0x24>
        {
            led_status = 1;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	71fb      	strb	r3, [r7, #7]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002a70:	79bb      	ldrb	r3, [r7, #6]
 8002a72:	3301      	adds	r3, #1
 8002a74:	71bb      	strb	r3, [r7, #6]
 8002a76:	79bb      	ldrb	r3, [r7, #6]
 8002a78:	2b06      	cmp	r3, #6
 8002a7a:	d9ef      	bls.n	8002a5c <check_alarms+0x10>
        }
    }

    if (led_status == 1)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d103      	bne.n	8002a8a <check_alarms+0x3e>
    {
        led_red_on();
 8002a82:	f7ff f90b 	bl	8001c9c <led_red_on>
        return 1;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e002      	b.n	8002a90 <check_alarms+0x44>
    }
    else
    {
        led_red_off();
 8002a8a:	f7ff f913 	bl	8001cb4 <led_red_off>
        return 0;
 8002a8e:	2300      	movs	r3, #0
    }
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <calc_timeout>:



void calc_timeout(uint32_t current_uptime)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	e020      	b.n	8002ae8 <calc_timeout+0x50>
    {
        if (dev_aux[dev].exist_flag == 1)
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	4913      	ldr	r1, [pc, #76]	; (8002af8 <calc_timeout+0x60>)
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d113      	bne.n	8002ae2 <calc_timeout+0x4a>
        {
        	dev_aux[dev].timeout = current_uptime - dev_aux[dev].timestamp;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	490e      	ldr	r1, [pc, #56]	; (8002af8 <calc_timeout+0x60>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3304      	adds	r3, #4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	1ac9      	subs	r1, r1, r3
 8002ad2:	4809      	ldr	r0, [pc, #36]	; (8002af8 <calc_timeout+0x60>)
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4403      	add	r3, r0
 8002ade:	3308      	adds	r3, #8
 8002ae0:	6019      	str	r1, [r3, #0]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d9db      	bls.n	8002aa6 <calc_timeout+0xe>
        }
    }
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	20000620 	.word	0x20000620

08002afc <check_timeout>:



//Check devices timeout and set flags if needed
uint8_t check_timeout(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
	uint8_t timeout_status = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	71fb      	strb	r3, [r7, #7]

	if (p_settings->timeout_threshold.as_integer != TIMEOUT_ALARM_DISABLED)
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <check_timeout+0x9c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	88db      	ldrh	r3, [r3, #6]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d038      	beq.n	8002b82 <check_timeout+0x86>
	{
		for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002b10:	2301      	movs	r3, #1
 8002b12:	71bb      	strb	r3, [r7, #6]
 8002b14:	e032      	b.n	8002b7c <check_timeout+0x80>
		{
			if (dev_aux[dev].memory_point_flag == 0)	//no timeout alarm for memory points
 8002b16:	79ba      	ldrb	r2, [r7, #6]
 8002b18:	4920      	ldr	r1, [pc, #128]	; (8002b9c <check_timeout+0xa0>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	440b      	add	r3, r1
 8002b24:	330e      	adds	r3, #14
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d124      	bne.n	8002b76 <check_timeout+0x7a>
			{

					if (dev_aux[dev].timeout > p_settings->timeout_threshold.as_integer)
 8002b2c:	79ba      	ldrb	r2, [r7, #6]
 8002b2e:	491b      	ldr	r1, [pc, #108]	; (8002b9c <check_timeout+0xa0>)
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <check_timeout+0x9c>)
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	88d2      	ldrh	r2, [r2, #6]
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d90c      	bls.n	8002b62 <check_timeout+0x66>
					{
						dev_aux[dev].timeout_flag = 1;
 8002b48:	79ba      	ldrb	r2, [r7, #6]
 8002b4a:	4914      	ldr	r1, [pc, #80]	; (8002b9c <check_timeout+0xa0>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	330c      	adds	r3, #12
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
						timeout_status = 1;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	71fb      	strb	r3, [r7, #7]
 8002b60:	e009      	b.n	8002b76 <check_timeout+0x7a>
					}
					else
					{
						dev_aux[dev].timeout_flag = 0;
 8002b62:	79ba      	ldrb	r2, [r7, #6]
 8002b64:	490d      	ldr	r1, [pc, #52]	; (8002b9c <check_timeout+0xa0>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	330c      	adds	r3, #12
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
		for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002b76:	79bb      	ldrb	r3, [r7, #6]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	71bb      	strb	r3, [r7, #6]
 8002b7c:	79bb      	ldrb	r3, [r7, #6]
 8002b7e:	2b06      	cmp	r3, #6
 8002b80:	d9c9      	bls.n	8002b16 <check_timeout+0x1a>
					}
			}
		}
	}

    if (timeout_status == 1)
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <check_timeout+0x90>
    {
    	return 1;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <check_timeout+0x92>
    }
    else
    {
    	return 0;
 8002b8c:	2300      	movs	r3, #0
    }
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	2000061c 	.word	0x2000061c
 8002b9c:	20000620 	.word	0x20000620

08002ba0 <check_fence>:



uint8_t check_fence(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
	uint8_t fence_status = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	71fb      	strb	r3, [r7, #7]

	if (p_settings->fence_threshold.as_integer != FENCE_ALARM_DISABLED)
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <check_fence+0x90>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	891b      	ldrh	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d032      	beq.n	8002c1a <check_fence+0x7a>
	{
		for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	71bb      	strb	r3, [r7, #6]
 8002bb8:	e02c      	b.n	8002c14 <check_fence+0x74>
		{
			if (dev_aux[dev].exist_flag)
 8002bba:	79ba      	ldrb	r2, [r7, #6]
 8002bbc:	491d      	ldr	r1, [pc, #116]	; (8002c34 <check_fence+0x94>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01f      	beq.n	8002c0e <check_fence+0x6e>
			{
				if (gps_rel[dev].distance > p_settings->fence_threshold.as_integer)
 8002bce:	79bb      	ldrb	r3, [r7, #6]
 8002bd0:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <check_fence+0x98>)
 8002bd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bd6:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <check_fence+0x90>)
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	8912      	ldrh	r2, [r2, #8]
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d90c      	bls.n	8002bfa <check_fence+0x5a>
				{
					dev_aux[dev].fence_flag = 1;
 8002be0:	79ba      	ldrb	r2, [r7, #6]
 8002be2:	4914      	ldr	r1, [pc, #80]	; (8002c34 <check_fence+0x94>)
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	330d      	adds	r3, #13
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
					fence_status = 1;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	71fb      	strb	r3, [r7, #7]
 8002bf8:	e009      	b.n	8002c0e <check_fence+0x6e>
				}
				else
				{
					dev_aux[dev].fence_flag = 0;
 8002bfa:	79ba      	ldrb	r2, [r7, #6]
 8002bfc:	490d      	ldr	r1, [pc, #52]	; (8002c34 <check_fence+0x94>)
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	440b      	add	r3, r1
 8002c08:	330d      	adds	r3, #13
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
		for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002c0e:	79bb      	ldrb	r3, [r7, #6]
 8002c10:	3301      	adds	r3, #1
 8002c12:	71bb      	strb	r3, [r7, #6]
 8002c14:	79bb      	ldrb	r3, [r7, #6]
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d9cf      	bls.n	8002bba <check_fence+0x1a>
				}
			}
		}
	}

    if (fence_status == 1)
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <check_fence+0x84>
    {
    	return 1;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <check_fence+0x86>
    }
    else
    {
    	return 0;
 8002c24:	2300      	movs	r3, #0
    }
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	2000061c 	.word	0x2000061c
 8002c34:	20000620 	.word	0x20000620
 8002c38:	20000700 	.word	0x20000700

08002c3c <process_all_devices>:



void process_all_devices(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
	for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002c42:	2301      	movs	r3, #1
 8002c44:	71fb      	strb	r3, [r7, #7]
 8002c46:	e010      	b.n	8002c6a <process_all_devices+0x2e>
	{
		if (dev_aux[dev].exist_flag == 1)	//process mem points too
 8002c48:	79fa      	ldrb	r2, [r7, #7]
 8002c4a:	490b      	ldr	r1, [pc, #44]	; (8002c78 <process_all_devices+0x3c>)
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d103      	bne.n	8002c64 <process_all_devices+0x28>
		{
			calc_relative_position(dev);
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 faa6 	bl	80031b0 <calc_relative_position>
	for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	3301      	adds	r3, #1
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	2b06      	cmp	r3, #6
 8002c6e:	d9eb      	bls.n	8002c48 <process_all_devices+0xc>
		}
	}
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000620 	.word	0x20000620

08002c7c <gps_air_update_my_data>:



//Update gps_air structure with coordinates of this device in order to transmit them further
void gps_air_update_my_data(uint32_t uptime)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

    //Timestamp
	dev_aux[device_number].timestamp = uptime;
 8002c84:	4b44      	ldr	r3, [pc, #272]	; (8002d98 <gps_air_update_my_data+0x11c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4a44      	ldr	r2, [pc, #272]	; (8002d9c <gps_air_update_my_data+0x120>)
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	440b      	add	r3, r1
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	3304      	adds	r3, #4
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	601a      	str	r2, [r3, #0]
    

    //Flags
    if (p_gps_num->mode == GPS_POSITION_3DFIX)
 8002c9c:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <gps_air_update_my_data+0x124>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d104      	bne.n	8002cb2 <gps_air_update_my_data+0x36>
    {
        set_device_flags(FLAGS_GPS_FIX, FLAG_GPS_FIX_3D);
 8002ca8:	2101      	movs	r1, #1
 8002caa:	2002      	movs	r0, #2
 8002cac:	f7ff fe0c 	bl	80028c8 <set_device_flags>
 8002cb0:	e003      	b.n	8002cba <gps_air_update_my_data+0x3e>
    }
    else
    {
        set_device_flags(FLAGS_GPS_FIX, FLAG_GPS_FIX_2D);
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2002      	movs	r0, #2
 8002cb6:	f7ff fe07 	bl	80028c8 <set_device_flags>
    }
    
    if (p_gps_num->pdop <= PDOP_THRESHOLD)
 8002cba:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <gps_air_update_my_data+0x124>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	4938      	ldr	r1, [pc, #224]	; (8002da4 <gps_air_update_my_data+0x128>)
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fa0e 	bl	80010e4 <__aeabi_fcmple>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <gps_air_update_my_data+0x5c>
    {
        set_device_flags(FLAGS_PDOP, FLAG_PDOP_GOOD);
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f7ff fdf9 	bl	80028c8 <set_device_flags>
 8002cd6:	e003      	b.n	8002ce0 <gps_air_update_my_data+0x64>
    }
    else
    {
        set_device_flags(FLAGS_PDOP, FLAG_PDOP_BAD);
 8002cd8:	2100      	movs	r1, #0
 8002cda:	2003      	movs	r0, #3
 8002cdc:	f7ff fdf4 	bl	80028c8 <set_device_flags>
    }
    
    //Latitude & Longitude
    gps_air[device_number].latitude.as_float = p_gps_num->latitude.in_deg;
 8002ce0:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <gps_air_update_my_data+0x124>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	; (8002d98 <gps_air_update_my_data+0x11c>)
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	4610      	mov	r0, r2
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	492e      	ldr	r1, [pc, #184]	; (8002da8 <gps_air_update_my_data+0x12c>)
 8002cee:	4603      	mov	r3, r0
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4403      	add	r3, r0
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	601a      	str	r2, [r3, #0]
    gps_air[device_number].longitude.as_float = p_gps_num->longitude.in_deg;
 8002cfc:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <gps_air_update_my_data+0x124>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a25      	ldr	r2, [pc, #148]	; (8002d98 <gps_air_update_my_data+0x11c>)
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	4610      	mov	r0, r2
 8002d06:	699a      	ldr	r2, [r3, #24]
 8002d08:	4927      	ldr	r1, [pc, #156]	; (8002da8 <gps_air_update_my_data+0x12c>)
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4403      	add	r3, r0
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	3308      	adds	r3, #8
 8002d16:	601a      	str	r2, [r3, #0]
    
    //Altitude
    gps_air[device_number].altitude.as_integer = (int16_t)p_gps_num->altitude;
 8002d18:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <gps_air_update_my_data+0x124>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <gps_air_update_my_data+0x11c>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	461c      	mov	r4, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f7fe f9fb 	bl	8001120 <__aeabi_f2iz>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	b219      	sxth	r1, r3
 8002d2e:	4a1e      	ldr	r2, [pc, #120]	; (8002da8 <gps_air_update_my_data+0x12c>)
 8002d30:	4623      	mov	r3, r4
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4423      	add	r3, r4
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	801a      	strh	r2, [r3, #0]
    
    //Speed
    gps_air[device_number].speed = (uint8_t)p_gps_num->speed;
 8002d40:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <gps_air_update_my_data+0x124>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d46:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <gps_air_update_my_data+0x11c>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	461c      	mov	r4, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f7fe fa0d 	bl	800116c <__aeabi_f2uiz>
 8002d52:	4603      	mov	r3, r0
 8002d54:	b2d9      	uxtb	r1, r3
 8002d56:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <gps_air_update_my_data+0x12c>)
 8002d58:	4623      	mov	r3, r4
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4423      	add	r3, r4
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	330e      	adds	r3, #14
 8002d64:	460a      	mov	r2, r1
 8002d66:	701a      	strb	r2, [r3, #0]
    
    //Course
    gps_air[device_number].course.as_integer = (uint16_t)p_gps_num->course;
 8002d68:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <gps_air_update_my_data+0x124>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <gps_air_update_my_data+0x11c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	461c      	mov	r4, r3
 8002d74:	4610      	mov	r0, r2
 8002d76:	f7fe f9f9 	bl	800116c <__aeabi_f2uiz>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	b299      	uxth	r1, r3
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <gps_air_update_my_data+0x12c>)
 8002d80:	4623      	mov	r3, r4
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4423      	add	r3, r4
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	3310      	adds	r3, #16
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	801a      	strh	r2, [r3, #0]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd90      	pop	{r4, r7, pc}
 8002d98:	20000738 	.word	0x20000738
 8002d9c:	20000620 	.word	0x20000620
 8002da0:	20000614 	.word	0x20000614
 8002da4:	40c00000 	.word	0x40c00000
 8002da8:	20000740 	.word	0x20000740

08002dac <fill_air_packet_with_struct_data>:



//Copy gps_air struct data to the TX air packet
void fill_air_packet_with_struct_data(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
	p_air_packet_tx[PACKET_DEVICE_NUMBER_POS] = 	device_number;             //this device number
 8002db0:	4b80      	ldr	r3, [pc, #512]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a80      	ldr	r2, [pc, #512]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	701a      	strb	r2, [r3, #0]
	p_air_packet_tx[PACKET_DEVICE_ID_POS] = 		gps_air[device_number].device_id[0];
 8002dba:	4b7f      	ldr	r3, [pc, #508]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4b7c      	ldr	r3, [pc, #496]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	497d      	ldr	r1, [pc, #500]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002dc8:	4603      	mov	r3, r0
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4403      	add	r3, r0
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_DEVICE_ID_POS + 1] = 	gps_air[device_number].device_id[1];
 8002dd6:	4b78      	ldr	r3, [pc, #480]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4b75      	ldr	r3, [pc, #468]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	4976      	ldr	r1, [pc, #472]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002de4:	4603      	mov	r3, r0
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4403      	add	r3, r0
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	3301      	adds	r3, #1
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_FLAGS_POS] = 			gps_air[device_number].flags;
 8002df4:	4b70      	ldr	r3, [pc, #448]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	4b6e      	ldr	r3, [pc, #440]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	1cda      	adds	r2, r3, #3
 8002e00:	496e      	ldr	r1, [pc, #440]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002e02:	4603      	mov	r3, r0
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4403      	add	r3, r0
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LATITUDE_POS] = 			gps_air[device_number].latitude.as_array[0];
 8002e12:	4b69      	ldr	r3, [pc, #420]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	4b66      	ldr	r3, [pc, #408]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	1d1a      	adds	r2, r3, #4
 8002e1e:	4967      	ldr	r1, [pc, #412]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002e20:	4603      	mov	r3, r0
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4403      	add	r3, r0
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LATITUDE_POS + 1] = 		gps_air[device_number].latitude.as_array[1];
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	4b5f      	ldr	r3, [pc, #380]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	1d5a      	adds	r2, r3, #5
 8002e3c:	495f      	ldr	r1, [pc, #380]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002e3e:	4603      	mov	r3, r0
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4403      	add	r3, r0
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	3305      	adds	r3, #5
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LATITUDE_POS + 2] = 		gps_air[device_number].latitude.as_array[2];
 8002e4e:	4b5a      	ldr	r3, [pc, #360]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	4b57      	ldr	r3, [pc, #348]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	1d9a      	adds	r2, r3, #6
 8002e5a:	4958      	ldr	r1, [pc, #352]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4403      	add	r3, r0
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3306      	adds	r3, #6
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LATITUDE_POS + 3] = 		gps_air[device_number].latitude.as_array[3];
 8002e6c:	4b52      	ldr	r3, [pc, #328]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	1dda      	adds	r2, r3, #7
 8002e78:	4950      	ldr	r1, [pc, #320]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4403      	add	r3, r0
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3307      	adds	r3, #7
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LONGITUDE_POS] = 		gps_air[device_number].longitude.as_array[0];
 8002e8a:	4b4b      	ldr	r3, [pc, #300]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	4b48      	ldr	r3, [pc, #288]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f103 0208 	add.w	r2, r3, #8
 8002e98:	4948      	ldr	r1, [pc, #288]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4403      	add	r3, r0
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LONGITUDE_POS + 1] = 	gps_air[device_number].longitude.as_array[1];
 8002eaa:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f103 0209 	add.w	r2, r3, #9
 8002eb8:	4940      	ldr	r1, [pc, #256]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002eba:	4603      	mov	r3, r0
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4403      	add	r3, r0
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3309      	adds	r3, #9
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LONGITUDE_POS + 2] = 	gps_air[device_number].longitude.as_array[2];
 8002eca:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f103 020a 	add.w	r2, r3, #10
 8002ed8:	4938      	ldr	r1, [pc, #224]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002eda:	4603      	mov	r3, r0
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4403      	add	r3, r0
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	330a      	adds	r3, #10
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_LONGITUDE_POS + 3] = 	gps_air[device_number].longitude.as_array[3];
 8002eea:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f103 020b 	add.w	r2, r3, #11
 8002ef8:	4930      	ldr	r1, [pc, #192]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002efa:	4603      	mov	r3, r0
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4403      	add	r3, r0
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	330b      	adds	r3, #11
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_ALTITUDE_POS] = 			gps_air[device_number].altitude.as_array[0];
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f103 020c 	add.w	r2, r3, #12
 8002f18:	4928      	ldr	r1, [pc, #160]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4403      	add	r3, r0
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	330c      	adds	r3, #12
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_ALTITUDE_POS + 1] = 		gps_air[device_number].altitude.as_array[1];
 8002f2a:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f103 020d 	add.w	r2, r3, #13
 8002f38:	4920      	ldr	r1, [pc, #128]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4403      	add	r3, r0
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	330d      	adds	r3, #13
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_SPEED_POS] = 			gps_air[device_number].speed;
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f103 020e 	add.w	r2, r3, #14
 8002f58:	4918      	ldr	r1, [pc, #96]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4403      	add	r3, r0
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	330e      	adds	r3, #14
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_COURSE_POS] = 			gps_air[device_number].course.as_array[0];
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f103 020f 	add.w	r2, r3, #15
 8002f78:	4910      	ldr	r1, [pc, #64]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4403      	add	r3, r0
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3310      	adds	r3, #16
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	7013      	strb	r3, [r2, #0]
	p_air_packet_tx[PACKET_COURSE_POS + 1] = 		gps_air[device_number].course.as_array[1];
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <fill_air_packet_with_struct_data+0x20c>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <fill_air_packet_with_struct_data+0x208>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f103 0210 	add.w	r2, r3, #16
 8002f98:	4908      	ldr	r1, [pc, #32]	; (8002fbc <fill_air_packet_with_struct_data+0x210>)
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4403      	add	r3, r0
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3311      	adds	r3, #17
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	7013      	strb	r3, [r2, #0]
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000073c 	.word	0x2000073c
 8002fb8:	20000738 	.word	0x20000738
 8002fbc:	20000740 	.word	0x20000740

08002fc0 <fill_struct_with_air_packet_data>:



//Copy RX air packet data to the gps_air struct
uint8_t fill_struct_with_air_packet_data(uint32_t uptime)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	uint8_t rx_device = p_air_packet_rx[PACKET_DEVICE_NUMBER_POS]; //extract device number from received packet
 8002fc8:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	73fb      	strb	r3, [r7, #15]

	dev_aux[rx_device].exist_flag = 				1;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	4975      	ldr	r1, [pc, #468]	; (80031a8 <fill_struct_with_air_packet_data+0x1e8>)
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
	dev_aux[rx_device].timestamp = 					uptime;
 8002fe2:	7bfa      	ldrb	r2, [r7, #15]
 8002fe4:	4970      	ldr	r1, [pc, #448]	; (80031a8 <fill_struct_with_air_packet_data+0x1e8>)
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
    gps_air[rx_device].device_id[0] = 				p_air_packet_rx[PACKET_DEVICE_ID_POS];
 8002ff6:	4b6b      	ldr	r3, [pc, #428]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	7818      	ldrb	r0, [r3, #0]
 8003000:	496a      	ldr	r1, [pc, #424]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	4602      	mov	r2, r0
 800300e:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].device_id[1] = 				p_air_packet_rx[PACKET_DEVICE_ID_POS + 1];
 8003010:	4b64      	ldr	r3, [pc, #400]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3302      	adds	r3, #2
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	7818      	ldrb	r0, [r3, #0]
 800301a:	4964      	ldr	r1, [pc, #400]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	3301      	adds	r3, #1
 8003028:	4602      	mov	r2, r0
 800302a:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].flags = 						p_air_packet_rx[PACKET_FLAGS_POS];
 800302c:	4b5d      	ldr	r3, [pc, #372]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	78d8      	ldrb	r0, [r3, #3]
 8003034:	495d      	ldr	r1, [pc, #372]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3302      	adds	r3, #2
 8003042:	4602      	mov	r2, r0
 8003044:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].latitude.as_array[0] = 		p_air_packet_rx[PACKET_LATITUDE_POS];
 8003046:	4b57      	ldr	r3, [pc, #348]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	7918      	ldrb	r0, [r3, #4]
 800304e:	4957      	ldr	r1, [pc, #348]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3304      	adds	r3, #4
 800305c:	4602      	mov	r2, r0
 800305e:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].latitude.as_array[1] = 		p_air_packet_rx[PACKET_LATITUDE_POS + 1];
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	7958      	ldrb	r0, [r3, #5]
 8003068:	4950      	ldr	r1, [pc, #320]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	3305      	adds	r3, #5
 8003076:	4602      	mov	r2, r0
 8003078:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].latitude.as_array[2] = 		p_air_packet_rx[PACKET_LATITUDE_POS + 2];
 800307a:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	7998      	ldrb	r0, [r3, #6]
 8003082:	494a      	ldr	r1, [pc, #296]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3306      	adds	r3, #6
 8003090:	4602      	mov	r2, r0
 8003092:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].latitude.as_array[3] = 		p_air_packet_rx[PACKET_LATITUDE_POS + 3];
 8003094:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	79d8      	ldrb	r0, [r3, #7]
 800309c:	4943      	ldr	r1, [pc, #268]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3307      	adds	r3, #7
 80030aa:	4602      	mov	r2, r0
 80030ac:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].longitude.as_array[0] = 		p_air_packet_rx[PACKET_LONGITUDE_POS];
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	7a18      	ldrb	r0, [r3, #8]
 80030b6:	493d      	ldr	r1, [pc, #244]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	3308      	adds	r3, #8
 80030c4:	4602      	mov	r2, r0
 80030c6:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].longitude.as_array[1] = 		p_air_packet_rx[PACKET_LONGITUDE_POS + 1];
 80030c8:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	7a58      	ldrb	r0, [r3, #9]
 80030d0:	4936      	ldr	r1, [pc, #216]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3309      	adds	r3, #9
 80030de:	4602      	mov	r2, r0
 80030e0:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].longitude.as_array[2] = 		p_air_packet_rx[PACKET_LONGITUDE_POS + 2];
 80030e2:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	7a98      	ldrb	r0, [r3, #10]
 80030ea:	4930      	ldr	r1, [pc, #192]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	330a      	adds	r3, #10
 80030f8:	4602      	mov	r2, r0
 80030fa:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].longitude.as_array[3] = 		p_air_packet_rx[PACKET_LONGITUDE_POS + 3];
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	7ad8      	ldrb	r0, [r3, #11]
 8003104:	4929      	ldr	r1, [pc, #164]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	330b      	adds	r3, #11
 8003112:	4602      	mov	r2, r0
 8003114:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].altitude.as_array[0] =		p_air_packet_rx[PACKET_ALTITUDE_POS];
 8003116:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	7b18      	ldrb	r0, [r3, #12]
 800311e:	4923      	ldr	r1, [pc, #140]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	330c      	adds	r3, #12
 800312c:	4602      	mov	r2, r0
 800312e:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].altitude.as_array[1] = 		p_air_packet_rx[PACKET_ALTITUDE_POS + 1];
 8003130:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	7b58      	ldrb	r0, [r3, #13]
 8003138:	491c      	ldr	r1, [pc, #112]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	330d      	adds	r3, #13
 8003146:	4602      	mov	r2, r0
 8003148:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].speed = 						p_air_packet_rx[PACKET_SPEED_POS];
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	7b98      	ldrb	r0, [r3, #14]
 8003152:	4916      	ldr	r1, [pc, #88]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	330e      	adds	r3, #14
 8003160:	4602      	mov	r2, r0
 8003162:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].course.as_array[0] = 		p_air_packet_rx[PACKET_COURSE_POS];
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	7bd8      	ldrb	r0, [r3, #15]
 800316c:	490f      	ldr	r1, [pc, #60]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3310      	adds	r3, #16
 800317a:	4602      	mov	r2, r0
 800317c:	701a      	strb	r2, [r3, #0]
    gps_air[rx_device].course.as_array[1] = 		p_air_packet_rx[PACKET_COURSE_POS + 1];
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <fill_struct_with_air_packet_data+0x1e4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	7bfa      	ldrb	r2, [r7, #15]
 8003184:	7c18      	ldrb	r0, [r3, #16]
 8003186:	4909      	ldr	r1, [pc, #36]	; (80031ac <fill_struct_with_air_packet_data+0x1ec>)
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	3311      	adds	r3, #17
 8003194:	4602      	mov	r2, r0
 8003196:	701a      	strb	r2, [r3, #0]

    return rx_device;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	20000618 	.word	0x20000618
 80031a8:	20000620 	.word	0x20000620
 80031ac:	20000740 	.word	0x20000740

080031b0 <calc_relative_position>:
//  Heart of the device <3
//Calculates distance between two GPS points (using haversine formula)
//Calculates heading between two GPS points (loxodrome, or rhumb line)
//Calculates altitude difference
void calc_relative_position(uint8_t another_device)
{
 80031b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031b4:	b08f      	sub	sp, #60	; 0x3c
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	71fb      	strb	r3, [r7, #7]
    double lat1, lat2, lon1, lon2;
    double distance, heading;
    
    //my position
    lat1 = p_gps_num->latitude.in_rad;
 80031bc:	4bc6      	ldr	r3, [pc, #792]	; (80034d8 <calc_relative_position+0x328>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f103 0410 	add.w	r4, r3, #16
 80031c4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
    lon1 = p_gps_num->longitude.in_rad;
 80031cc:	4bc2      	ldr	r3, [pc, #776]	; (80034d8 <calc_relative_position+0x328>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f103 0420 	add.w	r4, r3, #32
 80031d4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031d8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    //position of the device to calculate relative position
    lat2 = gps_air[another_device].latitude.as_float * deg_to_rad;
 80031dc:	79fa      	ldrb	r2, [r7, #7]
 80031de:	49bf      	ldr	r1, [pc, #764]	; (80034dc <calc_relative_position+0x32c>)
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	3304      	adds	r3, #4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f922 	bl	8000438 <__aeabi_f2d>
 80031f4:	a4ae      	add	r4, pc, #696	; (adr r4, 80034b0 <calc_relative_position+0x300>)
 80031f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	4623      	mov	r3, r4
 80031fe:	f7fd f973 	bl	80004e8 <__aeabi_dmul>
 8003202:	4603      	mov	r3, r0
 8003204:	460c      	mov	r4, r1
 8003206:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    lon2 = gps_air[another_device].longitude.as_float * deg_to_rad;
 800320a:	79fa      	ldrb	r2, [r7, #7]
 800320c:	49b3      	ldr	r1, [pc, #716]	; (80034dc <calc_relative_position+0x32c>)
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3308      	adds	r3, #8
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd f90b 	bl	8000438 <__aeabi_f2d>
 8003222:	a4a3      	add	r4, pc, #652	; (adr r4, 80034b0 <calc_relative_position+0x300>)
 8003224:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003228:	461a      	mov	r2, r3
 800322a:	4623      	mov	r3, r4
 800322c:	f7fd f95c 	bl	80004e8 <__aeabi_dmul>
 8003230:	4603      	mov	r3, r0
 8003232:	460c      	mov	r4, r1
 8003234:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    
    if (lat1 == lat2)
 8003238:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800323c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003240:	f7fd fbba 	bl	80009b8 <__aeabi_dcmpeq>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <calc_relative_position+0xb0>
    {
        lat2 += 0.00000001;       //slightly shift the position
 800324a:	a39b      	add	r3, pc, #620	; (adr r3, 80034b8 <calc_relative_position+0x308>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003254:	f7fc ff92 	bl	800017c <__adddf3>
 8003258:	4603      	mov	r3, r0
 800325a:	460c      	mov	r4, r1
 800325c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    }
    
    if (lon1 == lon2)
 8003260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003264:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003268:	f7fd fba6 	bl	80009b8 <__aeabi_dcmpeq>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <calc_relative_position+0xd8>
    {
        lon2 += 0.00000001;       //slightly shift the position
 8003272:	a391      	add	r3, pc, #580	; (adr r3, 80034b8 <calc_relative_position+0x308>)
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800327c:	f7fc ff7e 	bl	800017c <__adddf3>
 8003280:	4603      	mov	r3, r0
 8003282:	460c      	mov	r4, r1
 8003284:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    }
    
    distance = twice_mean_earth_radius *
               asin( sqrt( pow(sin((lat2 - lat1) / 2), 2) +
 8003288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800328c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003290:	f7fc ff72 	bl	8000178 <__aeabi_dsub>
 8003294:	4603      	mov	r3, r0
 8003296:	460c      	mov	r4, r1
 8003298:	4618      	mov	r0, r3
 800329a:	4621      	mov	r1, r4
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032a4:	f7fd fa4a 	bl	800073c <__aeabi_ddiv>
 80032a8:	4603      	mov	r3, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	4618      	mov	r0, r3
 80032ae:	4621      	mov	r1, r4
 80032b0:	f006 ffda 	bl	800a268 <sin>
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032bc:	f007 f906 	bl	800a4cc <pow>
 80032c0:	4604      	mov	r4, r0
 80032c2:	460d      	mov	r5, r1
                           cos(lat2) * cos(lat1) * pow(sin((lon2 - lon1) / 2), 2)));
 80032c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80032c8:	f006 ff94 	bl	800a1f4 <cos>
 80032cc:	4680      	mov	r8, r0
 80032ce:	4689      	mov	r9, r1
 80032d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032d4:	f006 ff8e 	bl	800a1f4 <cos>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4640      	mov	r0, r8
 80032de:	4649      	mov	r1, r9
 80032e0:	f7fd f902 	bl	80004e8 <__aeabi_dmul>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4690      	mov	r8, r2
 80032ea:	4699      	mov	r9, r3
 80032ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032f4:	f7fc ff40 	bl	8000178 <__aeabi_dsub>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003308:	f7fd fa18 	bl	800073c <__aeabi_ddiv>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	f006 ffa8 	bl	800a268 <sin>
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003320:	f007 f8d4 	bl	800a4cc <pow>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4640      	mov	r0, r8
 800332a:	4649      	mov	r1, r9
 800332c:	f7fd f8dc 	bl	80004e8 <__aeabi_dmul>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
               asin( sqrt( pow(sin((lat2 - lat1) / 2), 2) +
 8003334:	4620      	mov	r0, r4
 8003336:	4629      	mov	r1, r5
 8003338:	f7fc ff20 	bl	800017c <__adddf3>
 800333c:	4603      	mov	r3, r0
 800333e:	460c      	mov	r4, r1
 8003340:	4618      	mov	r0, r3
 8003342:	4621      	mov	r1, r4
 8003344:	f007 fa1e 	bl	800a784 <sqrt>
 8003348:	4603      	mov	r3, r0
 800334a:	460c      	mov	r4, r1
 800334c:	4618      	mov	r0, r3
 800334e:	4621      	mov	r1, r4
 8003350:	f006 ffee 	bl	800a330 <asin>
    distance = twice_mean_earth_radius *
 8003354:	a45a      	add	r4, pc, #360	; (adr r4, 80034c0 <calc_relative_position+0x310>)
 8003356:	e9d4 3400 	ldrd	r3, r4, [r4]
 800335a:	461a      	mov	r2, r3
 800335c:	4623      	mov	r3, r4
 800335e:	f7fd f8c3 	bl	80004e8 <__aeabi_dmul>
 8003362:	4603      	mov	r3, r0
 8003364:	460c      	mov	r4, r1
 8003366:	e9c7 3402 	strd	r3, r4, [r7, #8]
    
    heading = atan((lon2 - lon1) /
 800336a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800336e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003372:	f7fc ff01 	bl	8000178 <__aeabi_dsub>
 8003376:	4603      	mov	r3, r0
 8003378:	460c      	mov	r4, r1
 800337a:	461d      	mov	r5, r3
 800337c:	4626      	mov	r6, r4
                    log(tan(pi_div_by_4 + lat2 / 2) / tan(pi_div_by_4 + lat1 / 2)));
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003386:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800338a:	f7fd f9d7 	bl	800073c <__aeabi_ddiv>
 800338e:	4603      	mov	r3, r0
 8003390:	460c      	mov	r4, r1
 8003392:	4618      	mov	r0, r3
 8003394:	4621      	mov	r1, r4
 8003396:	a44c      	add	r4, pc, #304	; (adr r4, 80034c8 <calc_relative_position+0x318>)
 8003398:	e9d4 3400 	ldrd	r3, r4, [r4]
 800339c:	461a      	mov	r2, r3
 800339e:	4623      	mov	r3, r4
 80033a0:	f7fc feec 	bl	800017c <__adddf3>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	4618      	mov	r0, r3
 80033aa:	4621      	mov	r1, r4
 80033ac:	f006 ff96 	bl	800a2dc <tan>
 80033b0:	4680      	mov	r8, r0
 80033b2:	4689      	mov	r9, r1
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033c0:	f7fd f9bc 	bl	800073c <__aeabi_ddiv>
 80033c4:	4603      	mov	r3, r0
 80033c6:	460c      	mov	r4, r1
 80033c8:	4618      	mov	r0, r3
 80033ca:	4621      	mov	r1, r4
 80033cc:	a43e      	add	r4, pc, #248	; (adr r4, 80034c8 <calc_relative_position+0x318>)
 80033ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80033d2:	461a      	mov	r2, r3
 80033d4:	4623      	mov	r3, r4
 80033d6:	f7fc fed1 	bl	800017c <__adddf3>
 80033da:	4603      	mov	r3, r0
 80033dc:	460c      	mov	r4, r1
 80033de:	4618      	mov	r0, r3
 80033e0:	4621      	mov	r1, r4
 80033e2:	f006 ff7b 	bl	800a2dc <tan>
 80033e6:	4603      	mov	r3, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	461a      	mov	r2, r3
 80033ec:	4623      	mov	r3, r4
 80033ee:	4640      	mov	r0, r8
 80033f0:	4649      	mov	r1, r9
 80033f2:	f7fd f9a3 	bl	800073c <__aeabi_ddiv>
 80033f6:	4603      	mov	r3, r0
 80033f8:	460c      	mov	r4, r1
 80033fa:	4618      	mov	r0, r3
 80033fc:	4621      	mov	r1, r4
 80033fe:	f006 ffeb 	bl	800a3d8 <log>
 8003402:	4603      	mov	r3, r0
 8003404:	460c      	mov	r4, r1
    heading = atan((lon2 - lon1) /
 8003406:	461a      	mov	r2, r3
 8003408:	4623      	mov	r3, r4
 800340a:	4628      	mov	r0, r5
 800340c:	4631      	mov	r1, r6
 800340e:	f7fd f995 	bl	800073c <__aeabi_ddiv>
 8003412:	4603      	mov	r3, r0
 8003414:	460c      	mov	r4, r1
 8003416:	4618      	mov	r0, r3
 8003418:	4621      	mov	r1, r4
 800341a:	f006 fd61 	bl	8009ee0 <atan>
 800341e:	e9c7 0108 	strd	r0, r1, [r7, #32]
    
    
    if ((lat2 > lat1) && (lon2 > lon1))
 8003422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003426:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800342a:	f7fd faed 	bl	8000a08 <__aeabi_dcmpgt>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d016      	beq.n	8003462 <calc_relative_position+0x2b2>
 8003434:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003438:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800343c:	f7fd fae4 	bl	8000a08 <__aeabi_dcmpgt>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <calc_relative_position+0x2b2>
    {
        heading *= rad_to_deg;
 8003446:	a422      	add	r4, pc, #136	; (adr r4, 80034d0 <calc_relative_position+0x320>)
 8003448:	e9d4 3400 	ldrd	r3, r4, [r4]
 800344c:	461a      	mov	r2, r3
 800344e:	4623      	mov	r3, r4
 8003450:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003454:	f7fd f848 	bl	80004e8 <__aeabi_dmul>
 8003458:	4603      	mov	r3, r0
 800345a:	460c      	mov	r4, r1
 800345c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8003460:	e05d      	b.n	800351e <calc_relative_position+0x36e>
    }
    else if ((lat2 > lat1) && (lon2 < lon1))
 8003462:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003466:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800346a:	f7fd facd 	bl	8000a08 <__aeabi_dcmpgt>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d037      	beq.n	80034e4 <calc_relative_position+0x334>
 8003474:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003478:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800347c:	f7fd faa6 	bl	80009cc <__aeabi_dcmplt>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d02e      	beq.n	80034e4 <calc_relative_position+0x334>
    {
        heading = 360.0 + heading * rad_to_deg;
 8003486:	a112      	add	r1, pc, #72	; (adr r1, 80034d0 <calc_relative_position+0x320>)
 8003488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800348c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003490:	f7fd f82a 	bl	80004e8 <__aeabi_dmul>
 8003494:	4603      	mov	r3, r0
 8003496:	460c      	mov	r4, r1
 8003498:	4618      	mov	r0, r3
 800349a:	4621      	mov	r1, r4
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <calc_relative_position+0x330>)
 80034a2:	f7fc fe6b 	bl	800017c <__adddf3>
 80034a6:	4603      	mov	r3, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80034ae:	e036      	b.n	800351e <calc_relative_position+0x36e>
 80034b0:	a2529d3a 	.word	0xa2529d3a
 80034b4:	3f91df46 	.word	0x3f91df46
 80034b8:	e2308c3a 	.word	0xe2308c3a
 80034bc:	3e45798e 	.word	0x3e45798e
 80034c0:	00000000 	.word	0x00000000
 80034c4:	41684db0 	.word	0x41684db0
 80034c8:	54442d18 	.word	0x54442d18
 80034cc:	3fe921fb 	.word	0x3fe921fb
 80034d0:	1a63c1f8 	.word	0x1a63c1f8
 80034d4:	404ca5dc 	.word	0x404ca5dc
 80034d8:	20000614 	.word	0x20000614
 80034dc:	20000740 	.word	0x20000740
 80034e0:	40768000 	.word	0x40768000
    }
    else if (lat2 < lat1)
 80034e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80034ec:	f7fd fa6e 	bl	80009cc <__aeabi_dcmplt>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d013      	beq.n	800351e <calc_relative_position+0x36e>
    {
        heading = 180.0 + heading * rad_to_deg;
 80034f6:	a12c      	add	r1, pc, #176	; (adr r1, 80035a8 <calc_relative_position+0x3f8>)
 80034f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003500:	f7fc fff2 	bl	80004e8 <__aeabi_dmul>
 8003504:	4603      	mov	r3, r0
 8003506:	460c      	mov	r4, r1
 8003508:	4618      	mov	r0, r3
 800350a:	4621      	mov	r1, r4
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <calc_relative_position+0x400>)
 8003512:	f7fc fe33 	bl	800017c <__adddf3>
 8003516:	4603      	mov	r3, r0
 8003518:	460c      	mov	r4, r1
 800351a:	e9c7 3408 	strd	r3, r4, [r7, #32]
    }
    
    gps_rel[another_device].distance = (uint32_t)distance;
 800351e:	79fc      	ldrb	r4, [r7, #7]
 8003520:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003524:	f7fd fab8 	bl	8000a98 <__aeabi_d2uiz>
 8003528:	4602      	mov	r2, r0
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <calc_relative_position+0x404>)
 800352c:	f843 2034 	str.w	r2, [r3, r4, lsl #3]

    if (gps_rel[another_device].distance == 0)
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	4a20      	ldr	r2, [pc, #128]	; (80035b4 <calc_relative_position+0x404>)
 8003534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <calc_relative_position+0x39a>
    {
    	gps_rel[another_device].heading = 0;	//if distance is zero then make heading equals zero too
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <calc_relative_position+0x404>)
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	2200      	movs	r2, #0
 8003546:	809a      	strh	r2, [r3, #4]
 8003548:	e00b      	b.n	8003562 <calc_relative_position+0x3b2>
    }
    else
    {
    	gps_rel[another_device].heading = (uint16_t)heading;
 800354a:	79fc      	ldrb	r4, [r7, #7]
 800354c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003550:	f7fd faa2 	bl	8000a98 <__aeabi_d2uiz>
 8003554:	4603      	mov	r3, r0
 8003556:	b299      	uxth	r1, r3
 8003558:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <calc_relative_position+0x404>)
 800355a:	00e3      	lsls	r3, r4, #3
 800355c:	4413      	add	r3, r2
 800355e:	460a      	mov	r2, r1
 8003560:	809a      	strh	r2, [r3, #4]
    }

    gps_rel[another_device].altitude_diff = gps_air[another_device].altitude.as_integer - (int16_t)p_gps_num->altitude;
 8003562:	79fa      	ldrb	r2, [r7, #7]
 8003564:	4914      	ldr	r1, [pc, #80]	; (80035b8 <calc_relative_position+0x408>)
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	330c      	adds	r3, #12
 8003572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003576:	b29c      	uxth	r4, r3
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <calc_relative_position+0x40c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd fdce 	bl	8001120 <__aeabi_f2iz>
 8003584:	4603      	mov	r3, r0
 8003586:	b21b      	sxth	r3, r3
 8003588:	b29b      	uxth	r3, r3
 800358a:	1ae3      	subs	r3, r4, r3
 800358c:	b29a      	uxth	r2, r3
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	b211      	sxth	r1, r2
 8003592:	4a08      	ldr	r2, [pc, #32]	; (80035b4 <calc_relative_position+0x404>)
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	460a      	mov	r2, r1
 800359a:	80da      	strh	r2, [r3, #6]
}
 800359c:	bf00      	nop
 800359e:	373c      	adds	r7, #60	; 0x3c
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035a6:	bf00      	nop
 80035a8:	1a63c1f8 	.word	0x1a63c1f8
 80035ac:	404ca5dc 	.word	0x404ca5dc
 80035b0:	40668000 	.word	0x40668000
 80035b4:	20000700 	.word	0x20000700
 80035b8:	20000740 	.word	0x20000740
 80035bc:	20000614 	.word	0x20000614

080035c0 <get_gps_air>:



struct gps_air_struct **get_gps_air(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	71fb      	strb	r3, [r7, #7]
 80035ca:	e00d      	b.n	80035e8 <get_gps_air+0x28>
	{
		p_gps_air[i] = &gps_air[i];
 80035cc:	79fa      	ldrb	r2, [r7, #7]
 80035ce:	79f9      	ldrb	r1, [r7, #7]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4a08      	ldr	r2, [pc, #32]	; (80035fc <get_gps_air+0x3c>)
 80035da:	4413      	add	r3, r2
 80035dc:	4a08      	ldr	r2, [pc, #32]	; (8003600 <get_gps_air+0x40>)
 80035de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	3301      	adds	r3, #1
 80035e6:	71fb      	strb	r3, [r7, #7]
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d9ee      	bls.n	80035cc <get_gps_air+0xc>
	}

	return &p_gps_air[0];
 80035ee:	4b04      	ldr	r3, [pc, #16]	; (8003600 <get_gps_air+0x40>)
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20000740 	.word	0x20000740
 8003600:	200006e4 	.word	0x200006e4

08003604 <get_gps_rel>:



struct gps_rel_struct **get_gps_rel(void)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 800360a:	2300      	movs	r3, #0
 800360c:	71fb      	strb	r3, [r7, #7]
 800360e:	e00a      	b.n	8003626 <get_gps_rel+0x22>
	{
		p_gps_rel[i] = &gps_rel[i];
 8003610:	79fa      	ldrb	r2, [r7, #7]
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	00d2      	lsls	r2, r2, #3
 8003616:	4908      	ldr	r1, [pc, #32]	; (8003638 <get_gps_rel+0x34>)
 8003618:	440a      	add	r2, r1
 800361a:	4908      	ldr	r1, [pc, #32]	; (800363c <get_gps_rel+0x38>)
 800361c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	3301      	adds	r3, #1
 8003624:	71fb      	strb	r3, [r7, #7]
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	2b06      	cmp	r3, #6
 800362a:	d9f1      	bls.n	8003610 <get_gps_rel+0xc>
	}

	return &p_gps_rel[0];
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <get_gps_rel+0x38>)
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	20000700 	.word	0x20000700
 800363c:	200006c8 	.word	0x200006c8

08003640 <get_dev_aux>:



struct dev_aux_struct **get_dev_aux(void)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 8003646:	2300      	movs	r3, #0
 8003648:	71fb      	strb	r3, [r7, #7]
 800364a:	e00d      	b.n	8003668 <get_dev_aux+0x28>
	{
		p_dev_aux[i] = &dev_aux[i];
 800364c:	79fa      	ldrb	r2, [r7, #7]
 800364e:	79f9      	ldrb	r1, [r7, #7]
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4a08      	ldr	r2, [pc, #32]	; (800367c <get_dev_aux+0x3c>)
 800365a:	4413      	add	r3, r2
 800365c:	4a08      	ldr	r2, [pc, #32]	; (8003680 <get_dev_aux+0x40>)
 800365e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (uint8_t i = 0; i <= DEVICES_IN_GROUP; i++)
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	3301      	adds	r3, #1
 8003666:	71fb      	strb	r3, [r7, #7]
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	2b06      	cmp	r3, #6
 800366c:	d9ee      	bls.n	800364c <get_dev_aux+0xc>
	}

	return &p_dev_aux[0];
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <get_dev_aux+0x40>)
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000620 	.word	0x20000620
 8003680:	200005f8 	.word	0x200005f8

08003684 <m24c64_poll>:
#define M24C64_PAGES_TOTAL              (256)



uint8_t m24c64_poll(void)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
    uint16_t SR1_tmp;
    uint16_t SR2_tmp;
    uint8_t attempts = M24C64_POLL_ATTEMPTS;
 800368a:	2364      	movs	r3, #100	; 0x64
 800368c:	717b      	strb	r3, [r7, #5]
    
    while (attempts)
 800368e:	e04f      	b.n	8003730 <m24c64_poll+0xac>
    {
        //Start
        I2C2->CR1 |= I2C_CR1_START;
 8003690:	4b35      	ldr	r3, [pc, #212]	; (8003768 <m24c64_poll+0xe4>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	4a34      	ldr	r2, [pc, #208]	; (8003768 <m24c64_poll+0xe4>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369c:	b29b      	uxth	r3, r3
 800369e:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 80036a0:	bf00      	nop
 80036a2:	4b31      	ldr	r3, [pc, #196]	; (8003768 <m24c64_poll+0xe4>)
 80036a4:	8a9b      	ldrh	r3, [r3, #20]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f8      	beq.n	80036a2 <m24c64_poll+0x1e>
        {
        }
        //Clear
        SR1_tmp = I2C2->SR1;
 80036b0:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <m24c64_poll+0xe4>)
 80036b2:	8a9b      	ldrh	r3, [r3, #20]
 80036b4:	807b      	strh	r3, [r7, #2]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_WRITE_MODE;
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <m24c64_poll+0xe4>)
 80036b8:	22a0      	movs	r2, #160	; 0xa0
 80036ba:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission or NAK reception
        do
        {
            SR1_tmp = I2C2->SR1;
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <m24c64_poll+0xe4>)
 80036be:	8a9b      	ldrh	r3, [r3, #20]
 80036c0:	807b      	strh	r3, [r7, #2]
        }
        while (!(SR1_tmp & I2C_SR1_ADDR) && !(SR1_tmp & I2C_SR1_AF));    //"ADDR is not set after a NACK reception"
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <m24c64_poll+0x52>
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f2      	beq.n	80036bc <m24c64_poll+0x38>
        //Clear
        SR1_tmp = I2C2->SR1;
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <m24c64_poll+0xe4>)
 80036d8:	8a9b      	ldrh	r3, [r3, #20]
 80036da:	807b      	strh	r3, [r7, #2]
        SR2_tmp = I2C2->SR2;
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <m24c64_poll+0xe4>)
 80036de:	8b1b      	ldrh	r3, [r3, #24]
 80036e0:	80fb      	strh	r3, [r7, #6]
        
        //Check acknowledge failure
        if (SR1_tmp & I2C_SR1_AF)
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <m24c64_poll+0x78>
        {
            //no acknowledge is returned, slave is busy
            I2C2->SR1 = ~(I2C_SR1_AF);   //write 0 to clear AF bit
 80036ec:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <m24c64_poll+0xe4>)
 80036ee:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80036f2:	829a      	strh	r2, [r3, #20]
            
            attempts--;   //slave is not ready, decrement attmepts counter
 80036f4:	797b      	ldrb	r3, [r7, #5]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	717b      	strb	r3, [r7, #5]
 80036fa:	e019      	b.n	8003730 <m24c64_poll+0xac>
        }
        else if (SR1_tmp & I2C_SR1_ADDR)
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d011      	beq.n	800372a <m24c64_poll+0xa6>
        {
            //Stop
            I2C2->CR1 |= I2C_CR1_STOP;
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <m24c64_poll+0xe4>)
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	4a16      	ldr	r2, [pc, #88]	; (8003768 <m24c64_poll+0xe4>)
 800370e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003712:	b29b      	uxth	r3, r3
 8003714:	8013      	strh	r3, [r2, #0]
            while (I2C2->CR1 & I2C_CR1_STOP){} 		//wait for stop cleared by hardware
 8003716:	bf00      	nop
 8003718:	4b13      	ldr	r3, [pc, #76]	; (8003768 <m24c64_poll+0xe4>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f8      	bne.n	8003718 <m24c64_poll+0x94>

            return 1;   //slave is ready
 8003726:	2301      	movs	r3, #1
 8003728:	e019      	b.n	800375e <m24c64_poll+0xda>
        }
        else
        {
            attempts--; //???
 800372a:	797b      	ldrb	r3, [r7, #5]
 800372c:	3b01      	subs	r3, #1
 800372e:	717b      	strb	r3, [r7, #5]
    while (attempts)
 8003730:	797b      	ldrb	r3, [r7, #5]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1ac      	bne.n	8003690 <m24c64_poll+0xc>
        }
    }

    SR2_tmp = SR2_tmp + 1;
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	3301      	adds	r3, #1
 800373a:	80fb      	strh	r3, [r7, #6]
    
    //Stop before end
    I2C2->CR1 |= I2C_CR1_STOP;
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <m24c64_poll+0xe4>)
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	4a09      	ldr	r2, [pc, #36]	; (8003768 <m24c64_poll+0xe4>)
 8003744:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003748:	b29b      	uxth	r3, r3
 800374a:	8013      	strh	r3, [r2, #0]
    while (I2C2->CR1 & I2C_CR1_STOP){} 		//wait for stop cleared by hardware
 800374c:	bf00      	nop
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <m24c64_poll+0xe4>)
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f8      	bne.n	800374e <m24c64_poll+0xca>
    
    return 0;       //end of attmepts, slave is busy or absent
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	40005800 	.word	0x40005800

0800376c <m24c64_read_byte>:



uint8_t m24c64_read_byte(uint16_t memory_address)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	80fb      	strh	r3, [r7, #6]
    uint8_t result = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]
    
    i2c_clock_enable();
 800377a:	f7ff f823 	bl	80027c4 <i2c_clock_enable>

    if (m24c64_poll())
 800377e:	f7ff ff81 	bl	8003684 <m24c64_poll>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 808c 	beq.w	80038a2 <m24c64_read_byte+0x136>
    {
        uint16_t SR_tmp;
        
        //Start
        I2C2->CR1 |= I2C_CR1_START;
 800378a:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <m24c64_read_byte+0x148>)
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	4a48      	ldr	r2, [pc, #288]	; (80038b4 <m24c64_read_byte+0x148>)
 8003792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003796:	b29b      	uxth	r3, r3
 8003798:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 800379a:	bf00      	nop
 800379c:	4b45      	ldr	r3, [pc, #276]	; (80038b4 <m24c64_read_byte+0x148>)
 800379e:	8a9b      	ldrh	r3, [r3, #20]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f8      	beq.n	800379c <m24c64_read_byte+0x30>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 80037aa:	4b42      	ldr	r3, [pc, #264]	; (80038b4 <m24c64_read_byte+0x148>)
 80037ac:	8a9b      	ldrh	r3, [r3, #20]
 80037ae:	81bb      	strh	r3, [r7, #12]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_WRITE_MODE;
 80037b0:	4b40      	ldr	r3, [pc, #256]	; (80038b4 <m24c64_read_byte+0x148>)
 80037b2:	22a0      	movs	r2, #160	; 0xa0
 80037b4:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission
        while (!(I2C2->SR1 & I2C_SR1_ADDR))
 80037b6:	bf00      	nop
 80037b8:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <m24c64_read_byte+0x148>)
 80037ba:	8a9b      	ldrh	r3, [r3, #20]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f8      	beq.n	80037b8 <m24c64_read_byte+0x4c>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <m24c64_read_byte+0x148>)
 80037c8:	8a9b      	ldrh	r3, [r3, #20]
 80037ca:	81bb      	strh	r3, [r7, #12]
        SR_tmp = I2C2->SR2;
 80037cc:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <m24c64_read_byte+0x148>)
 80037ce:	8b1b      	ldrh	r3, [r3, #24]
 80037d0:	81bb      	strh	r3, [r7, #12]
        
        //Memory address high byte
        I2C2->DR = (uint8_t)(memory_address >> 8);
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <m24c64_read_byte+0x148>)
 80037dc:	b292      	uxth	r2, r2
 80037de:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 80037e0:	bf00      	nop
 80037e2:	4b34      	ldr	r3, [pc, #208]	; (80038b4 <m24c64_read_byte+0x148>)
 80037e4:	8a9b      	ldrh	r3, [r3, #20]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f8      	beq.n	80037e2 <m24c64_read_byte+0x76>
        {
        }
        
        //Memory address low byte
        I2C2->DR = (uint8_t)memory_address;
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <m24c64_read_byte+0x148>)
 80037f6:	b292      	uxth	r2, r2
 80037f8:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 80037fa:	bf00      	nop
 80037fc:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <m24c64_read_byte+0x148>)
 80037fe:	8a9b      	ldrh	r3, [r3, #20]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f8      	beq.n	80037fc <m24c64_read_byte+0x90>
        {
        }
        
        
        //Start (restart actually)
        I2C2->CR1 |= I2C_CR1_START;
 800380a:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <m24c64_read_byte+0x148>)
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <m24c64_read_byte+0x148>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003816:	b29b      	uxth	r3, r3
 8003818:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 800381a:	bf00      	nop
 800381c:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <m24c64_read_byte+0x148>)
 800381e:	8a9b      	ldrh	r3, [r3, #20]
 8003820:	b29b      	uxth	r3, r3
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f8      	beq.n	800381c <m24c64_read_byte+0xb0>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 800382a:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <m24c64_read_byte+0x148>)
 800382c:	8a9b      	ldrh	r3, [r3, #20]
 800382e:	81bb      	strh	r3, [r7, #12]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_READ_MODE;
 8003830:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <m24c64_read_byte+0x148>)
 8003832:	22a1      	movs	r2, #161	; 0xa1
 8003834:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission
        while (!(I2C2->SR1 & I2C_SR1_ADDR))
 8003836:	bf00      	nop
 8003838:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <m24c64_read_byte+0x148>)
 800383a:	8a9b      	ldrh	r3, [r3, #20]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f8      	beq.n	8003838 <m24c64_read_byte+0xcc>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <m24c64_read_byte+0x148>)
 8003848:	8a9b      	ldrh	r3, [r3, #20]
 800384a:	81bb      	strh	r3, [r7, #12]
        SR_tmp = I2C2->SR2;
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <m24c64_read_byte+0x148>)
 800384e:	8b1b      	ldrh	r3, [r3, #24]
 8003850:	81bb      	strh	r3, [r7, #12]
        
        //NACK next byte
        I2C2->CR1 &= ~I2C_CR1_ACK;
 8003852:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <m24c64_read_byte+0x148>)
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	4a16      	ldr	r2, [pc, #88]	; (80038b4 <m24c64_read_byte+0x148>)
 800385a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800385e:	b29b      	uxth	r3, r3
 8003860:	8013      	strh	r3, [r2, #0]
        //Stop
        I2C2->CR1 |= I2C_CR1_STOP;
 8003862:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <m24c64_read_byte+0x148>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <m24c64_read_byte+0x148>)
 800386a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800386e:	b29b      	uxth	r3, r3
 8003870:	8013      	strh	r3, [r2, #0]
        while (I2C2->CR1 & I2C_CR1_STOP){} 		//wait for stop cleared by hardware
 8003872:	bf00      	nop
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <m24c64_read_byte+0x148>)
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	b29b      	uxth	r3, r3
 800387a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f8      	bne.n	8003874 <m24c64_read_byte+0x108>
        //Wait for data register not empty
        while (!(I2C2->SR1 & I2C_SR1_RXNE))
 8003882:	bf00      	nop
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <m24c64_read_byte+0x148>)
 8003886:	8a9b      	ldrh	r3, [r3, #20]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f8      	beq.n	8003884 <m24c64_read_byte+0x118>
        {
        }

        SR_tmp = SR_tmp + 1;
 8003892:	89bb      	ldrh	r3, [r7, #12]
 8003894:	3301      	adds	r3, #1
 8003896:	81bb      	strh	r3, [r7, #12]
        
        //Read requested byte
        result = I2C2->DR;
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <m24c64_read_byte+0x148>)
 800389a:	8a1b      	ldrh	r3, [r3, #16]
 800389c:	b29b      	uxth	r3, r3
 800389e:	73fb      	strb	r3, [r7, #15]
 80038a0:	e001      	b.n	80038a6 <m24c64_read_byte+0x13a>
    }
    else
    {
        result = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
    }
    
    i2c_clock_disable();
 80038a6:	f7fe ff81 	bl	80027ac <i2c_clock_disable>

    return result;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40005800 	.word	0x40005800

080038b8 <m24c64_read_page>:
}



void m24c64_read_page(uint8_t data_array[], uint8_t page_address)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	70fb      	strb	r3, [r7, #3]

	i2c_clock_enable();
 80038c4:	f7fe ff7e 	bl	80027c4 <i2c_clock_enable>
    
    if (m24c64_poll())
 80038c8:	f7ff fedc 	bl	8003684 <m24c64_poll>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80b9 	beq.w	8003a46 <m24c64_read_page+0x18e>
    {
        uint8_t SR_tmp;
        uint16_t memory_address = page_address * M24C64_PAGE_SIZE;
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	015b      	lsls	r3, r3, #5
 80038da:	81bb      	strh	r3, [r7, #12]
        
        //Start
        I2C2->CR1 |= I2C_CR1_START;
 80038dc:	4b5d      	ldr	r3, [pc, #372]	; (8003a54 <m24c64_read_page+0x19c>)
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	4a5c      	ldr	r2, [pc, #368]	; (8003a54 <m24c64_read_page+0x19c>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 80038ec:	bf00      	nop
 80038ee:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <m24c64_read_page+0x19c>)
 80038f0:	8a9b      	ldrh	r3, [r3, #20]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f8      	beq.n	80038ee <m24c64_read_page+0x36>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 80038fc:	4b55      	ldr	r3, [pc, #340]	; (8003a54 <m24c64_read_page+0x19c>)
 80038fe:	8a9b      	ldrh	r3, [r3, #20]
 8003900:	b29b      	uxth	r3, r3
 8003902:	72fb      	strb	r3, [r7, #11]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_WRITE_MODE;
 8003904:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <m24c64_read_page+0x19c>)
 8003906:	22a0      	movs	r2, #160	; 0xa0
 8003908:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission
        while (!(I2C2->SR1 & I2C_SR1_ADDR))
 800390a:	bf00      	nop
 800390c:	4b51      	ldr	r3, [pc, #324]	; (8003a54 <m24c64_read_page+0x19c>)
 800390e:	8a9b      	ldrh	r3, [r3, #20]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f8      	beq.n	800390c <m24c64_read_page+0x54>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 800391a:	4b4e      	ldr	r3, [pc, #312]	; (8003a54 <m24c64_read_page+0x19c>)
 800391c:	8a9b      	ldrh	r3, [r3, #20]
 800391e:	b29b      	uxth	r3, r3
 8003920:	72fb      	strb	r3, [r7, #11]
        SR_tmp = I2C2->SR2;
 8003922:	4b4c      	ldr	r3, [pc, #304]	; (8003a54 <m24c64_read_page+0x19c>)
 8003924:	8b1b      	ldrh	r3, [r3, #24]
 8003926:	b29b      	uxth	r3, r3
 8003928:	72fb      	strb	r3, [r7, #11]
        
        //Memory address high byte
        I2C2->DR = (uint8_t)(memory_address >> 8);
 800392a:	89bb      	ldrh	r3, [r7, #12]
 800392c:	0a1b      	lsrs	r3, r3, #8
 800392e:	b29b      	uxth	r3, r3
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b48      	ldr	r3, [pc, #288]	; (8003a54 <m24c64_read_page+0x19c>)
 8003934:	b292      	uxth	r2, r2
 8003936:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 8003938:	bf00      	nop
 800393a:	4b46      	ldr	r3, [pc, #280]	; (8003a54 <m24c64_read_page+0x19c>)
 800393c:	8a9b      	ldrh	r3, [r3, #20]
 800393e:	b29b      	uxth	r3, r3
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f8      	beq.n	800393a <m24c64_read_page+0x82>
        {
        }
        
        //Memory address low byte
        I2C2->DR = (uint8_t)memory_address;
 8003948:	89bb      	ldrh	r3, [r7, #12]
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <m24c64_read_page+0x19c>)
 800394e:	b292      	uxth	r2, r2
 8003950:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 8003952:	bf00      	nop
 8003954:	4b3f      	ldr	r3, [pc, #252]	; (8003a54 <m24c64_read_page+0x19c>)
 8003956:	8a9b      	ldrh	r3, [r3, #20]
 8003958:	b29b      	uxth	r3, r3
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f8      	beq.n	8003954 <m24c64_read_page+0x9c>
        {
        }
        
        
        //Start (restart actually)
        I2C2->CR1 |= I2C_CR1_START;
 8003962:	4b3c      	ldr	r3, [pc, #240]	; (8003a54 <m24c64_read_page+0x19c>)
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	4a3a      	ldr	r2, [pc, #232]	; (8003a54 <m24c64_read_page+0x19c>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396e:	b29b      	uxth	r3, r3
 8003970:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 8003972:	bf00      	nop
 8003974:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <m24c64_read_page+0x19c>)
 8003976:	8a9b      	ldrh	r3, [r3, #20]
 8003978:	b29b      	uxth	r3, r3
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f8      	beq.n	8003974 <m24c64_read_page+0xbc>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 8003982:	4b34      	ldr	r3, [pc, #208]	; (8003a54 <m24c64_read_page+0x19c>)
 8003984:	8a9b      	ldrh	r3, [r3, #20]
 8003986:	b29b      	uxth	r3, r3
 8003988:	72fb      	strb	r3, [r7, #11]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_READ_MODE;
 800398a:	4b32      	ldr	r3, [pc, #200]	; (8003a54 <m24c64_read_page+0x19c>)
 800398c:	22a1      	movs	r2, #161	; 0xa1
 800398e:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission
        while (!(I2C2->SR1 & I2C_SR1_ADDR))
 8003990:	bf00      	nop
 8003992:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <m24c64_read_page+0x19c>)
 8003994:	8a9b      	ldrh	r3, [r3, #20]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f8      	beq.n	8003992 <m24c64_read_page+0xda>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 80039a0:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <m24c64_read_page+0x19c>)
 80039a2:	8a9b      	ldrh	r3, [r3, #20]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	72fb      	strb	r3, [r7, #11]
        SR_tmp = I2C2->SR2;
 80039a8:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <m24c64_read_page+0x19c>)
 80039aa:	8b1b      	ldrh	r3, [r3, #24]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	72fb      	strb	r3, [r7, #11]
        
        for (uint8_t i = 0; i < M24C64_PAGE_SIZE - 1; i++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e01a      	b.n	80039ec <m24c64_read_page+0x134>
        {
            //ACK next byte
            I2C2->CR1 |= I2C_CR1_ACK;
 80039b6:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <m24c64_read_page+0x19c>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4a25      	ldr	r2, [pc, #148]	; (8003a54 <m24c64_read_page+0x19c>)
 80039be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	8013      	strh	r3, [r2, #0]
            //Wait for data register not empty
            while (!(I2C2->SR1 & I2C_SR1_RXNE))
 80039c6:	bf00      	nop
 80039c8:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <m24c64_read_page+0x19c>)
 80039ca:	8a9b      	ldrh	r3, [r3, #20]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f8      	beq.n	80039c8 <m24c64_read_page+0x110>
            {
            }
            
            //Read byte
            data_array[i] = I2C2->DR;
 80039d6:	4b1f      	ldr	r3, [pc, #124]	; (8003a54 <m24c64_read_page+0x19c>)
 80039d8:	8a1b      	ldrh	r3, [r3, #16]
 80039da:	b299      	uxth	r1, r3
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	b2ca      	uxtb	r2, r1
 80039e4:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < M24C64_PAGE_SIZE - 1; i++)
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	3301      	adds	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b1e      	cmp	r3, #30
 80039f0:	d9e1      	bls.n	80039b6 <m24c64_read_page+0xfe>
        }
        
        //NACK last byte
        I2C2->CR1 &= ~I2C_CR1_ACK;
 80039f2:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <m24c64_read_page+0x19c>)
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <m24c64_read_page+0x19c>)
 80039fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	8013      	strh	r3, [r2, #0]
        //Stop
        I2C2->CR1 |= I2C_CR1_STOP;
 8003a02:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <m24c64_read_page+0x19c>)
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <m24c64_read_page+0x19c>)
 8003a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	8013      	strh	r3, [r2, #0]
        while (I2C2->CR1 & I2C_CR1_STOP){} 		//wait for stop cleared by hardware
 8003a12:	bf00      	nop
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <m24c64_read_page+0x19c>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f8      	bne.n	8003a14 <m24c64_read_page+0x15c>
        //Wait for data register not empty
        while (!(I2C2->SR1 & I2C_SR1_RXNE))
 8003a22:	bf00      	nop
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <m24c64_read_page+0x19c>)
 8003a26:	8a9b      	ldrh	r3, [r3, #20]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f8      	beq.n	8003a24 <m24c64_read_page+0x16c>
        {
        }
        
        //Read last byte
        data_array[M24C64_PAGE_SIZE - 1] = I2C2->DR;
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <m24c64_read_page+0x19c>)
 8003a34:	8a1b      	ldrh	r3, [r3, #16]
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	331f      	adds	r3, #31
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]

        SR_tmp = SR_tmp + 1;
 8003a40:	7afb      	ldrb	r3, [r7, #11]
 8003a42:	3301      	adds	r3, #1
 8003a44:	72fb      	strb	r3, [r7, #11]
    }
    
    i2c_clock_disable();
 8003a46:	f7fe feb1 	bl	80027ac <i2c_clock_disable>

}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40005800 	.word	0x40005800

08003a58 <m24c64_write_page>:



void m24c64_write_page(uint8_t data_array[], uint8_t page_address)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	70fb      	strb	r3, [r7, #3]

	i2c_clock_enable();
 8003a64:	f7fe feae 	bl	80027c4 <i2c_clock_enable>
    
    if (m24c64_poll())
 8003a68:	f7ff fe0c 	bl	8003684 <m24c64_poll>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d073      	beq.n	8003b5a <m24c64_write_page+0x102>
    {
        uint8_t SR_tmp = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73bb      	strb	r3, [r7, #14]
        uint16_t memory_address = page_address * M24C64_PAGE_SIZE;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	015b      	lsls	r3, r3, #5
 8003a7c:	81bb      	strh	r3, [r7, #12]
        
        //Start
        I2C2->CR1 |= I2C_CR1_START;
 8003a7e:	4b3a      	ldr	r3, [pc, #232]	; (8003b68 <m24c64_write_page+0x110>)
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4a38      	ldr	r2, [pc, #224]	; (8003b68 <m24c64_write_page+0x110>)
 8003a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	8013      	strh	r3, [r2, #0]
        //Wait for start generated
        while (!(I2C2->SR1 & I2C_SR1_SB))
 8003a8e:	bf00      	nop
 8003a90:	4b35      	ldr	r3, [pc, #212]	; (8003b68 <m24c64_write_page+0x110>)
 8003a92:	8a9b      	ldrh	r3, [r3, #20]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f8      	beq.n	8003a90 <m24c64_write_page+0x38>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 8003a9e:	4b32      	ldr	r3, [pc, #200]	; (8003b68 <m24c64_write_page+0x110>)
 8003aa0:	8a9b      	ldrh	r3, [r3, #20]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	73bb      	strb	r3, [r7, #14]
        
        //Device address
        I2C2->DR = (uint8_t)M24C64_ADDRESS_WRITE_MODE;
 8003aa6:	4b30      	ldr	r3, [pc, #192]	; (8003b68 <m24c64_write_page+0x110>)
 8003aa8:	22a0      	movs	r2, #160	; 0xa0
 8003aaa:	821a      	strh	r2, [r3, #16]
        //Wait for address end of transmission
        while (!(I2C2->SR1 & I2C_SR1_ADDR))
 8003aac:	bf00      	nop
 8003aae:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <m24c64_write_page+0x110>)
 8003ab0:	8a9b      	ldrh	r3, [r3, #20]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f8      	beq.n	8003aae <m24c64_write_page+0x56>
        {
        }
        //Clear
        SR_tmp = I2C2->SR1;
 8003abc:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <m24c64_write_page+0x110>)
 8003abe:	8a9b      	ldrh	r3, [r3, #20]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	73bb      	strb	r3, [r7, #14]
        SR_tmp = I2C2->SR2;
 8003ac4:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <m24c64_write_page+0x110>)
 8003ac6:	8b1b      	ldrh	r3, [r3, #24]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	73bb      	strb	r3, [r7, #14]
        
        //Memory address high byte
        I2C2->DR = (uint8_t)(memory_address >> 8);
 8003acc:	89bb      	ldrh	r3, [r7, #12]
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <m24c64_write_page+0x110>)
 8003ad6:	b292      	uxth	r2, r2
 8003ad8:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 8003ada:	bf00      	nop
 8003adc:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <m24c64_write_page+0x110>)
 8003ade:	8a9b      	ldrh	r3, [r3, #20]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f8      	beq.n	8003adc <m24c64_write_page+0x84>
        {
        }
        
        //Memory address low byte
        I2C2->DR = (uint8_t)memory_address;
 8003aea:	89bb      	ldrh	r3, [r7, #12]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <m24c64_write_page+0x110>)
 8003af0:	b292      	uxth	r2, r2
 8003af2:	821a      	strh	r2, [r3, #16]
        //Wait for data register empty
        while (!(I2C2->SR1 & I2C_SR1_TXE))
 8003af4:	bf00      	nop
 8003af6:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <m24c64_write_page+0x110>)
 8003af8:	8a9b      	ldrh	r3, [r3, #20]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f8      	beq.n	8003af6 <m24c64_write_page+0x9e>
        {
        }
        
        for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e011      	b.n	8003b2e <m24c64_write_page+0xd6>
        {
            //Write byte
            I2C2->DR = data_array[i];
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <m24c64_write_page+0x110>)
 8003b14:	b292      	uxth	r2, r2
 8003b16:	821a      	strh	r2, [r3, #16]
            //Wait byte transfer finish
            while (!(I2C2->SR1 & I2C_SR1_BTF))
 8003b18:	bf00      	nop
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <m24c64_write_page+0x110>)
 8003b1c:	8a9b      	ldrh	r3, [r3, #20]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f8      	beq.n	8003b1a <m24c64_write_page+0xc2>
        for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b1f      	cmp	r3, #31
 8003b32:	d9ea      	bls.n	8003b0a <m24c64_write_page+0xb2>
            {
            }
        }

        SR_tmp = SR_tmp + 1;
 8003b34:	7bbb      	ldrb	r3, [r7, #14]
 8003b36:	3301      	adds	r3, #1
 8003b38:	73bb      	strb	r3, [r7, #14]
        
        //Stop
        I2C2->CR1 |= I2C_CR1_STOP;
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <m24c64_write_page+0x110>)
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <m24c64_write_page+0x110>)
 8003b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	8013      	strh	r3, [r2, #0]
        while (I2C2->CR1 & I2C_CR1_STOP){} 		//wait for stop cleared by hardware
 8003b4a:	bf00      	nop
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <m24c64_write_page+0x110>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f8      	bne.n	8003b4c <m24c64_write_page+0xf4>
    }
    
    i2c_clock_disable();
 8003b5a:	f7fe fe27 	bl	80027ac <i2c_clock_disable>

}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40005800 	.word	0x40005800

08003b6c <m24c64_erase_page>:



void m24c64_erase_page(uint8_t page_address)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08c      	sub	sp, #48	; 0x30
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
    uint8_t empty_page[M24C64_PAGE_SIZE];
    
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003b7c:	e00c      	b.n	8003b98 <m24c64_erase_page+0x2c>
    {
        empty_page[i] = M24C64_EMPTY_CELL_VALUE;
 8003b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b86:	4413      	add	r3, r2
 8003b88:	22ff      	movs	r2, #255	; 0xff
 8003b8a:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 8003b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b92:	3301      	adds	r3, #1
 8003b94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b9c:	2b1f      	cmp	r3, #31
 8003b9e:	d9ee      	bls.n	8003b7e <m24c64_erase_page+0x12>
    }
    
    m24c64_write_page(&empty_page[0], page_address);
 8003ba0:	79fa      	ldrb	r2, [r7, #7]
 8003ba2:	f107 030c 	add.w	r3, r7, #12
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff55 	bl	8003a58 <m24c64_write_page>
}
 8003bae:	bf00      	nop
 8003bb0:	3730      	adds	r7, #48	; 0x30
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <m24c64_erase_all>:



void m24c64_erase_all(void)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
    for (uint16_t page = 0; page < M24C64_PAGES_TOTAL; page++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	80fb      	strh	r3, [r7, #6]
 8003bc0:	e007      	b.n	8003bd2 <m24c64_erase_all+0x1c>
    {
        m24c64_erase_page(page);
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff ffd0 	bl	8003b6c <m24c64_erase_page>
    for (uint16_t page = 0; page < M24C64_PAGES_TOTAL; page++)
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	80fb      	strh	r3, [r7, #6]
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	2bff      	cmp	r3, #255	; 0xff
 8003bd6:	d9f4      	bls.n	8003bc2 <m24c64_erase_all+0xc>
    }
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <__enable_irq>:
static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	b662      	cpsie	i
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <__WFI>:
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	bf30      	wfi
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <main>:



//PROGRAM
int main(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
    gpio_init();
 8003c02:	f7fd fda3 	bl	800174c <gpio_init>
    timers_init();
 8003c06:	f005 fe2f 	bl	8009868 <timers_init>
    spi1_init();
 8003c0a:	f005 fa79 	bl	8009100 <spi1_init>
    spi2_init();
 8003c0e:	f005 faeb 	bl	80091e8 <spi2_init>
    i2c_init();
 8003c12:	f7fe fd93 	bl	800273c <i2c_init>
    uart_dma_init();
 8003c16:	f006 f84f 	bl	8009cb8 <uart_dma_init>
    settings_load();
 8003c1a:	f004 ffdb 	bl	8008bd4 <settings_load>
    ssd1306_init();
 8003c1e:	f005 fb8b 	bl	8009338 <ssd1306_init>
    si4463_init();
 8003c22:	f005 f89b 	bl	8008d5c <si4463_init>
    ext_int_init();
 8003c26:	f7fd fffb 	bl	8001c20 <ext_int_init>
    adc_init();
 8003c2a:	f7fd fb8f 	bl	800134c <adc_init>
    adc_start_bat_voltage_reading();
 8003c2e:	f7fd fbf9 	bl	8001424 <adc_start_bat_voltage_reading>
    init_lrns();
 8003c32:	f7fe fdd3 	bl	80027dc <init_lrns>
    init_menu();
 8003c36:	f000 fa27 	bl	8004088 <init_menu>
    init_points();
 8003c3a:	f004 f955 	bl	8007ee8 <init_points>

    p_settings = get_settings();
 8003c3e:	f004 ffbf 	bl	8008bc0 <get_settings>
 8003c42:	4602      	mov	r2, r0
 8003c44:	4b64      	ldr	r3, [pc, #400]	; (8003dd8 <main+0x1dc>)
 8003c46:	601a      	str	r2, [r3, #0]
    p_gps_num = get_gps_num();
 8003c48:	f7fe fd6e 	bl	8002728 <get_gps_num>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b63      	ldr	r3, [pc, #396]	; (8003ddc <main+0x1e0>)
 8003c50:	601a      	str	r2, [r3, #0]
    p_send_interval_values = get_send_interval_values();
 8003c52:	f004 ffa1 	bl	8008b98 <get_send_interval_values>
 8003c56:	4602      	mov	r2, r0
 8003c58:	4b61      	ldr	r3, [pc, #388]	; (8003de0 <main+0x1e4>)
 8003c5a:	601a      	str	r2, [r3, #0]

    ssd1306_bitmap(&startup_screen[0]);
 8003c5c:	4861      	ldr	r0, [pc, #388]	; (8003de4 <main+0x1e8>)
 8003c5e:	f005 fda3 	bl	80097a8 <ssd1306_bitmap>
    ssd1306_update();
 8003c62:	f005 fbf9 	bl	8009458 <ssd1306_update>
    delay_cyc(200000);
 8003c66:	4860      	ldr	r0, [pc, #384]	; (8003de8 <main+0x1ec>)
 8003c68:	f004 fd22 	bl	80086b0 <delay_cyc>
    draw_current_menu();
 8003c6c:	f000 fc68 	bl	8004540 <draw_current_menu>

    __enable_irq();
 8003c70:	f7ff ffb6 	bl	8003be0 <__enable_irq>
    make_a_beep();
 8003c74:	f005 fe06 	bl	8009884 <make_a_beep>
    
    while (1)
    {
    	//Scan Keys
    	if (main_flags.begin_scan_buttons == 1)
 8003c78:	4b5c      	ldr	r3, [pc, #368]	; (8003dec <main+0x1f0>)
 8003c7a:	799b      	ldrb	r3, [r3, #6]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d108      	bne.n	8003c92 <main+0x96>
    	{
    		main_flags.begin_scan_buttons = 0;
 8003c80:	4b5a      	ldr	r3, [pc, #360]	; (8003dec <main+0x1f0>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	719a      	strb	r2, [r3, #6]
    		change_menu(scan_buttons());
 8003c86:	f7fd fc8d 	bl	80015a4 <scan_buttons>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fa5f 	bl	8004150 <change_menu>
    	}



        //Parse GPS after PPS interrupt or UART DMA overflow
        if (main_flags.gps_ready == 1)
 8003c92:	4b56      	ldr	r3, [pc, #344]	; (8003dec <main+0x1f0>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d124      	bne.n	8003ce4 <main+0xe8>
        {
            main_flags.gps_ready = 0;
 8003c9a:	4b54      	ldr	r3, [pc, #336]	; (8003dec <main+0x1f0>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
            

            if (parse_gps() == 1)
 8003ca0:	f7fe f8c8 	bl	8001e34 <parse_gps>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d116      	bne.n	8003cd8 <main+0xdc>
            {
                if (main_flags.gps_sync == 1)
 8003caa:	4b50      	ldr	r3, [pc, #320]	; (8003dec <main+0x1f0>)
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10e      	bne.n	8003cd0 <main+0xd4>
                {
                    if (get_gps_status() == GPS_DATA_VALID)
 8003cb2:	f7fe fd19 	bl	80026e8 <get_gps_status>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d107      	bne.n	8003ccc <main+0xd0>
                    {
                        gps_air_update_my_data(uptime);
 8003cbc:	4b4c      	ldr	r3, [pc, #304]	; (8003df0 <main+0x1f4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe ffdb 	bl	8002c7c <gps_air_update_my_data>
                        fill_air_packet_with_struct_data();    //fill air data with coordinates of this device (this occur before first time slot interrupt)
 8003cc6:	f7ff f871 	bl	8002dac <fill_air_packet_with_struct_data>
 8003cca:	e001      	b.n	8003cd0 <main+0xd4>
                    }
                    else                            //if PPS exist but data is invalid (rare situation)
                    {
                        timer1_stop_reload();       //stop time slot timer due to nothing to transmitt
 8003ccc:	f005 ff20 	bl	8009b10 <timer1_stop_reload>
                    }
                }

                main_flags.do_screen_update = 1;
 8003cd0:	4b46      	ldr	r3, [pc, #280]	; (8003dec <main+0x1f0>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	725a      	strb	r2, [r3, #9]
 8003cd6:	e005      	b.n	8003ce4 <main+0xe8>

            }
            else if (main_flags.gps_sync == 1)
 8003cd8:	4b44      	ldr	r3, [pc, #272]	; (8003dec <main+0x1f0>)
 8003cda:	785b      	ldrb	r3, [r3, #1]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <main+0xe8>
            {
            	timer1_stop_reload();       //stop time slot timer due to nothing to transmitt
 8003ce0:	f005 ff16 	bl	8009b10 <timer1_stop_reload>
        }


        
        //Extract received packet
        if (main_flags.rx_ready == 1)
 8003ce4:	4b41      	ldr	r3, [pc, #260]	; (8003dec <main+0x1f0>)
 8003ce6:	789b      	ldrb	r3, [r3, #2]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d10c      	bne.n	8003d06 <main+0x10a>
        {
            main_flags.rx_ready = 0;
 8003cec:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <main+0x1f0>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	709a      	strb	r2, [r3, #2]
            
            if (si4463_get_rx_packet())
 8003cf2:	f005 f97f 	bl	8008ff4 <si4463_get_rx_packet>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <main+0x10a>
            {
            	fill_struct_with_air_packet_data(uptime);   //parse air data from another device (which has ended TX in the current time_slot)
 8003cfc:	4b3c      	ldr	r3, [pc, #240]	; (8003df0 <main+0x1f4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff f95d 	bl	8002fc0 <fill_struct_with_air_packet_data>
        }



        //After each second
        if (main_flags.tick_1s == 1)
 8003d06:	4b39      	ldr	r3, [pc, #228]	; (8003dec <main+0x1f0>)
 8003d08:	79db      	ldrb	r3, [r3, #7]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d10b      	bne.n	8003d26 <main+0x12a>
        {
        	main_flags.tick_1s = 0;
 8003d0e:	4b37      	ldr	r3, [pc, #220]	; (8003dec <main+0x1f0>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	71da      	strb	r2, [r3, #7]
            adc_check_bat_voltage();
 8003d14:	f7fd fc26 	bl	8001564 <adc_check_bat_voltage>
            calc_timeout(uptime);	//always calculate timeout for each device, even if this function is disabled
 8003d18:	4b35      	ldr	r3, [pc, #212]	; (8003df0 <main+0x1f4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe febb 	bl	8002a98 <calc_timeout>
            check_timeout(); 		//also check timeout in order to set/reset timeout flags
 8003d22:	f7fe feeb 	bl	8002afc <check_timeout>
        }


        
        //Checks after receiving packets from all devices; performing beep
        if (main_flags.time_slots_end == 1)
 8003d26:	4b31      	ldr	r3, [pc, #196]	; (8003dec <main+0x1f0>)
 8003d28:	78db      	ldrb	r3, [r3, #3]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d131      	bne.n	8003d92 <main+0x196>
        {
        	main_flags.time_slots_end = 0;
 8003d2e:	4b2f      	ldr	r3, [pc, #188]	; (8003dec <main+0x1f0>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	70da      	strb	r2, [r3, #3]

        	process_all_devices();	//calculate relative position for each active device
 8003d34:	f7fe ff82 	bl	8002c3c <process_all_devices>

        	uint8_t any_alarm_status = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	71fb      	strb	r3, [r7, #7]
        	any_alarm_status += check_alarms();
 8003d3c:	f7fe fe86 	bl	8002a4c <check_alarms>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	4413      	add	r3, r2
 8003d48:	71fb      	strb	r3, [r7, #7]
        	any_alarm_status += check_timeout();	//check timeout flags and get the result only after the end of the TRX sequence
 8003d4a:	f7fe fed7 	bl	8002afc <check_timeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	461a      	mov	r2, r3
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	4413      	add	r3, r2
 8003d56:	71fb      	strb	r3, [r7, #7]
        	any_alarm_status += check_fence();
 8003d58:	f7fe ff22 	bl	8002ba0 <check_fence>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	461a      	mov	r2, r3
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	4413      	add	r3, r2
 8003d64:	71fb      	strb	r3, [r7, #7]

        	if (main_flags.battery_low == 1)	//when GPS is good and we are in the active state then check battery here
 8003d66:	4b21      	ldr	r3, [pc, #132]	; (8003dec <main+0x1f0>)
 8003d68:	791b      	ldrb	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <main+0x182>
        	{
        		any_alarm_status += main_flags.battery_low;
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <main+0x1f0>)
 8003d70:	791a      	ldrb	r2, [r3, #4]
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	4413      	add	r3, r2
 8003d76:	71fb      	strb	r3, [r7, #7]
        		main_flags.battery_low = 0;
 8003d78:	4b1c      	ldr	r3, [pc, #112]	; (8003dec <main+0x1f0>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	711a      	strb	r2, [r3, #4]
        	}

        	if (any_alarm_status > 0)
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <main+0x18e>
        	{
        		main_flags.do_beep = 1;
 8003d84:	4b19      	ldr	r3, [pc, #100]	; (8003dec <main+0x1f0>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	721a      	strb	r2, [r3, #8]
        	}

        	main_flags.do_screen_update = 1;
 8003d8a:	4b18      	ldr	r3, [pc, #96]	; (8003dec <main+0x1f0>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	725a      	strb	r2, [r3, #9]
 8003d90:	e00d      	b.n	8003dae <main+0x1b2>
        }
        else if ((main_flags.battery_low == 1) && (main_flags.gps_sync == 0)) 		//Check battery here when no GPS PPS (once in GET_BAT_VOLTAGE_INTERVAL)
 8003d92:	4b16      	ldr	r3, [pc, #88]	; (8003dec <main+0x1f0>)
 8003d94:	791b      	ldrb	r3, [r3, #4]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d109      	bne.n	8003dae <main+0x1b2>
 8003d9a:	4b14      	ldr	r3, [pc, #80]	; (8003dec <main+0x1f0>)
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d105      	bne.n	8003dae <main+0x1b2>
        {
        	main_flags.battery_low = 0;
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <main+0x1f0>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	711a      	strb	r2, [r3, #4]
        	main_flags.do_beep = 1;
 8003da8:	4b10      	ldr	r3, [pc, #64]	; (8003dec <main+0x1f0>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	721a      	strb	r2, [r3, #8]
        }



        //Make some noise
        if (main_flags.do_beep == 1)
 8003dae:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <main+0x1f0>)
 8003db0:	7a1b      	ldrb	r3, [r3, #8]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d104      	bne.n	8003dc0 <main+0x1c4>
        {
        	main_flags.do_beep = 0;
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <main+0x1f0>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	721a      	strb	r2, [r3, #8]
        	make_a_beep();
 8003dbc:	f005 fd62 	bl	8009884 <make_a_beep>
        }



        //Finally update screen
        if (main_flags.do_screen_update == 1)
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <main+0x1f0>)
 8003dc2:	7a5b      	ldrb	r3, [r3, #9]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d104      	bne.n	8003dd2 <main+0x1d6>
        {
        	main_flags.do_screen_update = 0;
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <main+0x1f0>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	725a      	strb	r2, [r3, #9]
        	draw_current_menu();
 8003dce:	f000 fbb7 	bl	8004540 <draw_current_menu>
        }



    //Wait for interrupt
    __WFI();
 8003dd2:	f7ff ff0c 	bl	8003bee <__WFI>
    	if (main_flags.begin_scan_buttons == 1)
 8003dd6:	e74f      	b.n	8003c78 <main+0x7c>
 8003dd8:	2000061c 	.word	0x2000061c
 8003ddc:	20000614 	.word	0x20000614
 8003de0:	200007cc 	.word	0x200007cc
 8003de4:	0800daac 	.word	0x0800daac
 8003de8:	00030d40 	.word	0x00030d40
 8003dec:	20000114 	.word	0x20000114
 8003df0:	20000108 	.word	0x20000108

08003df4 <DMA1_Channel5_IRQHandler>:



//DMA UART RX overflow
void DMA1_Channel5_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
    DMA1->IFCR = DMA_IFCR_CGIF5;     //clear all interrupt flags for DMA channel 5
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <DMA1_Channel5_IRQHandler+0x40>)
 8003dfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003dfe:	605a      	str	r2, [r3, #4]
    
    uart_dma_stop();
 8003e00:	f005 ffc4 	bl	8009d8c <uart_dma_stop>
    backup_and_clear_uart_buffer();
 8003e04:	f005 ffe8 	bl	8009dd8 <backup_and_clear_uart_buffer>
    uart_dma_restart();
 8003e08:	f005 ffce 	bl	8009da8 <uart_dma_restart>
    
    if (main_flags.gps_sync == 1) 	//if last pps status was "sync" then make a beep because we lost PPS
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <DMA1_Channel5_IRQHandler+0x44>)
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d102      	bne.n	8003e1a <DMA1_Channel5_IRQHandler+0x26>
    {
    	main_flags.do_beep = 1;		//make a beep
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <DMA1_Channel5_IRQHandler+0x44>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	721a      	strb	r2, [r3, #8]
    }

    main_flags.gps_ready = 1;
 8003e1a:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <DMA1_Channel5_IRQHandler+0x44>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]
    main_flags.gps_sync = 0;   	//no pps signal
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <DMA1_Channel5_IRQHandler+0x44>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	705a      	strb	r2, [r3, #1]
    pps_counter = 0;
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <DMA1_Channel5_IRQHandler+0x48>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
    led_green_off();
 8003e2c:	f7fd ff5a 	bl	8001ce4 <led_green_off>
}
 8003e30:	bf00      	nop
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40020000 	.word	0x40020000
 8003e38:	20000114 	.word	0x20000114
 8003e3c:	2000010c 	.word	0x2000010c

08003e40 <EXTI15_10_IRQHandler>:



//GPS PPS interrupt
void EXTI15_10_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
	EXTI->PR = EXTI_PR_PR11;        //clear interrupt
 8003e44:	4b25      	ldr	r3, [pc, #148]	; (8003edc <EXTI15_10_IRQHandler+0x9c>)
 8003e46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e4a:	615a      	str	r2, [r3, #20]
	timer1_start();                 //the first thing to do is start time slot timer right after PPS
 8003e4c:	f005 fe50 	bl	8009af0 <timer1_start>

	uart_dma_stop();				//fix the data
 8003e50:	f005 ff9c 	bl	8009d8c <uart_dma_stop>
	backup_and_clear_uart_buffer();
 8003e54:	f005 ffc0 	bl	8009dd8 <backup_and_clear_uart_buffer>
	uart_dma_restart();
 8003e58:	f005 ffa6 	bl	8009da8 <uart_dma_restart>

	pps_counter++;
 8003e5c:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <EXTI15_10_IRQHandler+0xa0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <EXTI15_10_IRQHandler+0xa0>)
 8003e64:	6013      	str	r3, [r2, #0]
	switch (pps_counter)
 8003e66:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <EXTI15_10_IRQHandler+0xa0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d002      	beq.n	8003e74 <EXTI15_10_IRQHandler+0x34>
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d009      	beq.n	8003e86 <EXTI15_10_IRQHandler+0x46>
 8003e72:	e011      	b.n	8003e98 <EXTI15_10_IRQHandler+0x58>
	{
		case 1:							//skip first PPS, ignore previous nmea data
			timer1_stop_reload();
 8003e74:	f005 fe4c 	bl	8009b10 <timer1_stop_reload>
			main_flags.gps_ready = 0;
 8003e78:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <EXTI15_10_IRQHandler+0xa4>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
			main_flags.gps_sync = 0;
 8003e7e:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <EXTI15_10_IRQHandler+0xa4>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	705a      	strb	r2, [r3, #1]
			break;
 8003e84:	e027      	b.n	8003ed6 <EXTI15_10_IRQHandler+0x96>

		case 2:							//skip second PPS, but fix the nmea data acquired after first PPS
			timer1_stop_reload();
 8003e86:	f005 fe43 	bl	8009b10 <timer1_stop_reload>
			main_flags.gps_ready = 1;
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <EXTI15_10_IRQHandler+0xa4>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
			main_flags.gps_sync = 0;
 8003e90:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <EXTI15_10_IRQHandler+0xa4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	705a      	strb	r2, [r3, #1]
			break;
 8003e96:	e01e      	b.n	8003ed6 <EXTI15_10_IRQHandler+0x96>

		default:						//at the moment, the nmea data, captured after first PPS, is parsed
			main_flags.gps_ready = 1;
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <EXTI15_10_IRQHandler+0xa4>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
			main_flags.gps_sync = 1;
 8003e9e:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <EXTI15_10_IRQHandler+0xa4>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	705a      	strb	r2, [r3, #1]

			if ((p_gps_num->second % p_send_interval_values[p_settings->send_interval_opt]) == 0) //calc division remainder
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <EXTI15_10_IRQHandler+0xa8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	789b      	ldrb	r3, [r3, #2]
 8003eaa:	4a10      	ldr	r2, [pc, #64]	; (8003eec <EXTI15_10_IRQHandler+0xac>)
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	4910      	ldr	r1, [pc, #64]	; (8003ef0 <EXTI15_10_IRQHandler+0xb0>)
 8003eb0:	6809      	ldr	r1, [r1, #0]
 8003eb2:	7949      	ldrb	r1, [r1, #5]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	7812      	ldrb	r2, [r2, #0]
 8003eb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ebc:	fb02 f201 	mul.w	r2, r2, r1
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <EXTI15_10_IRQHandler+0x90>
			{
				main_flags.act_status = 1; //we are ready to show we are in act
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <EXTI15_10_IRQHandler+0xa4>)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	715a      	strb	r2, [r3, #5]
			else
			{
				timer1_stop_reload();
			}

			break;
 8003ece:	e001      	b.n	8003ed4 <EXTI15_10_IRQHandler+0x94>
				timer1_stop_reload();
 8003ed0:	f005 fe1e 	bl	8009b10 <timer1_stop_reload>
			break;
 8003ed4:	bf00      	nop
	}
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40010400 	.word	0x40010400
 8003ee0:	2000010c 	.word	0x2000010c
 8003ee4:	20000114 	.word	0x20000114
 8003ee8:	20000614 	.word	0x20000614
 8003eec:	200007cc 	.word	0x200007cc
 8003ef0:	2000061c 	.word	0x2000061c

08003ef4 <EXTI9_5_IRQHandler>:



//SI4463 RX interrupt (RX valid or CRC error)
void EXTI9_5_IRQHandler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
    EXTI->PR = EXTI_PR_PR6;         //clear interrupt
 8003ef8:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <EXTI9_5_IRQHandler+0x18>)
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	615a      	str	r2, [r3, #20]
    
    main_flags.rx_ready = 1;
 8003efe:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <EXTI9_5_IRQHandler+0x1c>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	709a      	strb	r2, [r3, #2]
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	40010400 	.word	0x40010400
 8003f10:	20000114 	.word	0x20000114

08003f14 <TIM1_UP_IRQHandler>:



//Time slot interrupt
void TIM1_UP_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
    TIM1->SR &= ~TIM_SR_UIF;                    //clear interrupt
 8003f18:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <TIM1_UP_IRQHandler+0x74>)
 8003f1a:	8a1b      	ldrh	r3, [r3, #16]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <TIM1_UP_IRQHandler+0x74>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	8213      	strh	r3, [r2, #16]
    
    overflow_counter++;             			//increment ovf counter (starts from 1)
 8003f28:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <TIM1_UP_IRQHandler+0x78>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <TIM1_UP_IRQHandler+0x78>)
 8003f32:	701a      	strb	r2, [r3, #0]
    
    if(overflow_counter == (DEVICES_IN_GROUP + 1))    //if interrupt at the end of the last time slot
 8003f34:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <TIM1_UP_IRQHandler+0x78>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b07      	cmp	r3, #7
 8003f3a:	d10a      	bne.n	8003f52 <TIM1_UP_IRQHandler+0x3e>
    {
        timer1_stop_reload();
 8003f3c:	f005 fde8 	bl	8009b10 <timer1_stop_reload>
        overflow_counter = 0;
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <TIM1_UP_IRQHandler+0x78>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
        main_flags.time_slots_end = 1;
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <TIM1_UP_IRQHandler+0x7c>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	70da      	strb	r2, [r3, #3]
        led_green_off();
 8003f4c:	f7fd feca 	bl	8001ce4 <led_green_off>
 8003f50:	e00f      	b.n	8003f72 <TIM1_UP_IRQHandler+0x5e>
    }
    else
    {
    	time_slot = overflow_counter;
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <TIM1_UP_IRQHandler+0x78>)
 8003f54:	781a      	ldrb	r2, [r3, #0]
 8003f56:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <TIM1_UP_IRQHandler+0x80>)
 8003f58:	701a      	strb	r2, [r3, #0]

		if (time_slot == p_settings->device_number)
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <TIM1_UP_IRQHandler+0x84>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <TIM1_UP_IRQHandler+0x80>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d102      	bne.n	8003f6e <TIM1_UP_IRQHandler+0x5a>
		{
			si4463_tx_packet();
 8003f68:	f004 ffcc 	bl	8008f04 <si4463_tx_packet>
 8003f6c:	e001      	b.n	8003f72 <TIM1_UP_IRQHandler+0x5e>
		}
		else
		{
			si4463_start_rx();
 8003f6e:	f005 f815 	bl	8008f9c <si4463_start_rx>
		}
    }

    if (main_flags.act_status == 1)
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <TIM1_UP_IRQHandler+0x7c>)
 8003f74:	795b      	ldrb	r3, [r3, #5]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d104      	bne.n	8003f84 <TIM1_UP_IRQHandler+0x70>
    {
    	main_flags.act_status = 0;
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <TIM1_UP_IRQHandler+0x7c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	715a      	strb	r2, [r3, #5]
    	led_green_on();					//make ACT led on only here, after we are shure that gps data is valid (otherwise we would never reach this interrupt)
 8003f80:	f7fd fea4 	bl	8001ccc <led_green_on>
    }
}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	20000110 	.word	0x20000110
 8003f90:	20000114 	.word	0x20000114
 8003f94:	20000111 	.word	0x20000111
 8003f98:	2000061c 	.word	0x2000061c

08003f9c <SysTick_Handler>:



//End of beep
void SysTick_Handler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
	timer3_stop();	//pwm
 8003fa0:	f005 fe4e 	bl	8009c40 <timer3_stop>
	timer3_clock_disable();
 8003fa4:	f005 fe34 	bl	8009c10 <timer3_clock_disable>
	systick_stop();	//gating
 8003fa8:	f005 fd38 	bl	8009a1c <systick_stop>
}
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <RTC_IRQHandler>:



//Uptime counter (every 1 second)
void RTC_IRQHandler(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
	RTC->CRL &= ~RTC_CRL_SECF;		//Clear interrupt
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <RTC_IRQHandler+0x2c>)
 8003fb6:	889b      	ldrh	r3, [r3, #4]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <RTC_IRQHandler+0x2c>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	8093      	strh	r3, [r2, #4]

    uptime++;
 8003fc4:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <RTC_IRQHandler+0x30>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <RTC_IRQHandler+0x30>)
 8003fcc:	6013      	str	r3, [r2, #0]
    main_flags.tick_1s = 1;
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <RTC_IRQHandler+0x34>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	71da      	strb	r2, [r3, #7]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	40002800 	.word	0x40002800
 8003fe0:	20000108 	.word	0x20000108
 8003fe4:	20000114 	.word	0x20000114

08003fe8 <ADC1_2_IRQHandler>:



//End of ADC conversion (battery voltage)
void ADC1_2_IRQHandler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
	main_flags.battery_low = adc_read_bat_voltage_result(); 			//EOC is cleared automatically after ADC_DR reading
 8003fec:	f7fd fa30 	bl	8001450 <adc_read_bat_voltage_result>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b01      	ldr	r3, [pc, #4]	; (8003ffc <ADC1_2_IRQHandler+0x14>)
 8003ff6:	711a      	strb	r2, [r3, #4]
}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000114 	.word	0x20000114

08004000 <TIM2_IRQHandler>:



//Scan buttons interval
void TIM2_IRQHandler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;        //clear gating timer int
 8004004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004008:	8a1b      	ldrh	r3, [r3, #16]
 800400a:	b29b      	uxth	r3, r3
 800400c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	b29b      	uxth	r3, r3
 8004016:	8213      	strh	r3, [r2, #16]
	main_flags.begin_scan_buttons = 1;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <TIM2_IRQHandler+0x28>)
 800401a:	2201      	movs	r2, #1
 800401c:	719a      	strb	r2, [r3, #6]
}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000114 	.word	0x20000114

0800402c <get_uptime>:



uint32_t get_uptime(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
	return uptime;
 8004030:	4b02      	ldr	r3, [pc, #8]	; (800403c <get_uptime+0x10>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	20000108 	.word	0x20000108

08004040 <get_main_flags>:



struct main_flags_struct *get_main_flags(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
	return &main_flags;
 8004044:	4b02      	ldr	r3, [pc, #8]	; (8004050 <get_main_flags+0x10>)
}
 8004046:	4618      	mov	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000114 	.word	0x20000114

08004054 <__DSB>:
static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <NVIC_SystemReset>:
 * @brief  Initiate a system reset request.
 *
 * Initiate a system reset request to reset the MCU
 */
static __INLINE void NVIC_SystemReset(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | 
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <NVIC_SystemReset+0x1c>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
 8004070:	4903      	ldr	r1, [pc, #12]	; (8004080 <NVIC_SystemReset+0x1c>)
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | 
 8004072:	4b04      	ldr	r3, [pc, #16]	; (8004084 <NVIC_SystemReset+0x20>)
 8004074:	4313      	orrs	r3, r2
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
 8004076:	60cb      	str	r3, [r1, #12]
                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
  __DSB();                                                     /* Ensure completion of memory access */              
 8004078:	f7ff ffec 	bl	8004054 <__DSB>
  while(1);                                                    /* wait until reset */
 800407c:	e7fe      	b.n	800407c <NVIC_SystemReset+0x18>
 800407e:	bf00      	nop
 8004080:	e000ed00 	.word	0xe000ed00
 8004084:	05fa0004 	.word	0x05fa0004

08004088 <init_menu>:



//Init and show MAIN menu
void init_menu(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
	p_gps_raw = get_gps_raw();
 800408c:	f7fe fb42 	bl	8002714 <get_gps_raw>
 8004090:	4602      	mov	r2, r0
 8004092:	4b22      	ldr	r3, [pc, #136]	; (800411c <init_menu+0x94>)
 8004094:	601a      	str	r2, [r3, #0]
	p_gps_num = get_gps_num();
 8004096:	f7fe fb47 	bl	8002728 <get_gps_num>
 800409a:	4602      	mov	r2, r0
 800409c:	4b20      	ldr	r3, [pc, #128]	; (8004120 <init_menu+0x98>)
 800409e:	601a      	str	r2, [r3, #0]
	pp_gps_air = get_gps_air();
 80040a0:	f7ff fa8e 	bl	80035c0 <get_gps_air>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <init_menu+0x9c>)
 80040a8:	601a      	str	r2, [r3, #0]
	pp_gps_rel = get_gps_rel();
 80040aa:	f7ff faab 	bl	8003604 <get_gps_rel>
 80040ae:	4602      	mov	r2, r0
 80040b0:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <init_menu+0xa0>)
 80040b2:	601a      	str	r2, [r3, #0]
	pp_dev_aux = get_dev_aux();
 80040b4:	f7ff fac4 	bl	8003640 <get_dev_aux>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b1c      	ldr	r3, [pc, #112]	; (800412c <init_menu+0xa4>)
 80040bc:	601a      	str	r2, [r3, #0]

	pp_memory_slot = get_memory_slot();
 80040be:	f003 fef3 	bl	8007ea8 <get_memory_slot>
 80040c2:	4602      	mov	r2, r0
 80040c4:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <init_menu+0xa8>)
 80040c6:	601a      	str	r2, [r3, #0]

	p_settings = get_settings();
 80040c8:	f004 fd7a 	bl	8008bc0 <get_settings>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b19      	ldr	r3, [pc, #100]	; (8004134 <init_menu+0xac>)
 80040d0:	601a      	str	r2, [r3, #0]
	settings_copy = *p_settings;
 80040d2:	4b18      	ldr	r3, [pc, #96]	; (8004134 <init_menu+0xac>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b18      	ldr	r3, [pc, #96]	; (8004138 <init_menu+0xb0>)
 80040d8:	6810      	ldr	r0, [r2, #0]
 80040da:	6851      	ldr	r1, [r2, #4]
 80040dc:	6018      	str	r0, [r3, #0]
 80040de:	6059      	str	r1, [r3, #4]
 80040e0:	8912      	ldrh	r2, [r2, #8]
 80040e2:	811a      	strh	r2, [r3, #8]

	device_number = p_settings->device_number;
 80040e4:	4b13      	ldr	r3, [pc, #76]	; (8004134 <init_menu+0xac>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	4b14      	ldr	r3, [pc, #80]	; (800413c <init_menu+0xb4>)
 80040ec:	701a      	strb	r2, [r3, #0]

	p_send_interval_values = get_send_interval_values();
 80040ee:	f004 fd53 	bl	8008b98 <get_send_interval_values>
 80040f2:	4602      	mov	r2, r0
 80040f4:	4b12      	ldr	r3, [pc, #72]	; (8004140 <init_menu+0xb8>)
 80040f6:	601a      	str	r2, [r3, #0]
	p_get_tx_power_values = get_tx_power_values();
 80040f8:	f004 fd58 	bl	8008bac <get_tx_power_values>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <init_menu+0xbc>)
 8004100:	601a      	str	r2, [r3, #0]

    //init variables
    current_each_device = device_number;   //set me as current
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <init_menu+0xb4>)
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <init_menu+0xc0>)
 8004108:	701a      	strb	r2, [r3, #0]

    current_menu = M_MAIN;
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <init_menu+0xc4>)
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
    set_current_item(M_MAIN_I_DEVICES);
 8004110:	2000      	movs	r0, #0
 8004112:	f000 f9b3 	bl	800447c <set_current_item>
}
 8004116:	bf00      	nop
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000808 	.word	0x20000808
 8004120:	20000614 	.word	0x20000614
 8004124:	20000804 	.word	0x20000804
 8004128:	200007d0 	.word	0x200007d0
 800412c:	2000083c 	.word	0x2000083c
 8004130:	200007d4 	.word	0x200007d4
 8004134:	2000061c 	.word	0x2000061c
 8004138:	200007e0 	.word	0x200007e0
 800413c:	20000738 	.word	0x20000738
 8004140:	200007cc 	.word	0x200007cc
 8004144:	2000080c 	.word	0x2000080c
 8004148:	2000002a 	.word	0x2000002a
 800414c:	200007fa 	.word	0x200007fa

08004150 <change_menu>:



//Check for buttons and change menu if needed
void change_menu(uint8_t button_code)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
    if (button_code) //if any button was pressed
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d060      	beq.n	8004222 <change_menu+0xd2>
    {
    	if (ssd1306_get_display_status() == SSD1306_DISPLAY_ON) //if lcd is on
 8004160:	f005 f970 	bl	8009444 <ssd1306_get_display_status>
 8004164:	4603      	mov	r3, r0
 8004166:	2b01      	cmp	r3, #1
 8004168:	d156      	bne.n	8004218 <change_menu+0xc8>
    	{
			//search for exclusive operation for this case
			for (uint8_t i = 0; menu_exclusive_table[i].current_menu; i++)     //until end marker
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	e019      	b.n	80041a4 <change_menu+0x54>
			{
				if (current_menu == menu_exclusive_table[i].current_menu &&
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	4a2d      	ldr	r2, [pc, #180]	; (8004228 <change_menu+0xd8>)
 8004174:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8004178:	4b2c      	ldr	r3, [pc, #176]	; (800422c <change_menu+0xdc>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d10e      	bne.n	800419e <change_menu+0x4e>
					button_code == menu_exclusive_table[i].button_pressed)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	4a29      	ldr	r2, [pc, #164]	; (8004228 <change_menu+0xd8>)
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4413      	add	r3, r2
 8004188:	785b      	ldrb	r3, [r3, #1]
				if (current_menu == menu_exclusive_table[i].current_menu &&
 800418a:	79fa      	ldrb	r2, [r7, #7]
 800418c:	429a      	cmp	r2, r3
 800418e:	d106      	bne.n	800419e <change_menu+0x4e>
				{
					menu_exclusive_table[i].execute_function();
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	4a25      	ldr	r2, [pc, #148]	; (8004228 <change_menu+0xd8>)
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4798      	blx	r3
					return;         //exit
 800419c:	e041      	b.n	8004222 <change_menu+0xd2>
			for (uint8_t i = 0; menu_exclusive_table[i].current_menu; i++)     //until end marker
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	3301      	adds	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	4a20      	ldr	r2, [pc, #128]	; (8004228 <change_menu+0xd8>)
 80041a8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1df      	bne.n	8004170 <change_menu+0x20>
				}
			}

			//well, there is no exclusive operations for that case, perform default action
			switch (button_code)
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	d834      	bhi.n	8004222 <change_menu+0xd2>
 80041b8:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <change_menu+0x70>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	08004223 	.word	0x08004223
 80041c8:	080041ef 	.word	0x080041ef
 80041cc:	08004223 	.word	0x08004223
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	08004223 	.word	0x08004223
 80041d8:	08004201 	.word	0x08004201
 80041dc:	08004207 	.word	0x08004207
 80041e0:	080041fb 	.word	0x080041fb
 80041e4:	0800420d 	.word	0x0800420d
			{
				case BTN_UP:
					scroll_up();
 80041e8:	f000 f83e 	bl	8004268 <scroll_up>
					break;
 80041ec:	e019      	b.n	8004222 <change_menu+0xd2>

				case BTN_DOWN:
					scroll_down();
 80041ee:	f000 f85a 	bl	80042a6 <scroll_down>
					break;
 80041f2:	e016      	b.n	8004222 <change_menu+0xd2>

				case BTN_OK:
					switch_forward();
 80041f4:	f000 f876 	bl	80042e4 <switch_forward>
					break;
 80041f8:	e013      	b.n	8004222 <change_menu+0xd2>

				case BTN_ESC:
					switch_backward();
 80041fa:	f000 f8b3 	bl	8004364 <switch_backward>
					break;
 80041fe:	e010      	b.n	8004222 <change_menu+0xd2>

				case BTN_PWR:
					ssd1306_toggle_display();
 8004200:	f005 f908 	bl	8009414 <ssd1306_toggle_display>
					break;
 8004204:	e00d      	b.n	8004222 <change_menu+0xd2>

				case BTN_PWR_LONG:
					toggle_alarm();
 8004206:	f000 f813 	bl	8004230 <toggle_alarm>
					break;
 800420a:	e00a      	b.n	8004222 <change_menu+0xd2>

				case BTN_ESC_LONG:
					toggle_mute();
 800420c:	f005 fb4a 	bl	80098a4 <toggle_mute>
					draw_current_menu();
 8004210:	f000 f996 	bl	8004540 <draw_current_menu>
					break;
 8004214:	bf00      	nop
 8004216:	e004      	b.n	8004222 <change_menu+0xd2>
			}
    	}
    	else if (button_code == BTN_PWR)	//if lcd is off then check for PRW button was pressed. If so - toggle the lcd
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	2b07      	cmp	r3, #7
 800421c:	d101      	bne.n	8004222 <change_menu+0xd2>
    	{
    		ssd1306_toggle_display();
 800421e:	f005 f8f9 	bl	8009414 <ssd1306_toggle_display>
    	}
    }
}
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	0800d4b0 	.word	0x0800d4b0
 800422c:	200007fa 	.word	0x200007fa

08004230 <toggle_alarm>:



//Switch alarm status
void toggle_alarm(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
    if (get_device_flags(device_number, FLAGS_ALARM) == FLAG_ALARM_OFF)
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <toggle_alarm+0x34>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2104      	movs	r1, #4
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe fbc2 	bl	80029c4 <get_device_flags>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d104      	bne.n	8004250 <toggle_alarm+0x20>
    {
        set_device_flags(FLAGS_ALARM, FLAG_ALARM_ON);
 8004246:	2101      	movs	r1, #1
 8004248:	2004      	movs	r0, #4
 800424a:	f7fe fb3d 	bl	80028c8 <set_device_flags>
 800424e:	e003      	b.n	8004258 <toggle_alarm+0x28>
    }
    else
    {
        set_device_flags(FLAGS_ALARM, FLAG_ALARM_OFF);
 8004250:	2100      	movs	r1, #0
 8004252:	2004      	movs	r0, #4
 8004254:	f7fe fb38 	bl	80028c8 <set_device_flags>
    }
    
    check_alarms();	//immediately update alarm indication
 8004258:	f7fe fbf8 	bl	8002a4c <check_alarms>
    draw_current_menu();
 800425c:	f000 f970 	bl	8004540 <draw_current_menu>
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000738 	.word	0x20000738

08004268 <scroll_up>:



//Scroll current menu Up
void scroll_up(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
    uint8_t current = get_current_item();
 800426e:	f000 f8a5 	bl	80043bc <get_current_item>
 8004272:	4603      	mov	r3, r0
 8004274:	71fb      	strb	r3, [r7, #7]
    uint8_t last = get_last_item();
 8004276:	f000 f8d1 	bl	800441c <get_last_item>
 800427a:	4603      	mov	r3, r0
 800427c:	71bb      	strb	r3, [r7, #6]
    
    if (current == M_ALL_I_FIRST)
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d104      	bne.n	800428e <scroll_up+0x26>
    {
        set_current_item(last);
 8004284:	79bb      	ldrb	r3, [r7, #6]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f8f8 	bl	800447c <set_current_item>
 800428c:	e005      	b.n	800429a <scroll_up+0x32>
    }
    else
    {
        set_current_item(current - 1);
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	3b01      	subs	r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	4618      	mov	r0, r3
 8004296:	f000 f8f1 	bl	800447c <set_current_item>
    }
    
    draw_current_menu();
 800429a:	f000 f951 	bl	8004540 <draw_current_menu>
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <scroll_down>:



//Scroll current menu Down
void scroll_down(void)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
    uint8_t current = get_current_item();
 80042ac:	f000 f886 	bl	80043bc <get_current_item>
 80042b0:	4603      	mov	r3, r0
 80042b2:	71fb      	strb	r3, [r7, #7]
    uint8_t last = get_last_item();
 80042b4:	f000 f8b2 	bl	800441c <get_last_item>
 80042b8:	4603      	mov	r3, r0
 80042ba:	71bb      	strb	r3, [r7, #6]
    
    if (current == last)
 80042bc:	79fa      	ldrb	r2, [r7, #7]
 80042be:	79bb      	ldrb	r3, [r7, #6]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d103      	bne.n	80042cc <scroll_down+0x26>
    {
        set_current_item(M_ALL_I_FIRST);
 80042c4:	2000      	movs	r0, #0
 80042c6:	f000 f8d9 	bl	800447c <set_current_item>
 80042ca:	e005      	b.n	80042d8 <scroll_down+0x32>
    }
    else
    {
        set_current_item(current + 1);
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	3301      	adds	r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f8d2 	bl	800447c <set_current_item>
    }
    
    draw_current_menu();
 80042d8:	f000 f932 	bl	8004540 <draw_current_menu>
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <switch_forward>:



//Switch menu forward by default
void switch_forward(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; menu_forward_table[i].current_menu; i++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	71fb      	strb	r3, [r7, #7]
 80042ee:	e026      	b.n	800433e <switch_forward+0x5a>
    {
        if (current_menu == menu_forward_table[i].current_menu &&
 80042f0:	79fa      	ldrb	r2, [r7, #7]
 80042f2:	491a      	ldr	r1, [pc, #104]	; (800435c <switch_forward+0x78>)
 80042f4:	4613      	mov	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4413      	add	r3, r2
 80042fa:	440b      	add	r3, r1
 80042fc:	781a      	ldrb	r2, [r3, #0]
 80042fe:	4b18      	ldr	r3, [pc, #96]	; (8004360 <switch_forward+0x7c>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d118      	bne.n	8004338 <switch_forward+0x54>
            get_current_item() == menu_forward_table[i].current_item)
 8004306:	f000 f859 	bl	80043bc <get_current_item>
 800430a:	4603      	mov	r3, r0
 800430c:	4618      	mov	r0, r3
 800430e:	79fa      	ldrb	r2, [r7, #7]
 8004310:	4912      	ldr	r1, [pc, #72]	; (800435c <switch_forward+0x78>)
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	440b      	add	r3, r1
 800431a:	3301      	adds	r3, #1
 800431c:	781b      	ldrb	r3, [r3, #0]
        if (current_menu == menu_forward_table[i].current_menu &&
 800431e:	4298      	cmp	r0, r3
 8004320:	d10a      	bne.n	8004338 <switch_forward+0x54>
        {
            current_menu = menu_forward_table[i].next_menu;
 8004322:	79fa      	ldrb	r2, [r7, #7]
 8004324:	490d      	ldr	r1, [pc, #52]	; (800435c <switch_forward+0x78>)
 8004326:	4613      	mov	r3, r2
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	4413      	add	r3, r2
 800432c:	440b      	add	r3, r1
 800432e:	3302      	adds	r3, #2
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <switch_forward+0x7c>)
 8004334:	701a      	strb	r2, [r3, #0]
            break;
 8004336:	e00b      	b.n	8004350 <switch_forward+0x6c>
    for (uint8_t i = 0; menu_forward_table[i].current_menu; i++)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	3301      	adds	r3, #1
 800433c:	71fb      	strb	r3, [r7, #7]
 800433e:	79fa      	ldrb	r2, [r7, #7]
 8004340:	4906      	ldr	r1, [pc, #24]	; (800435c <switch_forward+0x78>)
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	440b      	add	r3, r1
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1cf      	bne.n	80042f0 <switch_forward+0xc>
        }
    }
    draw_current_menu();
 8004350:	f000 f8f6 	bl	8004540 <draw_current_menu>
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	0800d698 	.word	0x0800d698
 8004360:	200007fa 	.word	0x200007fa

08004364 <switch_backward>:



//Switch menu backward by default
void switch_backward(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; menu_backward_table[i].current_menu; i++)
 800436a:	2300      	movs	r3, #0
 800436c:	71fb      	strb	r3, [r7, #7]
 800436e:	e015      	b.n	800439c <switch_backward+0x38>
    {
        if (current_menu == menu_backward_table[i].current_menu)
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	4a10      	ldr	r2, [pc, #64]	; (80043b4 <switch_backward+0x50>)
 8004374:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <switch_backward+0x54>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d10a      	bne.n	8004396 <switch_backward+0x32>
        {
            set_current_item(M_ALL_I_FIRST);        //reset current item before exit
 8004380:	2000      	movs	r0, #0
 8004382:	f000 f87b 	bl	800447c <set_current_item>
            current_menu = menu_backward_table[i].next_menu;
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <switch_backward+0x50>)
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4413      	add	r3, r2
 800438e:	785a      	ldrb	r2, [r3, #1]
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <switch_backward+0x54>)
 8004392:	701a      	strb	r2, [r3, #0]
            break;
 8004394:	e008      	b.n	80043a8 <switch_backward+0x44>
    for (uint8_t i = 0; menu_backward_table[i].current_menu; i++)
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	3301      	adds	r3, #1
 800439a:	71fb      	strb	r3, [r7, #7]
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	4a05      	ldr	r2, [pc, #20]	; (80043b4 <switch_backward+0x50>)
 80043a0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e3      	bne.n	8004370 <switch_backward+0xc>
        }
    }
    draw_current_menu();
 80043a8:	f000 f8ca 	bl	8004540 <draw_current_menu>
}
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	0800d6d4 	.word	0x0800d6d4
 80043b8:	200007fa 	.word	0x200007fa

080043bc <get_current_item>:



//Get currently selected item in current menu
uint8_t get_current_item(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	71fb      	strb	r3, [r7, #7]
 80043c6:	e016      	b.n	80043f6 <get_current_item+0x3a>
    {
        if (current_menu == item_table[i].curent_menu)
 80043c8:	79fa      	ldrb	r2, [r7, #7]
 80043ca:	4912      	ldr	r1, [pc, #72]	; (8004414 <get_current_item+0x58>)
 80043cc:	4613      	mov	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	440b      	add	r3, r1
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <get_current_item+0x5c>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d108      	bne.n	80043f0 <get_current_item+0x34>
        {
            return item_table[i].cur_item;
 80043de:	79fa      	ldrb	r2, [r7, #7]
 80043e0:	490c      	ldr	r1, [pc, #48]	; (8004414 <get_current_item+0x58>)
 80043e2:	4613      	mov	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4413      	add	r3, r2
 80043e8:	440b      	add	r3, r1
 80043ea:	3301      	adds	r3, #1
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	e00c      	b.n	800440a <get_current_item+0x4e>
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	3301      	adds	r3, #1
 80043f4:	71fb      	strb	r3, [r7, #7]
 80043f6:	79fa      	ldrb	r2, [r7, #7]
 80043f8:	4906      	ldr	r1, [pc, #24]	; (8004414 <get_current_item+0x58>)
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	440b      	add	r3, r1
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1df      	bne.n	80043c8 <get_current_item+0xc>
        }
    }
    return 0;       //automatically return 0 if item not found in item_table[]
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	20000018 	.word	0x20000018
 8004418:	200007fa 	.word	0x200007fa

0800441c <get_last_item>:



//Get last item in current menu
uint8_t get_last_item(void)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 8004422:	2300      	movs	r3, #0
 8004424:	71fb      	strb	r3, [r7, #7]
 8004426:	e016      	b.n	8004456 <get_last_item+0x3a>
    {
        if (current_menu == item_table[i].curent_menu)
 8004428:	79fa      	ldrb	r2, [r7, #7]
 800442a:	4912      	ldr	r1, [pc, #72]	; (8004474 <get_last_item+0x58>)
 800442c:	4613      	mov	r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	4413      	add	r3, r2
 8004432:	440b      	add	r3, r1
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <get_last_item+0x5c>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d108      	bne.n	8004450 <get_last_item+0x34>
        {
            return item_table[i].last_item;
 800443e:	79fa      	ldrb	r2, [r7, #7]
 8004440:	490c      	ldr	r1, [pc, #48]	; (8004474 <get_last_item+0x58>)
 8004442:	4613      	mov	r3, r2
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	4413      	add	r3, r2
 8004448:	440b      	add	r3, r1
 800444a:	3302      	adds	r3, #2
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	e00c      	b.n	800446a <get_last_item+0x4e>
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	3301      	adds	r3, #1
 8004454:	71fb      	strb	r3, [r7, #7]
 8004456:	79fa      	ldrb	r2, [r7, #7]
 8004458:	4906      	ldr	r1, [pc, #24]	; (8004474 <get_last_item+0x58>)
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	440b      	add	r3, r1
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1df      	bne.n	8004428 <get_last_item+0xc>
        }
    }
    return 0;       //automatically return 0 if item not found in item_table[]
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	20000018 	.word	0x20000018
 8004478:	200007fa 	.word	0x200007fa

0800447c <set_current_item>:



//Set item to be current in current menu
void set_current_item(uint8_t new_value)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
 800448a:	e017      	b.n	80044bc <set_current_item+0x40>
    {
        if (current_menu == item_table[i].curent_menu)
 800448c:	7bfa      	ldrb	r2, [r7, #15]
 800448e:	4912      	ldr	r1, [pc, #72]	; (80044d8 <set_current_item+0x5c>)
 8004490:	4613      	mov	r3, r2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	4413      	add	r3, r2
 8004496:	440b      	add	r3, r1
 8004498:	781a      	ldrb	r2, [r3, #0]
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <set_current_item+0x60>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d109      	bne.n	80044b6 <set_current_item+0x3a>
        {
            item_table[i].cur_item = new_value;
 80044a2:	7bfa      	ldrb	r2, [r7, #15]
 80044a4:	490c      	ldr	r1, [pc, #48]	; (80044d8 <set_current_item+0x5c>)
 80044a6:	4613      	mov	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4413      	add	r3, r2
 80044ac:	440b      	add	r3, r1
 80044ae:	3301      	adds	r3, #1
 80044b0:	79fa      	ldrb	r2, [r7, #7]
 80044b2:	701a      	strb	r2, [r3, #0]
            break;
 80044b4:	e00b      	b.n	80044ce <set_current_item+0x52>
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	3301      	adds	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
 80044bc:	7bfa      	ldrb	r2, [r7, #15]
 80044be:	4906      	ldr	r1, [pc, #24]	; (80044d8 <set_current_item+0x5c>)
 80044c0:	4613      	mov	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	440b      	add	r3, r1
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1de      	bne.n	800448c <set_current_item+0x10>
        }
    }
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	20000018 	.word	0x20000018
 80044dc:	200007fa 	.word	0x200007fa

080044e0 <reset_current_item_in_menu>:



//Reset item in any menu
void reset_current_item_in_menu(uint8_t menu)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]
 80044ee:	e016      	b.n	800451e <reset_current_item_in_menu+0x3e>
    {
        if (menu == item_table[i].curent_menu)
 80044f0:	7bfa      	ldrb	r2, [r7, #15]
 80044f2:	4912      	ldr	r1, [pc, #72]	; (800453c <reset_current_item_in_menu+0x5c>)
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	440b      	add	r3, r1
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	79fa      	ldrb	r2, [r7, #7]
 8004500:	429a      	cmp	r2, r3
 8004502:	d109      	bne.n	8004518 <reset_current_item_in_menu+0x38>
        {
            item_table[i].cur_item = M_ALL_I_FIRST;
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	490d      	ldr	r1, [pc, #52]	; (800453c <reset_current_item_in_menu+0x5c>)
 8004508:	4613      	mov	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	440b      	add	r3, r1
 8004510:	3301      	adds	r3, #1
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
            break;
 8004516:	e00b      	b.n	8004530 <reset_current_item_in_menu+0x50>
    for (uint8_t i = 0; item_table[i].curent_menu; i++)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	3301      	adds	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
 800451e:	7bfa      	ldrb	r2, [r7, #15]
 8004520:	4906      	ldr	r1, [pc, #24]	; (800453c <reset_current_item_in_menu+0x5c>)
 8004522:	4613      	mov	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4413      	add	r3, r2
 8004528:	440b      	add	r3, r1
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1df      	bne.n	80044f0 <reset_current_item_in_menu+0x10>
        }
    }
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000018 	.word	0x20000018

08004540 <draw_current_menu>:



//Draw current menu
void draw_current_menu(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; menu_draw_table[i].current; i++)
 8004546:	2300      	movs	r3, #0
 8004548:	71fb      	strb	r3, [r7, #7]
 800454a:	e011      	b.n	8004570 <draw_current_menu+0x30>
    {
        if (current_menu == menu_draw_table[i].current)
 800454c:	79fb      	ldrb	r3, [r7, #7]
 800454e:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <draw_current_menu+0x44>)
 8004550:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <draw_current_menu+0x48>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d106      	bne.n	800456a <draw_current_menu+0x2a>
        {
            menu_draw_table[i].action();
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <draw_current_menu+0x44>)
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4798      	blx	r3
            break;
 8004568:	e008      	b.n	800457c <draw_current_menu+0x3c>
    for (uint8_t i = 0; menu_draw_table[i].current; i++)
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	3301      	adds	r3, #1
 800456e:	71fb      	strb	r3, [r7, #7]
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	4a04      	ldr	r2, [pc, #16]	; (8004584 <draw_current_menu+0x44>)
 8004574:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e7      	bne.n	800454c <draw_current_menu+0xc>
        }
    }
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	0800d6f0 	.word	0x0800d6f0
 8004588:	200007fa 	.word	0x200007fa

0800458c <draw_main>:



//MAIN
void draw_main(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
    #define MAIN_ROW               (2)
    #define MAIN_COL               (1)
    
    ssd1306_clear();
 8004590:	f004 ff8c 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, MAIN_COL, "MENU", 0);
 8004594:	2300      	movs	r3, #0
 8004596:	4a21      	ldr	r2, [pc, #132]	; (800461c <draw_main+0x90>)
 8004598:	2101      	movs	r1, #1
 800459a:	2000      	movs	r0, #0
 800459c:	f005 f88d 	bl	80096ba <ssd1306_print>
    ssd1306_print(MAIN_ROW, MAIN_COL, "Devices", 0);
 80045a0:	2300      	movs	r3, #0
 80045a2:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <draw_main+0x94>)
 80045a4:	2101      	movs	r1, #1
 80045a6:	2002      	movs	r0, #2
 80045a8:	f005 f887 	bl	80096ba <ssd1306_print>
    ssd1306_print(MAIN_ROW + 1, MAIN_COL, "Radar", 0);
 80045ac:	2300      	movs	r3, #0
 80045ae:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <draw_main+0x98>)
 80045b0:	2101      	movs	r1, #1
 80045b2:	2003      	movs	r0, #3
 80045b4:	f005 f881 	bl	80096ba <ssd1306_print>
    ssd1306_print(MAIN_ROW + 2, MAIN_COL, "Points", 0);
 80045b8:	2300      	movs	r3, #0
 80045ba:	4a1b      	ldr	r2, [pc, #108]	; (8004628 <draw_main+0x9c>)
 80045bc:	2101      	movs	r1, #1
 80045be:	2004      	movs	r0, #4
 80045c0:	f005 f87b 	bl	80096ba <ssd1306_print>
    ssd1306_print(MAIN_ROW + 3, MAIN_COL, "Settings", 0);
 80045c4:	2300      	movs	r3, #0
 80045c6:	4a19      	ldr	r2, [pc, #100]	; (800462c <draw_main+0xa0>)
 80045c8:	2101      	movs	r1, #1
 80045ca:	2005      	movs	r0, #5
 80045cc:	f005 f875 	bl	80096ba <ssd1306_print>
    ssd1306_print(MAIN_ROW + 4, MAIN_COL, "Info", 0);
 80045d0:	2300      	movs	r3, #0
 80045d2:	4a17      	ldr	r2, [pc, #92]	; (8004630 <draw_main+0xa4>)
 80045d4:	2101      	movs	r1, #1
 80045d6:	2006      	movs	r0, #6
 80045d8:	f005 f86f 	bl	80096ba <ssd1306_print>
    ssd1306_print(MAIN_ROW + get_current_item(), MAIN_COL - 1, ">", 0);
 80045dc:	f7ff feee 	bl	80043bc <get_current_item>
 80045e0:	4603      	mov	r3, r0
 80045e2:	3302      	adds	r3, #2
 80045e4:	b2d8      	uxtb	r0, r3
 80045e6:	2300      	movs	r3, #0
 80045e8:	4a12      	ldr	r2, [pc, #72]	; (8004634 <draw_main+0xa8>)
 80045ea:	2100      	movs	r1, #0
 80045ec:	f005 f865 	bl	80096ba <ssd1306_print>

    ssd1306_char_pos(0, 20, SYMB_NOTE, 0);
 80045f0:	2300      	movs	r3, #0
 80045f2:	228f      	movs	r2, #143	; 0x8f
 80045f4:	2114      	movs	r1, #20
 80045f6:	2000      	movs	r0, #0
 80045f8:	f005 f840 	bl	800967c <ssd1306_char_pos>
    if (get_mute_flag() == 1)
 80045fc:	f005 f968 	bl	80098d0 <get_mute_flag>
 8004600:	4603      	mov	r3, r0
 8004602:	2b01      	cmp	r3, #1
 8004604:	d105      	bne.n	8004612 <draw_main+0x86>
    {
    	ssd1306_char_pos(0, 19, '!', 0);
 8004606:	2300      	movs	r3, #0
 8004608:	2221      	movs	r2, #33	; 0x21
 800460a:	2113      	movs	r1, #19
 800460c:	2000      	movs	r0, #0
 800460e:	f005 f835 	bl	800967c <ssd1306_char_pos>
    }

    ssd1306_update();
 8004612:	f004 ff21 	bl	8009458 <ssd1306_update>
}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	0800cf40 	.word	0x0800cf40
 8004620:	0800cf48 	.word	0x0800cf48
 8004624:	0800cf50 	.word	0x0800cf50
 8004628:	0800cf58 	.word	0x0800cf58
 800462c:	0800cf60 	.word	0x0800cf60
 8004630:	0800cf6c 	.word	0x0800cf6c
 8004634:	0800cf74 	.word	0x0800cf74

08004638 <draw_devices>:



//DEVICES
void draw_devices(void)
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
    ssd1306_clear();
 800463e:	f004 ff35 	bl	80094ac <ssd1306_clear>
    ssd1306_bitmap(&devices_blank[0]);
 8004642:	4897      	ldr	r0, [pc, #604]	; (80048a0 <draw_devices+0x268>)
 8004644:	f005 f8b0 	bl	80097a8 <ssd1306_bitmap>
    
    //TRX
    if (get_main_flags()->gps_sync && p_gps_num->status == GPS_DATA_VALID)
 8004648:	f7ff fcfa 	bl	8004040 <get_main_flags>
 800464c:	4603      	mov	r3, r0
 800464e:	785b      	ldrb	r3, [r3, #1]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d011      	beq.n	8004678 <draw_devices+0x40>
 8004654:	4b93      	ldr	r3, [pc, #588]	; (80048a4 <draw_devices+0x26c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10b      	bne.n	8004678 <draw_devices+0x40>
    {
        ssd1306_char_pos(0, 18, SYMB_ARROW_UP, 0);
 8004660:	2300      	movs	r3, #0
 8004662:	2280      	movs	r2, #128	; 0x80
 8004664:	2112      	movs	r1, #18
 8004666:	2000      	movs	r0, #0
 8004668:	f005 f808 	bl	800967c <ssd1306_char_pos>
        ssd1306_char_pos(0, 19, SYMB_ARROW_DOWN, 0);
 800466c:	2300      	movs	r3, #0
 800466e:	2281      	movs	r2, #129	; 0x81
 8004670:	2113      	movs	r1, #19
 8004672:	2000      	movs	r0, #0
 8004674:	f005 f802 	bl	800967c <ssd1306_char_pos>
    }
    
    //Sattelites
    if (p_gps_raw->time[0] == 0)                           //if no time received then no sattelites at all
 8004678:	4b8b      	ldr	r3, [pc, #556]	; (80048a8 <draw_devices+0x270>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <draw_devices+0x58>
    {
        ssd1306_char_pos(0, 20, SYMB_NO_SATT, 0);
 8004682:	2300      	movs	r3, #0
 8004684:	2282      	movs	r2, #130	; 0x82
 8004686:	2114      	movs	r1, #20
 8004688:	2000      	movs	r0, #0
 800468a:	f004 fff7 	bl	800967c <ssd1306_char_pos>
 800468e:	e02b      	b.n	80046e8 <draw_devices+0xb0>
    }
    else
    {
        if (p_gps_num->mode == GPS_POSITION_3DFIX && p_gps_num->status == GPS_DATA_VALID)
 8004690:	4b84      	ldr	r3, [pc, #528]	; (80048a4 <draw_devices+0x26c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004698:	2b03      	cmp	r3, #3
 800469a:	d10c      	bne.n	80046b6 <draw_devices+0x7e>
 800469c:	4b81      	ldr	r3, [pc, #516]	; (80048a4 <draw_devices+0x26c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d106      	bne.n	80046b6 <draw_devices+0x7e>
        {
            ssd1306_char_pos(0, 20, SYMB_SATT_3D, 0);   //3D when data is valid
 80046a8:	2300      	movs	r3, #0
 80046aa:	2285      	movs	r2, #133	; 0x85
 80046ac:	2114      	movs	r1, #20
 80046ae:	2000      	movs	r0, #0
 80046b0:	f004 ffe4 	bl	800967c <ssd1306_char_pos>
 80046b4:	e018      	b.n	80046e8 <draw_devices+0xb0>
        }
        else if (p_gps_num->mode == GPS_POSITION_2DFIX && p_gps_num->status == GPS_DATA_VALID)
 80046b6:	4b7b      	ldr	r3, [pc, #492]	; (80048a4 <draw_devices+0x26c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d10c      	bne.n	80046dc <draw_devices+0xa4>
 80046c2:	4b78      	ldr	r3, [pc, #480]	; (80048a4 <draw_devices+0x26c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d106      	bne.n	80046dc <draw_devices+0xa4>
        {
            ssd1306_char_pos(0, 20, SYMB_SATT_2D, 0);   //2D when data is valid
 80046ce:	2300      	movs	r3, #0
 80046d0:	2284      	movs	r2, #132	; 0x84
 80046d2:	2114      	movs	r1, #20
 80046d4:	2000      	movs	r0, #0
 80046d6:	f004 ffd1 	bl	800967c <ssd1306_char_pos>
 80046da:	e005      	b.n	80046e8 <draw_devices+0xb0>
        }
        else
        {
            ssd1306_char_pos(0, 20, SYMB_SATT_1D, 0);   //if not 2D or 3D then only time is avaliable
 80046dc:	2300      	movs	r3, #0
 80046de:	2283      	movs	r2, #131	; 0x83
 80046e0:	2114      	movs	r1, #20
 80046e2:	2000      	movs	r0, #0
 80046e4:	f004 ffca 	bl	800967c <ssd1306_char_pos>
        }
    }
    
    uint8_t icon_col = LCD_LAST_COL;
 80046e8:	2314      	movs	r3, #20
 80046ea:	71fb      	strb	r3, [r7, #7]
    
    //Battery
    switch (get_device_flags(device_number, FLAGS_BATTERY))
 80046ec:	4b6f      	ldr	r3, [pc, #444]	; (80048ac <draw_devices+0x274>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2101      	movs	r1, #1
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe f966 	bl	80029c4 <get_device_flags>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d839      	bhi.n	8004772 <draw_devices+0x13a>
 80046fe:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <draw_devices+0xcc>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004761 	.word	0x08004761
 8004708:	0800474f 	.word	0x0800474f
 800470c:	0800473d 	.word	0x0800473d
 8004710:	0800472b 	.word	0x0800472b
 8004714:	08004719 	.word	0x08004719
    {
        case FLAG_BATTERY_75_TO_100:
            ssd1306_char_pos(1, icon_col--, SYMB_BAT_4OF4, 0);
 8004718:	79f9      	ldrb	r1, [r7, #7]
 800471a:	1e4b      	subs	r3, r1, #1
 800471c:	71fb      	strb	r3, [r7, #7]
 800471e:	2300      	movs	r3, #0
 8004720:	228c      	movs	r2, #140	; 0x8c
 8004722:	2001      	movs	r0, #1
 8004724:	f004 ffaa 	bl	800967c <ssd1306_char_pos>
            break;
 8004728:	e023      	b.n	8004772 <draw_devices+0x13a>
        
        case FLAG_BATTERY_50_TO_75:
            ssd1306_char_pos(1, icon_col--, SYMB_BAT_3OF4, 0);
 800472a:	79f9      	ldrb	r1, [r7, #7]
 800472c:	1e4b      	subs	r3, r1, #1
 800472e:	71fb      	strb	r3, [r7, #7]
 8004730:	2300      	movs	r3, #0
 8004732:	228b      	movs	r2, #139	; 0x8b
 8004734:	2001      	movs	r0, #1
 8004736:	f004 ffa1 	bl	800967c <ssd1306_char_pos>
            break;
 800473a:	e01a      	b.n	8004772 <draw_devices+0x13a>
        
        case FLAG_BATTERY_25_TO_50:
            ssd1306_char_pos(1, icon_col--, SYMB_BAT_2OF4, 0);
 800473c:	79f9      	ldrb	r1, [r7, #7]
 800473e:	1e4b      	subs	r3, r1, #1
 8004740:	71fb      	strb	r3, [r7, #7]
 8004742:	2300      	movs	r3, #0
 8004744:	228a      	movs	r2, #138	; 0x8a
 8004746:	2001      	movs	r0, #1
 8004748:	f004 ff98 	bl	800967c <ssd1306_char_pos>
            break;
 800474c:	e011      	b.n	8004772 <draw_devices+0x13a>
        
        case FLAG_BATTERY_10_TO_25:
            ssd1306_char_pos(1, icon_col--, SYMB_BAT_1OF4, 0);
 800474e:	79f9      	ldrb	r1, [r7, #7]
 8004750:	1e4b      	subs	r3, r1, #1
 8004752:	71fb      	strb	r3, [r7, #7]
 8004754:	2300      	movs	r3, #0
 8004756:	2289      	movs	r2, #137	; 0x89
 8004758:	2001      	movs	r0, #1
 800475a:	f004 ff8f 	bl	800967c <ssd1306_char_pos>
            break;
 800475e:	e008      	b.n	8004772 <draw_devices+0x13a>
        
        case FLAG_BATTERY_0_TO_10:
            ssd1306_char_pos(1, icon_col--, SYMB_BAT_0OF4, 0);
 8004760:	79f9      	ldrb	r1, [r7, #7]
 8004762:	1e4b      	subs	r3, r1, #1
 8004764:	71fb      	strb	r3, [r7, #7]
 8004766:	2300      	movs	r3, #0
 8004768:	2288      	movs	r2, #136	; 0x88
 800476a:	2001      	movs	r0, #1
 800476c:	f004 ff86 	bl	800967c <ssd1306_char_pos>
            break;
 8004770:	bf00      	nop
    }
    
    

    //Timeout
    if (pp_dev_aux[device_number]->timeout_flag)
 8004772:	4b4f      	ldr	r3, [pc, #316]	; (80048b0 <draw_devices+0x278>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b4d      	ldr	r3, [pc, #308]	; (80048ac <draw_devices+0x274>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	7b1b      	ldrb	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <draw_devices+0x15e>
    {
        ssd1306_char_pos(1, icon_col--, SYMB_TIMEOUT, 0);
 8004786:	79f9      	ldrb	r1, [r7, #7]
 8004788:	1e4b      	subs	r3, r1, #1
 800478a:	71fb      	strb	r3, [r7, #7]
 800478c:	2300      	movs	r3, #0
 800478e:	2286      	movs	r2, #134	; 0x86
 8004790:	2001      	movs	r0, #1
 8004792:	f004 ff73 	bl	800967c <ssd1306_char_pos>
    }



    //Alarm
    if (get_device_flags(device_number, FLAGS_ALARM) == FLAG_ALARM_ON)
 8004796:	4b45      	ldr	r3, [pc, #276]	; (80048ac <draw_devices+0x274>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2104      	movs	r1, #4
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe f911 	bl	80029c4 <get_device_flags>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d107      	bne.n	80047b8 <draw_devices+0x180>
    {
        ssd1306_char_pos(1, icon_col--, SYMB_ALARM, 0);
 80047a8:	79f9      	ldrb	r1, [r7, #7]
 80047aa:	1e4b      	subs	r3, r1, #1
 80047ac:	71fb      	strb	r3, [r7, #7]
 80047ae:	2300      	movs	r3, #0
 80047b0:	2287      	movs	r2, #135	; 0x87
 80047b2:	2001      	movs	r0, #1
 80047b4:	f004 ff62 	bl	800967c <ssd1306_char_pos>
    }



    //Devices
    uint8_t another_dev_row = ANOTHER_DEVICE_START_ROW;    //start to print another devices from row 3
 80047b8:	2303      	movs	r3, #3
 80047ba:	71bb      	strb	r3, [r7, #6]
    
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 80047bc:	2301      	movs	r3, #1
 80047be:	717b      	strb	r3, [r7, #5]
 80047c0:	e291      	b.n	8004ce6 <draw_devices+0x6ae>
    {
        if (dev == device_number)      //if me
 80047c2:	4b3a      	ldr	r3, [pc, #232]	; (80048ac <draw_devices+0x274>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	797a      	ldrb	r2, [r7, #5]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d17b      	bne.n	80048c4 <draw_devices+0x28c>
        {
            //Number
            itoa32(dev, &buf[0]);
 80047cc:	797b      	ldrb	r3, [r7, #5]
 80047ce:	4939      	ldr	r1, [pc, #228]	; (80048b4 <draw_devices+0x27c>)
 80047d0:	4618      	mov	r0, r3
 80047d2:	f004 f965 	bl	8008aa0 <itoa32>
            ssd1306_print(1, 0, &buf[0], 0);
 80047d6:	2300      	movs	r3, #0
 80047d8:	4a36      	ldr	r2, [pc, #216]	; (80048b4 <draw_devices+0x27c>)
 80047da:	2100      	movs	r1, #0
 80047dc:	2001      	movs	r0, #1
 80047de:	f004 ff6c 	bl	80096ba <ssd1306_print>
            
            //ID
            ssd1306_char_pos(1, 2, p_settings->device_id[0], 0);
 80047e2:	4b35      	ldr	r3, [pc, #212]	; (80048b8 <draw_devices+0x280>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	785a      	ldrb	r2, [r3, #1]
 80047e8:	2300      	movs	r3, #0
 80047ea:	2102      	movs	r1, #2
 80047ec:	2001      	movs	r0, #1
 80047ee:	f004 ff45 	bl	800967c <ssd1306_char_pos>
            ssd1306_char_pos(1, 3, p_settings->device_id[1], 0);
 80047f2:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <draw_devices+0x280>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	789a      	ldrb	r2, [r3, #2]
 80047f8:	2300      	movs	r3, #0
 80047fa:	2103      	movs	r1, #3
 80047fc:	2001      	movs	r0, #1
 80047fe:	f004 ff3d 	bl	800967c <ssd1306_char_pos>
            
            //Speed
            if (p_gps_num->speed < 10.0)   //if speed is small show x.x format
 8004802:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <draw_devices+0x26c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	492c      	ldr	r1, [pc, #176]	; (80048bc <draw_devices+0x284>)
 800480a:	4618      	mov	r0, r3
 800480c:	f7fc fc60 	bl	80010d0 <__aeabi_fcmplt>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00e      	beq.n	8004834 <draw_devices+0x1fc>
            {
                ftoa32(p_gps_num->speed, 1, &buf[0]);
 8004816:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <draw_devices+0x26c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	4a25      	ldr	r2, [pc, #148]	; (80048b4 <draw_devices+0x27c>)
 800481e:	2101      	movs	r1, #1
 8004820:	4618      	mov	r0, r3
 8004822:	f003 ffed 	bl	8008800 <ftoa32>
                ssd1306_print_viceversa(1, 7, &buf[0], 0);
 8004826:	2300      	movs	r3, #0
 8004828:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <draw_devices+0x27c>)
 800482a:	2107      	movs	r1, #7
 800482c:	2001      	movs	r0, #1
 800482e:	f004 ff67 	bl	8009700 <ssd1306_print_viceversa>
 8004832:	e010      	b.n	8004856 <draw_devices+0x21e>
            }
            else    //else show int format
            {
                itoa32(pp_gps_air[dev]->speed, &buf[0]);
 8004834:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <draw_devices+0x288>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	797b      	ldrb	r3, [r7, #5]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	7b9b      	ldrb	r3, [r3, #14]
 8004842:	491c      	ldr	r1, [pc, #112]	; (80048b4 <draw_devices+0x27c>)
 8004844:	4618      	mov	r0, r3
 8004846:	f004 f92b 	bl	8008aa0 <itoa32>
                ssd1306_print_viceversa(1, 7, &buf[0], 0);
 800484a:	2300      	movs	r3, #0
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <draw_devices+0x27c>)
 800484e:	2107      	movs	r1, #7
 8004850:	2001      	movs	r0, #1
 8004852:	f004 ff55 	bl	8009700 <ssd1306_print_viceversa>
            }
            
            //Course
            itoa32(pp_gps_air[dev]->course.as_integer, &buf[0]);
 8004856:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <draw_devices+0x288>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	797b      	ldrb	r3, [r7, #5]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	8a1b      	ldrh	r3, [r3, #16]
 8004864:	4913      	ldr	r1, [pc, #76]	; (80048b4 <draw_devices+0x27c>)
 8004866:	4618      	mov	r0, r3
 8004868:	f004 f91a 	bl	8008aa0 <itoa32>
            ssd1306_print_viceversa(1, 11, &buf[0], 0);
 800486c:	2300      	movs	r3, #0
 800486e:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <draw_devices+0x27c>)
 8004870:	210b      	movs	r1, #11
 8004872:	2001      	movs	r0, #1
 8004874:	f004 ff44 	bl	8009700 <ssd1306_print_viceversa>
            
            //Altitude
            itoa32(pp_gps_air[dev]->altitude.as_integer, &buf[0]);
 8004878:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <draw_devices+0x288>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	797b      	ldrb	r3, [r7, #5]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004888:	490a      	ldr	r1, [pc, #40]	; (80048b4 <draw_devices+0x27c>)
 800488a:	4618      	mov	r0, r3
 800488c:	f004 f908 	bl	8008aa0 <itoa32>
            ssd1306_print_viceversa(1, 16, &buf[0], 0);
 8004890:	2300      	movs	r3, #0
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <draw_devices+0x27c>)
 8004894:	2110      	movs	r1, #16
 8004896:	2001      	movs	r0, #1
 8004898:	f004 ff32 	bl	8009700 <ssd1306_print_viceversa>
 800489c:	e220      	b.n	8004ce0 <draw_devices+0x6a8>
 800489e:	bf00      	nop
 80048a0:	0800deac 	.word	0x0800deac
 80048a4:	20000614 	.word	0x20000614
 80048a8:	20000808 	.word	0x20000808
 80048ac:	20000738 	.word	0x20000738
 80048b0:	2000083c 	.word	0x2000083c
 80048b4:	20000810 	.word	0x20000810
 80048b8:	2000061c 	.word	0x2000061c
 80048bc:	41200000 	.word	0x41200000
 80048c0:	20000804 	.word	0x20000804
        }
        else
        {
            if (pp_dev_aux[dev]->exist_flag == 1)        //if not me & exist
 80048c4:	4b94      	ldr	r3, [pc, #592]	; (8004b18 <draw_devices+0x4e0>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	797b      	ldrb	r3, [r7, #5]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	f040 8204 	bne.w	8004ce0 <draw_devices+0x6a8>
            {
                //Number
                itoa32(dev, &buf[0]);
 80048d8:	797b      	ldrb	r3, [r7, #5]
 80048da:	4990      	ldr	r1, [pc, #576]	; (8004b1c <draw_devices+0x4e4>)
 80048dc:	4618      	mov	r0, r3
 80048de:	f004 f8df 	bl	8008aa0 <itoa32>
                ssd1306_print(another_dev_row, 0, &buf[0], 0);
 80048e2:	79b8      	ldrb	r0, [r7, #6]
 80048e4:	2300      	movs	r3, #0
 80048e6:	4a8d      	ldr	r2, [pc, #564]	; (8004b1c <draw_devices+0x4e4>)
 80048e8:	2100      	movs	r1, #0
 80048ea:	f004 fee6 	bl	80096ba <ssd1306_print>
                
                //ID
                ssd1306_char_pos(another_dev_row, 2, pp_gps_air[dev]->device_id[0], 0);
 80048ee:	4b8c      	ldr	r3, [pc, #560]	; (8004b20 <draw_devices+0x4e8>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	797b      	ldrb	r3, [r7, #5]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	79b8      	ldrb	r0, [r7, #6]
 80048fe:	2300      	movs	r3, #0
 8004900:	2102      	movs	r1, #2
 8004902:	f004 febb 	bl	800967c <ssd1306_char_pos>
                ssd1306_char_pos(another_dev_row, 3, pp_gps_air[dev]->device_id[1], 0);
 8004906:	4b86      	ldr	r3, [pc, #536]	; (8004b20 <draw_devices+0x4e8>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	797b      	ldrb	r3, [r7, #5]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	785a      	ldrb	r2, [r3, #1]
 8004914:	79b8      	ldrb	r0, [r7, #6]
 8004916:	2300      	movs	r3, #0
 8004918:	2103      	movs	r1, #3
 800491a:	f004 feaf 	bl	800967c <ssd1306_char_pos>
                
                //Distance
                if (pp_gps_rel[dev]->distance < 1000)           //1-999 m
 800491e:	4b81      	ldr	r3, [pc, #516]	; (8004b24 <draw_devices+0x4ec>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	797b      	ldrb	r3, [r7, #5]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004930:	d211      	bcs.n	8004956 <draw_devices+0x31e>
                {
                    itoa32(pp_gps_rel[dev]->distance, &buf[0]);
 8004932:	4b7c      	ldr	r3, [pc, #496]	; (8004b24 <draw_devices+0x4ec>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	797b      	ldrb	r3, [r7, #5]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4976      	ldr	r1, [pc, #472]	; (8004b1c <draw_devices+0x4e4>)
 8004942:	4618      	mov	r0, r3
 8004944:	f004 f8ac 	bl	8008aa0 <itoa32>
                    ssd1306_print_viceversa(another_dev_row, 7, &buf[0], 0);
 8004948:	79b8      	ldrb	r0, [r7, #6]
 800494a:	2300      	movs	r3, #0
 800494c:	4a73      	ldr	r2, [pc, #460]	; (8004b1c <draw_devices+0x4e4>)
 800494e:	2107      	movs	r1, #7
 8004950:	f004 fed6 	bl	8009700 <ssd1306_print_viceversa>
 8004954:	e06f      	b.n	8004a36 <draw_devices+0x3fe>
                }
                else if (pp_gps_rel[dev]->distance < 10000)     //1.0-9.9 km
 8004956:	4b73      	ldr	r3, [pc, #460]	; (8004b24 <draw_devices+0x4ec>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	797b      	ldrb	r3, [r7, #5]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f242 720f 	movw	r2, #9999	; 0x270f
 8004968:	4293      	cmp	r3, r2
 800496a:	d825      	bhi.n	80049b8 <draw_devices+0x380>
                {
                    tmpf = pp_gps_rel[dev]->distance / 1000.0;
 800496c:	4b6d      	ldr	r3, [pc, #436]	; (8004b24 <draw_devices+0x4ec>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	797b      	ldrb	r3, [r7, #5]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fb fd3a 	bl	80003f4 <__aeabi_ui2d>
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	4b68      	ldr	r3, [pc, #416]	; (8004b28 <draw_devices+0x4f0>)
 8004986:	f7fb fed9 	bl	800073c <__aeabi_ddiv>
 800498a:	4603      	mov	r3, r0
 800498c:	460c      	mov	r4, r1
 800498e:	4618      	mov	r0, r3
 8004990:	4621      	mov	r1, r4
 8004992:	f7fc f8a1 	bl	8000ad8 <__aeabi_d2f>
 8004996:	4602      	mov	r2, r0
 8004998:	4b64      	ldr	r3, [pc, #400]	; (8004b2c <draw_devices+0x4f4>)
 800499a:	601a      	str	r2, [r3, #0]
                    ftoa32(tmpf, 1, &buf[0]);
 800499c:	4b63      	ldr	r3, [pc, #396]	; (8004b2c <draw_devices+0x4f4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a5e      	ldr	r2, [pc, #376]	; (8004b1c <draw_devices+0x4e4>)
 80049a2:	2101      	movs	r1, #1
 80049a4:	4618      	mov	r0, r3
 80049a6:	f003 ff2b 	bl	8008800 <ftoa32>
                    ssd1306_print_viceversa(another_dev_row, 7, &buf[0], 0);
 80049aa:	79b8      	ldrb	r0, [r7, #6]
 80049ac:	2300      	movs	r3, #0
 80049ae:	4a5b      	ldr	r2, [pc, #364]	; (8004b1c <draw_devices+0x4e4>)
 80049b0:	2107      	movs	r1, #7
 80049b2:	f004 fea5 	bl	8009700 <ssd1306_print_viceversa>
 80049b6:	e03e      	b.n	8004a36 <draw_devices+0x3fe>
                }
                else if (pp_gps_rel[dev]->distance < 100000)    //10.-99. km
 80049b8:	4b5a      	ldr	r3, [pc, #360]	; (8004b24 <draw_devices+0x4ec>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	797b      	ldrb	r3, [r7, #5]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a5a      	ldr	r2, [pc, #360]	; (8004b30 <draw_devices+0x4f8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d82e      	bhi.n	8004a2a <draw_devices+0x3f2>
                {
                    tmpf = pp_gps_rel[dev]->distance / 1000.0;
 80049cc:	4b55      	ldr	r3, [pc, #340]	; (8004b24 <draw_devices+0x4ec>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	797b      	ldrb	r3, [r7, #5]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fb fd0a 	bl	80003f4 <__aeabi_ui2d>
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	4b50      	ldr	r3, [pc, #320]	; (8004b28 <draw_devices+0x4f0>)
 80049e6:	f7fb fea9 	bl	800073c <__aeabi_ddiv>
 80049ea:	4603      	mov	r3, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	4618      	mov	r0, r3
 80049f0:	4621      	mov	r1, r4
 80049f2:	f7fc f871 	bl	8000ad8 <__aeabi_d2f>
 80049f6:	4602      	mov	r2, r0
 80049f8:	4b4c      	ldr	r3, [pc, #304]	; (8004b2c <draw_devices+0x4f4>)
 80049fa:	601a      	str	r2, [r3, #0]
                    itoa32((uint32_t)tmpf, &buf[0]);
 80049fc:	4b4b      	ldr	r3, [pc, #300]	; (8004b2c <draw_devices+0x4f4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fc fbb3 	bl	800116c <__aeabi_f2uiz>
 8004a06:	4603      	mov	r3, r0
 8004a08:	4944      	ldr	r1, [pc, #272]	; (8004b1c <draw_devices+0x4e4>)
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f004 f848 	bl	8008aa0 <itoa32>
                    ssd1306_print_viceversa(another_dev_row, 6, &buf[0], 0);
 8004a10:	79b8      	ldrb	r0, [r7, #6]
 8004a12:	2300      	movs	r3, #0
 8004a14:	4a41      	ldr	r2, [pc, #260]	; (8004b1c <draw_devices+0x4e4>)
 8004a16:	2106      	movs	r1, #6
 8004a18:	f004 fe72 	bl	8009700 <ssd1306_print_viceversa>
                    ssd1306_char_pos(another_dev_row, 7, '.', 0);
 8004a1c:	79b8      	ldrb	r0, [r7, #6]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	222e      	movs	r2, #46	; 0x2e
 8004a22:	2107      	movs	r1, #7
 8004a24:	f004 fe2a 	bl	800967c <ssd1306_char_pos>
 8004a28:	e005      	b.n	8004a36 <draw_devices+0x3fe>
                }
                else                                        // >100 km
                {
                    ssd1306_print(another_dev_row, 5, "...", 0);
 8004a2a:	79b8      	ldrb	r0, [r7, #6]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4a41      	ldr	r2, [pc, #260]	; (8004b34 <draw_devices+0x4fc>)
 8004a30:	2105      	movs	r1, #5
 8004a32:	f004 fe42 	bl	80096ba <ssd1306_print>
                }
                
                //Heading
                itoa32(pp_gps_rel[dev]->heading, &buf[0]);
 8004a36:	4b3b      	ldr	r3, [pc, #236]	; (8004b24 <draw_devices+0x4ec>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	797b      	ldrb	r3, [r7, #5]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	889b      	ldrh	r3, [r3, #4]
 8004a44:	4935      	ldr	r1, [pc, #212]	; (8004b1c <draw_devices+0x4e4>)
 8004a46:	4618      	mov	r0, r3
 8004a48:	f004 f82a 	bl	8008aa0 <itoa32>
                ssd1306_print_viceversa(another_dev_row, 11, &buf[0], 0);
 8004a4c:	79b8      	ldrb	r0, [r7, #6]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	4a32      	ldr	r2, [pc, #200]	; (8004b1c <draw_devices+0x4e4>)
 8004a52:	210b      	movs	r1, #11
 8004a54:	f004 fe54 	bl	8009700 <ssd1306_print_viceversa>
                
                //Delta Altitude
                tmpi16 = pp_gps_rel[dev]->altitude_diff;
 8004a58:	4b32      	ldr	r3, [pc, #200]	; (8004b24 <draw_devices+0x4ec>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	797b      	ldrb	r3, [r7, #5]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004a68:	4b33      	ldr	r3, [pc, #204]	; (8004b38 <draw_devices+0x500>)
 8004a6a:	801a      	strh	r2, [r3, #0]
                if (tmpi16 < 0)
 8004a6c:	4b32      	ldr	r3, [pc, #200]	; (8004b38 <draw_devices+0x500>)
 8004a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	da08      	bge.n	8004a88 <draw_devices+0x450>
                {
                    tmpi16 *= -1;
 8004a76:	4b30      	ldr	r3, [pc, #192]	; (8004b38 <draw_devices+0x500>)
 8004a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	425b      	negs	r3, r3
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	b21a      	sxth	r2, r3
 8004a84:	4b2c      	ldr	r3, [pc, #176]	; (8004b38 <draw_devices+0x500>)
 8004a86:	801a      	strh	r2, [r3, #0]
                }
                
                if (tmpi16 < 1000)           //1-999 m
 8004a88:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <draw_devices+0x500>)
 8004a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a92:	da12      	bge.n	8004aba <draw_devices+0x482>
                {
                    itoa32(pp_gps_rel[dev]->altitude_diff, &buf[0]);
 8004a94:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <draw_devices+0x4ec>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	797b      	ldrb	r3, [r7, #5]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004aa4:	491d      	ldr	r1, [pc, #116]	; (8004b1c <draw_devices+0x4e4>)
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f003 fffa 	bl	8008aa0 <itoa32>
                    ssd1306_print_viceversa(another_dev_row, 16, &buf[0], 0);
 8004aac:	79b8      	ldrb	r0, [r7, #6]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <draw_devices+0x4e4>)
 8004ab2:	2110      	movs	r1, #16
 8004ab4:	f004 fe24 	bl	8009700 <ssd1306_print_viceversa>
 8004ab8:	e06f      	b.n	8004b9a <draw_devices+0x562>
                }
                else if (tmpi16 < 10000)     //1.0-9.9 km
 8004aba:	4b1f      	ldr	r3, [pc, #124]	; (8004b38 <draw_devices+0x500>)
 8004abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ac0:	f242 720f 	movw	r2, #9999	; 0x270f
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	dc39      	bgt.n	8004b3c <draw_devices+0x504>
                {
                    tmpf = pp_gps_rel[dev]->altitude_diff / 1000.0;
 8004ac8:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <draw_devices+0x4ec>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	797b      	ldrb	r3, [r7, #5]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fb fc9b 	bl	8000414 <__aeabi_i2d>
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <draw_devices+0x4f0>)
 8004ae4:	f7fb fe2a 	bl	800073c <__aeabi_ddiv>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	460c      	mov	r4, r1
 8004aec:	4618      	mov	r0, r3
 8004aee:	4621      	mov	r1, r4
 8004af0:	f7fb fff2 	bl	8000ad8 <__aeabi_d2f>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <draw_devices+0x4f4>)
 8004af8:	601a      	str	r2, [r3, #0]
                    ftoa32(tmpf, 1, &buf[0]);
 8004afa:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <draw_devices+0x4f4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a07      	ldr	r2, [pc, #28]	; (8004b1c <draw_devices+0x4e4>)
 8004b00:	2101      	movs	r1, #1
 8004b02:	4618      	mov	r0, r3
 8004b04:	f003 fe7c 	bl	8008800 <ftoa32>
                    ssd1306_print_viceversa(another_dev_row, 16, &buf[0], 0);
 8004b08:	79b8      	ldrb	r0, [r7, #6]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	4a03      	ldr	r2, [pc, #12]	; (8004b1c <draw_devices+0x4e4>)
 8004b0e:	2110      	movs	r1, #16
 8004b10:	f004 fdf6 	bl	8009700 <ssd1306_print_viceversa>
 8004b14:	e041      	b.n	8004b9a <draw_devices+0x562>
 8004b16:	bf00      	nop
 8004b18:	2000083c 	.word	0x2000083c
 8004b1c:	20000810 	.word	0x20000810
 8004b20:	20000804 	.word	0x20000804
 8004b24:	200007d0 	.word	0x200007d0
 8004b28:	408f4000 	.word	0x408f4000
 8004b2c:	200007f4 	.word	0x200007f4
 8004b30:	0001869f 	.word	0x0001869f
 8004b34:	0800cf78 	.word	0x0800cf78
 8004b38:	200007f8 	.word	0x200007f8
                }
                else                         //10.-99. km
                {
                    tmpf = pp_gps_rel[dev]->altitude_diff / 1000.0;
 8004b3c:	4b6f      	ldr	r3, [pc, #444]	; (8004cfc <draw_devices+0x6c4>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	797b      	ldrb	r3, [r7, #5]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fb fc61 	bl	8000414 <__aeabi_i2d>
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	4b6a      	ldr	r3, [pc, #424]	; (8004d00 <draw_devices+0x6c8>)
 8004b58:	f7fb fdf0 	bl	800073c <__aeabi_ddiv>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	460c      	mov	r4, r1
 8004b60:	4618      	mov	r0, r3
 8004b62:	4621      	mov	r1, r4
 8004b64:	f7fb ffb8 	bl	8000ad8 <__aeabi_d2f>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b66      	ldr	r3, [pc, #408]	; (8004d04 <draw_devices+0x6cc>)
 8004b6c:	601a      	str	r2, [r3, #0]
                    itoa32((int32_t)tmpf, &buf[0]);
 8004b6e:	4b65      	ldr	r3, [pc, #404]	; (8004d04 <draw_devices+0x6cc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fc fad4 	bl	8001120 <__aeabi_f2iz>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4963      	ldr	r1, [pc, #396]	; (8004d08 <draw_devices+0x6d0>)
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f003 ff8f 	bl	8008aa0 <itoa32>
                    ssd1306_char_pos(another_dev_row, 16, '.', 0);
 8004b82:	79b8      	ldrb	r0, [r7, #6]
 8004b84:	2300      	movs	r3, #0
 8004b86:	222e      	movs	r2, #46	; 0x2e
 8004b88:	2110      	movs	r1, #16
 8004b8a:	f004 fd77 	bl	800967c <ssd1306_char_pos>
                    ssd1306_print_viceversa(another_dev_row, 15, &buf[0], 0);
 8004b8e:	79b8      	ldrb	r0, [r7, #6]
 8004b90:	2300      	movs	r3, #0
 8004b92:	4a5d      	ldr	r2, [pc, #372]	; (8004d08 <draw_devices+0x6d0>)
 8004b94:	210f      	movs	r1, #15
 8004b96:	f004 fdb3 	bl	8009700 <ssd1306_print_viceversa>
                }
                
                if (pp_gps_rel[dev]->altitude_diff > 0)
 8004b9a:	4b58      	ldr	r3, [pc, #352]	; (8004cfc <draw_devices+0x6c4>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	797b      	ldrb	r3, [r7, #5]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	dd03      	ble.n	8004bb6 <draw_devices+0x57e>
                {
                    ssd1306_char('+', 0);
 8004bae:	2100      	movs	r1, #0
 8004bb0:	202b      	movs	r0, #43	; 0x2b
 8004bb2:	f004 fd1f 	bl	80095f4 <ssd1306_char>
                }
                
                
                
                uint8_t icon_col = LCD_LAST_COL;
 8004bb6:	2314      	movs	r3, #20
 8004bb8:	713b      	strb	r3, [r7, #4]
                
                //Battery
                if (pp_dev_aux[dev]->memory_point_flag == 0) //dont show battery icon for memory points
 8004bba:	4b54      	ldr	r3, [pc, #336]	; (8004d0c <draw_devices+0x6d4>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	797b      	ldrb	r3, [r7, #5]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	7b9b      	ldrb	r3, [r3, #14]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d142      	bne.n	8004c52 <draw_devices+0x61a>
                {
					switch (get_device_flags(dev, FLAGS_BATTERY))
 8004bcc:	797b      	ldrb	r3, [r7, #5]
 8004bce:	2101      	movs	r1, #1
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fd fef7 	bl	80029c4 <get_device_flags>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d83a      	bhi.n	8004c52 <draw_devices+0x61a>
 8004bdc:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <draw_devices+0x5ac>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004c41 	.word	0x08004c41
 8004be8:	08004c2f 	.word	0x08004c2f
 8004bec:	08004c1d 	.word	0x08004c1d
 8004bf0:	08004c0b 	.word	0x08004c0b
 8004bf4:	08004bf9 	.word	0x08004bf9
					{
						case FLAG_BATTERY_75_TO_100:
							ssd1306_char_pos(another_dev_row, icon_col--, SYMB_BAT_4OF4, 0);
 8004bf8:	7939      	ldrb	r1, [r7, #4]
 8004bfa:	1e4b      	subs	r3, r1, #1
 8004bfc:	713b      	strb	r3, [r7, #4]
 8004bfe:	79b8      	ldrb	r0, [r7, #6]
 8004c00:	2300      	movs	r3, #0
 8004c02:	228c      	movs	r2, #140	; 0x8c
 8004c04:	f004 fd3a 	bl	800967c <ssd1306_char_pos>
							break;
 8004c08:	e023      	b.n	8004c52 <draw_devices+0x61a>

						case FLAG_BATTERY_50_TO_75:
							ssd1306_char_pos(another_dev_row, icon_col--, SYMB_BAT_3OF4, 0);
 8004c0a:	7939      	ldrb	r1, [r7, #4]
 8004c0c:	1e4b      	subs	r3, r1, #1
 8004c0e:	713b      	strb	r3, [r7, #4]
 8004c10:	79b8      	ldrb	r0, [r7, #6]
 8004c12:	2300      	movs	r3, #0
 8004c14:	228b      	movs	r2, #139	; 0x8b
 8004c16:	f004 fd31 	bl	800967c <ssd1306_char_pos>
							break;
 8004c1a:	e01a      	b.n	8004c52 <draw_devices+0x61a>

						case FLAG_BATTERY_25_TO_50:
							ssd1306_char_pos(another_dev_row, icon_col--, SYMB_BAT_2OF4, 0);
 8004c1c:	7939      	ldrb	r1, [r7, #4]
 8004c1e:	1e4b      	subs	r3, r1, #1
 8004c20:	713b      	strb	r3, [r7, #4]
 8004c22:	79b8      	ldrb	r0, [r7, #6]
 8004c24:	2300      	movs	r3, #0
 8004c26:	228a      	movs	r2, #138	; 0x8a
 8004c28:	f004 fd28 	bl	800967c <ssd1306_char_pos>
							break;
 8004c2c:	e011      	b.n	8004c52 <draw_devices+0x61a>

						case FLAG_BATTERY_10_TO_25:
							ssd1306_char_pos(another_dev_row, icon_col--, SYMB_BAT_1OF4, 0);
 8004c2e:	7939      	ldrb	r1, [r7, #4]
 8004c30:	1e4b      	subs	r3, r1, #1
 8004c32:	713b      	strb	r3, [r7, #4]
 8004c34:	79b8      	ldrb	r0, [r7, #6]
 8004c36:	2300      	movs	r3, #0
 8004c38:	2289      	movs	r2, #137	; 0x89
 8004c3a:	f004 fd1f 	bl	800967c <ssd1306_char_pos>
							break;
 8004c3e:	e008      	b.n	8004c52 <draw_devices+0x61a>

						case FLAG_BATTERY_0_TO_10:
							ssd1306_char_pos(another_dev_row, icon_col--, SYMB_BAT_0OF4, 0);
 8004c40:	7939      	ldrb	r1, [r7, #4]
 8004c42:	1e4b      	subs	r3, r1, #1
 8004c44:	713b      	strb	r3, [r7, #4]
 8004c46:	79b8      	ldrb	r0, [r7, #6]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2288      	movs	r2, #136	; 0x88
 8004c4c:	f004 fd16 	bl	800967c <ssd1306_char_pos>
							break;
 8004c50:	bf00      	nop
					}
                }


                //Timeout
                if (pp_dev_aux[dev]->memory_point_flag == 0) //dont show timeout icon for memory points
 8004c52:	4b2e      	ldr	r3, [pc, #184]	; (8004d0c <draw_devices+0x6d4>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	797b      	ldrb	r3, [r7, #5]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	7b9b      	ldrb	r3, [r3, #14]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d110      	bne.n	8004c86 <draw_devices+0x64e>
                {
					if (pp_dev_aux[dev]->timeout_flag)
 8004c64:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <draw_devices+0x6d4>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	797b      	ldrb	r3, [r7, #5]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	7b1b      	ldrb	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <draw_devices+0x64e>
					{
						ssd1306_char_pos(another_dev_row, icon_col--, SYMB_TIMEOUT, 0);
 8004c76:	7939      	ldrb	r1, [r7, #4]
 8004c78:	1e4b      	subs	r3, r1, #1
 8004c7a:	713b      	strb	r3, [r7, #4]
 8004c7c:	79b8      	ldrb	r0, [r7, #6]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2286      	movs	r2, #134	; 0x86
 8004c82:	f004 fcfb 	bl	800967c <ssd1306_char_pos>
					}
                }


                //Fence
                if (pp_dev_aux[dev]->fence_flag)
 8004c86:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <draw_devices+0x6d4>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	797b      	ldrb	r3, [r7, #5]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	7b5b      	ldrb	r3, [r3, #13]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <draw_devices+0x670>
                {
                	ssd1306_char_pos(another_dev_row, icon_col--, SYMB_FENCE, 0);
 8004c98:	7939      	ldrb	r1, [r7, #4]
 8004c9a:	1e4b      	subs	r3, r1, #1
 8004c9c:	713b      	strb	r3, [r7, #4]
 8004c9e:	79b8      	ldrb	r0, [r7, #6]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	228e      	movs	r2, #142	; 0x8e
 8004ca4:	f004 fcea 	bl	800967c <ssd1306_char_pos>
                }


                //Alarm
                if (pp_dev_aux[dev]->memory_point_flag == 0) //dont show alarm icon for memory points
 8004ca8:	4b18      	ldr	r3, [pc, #96]	; (8004d0c <draw_devices+0x6d4>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	797b      	ldrb	r3, [r7, #5]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	7b9b      	ldrb	r3, [r3, #14]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <draw_devices+0x6a2>
                {
					if (get_device_flags(dev, FLAGS_ALARM) == FLAG_ALARM_ON)
 8004cba:	797b      	ldrb	r3, [r7, #5]
 8004cbc:	2104      	movs	r1, #4
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fd fe80 	bl	80029c4 <get_device_flags>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d107      	bne.n	8004cda <draw_devices+0x6a2>
					{
						ssd1306_char_pos(another_dev_row, icon_col--, SYMB_ALARM, 0);
 8004cca:	7939      	ldrb	r1, [r7, #4]
 8004ccc:	1e4b      	subs	r3, r1, #1
 8004cce:	713b      	strb	r3, [r7, #4]
 8004cd0:	79b8      	ldrb	r0, [r7, #6]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2287      	movs	r2, #135	; 0x87
 8004cd6:	f004 fcd1 	bl	800967c <ssd1306_char_pos>
					}
                }

                
                another_dev_row++;      //set next row
 8004cda:	79bb      	ldrb	r3, [r7, #6]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	71bb      	strb	r3, [r7, #6]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8004ce0:	797b      	ldrb	r3, [r7, #5]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	717b      	strb	r3, [r7, #5]
 8004ce6:	797b      	ldrb	r3, [r7, #5]
 8004ce8:	2b06      	cmp	r3, #6
 8004cea:	f67f ad6a 	bls.w	80047c2 <draw_devices+0x18a>
            }
        }
    }
    
    ssd1306_update();
 8004cee:	f004 fbb3 	bl	8009458 <ssd1306_update>
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd90      	pop	{r4, r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	200007d0 	.word	0x200007d0
 8004d00:	408f4000 	.word	0x408f4000
 8004d04:	200007f4 	.word	0x200007f4
 8004d08:	20000810 	.word	0x20000810
 8004d0c:	2000083c 	.word	0x2000083c

08004d10 <draw_each_device>:



//EACH DEVICE
void draw_each_device(void)
{
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
    ssd1306_clear();
 8004d16:	f004 fbc9 	bl	80094ac <ssd1306_clear>
    
    //My status row
    uint8_t icon_col = LCD_LAST_COL;
 8004d1a:	2314      	movs	r3, #20
 8004d1c:	71fb      	strb	r3, [r7, #7]

    //Battery
    switch (get_device_flags(device_number, FLAGS_BATTERY))
 8004d1e:	4b3e      	ldr	r3, [pc, #248]	; (8004e18 <draw_each_device+0x108>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2101      	movs	r1, #1
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fd fe4d 	bl	80029c4 <get_device_flags>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d83a      	bhi.n	8004da6 <draw_each_device+0x96>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <draw_each_device+0x28>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d95 	.word	0x08004d95
 8004d3c:	08004d83 	.word	0x08004d83
 8004d40:	08004d71 	.word	0x08004d71
 8004d44:	08004d5f 	.word	0x08004d5f
 8004d48:	08004d4d 	.word	0x08004d4d
    {
        case FLAG_BATTERY_75_TO_100:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_4OF4, 0);
 8004d4c:	79f9      	ldrb	r1, [r7, #7]
 8004d4e:	1e4b      	subs	r3, r1, #1
 8004d50:	71fb      	strb	r3, [r7, #7]
 8004d52:	2300      	movs	r3, #0
 8004d54:	228c      	movs	r2, #140	; 0x8c
 8004d56:	2000      	movs	r0, #0
 8004d58:	f004 fc90 	bl	800967c <ssd1306_char_pos>
            break;
 8004d5c:	e023      	b.n	8004da6 <draw_each_device+0x96>

        case FLAG_BATTERY_50_TO_75:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_3OF4, 0);
 8004d5e:	79f9      	ldrb	r1, [r7, #7]
 8004d60:	1e4b      	subs	r3, r1, #1
 8004d62:	71fb      	strb	r3, [r7, #7]
 8004d64:	2300      	movs	r3, #0
 8004d66:	228b      	movs	r2, #139	; 0x8b
 8004d68:	2000      	movs	r0, #0
 8004d6a:	f004 fc87 	bl	800967c <ssd1306_char_pos>
            break;
 8004d6e:	e01a      	b.n	8004da6 <draw_each_device+0x96>

        case FLAG_BATTERY_25_TO_50:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_2OF4, 0);
 8004d70:	79f9      	ldrb	r1, [r7, #7]
 8004d72:	1e4b      	subs	r3, r1, #1
 8004d74:	71fb      	strb	r3, [r7, #7]
 8004d76:	2300      	movs	r3, #0
 8004d78:	228a      	movs	r2, #138	; 0x8a
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f004 fc7e 	bl	800967c <ssd1306_char_pos>
            break;
 8004d80:	e011      	b.n	8004da6 <draw_each_device+0x96>

        case FLAG_BATTERY_10_TO_25:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_1OF4, 0);
 8004d82:	79f9      	ldrb	r1, [r7, #7]
 8004d84:	1e4b      	subs	r3, r1, #1
 8004d86:	71fb      	strb	r3, [r7, #7]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2289      	movs	r2, #137	; 0x89
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f004 fc75 	bl	800967c <ssd1306_char_pos>
            break;
 8004d92:	e008      	b.n	8004da6 <draw_each_device+0x96>

        case FLAG_BATTERY_0_TO_10:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_0OF4, 0);
 8004d94:	79f9      	ldrb	r1, [r7, #7]
 8004d96:	1e4b      	subs	r3, r1, #1
 8004d98:	71fb      	strb	r3, [r7, #7]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2288      	movs	r2, #136	; 0x88
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f004 fc6c 	bl	800967c <ssd1306_char_pos>
            break;
 8004da4:	bf00      	nop
    }

    //Sattelites
    if (p_gps_raw->time[0] == 0)                           //if no time received then no sattelites at all
 8004da6:	4b1d      	ldr	r3, [pc, #116]	; (8004e1c <draw_each_device+0x10c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d108      	bne.n	8004dc2 <draw_each_device+0xb2>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_NO_SATT, 0);
 8004db0:	79f9      	ldrb	r1, [r7, #7]
 8004db2:	1e4b      	subs	r3, r1, #1
 8004db4:	71fb      	strb	r3, [r7, #7]
 8004db6:	2300      	movs	r3, #0
 8004db8:	2282      	movs	r2, #130	; 0x82
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f004 fc5e 	bl	800967c <ssd1306_char_pos>
 8004dc0:	e038      	b.n	8004e34 <draw_each_device+0x124>
    }
    else
    {
        if (p_gps_num->mode == GPS_POSITION_3DFIX && p_gps_num->status == GPS_DATA_VALID)
 8004dc2:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <draw_each_device+0x110>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d10e      	bne.n	8004dec <draw_each_device+0xdc>
 8004dce:	4b14      	ldr	r3, [pc, #80]	; (8004e20 <draw_each_device+0x110>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d108      	bne.n	8004dec <draw_each_device+0xdc>
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_3D, 0);   //3D when data is valid
 8004dda:	79f9      	ldrb	r1, [r7, #7]
 8004ddc:	1e4b      	subs	r3, r1, #1
 8004dde:	71fb      	strb	r3, [r7, #7]
 8004de0:	2300      	movs	r3, #0
 8004de2:	2285      	movs	r2, #133	; 0x85
 8004de4:	2000      	movs	r0, #0
 8004de6:	f004 fc49 	bl	800967c <ssd1306_char_pos>
 8004dea:	e023      	b.n	8004e34 <draw_each_device+0x124>
        }
        else if (p_gps_num->mode == GPS_POSITION_2DFIX && p_gps_num->status == GPS_DATA_VALID)
 8004dec:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <draw_each_device+0x110>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d115      	bne.n	8004e24 <draw_each_device+0x114>
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <draw_each_device+0x110>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d10f      	bne.n	8004e24 <draw_each_device+0x114>
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_2D, 0);   //2D when data is valid
 8004e04:	79f9      	ldrb	r1, [r7, #7]
 8004e06:	1e4b      	subs	r3, r1, #1
 8004e08:	71fb      	strb	r3, [r7, #7]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2284      	movs	r2, #132	; 0x84
 8004e0e:	2000      	movs	r0, #0
 8004e10:	f004 fc34 	bl	800967c <ssd1306_char_pos>
 8004e14:	e00e      	b.n	8004e34 <draw_each_device+0x124>
 8004e16:	bf00      	nop
 8004e18:	20000738 	.word	0x20000738
 8004e1c:	20000808 	.word	0x20000808
 8004e20:	20000614 	.word	0x20000614
        }
        else
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_1D, 0);   //if not 2D or 3D then only time is avaliable
 8004e24:	79f9      	ldrb	r1, [r7, #7]
 8004e26:	1e4b      	subs	r3, r1, #1
 8004e28:	71fb      	strb	r3, [r7, #7]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2283      	movs	r2, #131	; 0x83
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f004 fc24 	bl	800967c <ssd1306_char_pos>
        }
    }
    

    //TRX
    if (get_main_flags()->gps_sync && p_gps_num->status == GPS_DATA_VALID)
 8004e34:	f7ff f904 	bl	8004040 <get_main_flags>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d015      	beq.n	8004e6c <draw_each_device+0x15c>
 8004e40:	4bb9      	ldr	r3, [pc, #740]	; (8005128 <draw_each_device+0x418>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d10f      	bne.n	8004e6c <draw_each_device+0x15c>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_ARROW_DOWN, 0);
 8004e4c:	79f9      	ldrb	r1, [r7, #7]
 8004e4e:	1e4b      	subs	r3, r1, #1
 8004e50:	71fb      	strb	r3, [r7, #7]
 8004e52:	2300      	movs	r3, #0
 8004e54:	2281      	movs	r2, #129	; 0x81
 8004e56:	2000      	movs	r0, #0
 8004e58:	f004 fc10 	bl	800967c <ssd1306_char_pos>
        ssd1306_char_pos(0, icon_col--, SYMB_ARROW_UP, 0);
 8004e5c:	79f9      	ldrb	r1, [r7, #7]
 8004e5e:	1e4b      	subs	r3, r1, #1
 8004e60:	71fb      	strb	r3, [r7, #7]
 8004e62:	2300      	movs	r3, #0
 8004e64:	2280      	movs	r2, #128	; 0x80
 8004e66:	2000      	movs	r0, #0
 8004e68:	f004 fc08 	bl	800967c <ssd1306_char_pos>
    }

    
    //Timeout
    if (pp_dev_aux[device_number]->timeout_flag)
 8004e6c:	4baf      	ldr	r3, [pc, #700]	; (800512c <draw_each_device+0x41c>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	4baf      	ldr	r3, [pc, #700]	; (8005130 <draw_each_device+0x420>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	7b1b      	ldrb	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <draw_each_device+0x180>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_TIMEOUT, 0);
 8004e80:	79f9      	ldrb	r1, [r7, #7]
 8004e82:	1e4b      	subs	r3, r1, #1
 8004e84:	71fb      	strb	r3, [r7, #7]
 8004e86:	2300      	movs	r3, #0
 8004e88:	2286      	movs	r2, #134	; 0x86
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f004 fbf6 	bl	800967c <ssd1306_char_pos>
    }
    

    //Alarm
    if (get_device_flags(device_number, FLAGS_ALARM) == FLAG_ALARM_ON)
 8004e90:	4ba7      	ldr	r3, [pc, #668]	; (8005130 <draw_each_device+0x420>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2104      	movs	r1, #4
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fd fd94 	bl	80029c4 <get_device_flags>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d107      	bne.n	8004eb2 <draw_each_device+0x1a2>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_ALARM, 0);
 8004ea2:	79f9      	ldrb	r1, [r7, #7]
 8004ea4:	1e4b      	subs	r3, r1, #1
 8004ea6:	71fb      	strb	r3, [r7, #7]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2287      	movs	r2, #135	; 0x87
 8004eac:	2000      	movs	r0, #0
 8004eae:	f004 fbe5 	bl	800967c <ssd1306_char_pos>
    }
    
    
    if (current_each_device == device_number)      //if me
 8004eb2:	4ba0      	ldr	r3, [pc, #640]	; (8005134 <draw_each_device+0x424>)
 8004eb4:	781a      	ldrb	r2, [r3, #0]
 8004eb6:	4b9e      	ldr	r3, [pc, #632]	; (8005130 <draw_each_device+0x420>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	f040 8250 	bne.w	8005360 <draw_each_device+0x650>
    {
        ssd1306_print(0, 0, "#", 0);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4a9d      	ldr	r2, [pc, #628]	; (8005138 <draw_each_device+0x428>)
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	f004 fbf7 	bl	80096ba <ssd1306_print>
        itoa32(current_each_device, &buf[0]);
 8004ecc:	4b99      	ldr	r3, [pc, #612]	; (8005134 <draw_each_device+0x424>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	499a      	ldr	r1, [pc, #616]	; (800513c <draw_each_device+0x42c>)
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f003 fde4 	bl	8008aa0 <itoa32>
        ssd1306_print(0, 1, &buf[0], 0);
 8004ed8:	2300      	movs	r3, #0
 8004eda:	4a98      	ldr	r2, [pc, #608]	; (800513c <draw_each_device+0x42c>)
 8004edc:	2101      	movs	r1, #1
 8004ede:	2000      	movs	r0, #0
 8004ee0:	f004 fbeb 	bl	80096ba <ssd1306_print>
        
        ssd1306_char_pos(0, 3, p_settings->device_id[0], 0);
 8004ee4:	4b96      	ldr	r3, [pc, #600]	; (8005140 <draw_each_device+0x430>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	785a      	ldrb	r2, [r3, #1]
 8004eea:	2300      	movs	r3, #0
 8004eec:	2103      	movs	r1, #3
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f004 fbc4 	bl	800967c <ssd1306_char_pos>
        ssd1306_char_pos(0, 4, p_settings->device_id[1], 0);
 8004ef4:	4b92      	ldr	r3, [pc, #584]	; (8005140 <draw_each_device+0x430>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	789a      	ldrb	r2, [r3, #2]
 8004efa:	2300      	movs	r3, #0
 8004efc:	2104      	movs	r1, #4
 8004efe:	2000      	movs	r0, #0
 8004f00:	f004 fbbc 	bl	800967c <ssd1306_char_pos>
        
        ssd1306_print(0, 6, "(me)", 0);
 8004f04:	2300      	movs	r3, #0
 8004f06:	4a8f      	ldr	r2, [pc, #572]	; (8005144 <draw_each_device+0x434>)
 8004f08:	2106      	movs	r1, #6
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f004 fbd5 	bl	80096ba <ssd1306_print>
        
        ssd1306_char_pos(1, 0, p_gps_raw->date[0], 0);
 8004f10:	4b8d      	ldr	r3, [pc, #564]	; (8005148 <draw_each_device+0x438>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	7b1a      	ldrb	r2, [r3, #12]
 8004f16:	2300      	movs	r3, #0
 8004f18:	2100      	movs	r1, #0
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f004 fbae 	bl	800967c <ssd1306_char_pos>
        ssd1306_char_pos(1, 1, p_gps_raw->date[1], 0);
 8004f20:	4b89      	ldr	r3, [pc, #548]	; (8005148 <draw_each_device+0x438>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	7b5a      	ldrb	r2, [r3, #13]
 8004f26:	2300      	movs	r3, #0
 8004f28:	2101      	movs	r1, #1
 8004f2a:	2001      	movs	r0, #1
 8004f2c:	f004 fba6 	bl	800967c <ssd1306_char_pos>
        ssd1306_print(1, 2, ".", 0);
 8004f30:	2300      	movs	r3, #0
 8004f32:	4a86      	ldr	r2, [pc, #536]	; (800514c <draw_each_device+0x43c>)
 8004f34:	2102      	movs	r1, #2
 8004f36:	2001      	movs	r0, #1
 8004f38:	f004 fbbf 	bl	80096ba <ssd1306_print>
        
        ssd1306_char_pos(1, 3, p_gps_raw->date[2], 0);
 8004f3c:	4b82      	ldr	r3, [pc, #520]	; (8005148 <draw_each_device+0x438>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	7b9a      	ldrb	r2, [r3, #14]
 8004f42:	2300      	movs	r3, #0
 8004f44:	2103      	movs	r1, #3
 8004f46:	2001      	movs	r0, #1
 8004f48:	f004 fb98 	bl	800967c <ssd1306_char_pos>
        ssd1306_char_pos(1, 4, p_gps_raw->date[3], 0);
 8004f4c:	4b7e      	ldr	r3, [pc, #504]	; (8005148 <draw_each_device+0x438>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	7bda      	ldrb	r2, [r3, #15]
 8004f52:	2300      	movs	r3, #0
 8004f54:	2104      	movs	r1, #4
 8004f56:	2001      	movs	r0, #1
 8004f58:	f004 fb90 	bl	800967c <ssd1306_char_pos>
        ssd1306_print(1, 5, ".", 0);
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4a7b      	ldr	r2, [pc, #492]	; (800514c <draw_each_device+0x43c>)
 8004f60:	2105      	movs	r1, #5
 8004f62:	2001      	movs	r0, #1
 8004f64:	f004 fba9 	bl	80096ba <ssd1306_print>
        
        ssd1306_char_pos(1, 6, p_gps_raw->date[4], 0);
 8004f68:	4b77      	ldr	r3, [pc, #476]	; (8005148 <draw_each_device+0x438>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	7c1a      	ldrb	r2, [r3, #16]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	2106      	movs	r1, #6
 8004f72:	2001      	movs	r0, #1
 8004f74:	f004 fb82 	bl	800967c <ssd1306_char_pos>
        ssd1306_char_pos(1, 7, p_gps_raw->date[5], 0);
 8004f78:	4b73      	ldr	r3, [pc, #460]	; (8005148 <draw_each_device+0x438>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	7c5a      	ldrb	r2, [r3, #17]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2107      	movs	r1, #7
 8004f82:	2001      	movs	r0, #1
 8004f84:	f004 fb7a 	bl	800967c <ssd1306_char_pos>
        
        ssd1306_char_pos(1, 9, p_gps_raw->time[0], 0);
 8004f88:	4b6f      	ldr	r3, [pc, #444]	; (8005148 <draw_each_device+0x438>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	781a      	ldrb	r2, [r3, #0]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2109      	movs	r1, #9
 8004f92:	2001      	movs	r0, #1
 8004f94:	f004 fb72 	bl	800967c <ssd1306_char_pos>
        ssd1306_char_pos(1, 10, p_gps_raw->time[1], 0);
 8004f98:	4b6b      	ldr	r3, [pc, #428]	; (8005148 <draw_each_device+0x438>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	785a      	ldrb	r2, [r3, #1]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	210a      	movs	r1, #10
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	f004 fb6a 	bl	800967c <ssd1306_char_pos>
        ssd1306_print(1, 11, ":", 0);
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4a69      	ldr	r2, [pc, #420]	; (8005150 <draw_each_device+0x440>)
 8004fac:	210b      	movs	r1, #11
 8004fae:	2001      	movs	r0, #1
 8004fb0:	f004 fb83 	bl	80096ba <ssd1306_print>
        
        ssd1306_char_pos(1, 12, p_gps_raw->time[2], 0);
 8004fb4:	4b64      	ldr	r3, [pc, #400]	; (8005148 <draw_each_device+0x438>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	789a      	ldrb	r2, [r3, #2]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	210c      	movs	r1, #12
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	f004 fb5c 	bl	800967c <ssd1306_char_pos>
        ssd1306_char_pos(1, 13, p_gps_raw->time[3], 0);
 8004fc4:	4b60      	ldr	r3, [pc, #384]	; (8005148 <draw_each_device+0x438>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	78da      	ldrb	r2, [r3, #3]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	210d      	movs	r1, #13
 8004fce:	2001      	movs	r0, #1
 8004fd0:	f004 fb54 	bl	800967c <ssd1306_char_pos>
        ssd1306_print(1, 14, ":", 0);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4a5e      	ldr	r2, [pc, #376]	; (8005150 <draw_each_device+0x440>)
 8004fd8:	210e      	movs	r1, #14
 8004fda:	2001      	movs	r0, #1
 8004fdc:	f004 fb6d 	bl	80096ba <ssd1306_print>
        
        ssd1306_char_pos(1, 15, p_gps_raw->time[4], 0);
 8004fe0:	4b59      	ldr	r3, [pc, #356]	; (8005148 <draw_each_device+0x438>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	791a      	ldrb	r2, [r3, #4]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	210f      	movs	r1, #15
 8004fea:	2001      	movs	r0, #1
 8004fec:	f004 fb46 	bl	800967c <ssd1306_char_pos>
        ssd1306_char_pos(1, 16, p_gps_raw->time[5], 0);
 8004ff0:	4b55      	ldr	r3, [pc, #340]	; (8005148 <draw_each_device+0x438>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	795a      	ldrb	r2, [r3, #5]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	2110      	movs	r1, #16
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f004 fb3e 	bl	800967c <ssd1306_char_pos>
        
        ssd1306_print(1, 18, "UTC", 0);
 8005000:	2300      	movs	r3, #0
 8005002:	4a54      	ldr	r2, [pc, #336]	; (8005154 <draw_each_device+0x444>)
 8005004:	2112      	movs	r1, #18
 8005006:	2001      	movs	r0, #1
 8005008:	f004 fb57 	bl	80096ba <ssd1306_print>
        
        ssd1306_print(2, 0, "LAT", 0);
 800500c:	2300      	movs	r3, #0
 800500e:	4a52      	ldr	r2, [pc, #328]	; (8005158 <draw_each_device+0x448>)
 8005010:	2100      	movs	r1, #0
 8005012:	2002      	movs	r0, #2
 8005014:	f004 fb51 	bl	80096ba <ssd1306_print>
        ftoa32(p_gps_num->latitude.in_deg, 6, &buf[0]);
 8005018:	4b43      	ldr	r3, [pc, #268]	; (8005128 <draw_each_device+0x418>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	4a47      	ldr	r2, [pc, #284]	; (800513c <draw_each_device+0x42c>)
 8005020:	2106      	movs	r1, #6
 8005022:	4618      	mov	r0, r3
 8005024:	f003 fbec 	bl	8008800 <ftoa32>
        ssd1306_print_viceversa(2, 14, &buf[0], 0);
 8005028:	2300      	movs	r3, #0
 800502a:	4a44      	ldr	r2, [pc, #272]	; (800513c <draw_each_device+0x42c>)
 800502c:	210e      	movs	r1, #14
 800502e:	2002      	movs	r0, #2
 8005030:	f004 fb66 	bl	8009700 <ssd1306_print_viceversa>
        if (p_gps_num->latitude.in_deg >= 0)
 8005034:	4b3c      	ldr	r3, [pc, #240]	; (8005128 <draw_each_device+0x418>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f04f 0100 	mov.w	r1, #0
 800503e:	4618      	mov	r0, r3
 8005040:	f7fc f85a 	bl	80010f8 <__aeabi_fcmpge>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <draw_each_device+0x350>
        {
            ssd1306_char('+', 0);
 800504a:	2100      	movs	r1, #0
 800504c:	202b      	movs	r0, #43	; 0x2b
 800504e:	f004 fad1 	bl	80095f4 <ssd1306_char>
            ssd1306_print(2, 16, "(N)", 0);
 8005052:	2300      	movs	r3, #0
 8005054:	4a41      	ldr	r2, [pc, #260]	; (800515c <draw_each_device+0x44c>)
 8005056:	2110      	movs	r1, #16
 8005058:	2002      	movs	r0, #2
 800505a:	f004 fb2e 	bl	80096ba <ssd1306_print>
 800505e:	e005      	b.n	800506c <draw_each_device+0x35c>
        }
        else
        {
            ssd1306_print(2, 16, "(S)", 0);
 8005060:	2300      	movs	r3, #0
 8005062:	4a3f      	ldr	r2, [pc, #252]	; (8005160 <draw_each_device+0x450>)
 8005064:	2110      	movs	r1, #16
 8005066:	2002      	movs	r0, #2
 8005068:	f004 fb27 	bl	80096ba <ssd1306_print>
        }
        
        ssd1306_print(3, 0, "LON", 0);
 800506c:	2300      	movs	r3, #0
 800506e:	4a3d      	ldr	r2, [pc, #244]	; (8005164 <draw_each_device+0x454>)
 8005070:	2100      	movs	r1, #0
 8005072:	2003      	movs	r0, #3
 8005074:	f004 fb21 	bl	80096ba <ssd1306_print>
        ftoa32(p_gps_num->longitude.in_deg, 6, &buf[0]);
 8005078:	4b2b      	ldr	r3, [pc, #172]	; (8005128 <draw_each_device+0x418>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	4a2f      	ldr	r2, [pc, #188]	; (800513c <draw_each_device+0x42c>)
 8005080:	2106      	movs	r1, #6
 8005082:	4618      	mov	r0, r3
 8005084:	f003 fbbc 	bl	8008800 <ftoa32>
        ssd1306_print_viceversa(3, 14, &buf[0], 0);
 8005088:	2300      	movs	r3, #0
 800508a:	4a2c      	ldr	r2, [pc, #176]	; (800513c <draw_each_device+0x42c>)
 800508c:	210e      	movs	r1, #14
 800508e:	2003      	movs	r0, #3
 8005090:	f004 fb36 	bl	8009700 <ssd1306_print_viceversa>
        if (p_gps_num->longitude.in_deg >= 0)
 8005094:	4b24      	ldr	r3, [pc, #144]	; (8005128 <draw_each_device+0x418>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f04f 0100 	mov.w	r1, #0
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fc f82a 	bl	80010f8 <__aeabi_fcmpge>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <draw_each_device+0x3b0>
        {
            ssd1306_char('+', 0);
 80050aa:	2100      	movs	r1, #0
 80050ac:	202b      	movs	r0, #43	; 0x2b
 80050ae:	f004 faa1 	bl	80095f4 <ssd1306_char>
            ssd1306_print(3, 16, "(E)", 0);
 80050b2:	2300      	movs	r3, #0
 80050b4:	4a2c      	ldr	r2, [pc, #176]	; (8005168 <draw_each_device+0x458>)
 80050b6:	2110      	movs	r1, #16
 80050b8:	2003      	movs	r0, #3
 80050ba:	f004 fafe 	bl	80096ba <ssd1306_print>
 80050be:	e005      	b.n	80050cc <draw_each_device+0x3bc>
        }
        else
        {
            ssd1306_print(3, 16, "(W)", 0);
 80050c0:	2300      	movs	r3, #0
 80050c2:	4a2a      	ldr	r2, [pc, #168]	; (800516c <draw_each_device+0x45c>)
 80050c4:	2110      	movs	r1, #16
 80050c6:	2003      	movs	r0, #3
 80050c8:	f004 faf7 	bl	80096ba <ssd1306_print>
        }
        
        ssd1306_print(4, 0, "ALT", 0);
 80050cc:	2300      	movs	r3, #0
 80050ce:	4a28      	ldr	r2, [pc, #160]	; (8005170 <draw_each_device+0x460>)
 80050d0:	2100      	movs	r1, #0
 80050d2:	2004      	movs	r0, #4
 80050d4:	f004 faf1 	bl	80096ba <ssd1306_print>
        itoa32(p_gps_num->altitude, &buf[0]);
 80050d8:	4b13      	ldr	r3, [pc, #76]	; (8005128 <draw_each_device+0x418>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fc f81e 	bl	8001120 <__aeabi_f2iz>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4915      	ldr	r1, [pc, #84]	; (800513c <draw_each_device+0x42c>)
 80050e8:	4618      	mov	r0, r3
 80050ea:	f003 fcd9 	bl	8008aa0 <itoa32>
        ssd1306_print(4, 4, &buf[0], 0);
 80050ee:	2300      	movs	r3, #0
 80050f0:	4a12      	ldr	r2, [pc, #72]	; (800513c <draw_each_device+0x42c>)
 80050f2:	2104      	movs	r1, #4
 80050f4:	2004      	movs	r0, #4
 80050f6:	f004 fae0 	bl	80096ba <ssd1306_print>
        ssd1306_print_next("m", 0);
 80050fa:	2100      	movs	r1, #0
 80050fc:	481d      	ldr	r0, [pc, #116]	; (8005174 <draw_each_device+0x464>)
 80050fe:	f004 fb3b 	bl	8009778 <ssd1306_print_next>
        
        ssd1306_print(4, 11, "FIX", 0);
 8005102:	2300      	movs	r3, #0
 8005104:	4a1c      	ldr	r2, [pc, #112]	; (8005178 <draw_each_device+0x468>)
 8005106:	210b      	movs	r1, #11
 8005108:	2004      	movs	r0, #4
 800510a:	f004 fad6 	bl	80096ba <ssd1306_print>
        if (p_gps_num->status == GPS_DATA_VALID)
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <draw_each_device+0x418>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005116:	2b01      	cmp	r3, #1
 8005118:	d132      	bne.n	8005180 <draw_each_device+0x470>
        {
            ssd1306_print(4, 15, "A/", 0);
 800511a:	2300      	movs	r3, #0
 800511c:	4a17      	ldr	r2, [pc, #92]	; (800517c <draw_each_device+0x46c>)
 800511e:	210f      	movs	r1, #15
 8005120:	2004      	movs	r0, #4
 8005122:	f004 faca 	bl	80096ba <ssd1306_print>
 8005126:	e031      	b.n	800518c <draw_each_device+0x47c>
 8005128:	20000614 	.word	0x20000614
 800512c:	2000083c 	.word	0x2000083c
 8005130:	20000738 	.word	0x20000738
 8005134:	2000002a 	.word	0x2000002a
 8005138:	0800cf7c 	.word	0x0800cf7c
 800513c:	20000810 	.word	0x20000810
 8005140:	2000061c 	.word	0x2000061c
 8005144:	0800cf80 	.word	0x0800cf80
 8005148:	20000808 	.word	0x20000808
 800514c:	0800cf88 	.word	0x0800cf88
 8005150:	0800cf8c 	.word	0x0800cf8c
 8005154:	0800cf90 	.word	0x0800cf90
 8005158:	0800cf94 	.word	0x0800cf94
 800515c:	0800cf98 	.word	0x0800cf98
 8005160:	0800cf9c 	.word	0x0800cf9c
 8005164:	0800cfa0 	.word	0x0800cfa0
 8005168:	0800cfa4 	.word	0x0800cfa4
 800516c:	0800cfa8 	.word	0x0800cfa8
 8005170:	0800cfac 	.word	0x0800cfac
 8005174:	0800cfb0 	.word	0x0800cfb0
 8005178:	0800cfb4 	.word	0x0800cfb4
 800517c:	0800cfb8 	.word	0x0800cfb8
        }
        else
        {
            ssd1306_print(4, 15, "V/", 0);
 8005180:	2300      	movs	r3, #0
 8005182:	4ab3      	ldr	r2, [pc, #716]	; (8005450 <draw_each_device+0x740>)
 8005184:	210f      	movs	r1, #15
 8005186:	2004      	movs	r0, #4
 8005188:	f004 fa97 	bl	80096ba <ssd1306_print>
        }
        
        if (p_gps_num->mode == GPS_POSITION_2DFIX)
 800518c:	4bb1      	ldr	r3, [pc, #708]	; (8005454 <draw_each_device+0x744>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005194:	2b02      	cmp	r3, #2
 8005196:	d106      	bne.n	80051a6 <draw_each_device+0x496>
        {
            ssd1306_print(4, 17, "2D", 0);
 8005198:	2300      	movs	r3, #0
 800519a:	4aaf      	ldr	r2, [pc, #700]	; (8005458 <draw_each_device+0x748>)
 800519c:	2111      	movs	r1, #17
 800519e:	2004      	movs	r0, #4
 80051a0:	f004 fa8b 	bl	80096ba <ssd1306_print>
 80051a4:	e012      	b.n	80051cc <draw_each_device+0x4bc>
        }
        else if (p_gps_num->mode == GPS_POSITION_3DFIX)
 80051a6:	4bab      	ldr	r3, [pc, #684]	; (8005454 <draw_each_device+0x744>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d106      	bne.n	80051c0 <draw_each_device+0x4b0>
        {
            ssd1306_print(4, 17, "3D", 0);
 80051b2:	2300      	movs	r3, #0
 80051b4:	4aa9      	ldr	r2, [pc, #676]	; (800545c <draw_each_device+0x74c>)
 80051b6:	2111      	movs	r1, #17
 80051b8:	2004      	movs	r0, #4
 80051ba:	f004 fa7e 	bl	80096ba <ssd1306_print>
 80051be:	e005      	b.n	80051cc <draw_each_device+0x4bc>
        }
        else
        {
            ssd1306_print(4, 17, "NO", 0);
 80051c0:	2300      	movs	r3, #0
 80051c2:	4aa7      	ldr	r2, [pc, #668]	; (8005460 <draw_each_device+0x750>)
 80051c4:	2111      	movs	r1, #17
 80051c6:	2004      	movs	r0, #4
 80051c8:	f004 fa77 	bl	80096ba <ssd1306_print>
        }
        
        ssd1306_print(5, 0, "COG", 0);
 80051cc:	2300      	movs	r3, #0
 80051ce:	4aa5      	ldr	r2, [pc, #660]	; (8005464 <draw_each_device+0x754>)
 80051d0:	2100      	movs	r1, #0
 80051d2:	2005      	movs	r0, #5
 80051d4:	f004 fa71 	bl	80096ba <ssd1306_print>
        itoa32(p_gps_num->course, &buf[0]);
 80051d8:	4b9e      	ldr	r3, [pc, #632]	; (8005454 <draw_each_device+0x744>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fb ff9e 	bl	8001120 <__aeabi_f2iz>
 80051e4:	4603      	mov	r3, r0
 80051e6:	49a0      	ldr	r1, [pc, #640]	; (8005468 <draw_each_device+0x758>)
 80051e8:	4618      	mov	r0, r3
 80051ea:	f003 fc59 	bl	8008aa0 <itoa32>
        ssd1306_print(5, 4, &buf[0], 0);
 80051ee:	2300      	movs	r3, #0
 80051f0:	4a9d      	ldr	r2, [pc, #628]	; (8005468 <draw_each_device+0x758>)
 80051f2:	2104      	movs	r1, #4
 80051f4:	2005      	movs	r0, #5
 80051f6:	f004 fa60 	bl	80096ba <ssd1306_print>
        ssd1306_char(SYMB_DEGREE, 0);
 80051fa:	2100      	movs	r1, #0
 80051fc:	208d      	movs	r0, #141	; 0x8d
 80051fe:	f004 f9f9 	bl	80095f4 <ssd1306_char>
        
        ssd1306_print(5, 11, "DOP", 0);
 8005202:	2300      	movs	r3, #0
 8005204:	4a99      	ldr	r2, [pc, #612]	; (800546c <draw_each_device+0x75c>)
 8005206:	210b      	movs	r1, #11
 8005208:	2005      	movs	r0, #5
 800520a:	f004 fa56 	bl	80096ba <ssd1306_print>
        ftoa32(p_gps_num->pdop, 2, &buf[0]);
 800520e:	4b91      	ldr	r3, [pc, #580]	; (8005454 <draw_each_device+0x744>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	4a94      	ldr	r2, [pc, #592]	; (8005468 <draw_each_device+0x758>)
 8005216:	2102      	movs	r1, #2
 8005218:	4618      	mov	r0, r3
 800521a:	f003 faf1 	bl	8008800 <ftoa32>
        ssd1306_print(5, 15, &buf[0], 0);
 800521e:	2300      	movs	r3, #0
 8005220:	4a91      	ldr	r2, [pc, #580]	; (8005468 <draw_each_device+0x758>)
 8005222:	210f      	movs	r1, #15
 8005224:	2005      	movs	r0, #5
 8005226:	f004 fa48 	bl	80096ba <ssd1306_print>
        
        ssd1306_print(6, 0, "SOG", 0);
 800522a:	2300      	movs	r3, #0
 800522c:	4a90      	ldr	r2, [pc, #576]	; (8005470 <draw_each_device+0x760>)
 800522e:	2100      	movs	r1, #0
 8005230:	2006      	movs	r0, #6
 8005232:	f004 fa42 	bl	80096ba <ssd1306_print>
        if (p_gps_num->speed < 10.0)   //if speed is small show x.x format
 8005236:	4b87      	ldr	r3, [pc, #540]	; (8005454 <draw_each_device+0x744>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	498d      	ldr	r1, [pc, #564]	; (8005474 <draw_each_device+0x764>)
 800523e:	4618      	mov	r0, r3
 8005240:	f7fb ff46 	bl	80010d0 <__aeabi_fcmplt>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00e      	beq.n	8005268 <draw_each_device+0x558>
        {
            ftoa32(p_gps_num->speed, 1, &buf[0]);
 800524a:	4b82      	ldr	r3, [pc, #520]	; (8005454 <draw_each_device+0x744>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	4a85      	ldr	r2, [pc, #532]	; (8005468 <draw_each_device+0x758>)
 8005252:	2101      	movs	r1, #1
 8005254:	4618      	mov	r0, r3
 8005256:	f003 fad3 	bl	8008800 <ftoa32>
            ssd1306_print(6, 4, &buf[0], 0);
 800525a:	2300      	movs	r3, #0
 800525c:	4a82      	ldr	r2, [pc, #520]	; (8005468 <draw_each_device+0x758>)
 800525e:	2104      	movs	r1, #4
 8005260:	2006      	movs	r0, #6
 8005262:	f004 fa2a 	bl	80096ba <ssd1306_print>
 8005266:	e011      	b.n	800528c <draw_each_device+0x57c>
        }
        else    //else show int format
        {
            itoa32((int16_t)p_gps_num->speed, &buf[0]);
 8005268:	4b7a      	ldr	r3, [pc, #488]	; (8005454 <draw_each_device+0x744>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	4618      	mov	r0, r3
 8005270:	f7fb ff56 	bl	8001120 <__aeabi_f2iz>
 8005274:	4603      	mov	r3, r0
 8005276:	b21b      	sxth	r3, r3
 8005278:	497b      	ldr	r1, [pc, #492]	; (8005468 <draw_each_device+0x758>)
 800527a:	4618      	mov	r0, r3
 800527c:	f003 fc10 	bl	8008aa0 <itoa32>
            ssd1306_print(6, 4, &buf[0], 0);
 8005280:	2300      	movs	r3, #0
 8005282:	4a79      	ldr	r2, [pc, #484]	; (8005468 <draw_each_device+0x758>)
 8005284:	2104      	movs	r1, #4
 8005286:	2006      	movs	r0, #6
 8005288:	f004 fa17 	bl	80096ba <ssd1306_print>
        }
        ssd1306_print_next("kph", 0);
 800528c:	2100      	movs	r1, #0
 800528e:	487a      	ldr	r0, [pc, #488]	; (8005478 <draw_each_device+0x768>)
 8005290:	f004 fa72 	bl	8009778 <ssd1306_print_next>
        
        ssd1306_print(6, 11, "SAT", 0);
 8005294:	2300      	movs	r3, #0
 8005296:	4a79      	ldr	r2, [pc, #484]	; (800547c <draw_each_device+0x76c>)
 8005298:	210b      	movs	r1, #11
 800529a:	2006      	movs	r0, #6
 800529c:	f004 fa0d 	bl	80096ba <ssd1306_print>
        itoa32(p_gps_num->sat_used, &buf[0]);
 80052a0:	4b6c      	ldr	r3, [pc, #432]	; (8005454 <draw_each_device+0x744>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a8:	496f      	ldr	r1, [pc, #444]	; (8005468 <draw_each_device+0x758>)
 80052aa:	4618      	mov	r0, r3
 80052ac:	f003 fbf8 	bl	8008aa0 <itoa32>
        ssd1306_print(6, 15, &buf[0], 0);
 80052b0:	2300      	movs	r3, #0
 80052b2:	4a6d      	ldr	r2, [pc, #436]	; (8005468 <draw_each_device+0x758>)
 80052b4:	210f      	movs	r1, #15
 80052b6:	2006      	movs	r0, #6
 80052b8:	f004 f9ff 	bl	80096ba <ssd1306_print>
        ssd1306_print_next("/", 0);
 80052bc:	2100      	movs	r1, #0
 80052be:	4870      	ldr	r0, [pc, #448]	; (8005480 <draw_each_device+0x770>)
 80052c0:	f004 fa5a 	bl	8009778 <ssd1306_print_next>
        itoa32(p_gps_num->sat_view, &buf[0]);
 80052c4:	4b63      	ldr	r3, [pc, #396]	; (8005454 <draw_each_device+0x744>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052cc:	4966      	ldr	r1, [pc, #408]	; (8005468 <draw_each_device+0x758>)
 80052ce:	4618      	mov	r0, r3
 80052d0:	f003 fbe6 	bl	8008aa0 <itoa32>
        ssd1306_print_next(&buf[0], 0);
 80052d4:	2100      	movs	r1, #0
 80052d6:	4864      	ldr	r0, [pc, #400]	; (8005468 <draw_each_device+0x758>)
 80052d8:	f004 fa4e 	bl	8009778 <ssd1306_print_next>
        
        if (pp_dev_aux[device_number]->timeout_flag == 1)
 80052dc:	4b69      	ldr	r3, [pc, #420]	; (8005484 <draw_each_device+0x774>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b69      	ldr	r3, [pc, #420]	; (8005488 <draw_each_device+0x778>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	7b1b      	ldrb	r3, [r3, #12]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d106      	bne.n	80052fe <draw_each_device+0x5ee>
        {
        	ssd1306_print(7, 0, "TOC", 1);
 80052f0:	2301      	movs	r3, #1
 80052f2:	4a66      	ldr	r2, [pc, #408]	; (800548c <draw_each_device+0x77c>)
 80052f4:	2100      	movs	r1, #0
 80052f6:	2007      	movs	r0, #7
 80052f8:	f004 f9df 	bl	80096ba <ssd1306_print>
 80052fc:	e005      	b.n	800530a <draw_each_device+0x5fa>
        }
        else
        {
        	ssd1306_print(7, 0, "TOC", 0);
 80052fe:	2300      	movs	r3, #0
 8005300:	4a62      	ldr	r2, [pc, #392]	; (800548c <draw_each_device+0x77c>)
 8005302:	2100      	movs	r1, #0
 8005304:	2007      	movs	r0, #7
 8005306:	f004 f9d8 	bl	80096ba <ssd1306_print>
        }
        convert_timeout(pp_dev_aux[device_number]->timeout, &buf[0]);
 800530a:	4b5e      	ldr	r3, [pc, #376]	; (8005484 <draw_each_device+0x774>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4b5e      	ldr	r3, [pc, #376]	; (8005488 <draw_each_device+0x778>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	4953      	ldr	r1, [pc, #332]	; (8005468 <draw_each_device+0x758>)
 800531c:	4618      	mov	r0, r3
 800531e:	f003 f89b 	bl	8008458 <convert_timeout>
        ssd1306_print(7, 4, &buf[0], 0);
 8005322:	2300      	movs	r3, #0
 8005324:	4a50      	ldr	r2, [pc, #320]	; (8005468 <draw_each_device+0x758>)
 8005326:	2104      	movs	r1, #4
 8005328:	2007      	movs	r0, #7
 800532a:	f004 f9c6 	bl	80096ba <ssd1306_print>
        
        ssd1306_print(7, 11, "BAT", 0);
 800532e:	2300      	movs	r3, #0
 8005330:	4a57      	ldr	r2, [pc, #348]	; (8005490 <draw_each_device+0x780>)
 8005332:	210b      	movs	r1, #11
 8005334:	2007      	movs	r0, #7
 8005336:	f004 f9c0 	bl	80096ba <ssd1306_print>
        ftoa32(get_bat_voltage_value(), 2, &buf[0]);
 800533a:	f7fc f929 	bl	8001590 <get_bat_voltage_value>
 800533e:	4603      	mov	r3, r0
 8005340:	4a49      	ldr	r2, [pc, #292]	; (8005468 <draw_each_device+0x758>)
 8005342:	2102      	movs	r1, #2
 8005344:	4618      	mov	r0, r3
 8005346:	f003 fa5b 	bl	8008800 <ftoa32>
        ssd1306_print(7, 15, &buf[0], 0);
 800534a:	2300      	movs	r3, #0
 800534c:	4a46      	ldr	r2, [pc, #280]	; (8005468 <draw_each_device+0x758>)
 800534e:	210f      	movs	r1, #15
 8005350:	2007      	movs	r0, #7
 8005352:	f004 f9b2 	bl	80096ba <ssd1306_print>
        ssd1306_char('V', 0);
 8005356:	2100      	movs	r1, #0
 8005358:	2056      	movs	r0, #86	; 0x56
 800535a:	f004 f94b 	bl	80095f4 <ssd1306_char>
 800535e:	e380      	b.n	8005a62 <draw_each_device+0xd52>
    }
    else                                    //if not me
    {
        ssd1306_print(0, 1, "#", 0);
 8005360:	2300      	movs	r3, #0
 8005362:	4a4c      	ldr	r2, [pc, #304]	; (8005494 <draw_each_device+0x784>)
 8005364:	2101      	movs	r1, #1
 8005366:	2000      	movs	r0, #0
 8005368:	f004 f9a7 	bl	80096ba <ssd1306_print>
        itoa32(current_each_device, &buf[0]);
 800536c:	4b4a      	ldr	r3, [pc, #296]	; (8005498 <draw_each_device+0x788>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	493d      	ldr	r1, [pc, #244]	; (8005468 <draw_each_device+0x758>)
 8005372:	4618      	mov	r0, r3
 8005374:	f003 fb94 	bl	8008aa0 <itoa32>
        ssd1306_print(0, 2, &buf[0], 0);
 8005378:	2300      	movs	r3, #0
 800537a:	4a3b      	ldr	r2, [pc, #236]	; (8005468 <draw_each_device+0x758>)
 800537c:	2102      	movs	r1, #2
 800537e:	2000      	movs	r0, #0
 8005380:	f004 f99b 	bl	80096ba <ssd1306_print>
        
        ssd1306_char_pos(0, 4, pp_gps_air[current_each_device]->device_id[0], 0);
 8005384:	4b45      	ldr	r3, [pc, #276]	; (800549c <draw_each_device+0x78c>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b43      	ldr	r3, [pc, #268]	; (8005498 <draw_each_device+0x788>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	781a      	ldrb	r2, [r3, #0]
 8005394:	2300      	movs	r3, #0
 8005396:	2104      	movs	r1, #4
 8005398:	2000      	movs	r0, #0
 800539a:	f004 f96f 	bl	800967c <ssd1306_char_pos>
        ssd1306_char_pos(0, 5, pp_gps_air[current_each_device]->device_id[1], 0);
 800539e:	4b3f      	ldr	r3, [pc, #252]	; (800549c <draw_each_device+0x78c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b3d      	ldr	r3, [pc, #244]	; (8005498 <draw_each_device+0x788>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	785a      	ldrb	r2, [r3, #1]
 80053ae:	2300      	movs	r3, #0
 80053b0:	2105      	movs	r1, #5
 80053b2:	2000      	movs	r0, #0
 80053b4:	f004 f962 	bl	800967c <ssd1306_char_pos>
        
        if (pp_dev_aux[current_each_device]->memory_point_flag == 1) //print memory point name
 80053b8:	4b32      	ldr	r3, [pc, #200]	; (8005484 <draw_each_device+0x774>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	4b36      	ldr	r3, [pc, #216]	; (8005498 <draw_each_device+0x788>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	7b9b      	ldrb	r3, [r3, #14]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d10d      	bne.n	80053e8 <draw_each_device+0x6d8>
        {
        	ssd1306_print(0, 7, pp_dev_aux[current_each_device]->point_name, 0);
 80053cc:	4b2d      	ldr	r3, [pc, #180]	; (8005484 <draw_each_device+0x774>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4b31      	ldr	r3, [pc, #196]	; (8005498 <draw_each_device+0x788>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f103 020f 	add.w	r2, r3, #15
 80053de:	2300      	movs	r3, #0
 80053e0:	2107      	movs	r1, #7
 80053e2:	2000      	movs	r0, #0
 80053e4:	f004 f969 	bl	80096ba <ssd1306_print>
        }

        ssd1306_print(1, 0, "LAT", 0);
 80053e8:	2300      	movs	r3, #0
 80053ea:	4a2d      	ldr	r2, [pc, #180]	; (80054a0 <draw_each_device+0x790>)
 80053ec:	2100      	movs	r1, #0
 80053ee:	2001      	movs	r0, #1
 80053f0:	f004 f963 	bl	80096ba <ssd1306_print>
        ftoa32(pp_gps_air[current_each_device]->latitude.as_float, 6, &buf[0]);
 80053f4:	4b29      	ldr	r3, [pc, #164]	; (800549c <draw_each_device+0x78c>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <draw_each_device+0x788>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4a18      	ldr	r2, [pc, #96]	; (8005468 <draw_each_device+0x758>)
 8005406:	2106      	movs	r1, #6
 8005408:	4618      	mov	r0, r3
 800540a:	f003 f9f9 	bl	8008800 <ftoa32>
        ssd1306_print_viceversa(1, 14, &buf[0], 0);
 800540e:	2300      	movs	r3, #0
 8005410:	4a15      	ldr	r2, [pc, #84]	; (8005468 <draw_each_device+0x758>)
 8005412:	210e      	movs	r1, #14
 8005414:	2001      	movs	r0, #1
 8005416:	f004 f973 	bl	8009700 <ssd1306_print_viceversa>
        if (pp_gps_air[current_each_device]->latitude.as_float >= 0)
 800541a:	4b20      	ldr	r3, [pc, #128]	; (800549c <draw_each_device+0x78c>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <draw_each_device+0x788>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f04f 0100 	mov.w	r1, #0
 800542e:	4618      	mov	r0, r3
 8005430:	f7fb fe62 	bl	80010f8 <__aeabi_fcmpge>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d036      	beq.n	80054a8 <draw_each_device+0x798>
        {
            ssd1306_char('+', 0);
 800543a:	2100      	movs	r1, #0
 800543c:	202b      	movs	r0, #43	; 0x2b
 800543e:	f004 f8d9 	bl	80095f4 <ssd1306_char>
            ssd1306_print(1, 16, "(N)", 0);
 8005442:	2300      	movs	r3, #0
 8005444:	4a17      	ldr	r2, [pc, #92]	; (80054a4 <draw_each_device+0x794>)
 8005446:	2110      	movs	r1, #16
 8005448:	2001      	movs	r0, #1
 800544a:	f004 f936 	bl	80096ba <ssd1306_print>
 800544e:	e031      	b.n	80054b4 <draw_each_device+0x7a4>
 8005450:	0800cfbc 	.word	0x0800cfbc
 8005454:	20000614 	.word	0x20000614
 8005458:	0800cfc0 	.word	0x0800cfc0
 800545c:	0800cfc4 	.word	0x0800cfc4
 8005460:	0800cfc8 	.word	0x0800cfc8
 8005464:	0800cfcc 	.word	0x0800cfcc
 8005468:	20000810 	.word	0x20000810
 800546c:	0800cfd0 	.word	0x0800cfd0
 8005470:	0800cfd4 	.word	0x0800cfd4
 8005474:	41200000 	.word	0x41200000
 8005478:	0800cfd8 	.word	0x0800cfd8
 800547c:	0800cfdc 	.word	0x0800cfdc
 8005480:	0800cfe0 	.word	0x0800cfe0
 8005484:	2000083c 	.word	0x2000083c
 8005488:	20000738 	.word	0x20000738
 800548c:	0800cfe4 	.word	0x0800cfe4
 8005490:	0800cfe8 	.word	0x0800cfe8
 8005494:	0800cf7c 	.word	0x0800cf7c
 8005498:	2000002a 	.word	0x2000002a
 800549c:	20000804 	.word	0x20000804
 80054a0:	0800cf94 	.word	0x0800cf94
 80054a4:	0800cf98 	.word	0x0800cf98
        }
        else
        {
            ssd1306_print(1, 16, "(S)", 0);
 80054a8:	2300      	movs	r3, #0
 80054aa:	4ab5      	ldr	r2, [pc, #724]	; (8005780 <draw_each_device+0xa70>)
 80054ac:	2110      	movs	r1, #16
 80054ae:	2001      	movs	r0, #1
 80054b0:	f004 f903 	bl	80096ba <ssd1306_print>
        }
        
        ssd1306_print(2, 0, "LON", 0);
 80054b4:	2300      	movs	r3, #0
 80054b6:	4ab3      	ldr	r2, [pc, #716]	; (8005784 <draw_each_device+0xa74>)
 80054b8:	2100      	movs	r1, #0
 80054ba:	2002      	movs	r0, #2
 80054bc:	f004 f8fd 	bl	80096ba <ssd1306_print>
        ftoa32(pp_gps_air[current_each_device]->longitude.as_float, 6, &buf[0]);
 80054c0:	4bb1      	ldr	r3, [pc, #708]	; (8005788 <draw_each_device+0xa78>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4bb1      	ldr	r3, [pc, #708]	; (800578c <draw_each_device+0xa7c>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4aaf      	ldr	r2, [pc, #700]	; (8005790 <draw_each_device+0xa80>)
 80054d2:	2106      	movs	r1, #6
 80054d4:	4618      	mov	r0, r3
 80054d6:	f003 f993 	bl	8008800 <ftoa32>
        ssd1306_print_viceversa(2, 14, &buf[0], 0);
 80054da:	2300      	movs	r3, #0
 80054dc:	4aac      	ldr	r2, [pc, #688]	; (8005790 <draw_each_device+0xa80>)
 80054de:	210e      	movs	r1, #14
 80054e0:	2002      	movs	r0, #2
 80054e2:	f004 f90d 	bl	8009700 <ssd1306_print_viceversa>
        if (pp_gps_air[current_each_device]->longitude.as_float >= 0)
 80054e6:	4ba8      	ldr	r3, [pc, #672]	; (8005788 <draw_each_device+0xa78>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4ba8      	ldr	r3, [pc, #672]	; (800578c <draw_each_device+0xa7c>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f04f 0100 	mov.w	r1, #0
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fb fdfc 	bl	80010f8 <__aeabi_fcmpge>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <draw_each_device+0x80c>
        {
            ssd1306_char('+', 0);
 8005506:	2100      	movs	r1, #0
 8005508:	202b      	movs	r0, #43	; 0x2b
 800550a:	f004 f873 	bl	80095f4 <ssd1306_char>
            ssd1306_print(2, 16, "(E)", 0);
 800550e:	2300      	movs	r3, #0
 8005510:	4aa0      	ldr	r2, [pc, #640]	; (8005794 <draw_each_device+0xa84>)
 8005512:	2110      	movs	r1, #16
 8005514:	2002      	movs	r0, #2
 8005516:	f004 f8d0 	bl	80096ba <ssd1306_print>
 800551a:	e005      	b.n	8005528 <draw_each_device+0x818>
        }
        else
        {
            ssd1306_print(2, 16, "(W)", 0);
 800551c:	2300      	movs	r3, #0
 800551e:	4a9e      	ldr	r2, [pc, #632]	; (8005798 <draw_each_device+0xa88>)
 8005520:	2110      	movs	r1, #16
 8005522:	2002      	movs	r0, #2
 8005524:	f004 f8c9 	bl	80096ba <ssd1306_print>
        }
        
        ssd1306_print(3, 0, "ALT", 0);
 8005528:	2300      	movs	r3, #0
 800552a:	4a9c      	ldr	r2, [pc, #624]	; (800579c <draw_each_device+0xa8c>)
 800552c:	2100      	movs	r1, #0
 800552e:	2003      	movs	r0, #3
 8005530:	f004 f8c3 	bl	80096ba <ssd1306_print>
        itoa32(pp_gps_air[current_each_device]->altitude.as_integer, &buf[0]);
 8005534:	4b94      	ldr	r3, [pc, #592]	; (8005788 <draw_each_device+0xa78>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b94      	ldr	r3, [pc, #592]	; (800578c <draw_each_device+0xa7c>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005546:	4992      	ldr	r1, [pc, #584]	; (8005790 <draw_each_device+0xa80>)
 8005548:	4618      	mov	r0, r3
 800554a:	f003 faa9 	bl	8008aa0 <itoa32>
        ssd1306_print(3, 4, &buf[0], 0);
 800554e:	2300      	movs	r3, #0
 8005550:	4a8f      	ldr	r2, [pc, #572]	; (8005790 <draw_each_device+0xa80>)
 8005552:	2104      	movs	r1, #4
 8005554:	2003      	movs	r0, #3
 8005556:	f004 f8b0 	bl	80096ba <ssd1306_print>
        ssd1306_print_next("m", 0);
 800555a:	2100      	movs	r1, #0
 800555c:	4890      	ldr	r0, [pc, #576]	; (80057a0 <draw_each_device+0xa90>)
 800555e:	f004 f90b 	bl	8009778 <ssd1306_print_next>
        
        
        ssd1306_print(3, 11, "DLT", 0);
 8005562:	2300      	movs	r3, #0
 8005564:	4a8f      	ldr	r2, [pc, #572]	; (80057a4 <draw_each_device+0xa94>)
 8005566:	210b      	movs	r1, #11
 8005568:	2003      	movs	r0, #3
 800556a:	f004 f8a6 	bl	80096ba <ssd1306_print>
        tmpi16 = pp_gps_rel[current_each_device]->altitude_diff;
 800556e:	4b8e      	ldr	r3, [pc, #568]	; (80057a8 <draw_each_device+0xa98>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4b86      	ldr	r3, [pc, #536]	; (800578c <draw_each_device+0xa7c>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8005580:	4b8a      	ldr	r3, [pc, #552]	; (80057ac <draw_each_device+0xa9c>)
 8005582:	801a      	strh	r2, [r3, #0]
        
        if (tmpi16 < 0)
 8005584:	4b89      	ldr	r3, [pc, #548]	; (80057ac <draw_each_device+0xa9c>)
 8005586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800558a:	2b00      	cmp	r3, #0
 800558c:	da0f      	bge.n	80055ae <draw_each_device+0x89e>
        {
            tmpi16 *= -1;
 800558e:	4b87      	ldr	r3, [pc, #540]	; (80057ac <draw_each_device+0xa9c>)
 8005590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005594:	b29b      	uxth	r3, r3
 8005596:	425b      	negs	r3, r3
 8005598:	b29b      	uxth	r3, r3
 800559a:	b21a      	sxth	r2, r3
 800559c:	4b83      	ldr	r3, [pc, #524]	; (80057ac <draw_each_device+0xa9c>)
 800559e:	801a      	strh	r2, [r3, #0]
            ssd1306_char_pos(3, 14, ' ', 0);
 80055a0:	2300      	movs	r3, #0
 80055a2:	2220      	movs	r2, #32
 80055a4:	210e      	movs	r1, #14
 80055a6:	2003      	movs	r0, #3
 80055a8:	f004 f868 	bl	800967c <ssd1306_char_pos>
 80055ac:	e011      	b.n	80055d2 <draw_each_device+0x8c2>
        }
        else if (tmpi16 > 0)
 80055ae:	4b7f      	ldr	r3, [pc, #508]	; (80057ac <draw_each_device+0xa9c>)
 80055b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dd06      	ble.n	80055c6 <draw_each_device+0x8b6>
        {
            ssd1306_char_pos(3, 15, '+', 0);
 80055b8:	2300      	movs	r3, #0
 80055ba:	222b      	movs	r2, #43	; 0x2b
 80055bc:	210f      	movs	r1, #15
 80055be:	2003      	movs	r0, #3
 80055c0:	f004 f85c 	bl	800967c <ssd1306_char_pos>
 80055c4:	e005      	b.n	80055d2 <draw_each_device+0x8c2>
        }
        else
        {
            ssd1306_char_pos(3, 14, ' ', 0);
 80055c6:	2300      	movs	r3, #0
 80055c8:	2220      	movs	r2, #32
 80055ca:	210e      	movs	r1, #14
 80055cc:	2003      	movs	r0, #3
 80055ce:	f004 f855 	bl	800967c <ssd1306_char_pos>
        }
        
        if (tmpi16 < 10000)           //0-9999 m
 80055d2:	4b76      	ldr	r3, [pc, #472]	; (80057ac <draw_each_device+0xa9c>)
 80055d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80055dc:	4293      	cmp	r3, r2
 80055de:	dc15      	bgt.n	800560c <draw_each_device+0x8fc>
        {
            itoa32(pp_gps_rel[current_each_device]->altitude_diff, &buf[0]);
 80055e0:	4b71      	ldr	r3, [pc, #452]	; (80057a8 <draw_each_device+0xa98>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b69      	ldr	r3, [pc, #420]	; (800578c <draw_each_device+0xa7c>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80055f2:	4967      	ldr	r1, [pc, #412]	; (8005790 <draw_each_device+0xa80>)
 80055f4:	4618      	mov	r0, r3
 80055f6:	f003 fa53 	bl	8008aa0 <itoa32>
            ssd1306_print_next(&buf[0], 0);
 80055fa:	2100      	movs	r1, #0
 80055fc:	4864      	ldr	r0, [pc, #400]	; (8005790 <draw_each_device+0xa80>)
 80055fe:	f004 f8bb 	bl	8009778 <ssd1306_print_next>
            ssd1306_print_next("m", 0);
 8005602:	2100      	movs	r1, #0
 8005604:	4866      	ldr	r0, [pc, #408]	; (80057a0 <draw_each_device+0xa90>)
 8005606:	f004 f8b7 	bl	8009778 <ssd1306_print_next>
 800560a:	e028      	b.n	800565e <draw_each_device+0x94e>
        }
        else                          // >=10000 km
        {
            tmpf = pp_gps_rel[current_each_device]->altitude_diff / 1000.0;
 800560c:	4b66      	ldr	r3, [pc, #408]	; (80057a8 <draw_each_device+0xa98>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4b5e      	ldr	r3, [pc, #376]	; (800578c <draw_each_device+0xa7c>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fa fef8 	bl	8000414 <__aeabi_i2d>
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	4b61      	ldr	r3, [pc, #388]	; (80057b0 <draw_each_device+0xaa0>)
 800562a:	f7fb f887 	bl	800073c <__aeabi_ddiv>
 800562e:	4603      	mov	r3, r0
 8005630:	460c      	mov	r4, r1
 8005632:	4618      	mov	r0, r3
 8005634:	4621      	mov	r1, r4
 8005636:	f7fb fa4f 	bl	8000ad8 <__aeabi_d2f>
 800563a:	4602      	mov	r2, r0
 800563c:	4b5d      	ldr	r3, [pc, #372]	; (80057b4 <draw_each_device+0xaa4>)
 800563e:	601a      	str	r2, [r3, #0]
            ftoa32(tmpf, 1, &buf[0]);
 8005640:	4b5c      	ldr	r3, [pc, #368]	; (80057b4 <draw_each_device+0xaa4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a52      	ldr	r2, [pc, #328]	; (8005790 <draw_each_device+0xa80>)
 8005646:	2101      	movs	r1, #1
 8005648:	4618      	mov	r0, r3
 800564a:	f003 f8d9 	bl	8008800 <ftoa32>
            ssd1306_print_next(&buf[0], 0);
 800564e:	2100      	movs	r1, #0
 8005650:	484f      	ldr	r0, [pc, #316]	; (8005790 <draw_each_device+0xa80>)
 8005652:	f004 f891 	bl	8009778 <ssd1306_print_next>
            ssd1306_print_next("k", 0);
 8005656:	2100      	movs	r1, #0
 8005658:	4857      	ldr	r0, [pc, #348]	; (80057b8 <draw_each_device+0xaa8>)
 800565a:	f004 f88d 	bl	8009778 <ssd1306_print_next>
        }
        
        if (pp_dev_aux[current_each_device]->memory_point_flag == 0)
 800565e:	4b57      	ldr	r3, [pc, #348]	; (80057bc <draw_each_device+0xaac>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b4a      	ldr	r3, [pc, #296]	; (800578c <draw_each_device+0xa7c>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	7b9b      	ldrb	r3, [r3, #14]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d11b      	bne.n	80056aa <draw_each_device+0x99a>
        {
			ssd1306_print(4, 0, "COG", 0);
 8005672:	2300      	movs	r3, #0
 8005674:	4a52      	ldr	r2, [pc, #328]	; (80057c0 <draw_each_device+0xab0>)
 8005676:	2100      	movs	r1, #0
 8005678:	2004      	movs	r0, #4
 800567a:	f004 f81e 	bl	80096ba <ssd1306_print>
			itoa32(pp_gps_air[current_each_device]->course.as_integer, &buf[0]);
 800567e:	4b42      	ldr	r3, [pc, #264]	; (8005788 <draw_each_device+0xa78>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4b42      	ldr	r3, [pc, #264]	; (800578c <draw_each_device+0xa7c>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	8a1b      	ldrh	r3, [r3, #16]
 800568e:	4940      	ldr	r1, [pc, #256]	; (8005790 <draw_each_device+0xa80>)
 8005690:	4618      	mov	r0, r3
 8005692:	f003 fa05 	bl	8008aa0 <itoa32>
			ssd1306_print(4, 4, &buf[0], 0);
 8005696:	2300      	movs	r3, #0
 8005698:	4a3d      	ldr	r2, [pc, #244]	; (8005790 <draw_each_device+0xa80>)
 800569a:	2104      	movs	r1, #4
 800569c:	2004      	movs	r0, #4
 800569e:	f004 f80c 	bl	80096ba <ssd1306_print>
			ssd1306_char(SYMB_DEGREE, 0);
 80056a2:	2100      	movs	r1, #0
 80056a4:	208d      	movs	r0, #141	; 0x8d
 80056a6:	f003 ffa5 	bl	80095f4 <ssd1306_char>
        }
        
        ssd1306_print(4, 11, "BRG", 0);
 80056aa:	2300      	movs	r3, #0
 80056ac:	4a45      	ldr	r2, [pc, #276]	; (80057c4 <draw_each_device+0xab4>)
 80056ae:	210b      	movs	r1, #11
 80056b0:	2004      	movs	r0, #4
 80056b2:	f004 f802 	bl	80096ba <ssd1306_print>
        itoa32(pp_gps_rel[current_each_device]->heading, &buf[0]);
 80056b6:	4b3c      	ldr	r3, [pc, #240]	; (80057a8 <draw_each_device+0xa98>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4b34      	ldr	r3, [pc, #208]	; (800578c <draw_each_device+0xa7c>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	889b      	ldrh	r3, [r3, #4]
 80056c6:	4932      	ldr	r1, [pc, #200]	; (8005790 <draw_each_device+0xa80>)
 80056c8:	4618      	mov	r0, r3
 80056ca:	f003 f9e9 	bl	8008aa0 <itoa32>
        ssd1306_print(4, 15, &buf[0], 0);
 80056ce:	2300      	movs	r3, #0
 80056d0:	4a2f      	ldr	r2, [pc, #188]	; (8005790 <draw_each_device+0xa80>)
 80056d2:	210f      	movs	r1, #15
 80056d4:	2004      	movs	r0, #4
 80056d6:	f003 fff0 	bl	80096ba <ssd1306_print>
        ssd1306_char(SYMB_DEGREE, 0);
 80056da:	2100      	movs	r1, #0
 80056dc:	208d      	movs	r0, #141	; 0x8d
 80056de:	f003 ff89 	bl	80095f4 <ssd1306_char>
        
        if (pp_dev_aux[current_each_device]->memory_point_flag == 0)
 80056e2:	4b36      	ldr	r3, [pc, #216]	; (80057bc <draw_each_device+0xaac>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b29      	ldr	r3, [pc, #164]	; (800578c <draw_each_device+0xa7c>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	7b9b      	ldrb	r3, [r3, #14]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d11b      	bne.n	800572e <draw_each_device+0xa1e>
        {
			ssd1306_print(5, 0, "SOG", 0);
 80056f6:	2300      	movs	r3, #0
 80056f8:	4a33      	ldr	r2, [pc, #204]	; (80057c8 <draw_each_device+0xab8>)
 80056fa:	2100      	movs	r1, #0
 80056fc:	2005      	movs	r0, #5
 80056fe:	f003 ffdc 	bl	80096ba <ssd1306_print>
			itoa32(pp_gps_air[current_each_device]->speed, &buf[0]);
 8005702:	4b21      	ldr	r3, [pc, #132]	; (8005788 <draw_each_device+0xa78>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b21      	ldr	r3, [pc, #132]	; (800578c <draw_each_device+0xa7c>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	7b9b      	ldrb	r3, [r3, #14]
 8005712:	491f      	ldr	r1, [pc, #124]	; (8005790 <draw_each_device+0xa80>)
 8005714:	4618      	mov	r0, r3
 8005716:	f003 f9c3 	bl	8008aa0 <itoa32>
			ssd1306_print(5, 4, &buf[0], 0);
 800571a:	2300      	movs	r3, #0
 800571c:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <draw_each_device+0xa80>)
 800571e:	2104      	movs	r1, #4
 8005720:	2005      	movs	r0, #5
 8005722:	f003 ffca 	bl	80096ba <ssd1306_print>
			ssd1306_print_next("kph", 0);
 8005726:	2100      	movs	r1, #0
 8005728:	4828      	ldr	r0, [pc, #160]	; (80057cc <draw_each_device+0xabc>)
 800572a:	f004 f825 	bl	8009778 <ssd1306_print_next>
        }
        
        
        ssd1306_print(5, 11, "DST", 0);
 800572e:	2300      	movs	r3, #0
 8005730:	4a27      	ldr	r2, [pc, #156]	; (80057d0 <draw_each_device+0xac0>)
 8005732:	210b      	movs	r1, #11
 8005734:	2005      	movs	r0, #5
 8005736:	f003 ffc0 	bl	80096ba <ssd1306_print>
        
        if (pp_gps_rel[current_each_device]->distance < 100000)           // 0-99999 m
 800573a:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <draw_each_device+0xa98>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b13      	ldr	r3, [pc, #76]	; (800578c <draw_each_device+0xa7c>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a22      	ldr	r2, [pc, #136]	; (80057d4 <draw_each_device+0xac4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d843      	bhi.n	80057d8 <draw_each_device+0xac8>
        {
            itoa32(pp_gps_rel[current_each_device]->distance, &buf[0]);
 8005750:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <draw_each_device+0xa98>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	4b0d      	ldr	r3, [pc, #52]	; (800578c <draw_each_device+0xa7c>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	490b      	ldr	r1, [pc, #44]	; (8005790 <draw_each_device+0xa80>)
 8005762:	4618      	mov	r0, r3
 8005764:	f003 f99c 	bl	8008aa0 <itoa32>
            ssd1306_print(5, 15, &buf[0], 0);
 8005768:	2300      	movs	r3, #0
 800576a:	4a09      	ldr	r2, [pc, #36]	; (8005790 <draw_each_device+0xa80>)
 800576c:	210f      	movs	r1, #15
 800576e:	2005      	movs	r0, #5
 8005770:	f003 ffa3 	bl	80096ba <ssd1306_print>
            ssd1306_print_next("m", 0);
 8005774:	2100      	movs	r1, #0
 8005776:	480a      	ldr	r0, [pc, #40]	; (80057a0 <draw_each_device+0xa90>)
 8005778:	f003 fffe 	bl	8009778 <ssd1306_print_next>
 800577c:	e08c      	b.n	8005898 <draw_each_device+0xb88>
 800577e:	bf00      	nop
 8005780:	0800cf9c 	.word	0x0800cf9c
 8005784:	0800cfa0 	.word	0x0800cfa0
 8005788:	20000804 	.word	0x20000804
 800578c:	2000002a 	.word	0x2000002a
 8005790:	20000810 	.word	0x20000810
 8005794:	0800cfa4 	.word	0x0800cfa4
 8005798:	0800cfa8 	.word	0x0800cfa8
 800579c:	0800cfac 	.word	0x0800cfac
 80057a0:	0800cfb0 	.word	0x0800cfb0
 80057a4:	0800cfec 	.word	0x0800cfec
 80057a8:	200007d0 	.word	0x200007d0
 80057ac:	200007f8 	.word	0x200007f8
 80057b0:	408f4000 	.word	0x408f4000
 80057b4:	200007f4 	.word	0x200007f4
 80057b8:	0800cff0 	.word	0x0800cff0
 80057bc:	2000083c 	.word	0x2000083c
 80057c0:	0800cfcc 	.word	0x0800cfcc
 80057c4:	0800cff4 	.word	0x0800cff4
 80057c8:	0800cfd4 	.word	0x0800cfd4
 80057cc:	0800cfd8 	.word	0x0800cfd8
 80057d0:	0800cff8 	.word	0x0800cff8
 80057d4:	0001869f 	.word	0x0001869f
        }
        else if (pp_gps_rel[current_each_device]->distance < 1000000)     // 100-999.9 km
 80057d8:	4ba7      	ldr	r3, [pc, #668]	; (8005a78 <draw_each_device+0xd68>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4ba7      	ldr	r3, [pc, #668]	; (8005a7c <draw_each_device+0xd6c>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4aa5      	ldr	r2, [pc, #660]	; (8005a80 <draw_each_device+0xd70>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d82a      	bhi.n	8005844 <draw_each_device+0xb34>
        {
            tmpf = pp_gps_rel[current_each_device]->distance / 1000.0;
 80057ee:	4ba2      	ldr	r3, [pc, #648]	; (8005a78 <draw_each_device+0xd68>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4ba2      	ldr	r3, [pc, #648]	; (8005a7c <draw_each_device+0xd6c>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fa fdf8 	bl	80003f4 <__aeabi_ui2d>
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	4b9e      	ldr	r3, [pc, #632]	; (8005a84 <draw_each_device+0xd74>)
 800580a:	f7fa ff97 	bl	800073c <__aeabi_ddiv>
 800580e:	4603      	mov	r3, r0
 8005810:	460c      	mov	r4, r1
 8005812:	4618      	mov	r0, r3
 8005814:	4621      	mov	r1, r4
 8005816:	f7fb f95f 	bl	8000ad8 <__aeabi_d2f>
 800581a:	4602      	mov	r2, r0
 800581c:	4b9a      	ldr	r3, [pc, #616]	; (8005a88 <draw_each_device+0xd78>)
 800581e:	601a      	str	r2, [r3, #0]
            ftoa32(tmpf, 1, &buf[0]);
 8005820:	4b99      	ldr	r3, [pc, #612]	; (8005a88 <draw_each_device+0xd78>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a99      	ldr	r2, [pc, #612]	; (8005a8c <draw_each_device+0xd7c>)
 8005826:	2101      	movs	r1, #1
 8005828:	4618      	mov	r0, r3
 800582a:	f002 ffe9 	bl	8008800 <ftoa32>
            ssd1306_print(5, 15, &buf[0], 0);
 800582e:	2300      	movs	r3, #0
 8005830:	4a96      	ldr	r2, [pc, #600]	; (8005a8c <draw_each_device+0xd7c>)
 8005832:	210f      	movs	r1, #15
 8005834:	2005      	movs	r0, #5
 8005836:	f003 ff40 	bl	80096ba <ssd1306_print>
            ssd1306_print_next("k", 0);
 800583a:	2100      	movs	r1, #0
 800583c:	4894      	ldr	r0, [pc, #592]	; (8005a90 <draw_each_device+0xd80>)
 800583e:	f003 ff9b 	bl	8009778 <ssd1306_print_next>
 8005842:	e029      	b.n	8005898 <draw_each_device+0xb88>
        }
        else                                                          // 1000-... km
        {
            tmpf = pp_gps_rel[current_each_device]->distance / 1000000.0;
 8005844:	4b8c      	ldr	r3, [pc, #560]	; (8005a78 <draw_each_device+0xd68>)
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	4b8c      	ldr	r3, [pc, #560]	; (8005a7c <draw_each_device+0xd6c>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f7fa fdcd 	bl	80003f4 <__aeabi_ui2d>
 800585a:	a385      	add	r3, pc, #532	; (adr r3, 8005a70 <draw_each_device+0xd60>)
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f7fa ff6c 	bl	800073c <__aeabi_ddiv>
 8005864:	4603      	mov	r3, r0
 8005866:	460c      	mov	r4, r1
 8005868:	4618      	mov	r0, r3
 800586a:	4621      	mov	r1, r4
 800586c:	f7fb f934 	bl	8000ad8 <__aeabi_d2f>
 8005870:	4602      	mov	r2, r0
 8005872:	4b85      	ldr	r3, [pc, #532]	; (8005a88 <draw_each_device+0xd78>)
 8005874:	601a      	str	r2, [r3, #0]
            ftoa32(tmpf, 1, &buf[0]);
 8005876:	4b84      	ldr	r3, [pc, #528]	; (8005a88 <draw_each_device+0xd78>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a84      	ldr	r2, [pc, #528]	; (8005a8c <draw_each_device+0xd7c>)
 800587c:	2101      	movs	r1, #1
 800587e:	4618      	mov	r0, r3
 8005880:	f002 ffbe 	bl	8008800 <ftoa32>
            ssd1306_print(5, 15, &buf[0], 0);
 8005884:	2300      	movs	r3, #0
 8005886:	4a81      	ldr	r2, [pc, #516]	; (8005a8c <draw_each_device+0xd7c>)
 8005888:	210f      	movs	r1, #15
 800588a:	2005      	movs	r0, #5
 800588c:	f003 ff15 	bl	80096ba <ssd1306_print>
            ssd1306_print_next("M", 0);
 8005890:	2100      	movs	r1, #0
 8005892:	4880      	ldr	r0, [pc, #512]	; (8005a94 <draw_each_device+0xd84>)
 8005894:	f003 ff70 	bl	8009778 <ssd1306_print_next>
        }
        
        
        if (pp_dev_aux[current_each_device]->memory_point_flag == 0)
 8005898:	4b7f      	ldr	r3, [pc, #508]	; (8005a98 <draw_each_device+0xd88>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	4b77      	ldr	r3, [pc, #476]	; (8005a7c <draw_each_device+0xd6c>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	7b9b      	ldrb	r3, [r3, #14]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d131      	bne.n	8005910 <draw_each_device+0xc00>
        {
			ssd1306_print(6, 0, "FIX", 0);
 80058ac:	2300      	movs	r3, #0
 80058ae:	4a7b      	ldr	r2, [pc, #492]	; (8005a9c <draw_each_device+0xd8c>)
 80058b0:	2100      	movs	r1, #0
 80058b2:	2006      	movs	r0, #6
 80058b4:	f003 ff01 	bl	80096ba <ssd1306_print>
			if (get_device_flags(current_each_device, FLAGS_GPS_FIX) == FLAG_GPS_FIX_3D)
 80058b8:	4b70      	ldr	r3, [pc, #448]	; (8005a7c <draw_each_device+0xd6c>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2102      	movs	r1, #2
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fd f880 	bl	80029c4 <get_device_flags>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d106      	bne.n	80058d8 <draw_each_device+0xbc8>
			{
				ssd1306_print(6, 4, "3D/", 0);
 80058ca:	2300      	movs	r3, #0
 80058cc:	4a74      	ldr	r2, [pc, #464]	; (8005aa0 <draw_each_device+0xd90>)
 80058ce:	2104      	movs	r1, #4
 80058d0:	2006      	movs	r0, #6
 80058d2:	f003 fef2 	bl	80096ba <ssd1306_print>
 80058d6:	e005      	b.n	80058e4 <draw_each_device+0xbd4>
			}
			else
			{
				ssd1306_print(6, 4, "2D/", 0);
 80058d8:	2300      	movs	r3, #0
 80058da:	4a72      	ldr	r2, [pc, #456]	; (8005aa4 <draw_each_device+0xd94>)
 80058dc:	2104      	movs	r1, #4
 80058de:	2006      	movs	r0, #6
 80058e0:	f003 feeb 	bl	80096ba <ssd1306_print>
			}

			if (get_device_flags(current_each_device, FLAGS_PDOP) == FLAG_PDOP_GOOD)
 80058e4:	4b65      	ldr	r3, [pc, #404]	; (8005a7c <draw_each_device+0xd6c>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2103      	movs	r1, #3
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fd f86a 	bl	80029c4 <get_device_flags>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d106      	bne.n	8005904 <draw_each_device+0xbf4>
			{
				ssd1306_print(6, 7, "HI", 0);
 80058f6:	2300      	movs	r3, #0
 80058f8:	4a6b      	ldr	r2, [pc, #428]	; (8005aa8 <draw_each_device+0xd98>)
 80058fa:	2107      	movs	r1, #7
 80058fc:	2006      	movs	r0, #6
 80058fe:	f003 fedc 	bl	80096ba <ssd1306_print>
 8005902:	e005      	b.n	8005910 <draw_each_device+0xc00>
			}
			else
			{
				ssd1306_print(6, 7, "LO", 0);
 8005904:	2300      	movs	r3, #0
 8005906:	4a69      	ldr	r2, [pc, #420]	; (8005aac <draw_each_device+0xd9c>)
 8005908:	2107      	movs	r1, #7
 800590a:	2006      	movs	r0, #6
 800590c:	f003 fed5 	bl	80096ba <ssd1306_print>
			}
        }
        

        if (pp_dev_aux[current_each_device]->memory_point_flag == 0)
 8005910:	4b61      	ldr	r3, [pc, #388]	; (8005a98 <draw_each_device+0xd88>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4b59      	ldr	r3, [pc, #356]	; (8005a7c <draw_each_device+0xd6c>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	7b9b      	ldrb	r3, [r3, #14]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d13e      	bne.n	80059a2 <draw_each_device+0xc92>
        {
			ssd1306_print(6, 11, "BAT", 0);
 8005924:	2300      	movs	r3, #0
 8005926:	4a62      	ldr	r2, [pc, #392]	; (8005ab0 <draw_each_device+0xda0>)
 8005928:	210b      	movs	r1, #11
 800592a:	2006      	movs	r0, #6
 800592c:	f003 fec5 	bl	80096ba <ssd1306_print>
			switch (get_device_flags(current_each_device, FLAGS_BATTERY))
 8005930:	4b52      	ldr	r3, [pc, #328]	; (8005a7c <draw_each_device+0xd6c>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2101      	movs	r1, #1
 8005936:	4618      	mov	r0, r3
 8005938:	f7fd f844 	bl	80029c4 <get_device_flags>
 800593c:	4603      	mov	r3, r0
 800593e:	2b04      	cmp	r3, #4
 8005940:	d82f      	bhi.n	80059a2 <draw_each_device+0xc92>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <draw_each_device+0xc38>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	08005995 	.word	0x08005995
 800594c:	08005987 	.word	0x08005987
 8005950:	08005979 	.word	0x08005979
 8005954:	0800596b 	.word	0x0800596b
 8005958:	0800595d 	.word	0x0800595d
			{
				case FLAG_BATTERY_75_TO_100:
					ssd1306_print(6, 15, "4/4", 0);
 800595c:	2300      	movs	r3, #0
 800595e:	4a55      	ldr	r2, [pc, #340]	; (8005ab4 <draw_each_device+0xda4>)
 8005960:	210f      	movs	r1, #15
 8005962:	2006      	movs	r0, #6
 8005964:	f003 fea9 	bl	80096ba <ssd1306_print>
					break;
 8005968:	e01b      	b.n	80059a2 <draw_each_device+0xc92>

				case FLAG_BATTERY_50_TO_75:
					ssd1306_print(6, 15, "3/4", 0);
 800596a:	2300      	movs	r3, #0
 800596c:	4a52      	ldr	r2, [pc, #328]	; (8005ab8 <draw_each_device+0xda8>)
 800596e:	210f      	movs	r1, #15
 8005970:	2006      	movs	r0, #6
 8005972:	f003 fea2 	bl	80096ba <ssd1306_print>
					break;
 8005976:	e014      	b.n	80059a2 <draw_each_device+0xc92>

				case FLAG_BATTERY_25_TO_50:
					ssd1306_print(6, 15, "2/4", 0);
 8005978:	2300      	movs	r3, #0
 800597a:	4a50      	ldr	r2, [pc, #320]	; (8005abc <draw_each_device+0xdac>)
 800597c:	210f      	movs	r1, #15
 800597e:	2006      	movs	r0, #6
 8005980:	f003 fe9b 	bl	80096ba <ssd1306_print>
					break;
 8005984:	e00d      	b.n	80059a2 <draw_each_device+0xc92>

				case FLAG_BATTERY_10_TO_25:
					ssd1306_print(6, 15, "1/4", 0);
 8005986:	2300      	movs	r3, #0
 8005988:	4a4d      	ldr	r2, [pc, #308]	; (8005ac0 <draw_each_device+0xdb0>)
 800598a:	210f      	movs	r1, #15
 800598c:	2006      	movs	r0, #6
 800598e:	f003 fe94 	bl	80096ba <ssd1306_print>
					break;
 8005992:	e006      	b.n	80059a2 <draw_each_device+0xc92>

				case FLAG_BATTERY_0_TO_10:
					ssd1306_print(6, 15, "0/4", 0);
 8005994:	2300      	movs	r3, #0
 8005996:	4a4b      	ldr	r2, [pc, #300]	; (8005ac4 <draw_each_device+0xdb4>)
 8005998:	210f      	movs	r1, #15
 800599a:	2006      	movs	r0, #6
 800599c:	f003 fe8d 	bl	80096ba <ssd1306_print>
					break;
 80059a0:	bf00      	nop
			}
        }
        
        if (pp_dev_aux[current_each_device]->timeout_flag == 1)
 80059a2:	4b3d      	ldr	r3, [pc, #244]	; (8005a98 <draw_each_device+0xd88>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b35      	ldr	r3, [pc, #212]	; (8005a7c <draw_each_device+0xd6c>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	7b1b      	ldrb	r3, [r3, #12]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d106      	bne.n	80059c4 <draw_each_device+0xcb4>
        {
        	ssd1306_print(7, 0, "TOC", 1);
 80059b6:	2301      	movs	r3, #1
 80059b8:	4a43      	ldr	r2, [pc, #268]	; (8005ac8 <draw_each_device+0xdb8>)
 80059ba:	2100      	movs	r1, #0
 80059bc:	2007      	movs	r0, #7
 80059be:	f003 fe7c 	bl	80096ba <ssd1306_print>
 80059c2:	e005      	b.n	80059d0 <draw_each_device+0xcc0>
        }
        else
        {
        	ssd1306_print(7, 0, "TOC", 0);
 80059c4:	2300      	movs	r3, #0
 80059c6:	4a40      	ldr	r2, [pc, #256]	; (8005ac8 <draw_each_device+0xdb8>)
 80059c8:	2100      	movs	r1, #0
 80059ca:	2007      	movs	r0, #7
 80059cc:	f003 fe75 	bl	80096ba <ssd1306_print>
        }
        convert_timeout(pp_dev_aux[current_each_device]->timeout, &buf[0]);
 80059d0:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <draw_each_device+0xd88>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4b29      	ldr	r3, [pc, #164]	; (8005a7c <draw_each_device+0xd6c>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	492a      	ldr	r1, [pc, #168]	; (8005a8c <draw_each_device+0xd7c>)
 80059e2:	4618      	mov	r0, r3
 80059e4:	f002 fd38 	bl	8008458 <convert_timeout>
        ssd1306_print(7, 4, &buf[0], 0);
 80059e8:	2300      	movs	r3, #0
 80059ea:	4a28      	ldr	r2, [pc, #160]	; (8005a8c <draw_each_device+0xd7c>)
 80059ec:	2104      	movs	r1, #4
 80059ee:	2007      	movs	r0, #7
 80059f0:	f003 fe63 	bl	80096ba <ssd1306_print>
        
        

		if (pp_dev_aux[current_each_device]->fence_flag)
 80059f4:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <draw_each_device+0xd88>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <draw_each_device+0xd6c>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	7b5b      	ldrb	r3, [r3, #13]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d006      	beq.n	8005a16 <draw_each_device+0xd06>
		{
			ssd1306_print(7, 11, "FNC", 1);		//print inverted
 8005a08:	2301      	movs	r3, #1
 8005a0a:	4a30      	ldr	r2, [pc, #192]	; (8005acc <draw_each_device+0xdbc>)
 8005a0c:	210b      	movs	r1, #11
 8005a0e:	2007      	movs	r0, #7
 8005a10:	f003 fe53 	bl	80096ba <ssd1306_print>
 8005a14:	e005      	b.n	8005a22 <draw_each_device+0xd12>
		}
		else
		{
			ssd1306_print(7, 11, "FNC", 0);
 8005a16:	2300      	movs	r3, #0
 8005a18:	4a2c      	ldr	r2, [pc, #176]	; (8005acc <draw_each_device+0xdbc>)
 8005a1a:	210b      	movs	r1, #11
 8005a1c:	2007      	movs	r0, #7
 8005a1e:	f003 fe4c 	bl	80096ba <ssd1306_print>
		}


        if (pp_dev_aux[current_each_device]->memory_point_flag == 0)
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <draw_each_device+0xd88>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <draw_each_device+0xd6c>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	7b9b      	ldrb	r3, [r3, #14]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d115      	bne.n	8005a62 <draw_each_device+0xd52>
        {
			if (get_device_flags(current_each_device, FLAGS_ALARM) == FLAG_ALARM_ON)
 8005a36:	4b11      	ldr	r3, [pc, #68]	; (8005a7c <draw_each_device+0xd6c>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2104      	movs	r1, #4
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fc ffc1 	bl	80029c4 <get_device_flags>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d106      	bne.n	8005a56 <draw_each_device+0xd46>
			{
				ssd1306_print(7, 15, "ALR", 1);		//print inverted
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4a21      	ldr	r2, [pc, #132]	; (8005ad0 <draw_each_device+0xdc0>)
 8005a4c:	210f      	movs	r1, #15
 8005a4e:	2007      	movs	r0, #7
 8005a50:	f003 fe33 	bl	80096ba <ssd1306_print>
 8005a54:	e005      	b.n	8005a62 <draw_each_device+0xd52>
			}
			else
			{
				ssd1306_print(7, 15, "ALR", 0);
 8005a56:	2300      	movs	r3, #0
 8005a58:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <draw_each_device+0xdc0>)
 8005a5a:	210f      	movs	r1, #15
 8005a5c:	2007      	movs	r0, #7
 8005a5e:	f003 fe2c 	bl	80096ba <ssd1306_print>
			}
        }

    }
    ssd1306_update();
 8005a62:	f003 fcf9 	bl	8009458 <ssd1306_update>
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd90      	pop	{r4, r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	00000000 	.word	0x00000000
 8005a74:	412e8480 	.word	0x412e8480
 8005a78:	200007d0 	.word	0x200007d0
 8005a7c:	2000002a 	.word	0x2000002a
 8005a80:	000f423f 	.word	0x000f423f
 8005a84:	408f4000 	.word	0x408f4000
 8005a88:	200007f4 	.word	0x200007f4
 8005a8c:	20000810 	.word	0x20000810
 8005a90:	0800cff0 	.word	0x0800cff0
 8005a94:	0800cffc 	.word	0x0800cffc
 8005a98:	2000083c 	.word	0x2000083c
 8005a9c:	0800cfb4 	.word	0x0800cfb4
 8005aa0:	0800d000 	.word	0x0800d000
 8005aa4:	0800d004 	.word	0x0800d004
 8005aa8:	0800d008 	.word	0x0800d008
 8005aac:	0800d00c 	.word	0x0800d00c
 8005ab0:	0800cfe8 	.word	0x0800cfe8
 8005ab4:	0800d010 	.word	0x0800d010
 8005ab8:	0800d014 	.word	0x0800d014
 8005abc:	0800d018 	.word	0x0800d018
 8005ac0:	0800d01c 	.word	0x0800d01c
 8005ac4:	0800d020 	.word	0x0800d020
 8005ac8:	0800cfe4 	.word	0x0800cfe4
 8005acc:	0800d024 	.word	0x0800d024
 8005ad0:	0800d028 	.word	0x0800d028

08005ad4 <draw_each_device_submenu>:



void draw_each_device_submenu(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
	#define EACH_DEV_SM_ROW               (2)
	#define EACH_DEV_SM_COL               (1)

	ssd1306_clear();
 8005ad8:	f003 fce8 	bl	80094ac <ssd1306_clear>

	ssd1306_print(0, EACH_DEV_SM_COL, "DEVICE", 0);
 8005adc:	2300      	movs	r3, #0
 8005ade:	4a25      	ldr	r2, [pc, #148]	; (8005b74 <draw_each_device_submenu+0xa0>)
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	f003 fde9 	bl	80096ba <ssd1306_print>

	ssd1306_print(0, EACH_DEV_SM_COL + 7, "#", 0);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4a23      	ldr	r2, [pc, #140]	; (8005b78 <draw_each_device_submenu+0xa4>)
 8005aec:	2108      	movs	r1, #8
 8005aee:	2000      	movs	r0, #0
 8005af0:	f003 fde3 	bl	80096ba <ssd1306_print>
    itoa32(current_each_device, &buf[0]);
 8005af4:	4b21      	ldr	r3, [pc, #132]	; (8005b7c <draw_each_device_submenu+0xa8>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	4921      	ldr	r1, [pc, #132]	; (8005b80 <draw_each_device_submenu+0xac>)
 8005afa:	4618      	mov	r0, r3
 8005afc:	f002 ffd0 	bl	8008aa0 <itoa32>
    ssd1306_print(0, EACH_DEV_SM_COL + 8, &buf[0], 0);
 8005b00:	2300      	movs	r3, #0
 8005b02:	4a1f      	ldr	r2, [pc, #124]	; (8005b80 <draw_each_device_submenu+0xac>)
 8005b04:	2109      	movs	r1, #9
 8005b06:	2000      	movs	r0, #0
 8005b08:	f003 fdd7 	bl	80096ba <ssd1306_print>

    ssd1306_char_pos(0, EACH_DEV_SM_COL + 10, pp_gps_air[current_each_device]->device_id[0], 0);
 8005b0c:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <draw_each_device_submenu+0xb0>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	4b1a      	ldr	r3, [pc, #104]	; (8005b7c <draw_each_device_submenu+0xa8>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	210b      	movs	r1, #11
 8005b20:	2000      	movs	r0, #0
 8005b22:	f003 fdab 	bl	800967c <ssd1306_char_pos>
    ssd1306_char_pos(0, EACH_DEV_SM_COL + 11, pp_gps_air[current_each_device]->device_id[1], 0);
 8005b26:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <draw_each_device_submenu+0xb0>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <draw_each_device_submenu+0xa8>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	785a      	ldrb	r2, [r3, #1]
 8005b36:	2300      	movs	r3, #0
 8005b38:	210c      	movs	r1, #12
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	f003 fd9e 	bl	800967c <ssd1306_char_pos>

	ssd1306_print(EACH_DEV_SM_ROW, EACH_DEV_SM_COL, "Save", 0);
 8005b40:	2300      	movs	r3, #0
 8005b42:	4a11      	ldr	r2, [pc, #68]	; (8005b88 <draw_each_device_submenu+0xb4>)
 8005b44:	2101      	movs	r1, #1
 8005b46:	2002      	movs	r0, #2
 8005b48:	f003 fdb7 	bl	80096ba <ssd1306_print>
	ssd1306_print(EACH_DEV_SM_ROW + 1, EACH_DEV_SM_COL, "Delete", 0);
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4a0f      	ldr	r2, [pc, #60]	; (8005b8c <draw_each_device_submenu+0xb8>)
 8005b50:	2101      	movs	r1, #1
 8005b52:	2003      	movs	r0, #3
 8005b54:	f003 fdb1 	bl	80096ba <ssd1306_print>
	ssd1306_print(EACH_DEV_SM_ROW + get_current_item(), EACH_DEV_SM_COL - 1, ">", 0);
 8005b58:	f7fe fc30 	bl	80043bc <get_current_item>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	3302      	adds	r3, #2
 8005b60:	b2d8      	uxtb	r0, r3
 8005b62:	2300      	movs	r3, #0
 8005b64:	4a0a      	ldr	r2, [pc, #40]	; (8005b90 <draw_each_device_submenu+0xbc>)
 8005b66:	2100      	movs	r1, #0
 8005b68:	f003 fda7 	bl	80096ba <ssd1306_print>

	ssd1306_update();
 8005b6c:	f003 fc74 	bl	8009458 <ssd1306_update>
}
 8005b70:	bf00      	nop
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	0800d02c 	.word	0x0800d02c
 8005b78:	0800cf7c 	.word	0x0800cf7c
 8005b7c:	2000002a 	.word	0x2000002a
 8005b80:	20000810 	.word	0x20000810
 8005b84:	20000804 	.word	0x20000804
 8005b88:	0800d034 	.word	0x0800d034
 8005b8c:	0800d03c 	.word	0x0800d03c
 8005b90:	0800cf74 	.word	0x0800cf74

08005b94 <draw_delete_device>:



void draw_delete_device(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
    ssd1306_clear();
 8005b98:	f003 fc88 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, 1, "Delete device", 0);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4a29      	ldr	r2, [pc, #164]	; (8005c44 <draw_delete_device+0xb0>)
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f003 fd89 	bl	80096ba <ssd1306_print>

	ssd1306_print(0, 15, "#", 0);
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4a27      	ldr	r2, [pc, #156]	; (8005c48 <draw_delete_device+0xb4>)
 8005bac:	210f      	movs	r1, #15
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f003 fd83 	bl	80096ba <ssd1306_print>
    itoa32(current_each_device, &buf[0]);
 8005bb4:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <draw_delete_device+0xb8>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	4925      	ldr	r1, [pc, #148]	; (8005c50 <draw_delete_device+0xbc>)
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f002 ff70 	bl	8008aa0 <itoa32>
    ssd1306_print(0, 16, &buf[0], 0);
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <draw_delete_device+0xbc>)
 8005bc4:	2110      	movs	r1, #16
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	f003 fd77 	bl	80096ba <ssd1306_print>

    ssd1306_char_pos(0, 18, pp_gps_air[current_each_device]->device_id[0], 0);
 8005bcc:	4b21      	ldr	r3, [pc, #132]	; (8005c54 <draw_delete_device+0xc0>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <draw_delete_device+0xb8>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	781a      	ldrb	r2, [r3, #0]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2112      	movs	r1, #18
 8005be0:	2000      	movs	r0, #0
 8005be2:	f003 fd4b 	bl	800967c <ssd1306_char_pos>
    ssd1306_char_pos(0, 19, pp_gps_air[current_each_device]->device_id[1], 0);
 8005be6:	4b1b      	ldr	r3, [pc, #108]	; (8005c54 <draw_delete_device+0xc0>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <draw_delete_device+0xb8>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	785a      	ldrb	r2, [r3, #1]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	2113      	movs	r1, #19
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f003 fd3e 	bl	800967c <ssd1306_char_pos>

    ssd1306_print_next("?", 0);
 8005c00:	2100      	movs	r1, #0
 8005c02:	4815      	ldr	r0, [pc, #84]	; (8005c58 <draw_delete_device+0xc4>)
 8005c04:	f003 fdb8 	bl	8009778 <ssd1306_print_next>


    if (current_each_device == device_number)
 8005c08:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <draw_delete_device+0xb8>)
 8005c0a:	781a      	ldrb	r2, [r3, #0]
 8005c0c:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <draw_delete_device+0xc8>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d106      	bne.n	8005c22 <draw_delete_device+0x8e>
    {
    	ssd1306_print(3, 1, "Can't del yourself", 0);
 8005c14:	2300      	movs	r3, #0
 8005c16:	4a12      	ldr	r2, [pc, #72]	; (8005c60 <draw_delete_device+0xcc>)
 8005c18:	2101      	movs	r1, #1
 8005c1a:	2003      	movs	r0, #3
 8005c1c:	f003 fd4d 	bl	80096ba <ssd1306_print>
 8005c20:	e005      	b.n	8005c2e <draw_delete_device+0x9a>
    }
    else
    {
		ssd1306_print(3, 1, "OK - delete", 0);
 8005c22:	2300      	movs	r3, #0
 8005c24:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <draw_delete_device+0xd0>)
 8005c26:	2101      	movs	r1, #1
 8005c28:	2003      	movs	r0, #3
 8005c2a:	f003 fd46 	bl	80096ba <ssd1306_print>
    }

    ssd1306_print(4, 1, "ESC - cancel", 0);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	4a0d      	ldr	r2, [pc, #52]	; (8005c68 <draw_delete_device+0xd4>)
 8005c32:	2101      	movs	r1, #1
 8005c34:	2004      	movs	r0, #4
 8005c36:	f003 fd40 	bl	80096ba <ssd1306_print>

    ssd1306_update();
 8005c3a:	f003 fc0d 	bl	8009458 <ssd1306_update>
}
 8005c3e:	bf00      	nop
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	0800d044 	.word	0x0800d044
 8005c48:	0800cf7c 	.word	0x0800cf7c
 8005c4c:	2000002a 	.word	0x2000002a
 8005c50:	20000810 	.word	0x20000810
 8005c54:	20000804 	.word	0x20000804
 8005c58:	0800d054 	.word	0x0800d054
 8005c5c:	20000738 	.word	0x20000738
 8005c60:	0800d058 	.word	0x0800d058
 8005c64:	0800d06c 	.word	0x0800d06c
 8005c68:	0800d078 	.word	0x0800d078

08005c6c <delete_device_ok>:



void delete_device_ok(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
	if (current_each_device != device_number)
 8005c70:	4b12      	ldr	r3, [pc, #72]	; (8005cbc <delete_device_ok+0x50>)
 8005c72:	781a      	ldrb	r2, [r3, #0]
 8005c74:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <delete_device_ok+0x54>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d01d      	beq.n	8005cb8 <delete_device_ok+0x4c>
	{
		pp_dev_aux[current_each_device]->exist_flag = 0;	//delete device just by resetting exist flag
 8005c7c:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <delete_device_ok+0x58>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <delete_device_ok+0x50>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
		current_each_device = device_number;	//also reset the current device
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <delete_device_ok+0x54>)
 8005c90:	781a      	ldrb	r2, [r3, #0]
 8005c92:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <delete_device_ok+0x50>)
 8005c94:	701a      	strb	r2, [r3, #0]
		current_radar_device = 0;				//reset current dev in radar menu
 8005c96:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <delete_device_ok+0x5c>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
		radar_list_hide[current_each_device] = 0;//reset hide flag
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <delete_device_ok+0x50>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <delete_device_ok+0x60>)
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	5499      	strb	r1, [r3, r2]

		reset_current_item_in_menu(M_EACH_DEVICE_SUBMENU);
 8005ca8:	2004      	movs	r0, #4
 8005caa:	f7fe fc19 	bl	80044e0 <reset_current_item_in_menu>
		current_menu = M_DEVICES;
 8005cae:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <delete_device_ok+0x64>)
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	701a      	strb	r2, [r3, #0]
		draw_current_menu();
 8005cb4:	f7fe fc44 	bl	8004540 <draw_current_menu>
	}
}
 8005cb8:	bf00      	nop
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	2000002a 	.word	0x2000002a
 8005cc0:	20000738 	.word	0x20000738
 8005cc4:	2000083c 	.word	0x2000083c
 8005cc8:	20000121 	.word	0x20000121
 8005ccc:	20000830 	.word	0x20000830
 8005cd0:	200007fa 	.word	0x200007fa

08005cd4 <draw_save_device>:



void draw_save_device(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
	#define SAVE_DEVICE_ROW               (2)
	#define SAVE_DEVICE_COL               (1)

	memcpy(point_to_save_name, point_to_save_default_name, sizeof(point_to_save_default_name)); //init default name here
 8005cda:	4b48      	ldr	r3, [pc, #288]	; (8005dfc <draw_save_device+0x128>)
 8005cdc:	4a48      	ldr	r2, [pc, #288]	; (8005e00 <draw_save_device+0x12c>)
 8005cde:	6810      	ldr	r0, [r2, #0]
 8005ce0:	6018      	str	r0, [r3, #0]
 8005ce2:	8892      	ldrh	r2, [r2, #4]
 8005ce4:	809a      	strh	r2, [r3, #4]

	ssd1306_clear();
 8005ce6:	f003 fbe1 	bl	80094ac <ssd1306_clear>

	ssd1306_print(0, SAVE_DEVICE_COL, "Where to save", 0);
 8005cea:	2300      	movs	r3, #0
 8005cec:	4a45      	ldr	r2, [pc, #276]	; (8005e04 <draw_save_device+0x130>)
 8005cee:	2101      	movs	r1, #1
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	f003 fce2 	bl	80096ba <ssd1306_print>

	ssd1306_print(0, SAVE_DEVICE_COL + 14, "#", 0);
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	4a43      	ldr	r2, [pc, #268]	; (8005e08 <draw_save_device+0x134>)
 8005cfa:	210f      	movs	r1, #15
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	f003 fcdc 	bl	80096ba <ssd1306_print>
    itoa32(current_each_device, &buf[0]);
 8005d02:	4b42      	ldr	r3, [pc, #264]	; (8005e0c <draw_save_device+0x138>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	4942      	ldr	r1, [pc, #264]	; (8005e10 <draw_save_device+0x13c>)
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f002 fec9 	bl	8008aa0 <itoa32>
    ssd1306_print(0, SAVE_DEVICE_COL + 15, &buf[0], 0);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4a3f      	ldr	r2, [pc, #252]	; (8005e10 <draw_save_device+0x13c>)
 8005d12:	2110      	movs	r1, #16
 8005d14:	2000      	movs	r0, #0
 8005d16:	f003 fcd0 	bl	80096ba <ssd1306_print>

    ssd1306_char_pos(0, SAVE_DEVICE_COL + 17, pp_gps_air[current_each_device]->device_id[0], 0);
 8005d1a:	4b3e      	ldr	r3, [pc, #248]	; (8005e14 <draw_save_device+0x140>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b3b      	ldr	r3, [pc, #236]	; (8005e0c <draw_save_device+0x138>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	781a      	ldrb	r2, [r3, #0]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	2112      	movs	r1, #18
 8005d2e:	2000      	movs	r0, #0
 8005d30:	f003 fca4 	bl	800967c <ssd1306_char_pos>
    ssd1306_char_pos(0, SAVE_DEVICE_COL + 18, pp_gps_air[current_each_device]->device_id[1], 0);
 8005d34:	4b37      	ldr	r3, [pc, #220]	; (8005e14 <draw_save_device+0x140>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	4b34      	ldr	r3, [pc, #208]	; (8005e0c <draw_save_device+0x138>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	785a      	ldrb	r2, [r3, #1]
 8005d44:	2300      	movs	r3, #0
 8005d46:	2113      	movs	r1, #19
 8005d48:	2000      	movs	r0, #0
 8005d4a:	f003 fc97 	bl	800967c <ssd1306_char_pos>

    ssd1306_print_next("?", 0);
 8005d4e:	2100      	movs	r1, #0
 8005d50:	4831      	ldr	r0, [pc, #196]	; (8005e18 <draw_save_device+0x144>)
 8005d52:	f003 fd11 	bl	8009778 <ssd1306_print_next>

    read_memory_slots();
 8005d56:	f002 f915 	bl	8007f84 <read_memory_slots>

    uint8_t another_point_to_save_row = SAVE_DEVICE_ROW;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	71fb      	strb	r3, [r7, #7]
    uint8_t points_enlisted_cntr = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	71bb      	strb	r3, [r7, #6]

    for (uint8_t s = 1; s <= MEMORY_SLOTS_TOTAL; s++)
 8005d62:	2301      	movs	r3, #1
 8005d64:	717b      	strb	r3, [r7, #5]
 8005d66:	e027      	b.n	8005db8 <draw_save_device+0xe4>
    {
		if (pp_memory_slot[s]->exist_flag == 0)
 8005d68:	4b2c      	ldr	r3, [pc, #176]	; (8005e1c <draw_save_device+0x148>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	797b      	ldrb	r3, [r7, #5]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d11b      	bne.n	8005db2 <draw_save_device+0xde>
		{
			point_to_save_list[s] = points_enlisted_cntr++; 		//first nonexisting point will get index 0
 8005d7a:	79bb      	ldrb	r3, [r7, #6]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	71ba      	strb	r2, [r7, #6]
 8005d80:	797a      	ldrb	r2, [r7, #5]
 8005d82:	4927      	ldr	r1, [pc, #156]	; (8005e20 <draw_save_device+0x14c>)
 8005d84:	548b      	strb	r3, [r1, r2]

			if (current_slot_to_save == 0) //if for the first time
 8005d86:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <draw_save_device+0x150>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <draw_save_device+0xc0>
			{
				current_slot_to_save = s;
 8005d8e:	4a25      	ldr	r2, [pc, #148]	; (8005e24 <draw_save_device+0x150>)
 8005d90:	797b      	ldrb	r3, [r7, #5]
 8005d92:	7013      	strb	r3, [r2, #0]
			}

			//Slot name
			ssd1306_print(another_point_to_save_row, SAVE_DEVICE_COL, pp_memory_slot[s]->slot_name, 0);
 8005d94:	4b21      	ldr	r3, [pc, #132]	; (8005e1c <draw_save_device+0x148>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	797b      	ldrb	r3, [r7, #5]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	79f8      	ldrb	r0, [r7, #7]
 8005da4:	2300      	movs	r3, #0
 8005da6:	2101      	movs	r1, #1
 8005da8:	f003 fc87 	bl	80096ba <ssd1306_print>

			another_point_to_save_row++;
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	3301      	adds	r3, #1
 8005db0:	71fb      	strb	r3, [r7, #7]
    for (uint8_t s = 1; s <= MEMORY_SLOTS_TOTAL; s++)
 8005db2:	797b      	ldrb	r3, [r7, #5]
 8005db4:	3301      	adds	r3, #1
 8005db6:	717b      	strb	r3, [r7, #5]
 8005db8:	797b      	ldrb	r3, [r7, #5]
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d9d4      	bls.n	8005d68 <draw_save_device+0x94>
		}
    }

    if (points_enlisted_cntr > 0)
 8005dbe:	79bb      	ldrb	r3, [r7, #6]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <draw_save_device+0x10a>
    {
    	ssd1306_print(SAVE_DEVICE_ROW + point_to_save_list[current_slot_to_save], SAVE_DEVICE_COL - 1, ">", 0);
 8005dc4:	4b17      	ldr	r3, [pc, #92]	; (8005e24 <draw_save_device+0x150>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4b15      	ldr	r3, [pc, #84]	; (8005e20 <draw_save_device+0x14c>)
 8005dcc:	5c9b      	ldrb	r3, [r3, r2]
 8005dce:	3302      	adds	r3, #2
 8005dd0:	b2d8      	uxtb	r0, r3
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <draw_save_device+0x154>)
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	f003 fc6f 	bl	80096ba <ssd1306_print>
 8005ddc:	e008      	b.n	8005df0 <draw_save_device+0x11c>
    }
    else
    {
    	ssd1306_print(SAVE_DEVICE_ROW, SAVE_DEVICE_COL, "no empty slots", 0);
 8005dde:	2300      	movs	r3, #0
 8005de0:	4a12      	ldr	r2, [pc, #72]	; (8005e2c <draw_save_device+0x158>)
 8005de2:	2101      	movs	r1, #1
 8005de4:	2002      	movs	r0, #2
 8005de6:	f003 fc68 	bl	80096ba <ssd1306_print>
    	current_slot_to_save = 0;
 8005dea:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <draw_save_device+0x150>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
    }

    ssd1306_update();
 8005df0:	f003 fb32 	bl	8009458 <ssd1306_update>
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000828 	.word	0x20000828
 8005e00:	0800d7c8 	.word	0x0800d7c8
 8005e04:	0800d088 	.word	0x0800d088
 8005e08:	0800cf7c 	.word	0x0800cf7c
 8005e0c:	2000002a 	.word	0x2000002a
 8005e10:	20000810 	.word	0x20000810
 8005e14:	20000804 	.word	0x20000804
 8005e18:	0800d054 	.word	0x0800d054
 8005e1c:	200007d4 	.word	0x200007d4
 8005e20:	200007fc 	.word	0x200007fc
 8005e24:	20000123 	.word	0x20000123
 8005e28:	0800cf74 	.word	0x0800cf74
 8005e2c:	0800d098 	.word	0x0800d098

08005e30 <draw_save_device_as>:



void draw_save_device_as(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
	#define SAVE_DEV_AS_ROW                 (2)
	#define SAVE_DEV_AS_COL                 (1)
	#define SAVE_DEV_AS_PARAM_COL           (11)

	ssd1306_clear();
 8005e34:	f003 fb3a 	bl	80094ac <ssd1306_clear>
	ssd1306_print(0, SAVE_DEV_AS_COL, "Set point name", 0);
 8005e38:	2300      	movs	r3, #0
 8005e3a:	4a12      	ldr	r2, [pc, #72]	; (8005e84 <draw_save_device_as+0x54>)
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	2000      	movs	r0, #0
 8005e40:	f003 fc3b 	bl	80096ba <ssd1306_print>

	ssd1306_print(SAVE_DEV_AS_ROW, SAVE_DEV_AS_COL, "Name", 0);
 8005e44:	2300      	movs	r3, #0
 8005e46:	4a10      	ldr	r2, [pc, #64]	; (8005e88 <draw_save_device_as+0x58>)
 8005e48:	2101      	movs	r1, #1
 8005e4a:	2002      	movs	r0, #2
 8005e4c:	f003 fc35 	bl	80096ba <ssd1306_print>
	ssd1306_print(SAVE_DEV_AS_ROW, SAVE_DEV_AS_PARAM_COL, point_to_save_name, 0);
 8005e50:	2300      	movs	r3, #0
 8005e52:	4a0e      	ldr	r2, [pc, #56]	; (8005e8c <draw_save_device_as+0x5c>)
 8005e54:	210b      	movs	r1, #11
 8005e56:	2002      	movs	r0, #2
 8005e58:	f003 fc2f 	bl	80096ba <ssd1306_print>
	ssd1306_print(SAVE_DEV_AS_ROW + 1, SAVE_DEV_AS_PARAM_COL + point_name_current_symbol, "^", 0);
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <draw_save_device_as+0x60>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	330b      	adds	r3, #11
 8005e62:	b2d9      	uxtb	r1, r3
 8005e64:	2300      	movs	r3, #0
 8005e66:	4a0b      	ldr	r2, [pc, #44]	; (8005e94 <draw_save_device_as+0x64>)
 8005e68:	2003      	movs	r0, #3
 8005e6a:	f003 fc26 	bl	80096ba <ssd1306_print>
	ssd1306_print(SAVE_DEV_AS_ROW + 3, SAVE_DEV_AS_COL, "Long OK - save", 0);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4a09      	ldr	r2, [pc, #36]	; (8005e98 <draw_save_device_as+0x68>)
 8005e72:	2101      	movs	r1, #1
 8005e74:	2005      	movs	r0, #5
 8005e76:	f003 fc20 	bl	80096ba <ssd1306_print>
	ssd1306_update();
 8005e7a:	f003 faed 	bl	8009458 <ssd1306_update>
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	0800d0a8 	.word	0x0800d0a8
 8005e88:	0800d0b8 	.word	0x0800d0b8
 8005e8c:	20000828 	.word	0x20000828
 8005e90:	20000120 	.word	0x20000120
 8005e94:	0800d0c0 	.word	0x0800d0c0
 8005e98:	0800d0c4 	.word	0x0800d0c4

08005e9c <draw_saved_popup>:



void draw_saved_popup(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
	ssd1306_clear();
 8005ea0:	f003 fb04 	bl	80094ac <ssd1306_clear>
	ssd1306_print(0, 1, "Saved!", 0);
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4a04      	ldr	r2, [pc, #16]	; (8005eb8 <draw_saved_popup+0x1c>)
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	2000      	movs	r0, #0
 8005eac:	f003 fc05 	bl	80096ba <ssd1306_print>
	ssd1306_update();
 8005eb0:	f003 fad2 	bl	8009458 <ssd1306_update>
}
 8005eb4:	bf00      	nop
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	0800d0d4 	.word	0x0800d0d4
 8005ebc:	00000000 	.word	0x00000000

08005ec0 <draw_radar>:



//RADAR
void draw_radar(void)
{
 8005ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	b08d      	sub	sp, #52	; 0x34
 8005ec6:	af00      	add	r7, sp, #0
	ssd1306_clear();
 8005ec8:	f003 faf0 	bl	80094ac <ssd1306_clear>
    ssd1306_bitmap(&radar_blank[0]);
 8005ecc:	48bc      	ldr	r0, [pc, #752]	; (80061c0 <draw_radar+0x300>)
 8005ece:	f003 fc6b 	bl	80097a8 <ssd1306_bitmap>

    //My status row
    uint8_t icon_col = LCD_LAST_COL;
 8005ed2:	2314      	movs	r3, #20
 8005ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


    //Battery
    switch (get_device_flags(device_number, FLAGS_BATTERY))
 8005ed8:	4bba      	ldr	r3, [pc, #744]	; (80061c4 <draw_radar+0x304>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2101      	movs	r1, #1
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fc fd70 	bl	80029c4 <get_device_flags>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d843      	bhi.n	8005f72 <draw_radar+0xb2>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <draw_radar+0x30>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f5d 	.word	0x08005f5d
 8005ef4:	08005f47 	.word	0x08005f47
 8005ef8:	08005f31 	.word	0x08005f31
 8005efc:	08005f1b 	.word	0x08005f1b
 8005f00:	08005f05 	.word	0x08005f05
    {
        case FLAG_BATTERY_75_TO_100:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_4OF4, 0);
 8005f04:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005f08:	1e4b      	subs	r3, r1, #1
 8005f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f0e:	2300      	movs	r3, #0
 8005f10:	228c      	movs	r2, #140	; 0x8c
 8005f12:	2000      	movs	r0, #0
 8005f14:	f003 fbb2 	bl	800967c <ssd1306_char_pos>
            break;
 8005f18:	e02b      	b.n	8005f72 <draw_radar+0xb2>

        case FLAG_BATTERY_50_TO_75:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_3OF4, 0);
 8005f1a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005f1e:	1e4b      	subs	r3, r1, #1
 8005f20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f24:	2300      	movs	r3, #0
 8005f26:	228b      	movs	r2, #139	; 0x8b
 8005f28:	2000      	movs	r0, #0
 8005f2a:	f003 fba7 	bl	800967c <ssd1306_char_pos>
            break;
 8005f2e:	e020      	b.n	8005f72 <draw_radar+0xb2>

        case FLAG_BATTERY_25_TO_50:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_2OF4, 0);
 8005f30:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005f34:	1e4b      	subs	r3, r1, #1
 8005f36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	228a      	movs	r2, #138	; 0x8a
 8005f3e:	2000      	movs	r0, #0
 8005f40:	f003 fb9c 	bl	800967c <ssd1306_char_pos>
            break;
 8005f44:	e015      	b.n	8005f72 <draw_radar+0xb2>

        case FLAG_BATTERY_10_TO_25:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_1OF4, 0);
 8005f46:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005f4a:	1e4b      	subs	r3, r1, #1
 8005f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f50:	2300      	movs	r3, #0
 8005f52:	2289      	movs	r2, #137	; 0x89
 8005f54:	2000      	movs	r0, #0
 8005f56:	f003 fb91 	bl	800967c <ssd1306_char_pos>
            break;
 8005f5a:	e00a      	b.n	8005f72 <draw_radar+0xb2>

        case FLAG_BATTERY_0_TO_10:
            ssd1306_char_pos(0, icon_col--, SYMB_BAT_0OF4, 0);
 8005f5c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005f60:	1e4b      	subs	r3, r1, #1
 8005f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f66:	2300      	movs	r3, #0
 8005f68:	2288      	movs	r2, #136	; 0x88
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	f003 fb86 	bl	800967c <ssd1306_char_pos>
            break;
 8005f70:	bf00      	nop
    }


    //Sattelites
    if (p_gps_raw->time[0] == 0)                           //if no time received then no sattelites at all
 8005f72:	4b95      	ldr	r3, [pc, #596]	; (80061c8 <draw_radar+0x308>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <draw_radar+0xd2>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_NO_SATT, 0);
 8005f7c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005f80:	1e4b      	subs	r3, r1, #1
 8005f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f86:	2300      	movs	r3, #0
 8005f88:	2282      	movs	r2, #130	; 0x82
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	f003 fb76 	bl	800967c <ssd1306_char_pos>
 8005f90:	e037      	b.n	8006002 <draw_radar+0x142>
    }
    else
    {
        if (p_gps_num->mode == GPS_POSITION_3DFIX && p_gps_num->status == GPS_DATA_VALID)
 8005f92:	4b8e      	ldr	r3, [pc, #568]	; (80061cc <draw_radar+0x30c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d110      	bne.n	8005fc0 <draw_radar+0x100>
 8005f9e:	4b8b      	ldr	r3, [pc, #556]	; (80061cc <draw_radar+0x30c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d10a      	bne.n	8005fc0 <draw_radar+0x100>
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_3D, 0);   //3D when data is valid
 8005faa:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005fae:	1e4b      	subs	r3, r1, #1
 8005fb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2285      	movs	r2, #133	; 0x85
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f003 fb5f 	bl	800967c <ssd1306_char_pos>
 8005fbe:	e020      	b.n	8006002 <draw_radar+0x142>
        }
        else if (p_gps_num->mode == GPS_POSITION_2DFIX && p_gps_num->status == GPS_DATA_VALID)
 8005fc0:	4b82      	ldr	r3, [pc, #520]	; (80061cc <draw_radar+0x30c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d110      	bne.n	8005fee <draw_radar+0x12e>
 8005fcc:	4b7f      	ldr	r3, [pc, #508]	; (80061cc <draw_radar+0x30c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d10a      	bne.n	8005fee <draw_radar+0x12e>
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_2D, 0);   //2D when data is valid
 8005fd8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005fdc:	1e4b      	subs	r3, r1, #1
 8005fde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2284      	movs	r2, #132	; 0x84
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	f003 fb48 	bl	800967c <ssd1306_char_pos>
 8005fec:	e009      	b.n	8006002 <draw_radar+0x142>
        }
        else
        {
            ssd1306_char_pos(0, icon_col--, SYMB_SATT_1D, 0);   //if not 2D or 3D then only time is avaliable
 8005fee:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005ff2:	1e4b      	subs	r3, r1, #1
 8005ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	2283      	movs	r2, #131	; 0x83
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	f003 fb3d 	bl	800967c <ssd1306_char_pos>
        }
    }

    //TRX
    if (get_main_flags()->gps_sync && p_gps_num->status == GPS_DATA_VALID)
 8006002:	f7fe f81d 	bl	8004040 <get_main_flags>
 8006006:	4603      	mov	r3, r0
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d019      	beq.n	8006042 <draw_radar+0x182>
 800600e:	4b6f      	ldr	r3, [pc, #444]	; (80061cc <draw_radar+0x30c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006016:	2b01      	cmp	r3, #1
 8006018:	d113      	bne.n	8006042 <draw_radar+0x182>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_ARROW_DOWN, 0);
 800601a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800601e:	1e4b      	subs	r3, r1, #1
 8006020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006024:	2300      	movs	r3, #0
 8006026:	2281      	movs	r2, #129	; 0x81
 8006028:	2000      	movs	r0, #0
 800602a:	f003 fb27 	bl	800967c <ssd1306_char_pos>
        ssd1306_char_pos(0, icon_col--, SYMB_ARROW_UP, 0);
 800602e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8006032:	1e4b      	subs	r3, r1, #1
 8006034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006038:	2300      	movs	r3, #0
 800603a:	2280      	movs	r2, #128	; 0x80
 800603c:	2000      	movs	r0, #0
 800603e:	f003 fb1d 	bl	800967c <ssd1306_char_pos>
    }



    //Timeout
    if (pp_dev_aux[device_number]->timeout_flag)
 8006042:	4b63      	ldr	r3, [pc, #396]	; (80061d0 <draw_radar+0x310>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b5f      	ldr	r3, [pc, #380]	; (80061c4 <draw_radar+0x304>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	7b1b      	ldrb	r3, [r3, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <draw_radar+0x1aa>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_TIMEOUT, 0);
 8006056:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800605a:	1e4b      	subs	r3, r1, #1
 800605c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006060:	2300      	movs	r3, #0
 8006062:	2286      	movs	r2, #134	; 0x86
 8006064:	2000      	movs	r0, #0
 8006066:	f003 fb09 	bl	800967c <ssd1306_char_pos>
    }

    //Alarm
    if (get_device_flags(device_number, FLAGS_ALARM) == FLAG_ALARM_ON)
 800606a:	4b56      	ldr	r3, [pc, #344]	; (80061c4 <draw_radar+0x304>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2104      	movs	r1, #4
 8006070:	4618      	mov	r0, r3
 8006072:	f7fc fca7 	bl	80029c4 <get_device_flags>
 8006076:	4603      	mov	r3, r0
 8006078:	2b01      	cmp	r3, #1
 800607a:	d109      	bne.n	8006090 <draw_radar+0x1d0>
    {
        ssd1306_char_pos(0, icon_col--, SYMB_ALARM, 0);
 800607c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8006080:	1e4b      	subs	r3, r1, #1
 8006082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006086:	2300      	movs	r3, #0
 8006088:	2287      	movs	r2, #135	; 0x87
 800608a:	2000      	movs	r0, #0
 800608c:	f003 faf6 	bl	800967c <ssd1306_char_pos>
    }



    //COG
    itoa32(pp_gps_air[device_number]->course.as_integer, &buf[0]);
 8006090:	4b50      	ldr	r3, [pc, #320]	; (80061d4 <draw_radar+0x314>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4b4b      	ldr	r3, [pc, #300]	; (80061c4 <draw_radar+0x304>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	8a1b      	ldrh	r3, [r3, #16]
 80060a0:	494d      	ldr	r1, [pc, #308]	; (80061d8 <draw_radar+0x318>)
 80060a2:	4618      	mov	r0, r3
 80060a4:	f002 fcfc 	bl	8008aa0 <itoa32>
    ssd1306_print_viceversa(0, 7, &buf[0], 0);
 80060a8:	2300      	movs	r3, #0
 80060aa:	4a4b      	ldr	r2, [pc, #300]	; (80061d8 <draw_radar+0x318>)
 80060ac:	2107      	movs	r1, #7
 80060ae:	2000      	movs	r0, #0
 80060b0:	f003 fb26 	bl	8009700 <ssd1306_print_viceversa>



    uint8_t another_radar_dev_row = ANOTHER_RADAR_DEVICE_START_ROW;
 80060b4:	2302      	movs	r3, #2
 80060b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint32_t max_distance = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t devices_enlisted_cntr = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80060ca:	e168      	b.n	800639e <draw_radar+0x4de>
    {
    	if (dev != device_number)
 80060cc:	4b3d      	ldr	r3, [pc, #244]	; (80061c4 <draw_radar+0x304>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80060d4:	429a      	cmp	r2, r3
 80060d6:	f000 815d 	beq.w	8006394 <draw_radar+0x4d4>
    	{
    		if (pp_dev_aux[dev]->exist_flag == 1)
 80060da:	4b3d      	ldr	r3, [pc, #244]	; (80061d0 <draw_radar+0x310>)
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	f040 814d 	bne.w	800638a <draw_radar+0x4ca>
    		{
    			radar_list[dev] = devices_enlisted_cntr++; //first existing device will get index 0
 80060f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80060fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80060fe:	4937      	ldr	r1, [pc, #220]	; (80061dc <draw_radar+0x31c>)
 8006100:	548b      	strb	r3, [r1, r2]

    			if (current_radar_device == 0) //if for the first time
 8006102:	4b37      	ldr	r3, [pc, #220]	; (80061e0 <draw_radar+0x320>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <draw_radar+0x252>
    			{
    				current_radar_device = dev;
 800610a:	4a35      	ldr	r2, [pc, #212]	; (80061e0 <draw_radar+0x320>)
 800610c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006110:	7013      	strb	r3, [r2, #0]
    			}

                //Number
    			itoa32(dev, &buf[0]);
 8006112:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006116:	4930      	ldr	r1, [pc, #192]	; (80061d8 <draw_radar+0x318>)
 8006118:	4618      	mov	r0, r3
 800611a:	f002 fcc1 	bl	8008aa0 <itoa32>
    			if (radar_list_hide[dev] == 1)
 800611e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006122:	4a30      	ldr	r2, [pc, #192]	; (80061e4 <draw_radar+0x324>)
 8006124:	5cd3      	ldrb	r3, [r2, r3]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d107      	bne.n	800613a <draw_radar+0x27a>
    			{
					ssd1306_print(another_radar_dev_row, 9, &buf[0], 1);
 800612a:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 800612e:	2301      	movs	r3, #1
 8006130:	4a29      	ldr	r2, [pc, #164]	; (80061d8 <draw_radar+0x318>)
 8006132:	2109      	movs	r1, #9
 8006134:	f003 fac1 	bl	80096ba <ssd1306_print>
 8006138:	e006      	b.n	8006148 <draw_radar+0x288>
    			}
    			else
    			{
					ssd1306_print(another_radar_dev_row, 9, &buf[0], 0);
 800613a:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 800613e:	2300      	movs	r3, #0
 8006140:	4a25      	ldr	r2, [pc, #148]	; (80061d8 <draw_radar+0x318>)
 8006142:	2109      	movs	r1, #9
 8006144:	f003 fab9 	bl	80096ba <ssd1306_print>
    			}

                //ID
                ssd1306_char_pos(another_radar_dev_row, 11, pp_gps_air[dev]->device_id[0], 0);
 8006148:	4b22      	ldr	r3, [pc, #136]	; (80061d4 <draw_radar+0x314>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	781a      	ldrb	r2, [r3, #0]
 8006158:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 800615c:	2300      	movs	r3, #0
 800615e:	210b      	movs	r1, #11
 8006160:	f003 fa8c 	bl	800967c <ssd1306_char_pos>
                ssd1306_char_pos(another_radar_dev_row, 12, pp_gps_air[dev]->device_id[1], 0);
 8006164:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <draw_radar+0x314>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	785a      	ldrb	r2, [r3, #1]
 8006174:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8006178:	2300      	movs	r3, #0
 800617a:	210c      	movs	r1, #12
 800617c:	f003 fa7e 	bl	800967c <ssd1306_char_pos>

                //Distance
                if (pp_gps_rel[dev]->distance < 1000)           //1-999 m
 8006180:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <draw_radar+0x328>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006194:	d22a      	bcs.n	80061ec <draw_radar+0x32c>
                {
                    itoa32(pp_gps_rel[dev]->distance, &buf[0]);
 8006196:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <draw_radar+0x328>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	490c      	ldr	r1, [pc, #48]	; (80061d8 <draw_radar+0x318>)
 80061a8:	4618      	mov	r0, r3
 80061aa:	f002 fc79 	bl	8008aa0 <itoa32>
                    ssd1306_print_viceversa(another_radar_dev_row, 16, &buf[0], 0);
 80061ae:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 80061b2:	2300      	movs	r3, #0
 80061b4:	4a08      	ldr	r2, [pc, #32]	; (80061d8 <draw_radar+0x318>)
 80061b6:	2110      	movs	r1, #16
 80061b8:	f003 faa2 	bl	8009700 <ssd1306_print_viceversa>
 80061bc:	e08e      	b.n	80062dc <draw_radar+0x41c>
 80061be:	bf00      	nop
 80061c0:	0800e2ac 	.word	0x0800e2ac
 80061c4:	20000738 	.word	0x20000738
 80061c8:	20000808 	.word	0x20000808
 80061cc:	20000614 	.word	0x20000614
 80061d0:	2000083c 	.word	0x2000083c
 80061d4:	20000804 	.word	0x20000804
 80061d8:	20000810 	.word	0x20000810
 80061dc:	200007d8 	.word	0x200007d8
 80061e0:	20000121 	.word	0x20000121
 80061e4:	20000830 	.word	0x20000830
 80061e8:	200007d0 	.word	0x200007d0
                }
                else if (pp_gps_rel[dev]->distance < 10000)     //1.0-9.9 km
 80061ec:	4b9e      	ldr	r3, [pc, #632]	; (8006468 <draw_radar+0x5a8>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8006200:	4293      	cmp	r3, r2
 8006202:	d827      	bhi.n	8006254 <draw_radar+0x394>
                {
                    tmpf = pp_gps_rel[dev]->distance / 1000.0;
 8006204:	4b98      	ldr	r3, [pc, #608]	; (8006468 <draw_radar+0x5a8>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f7fa f8ed 	bl	80003f4 <__aeabi_ui2d>
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	4b93      	ldr	r3, [pc, #588]	; (800646c <draw_radar+0x5ac>)
 8006220:	f7fa fa8c 	bl	800073c <__aeabi_ddiv>
 8006224:	4603      	mov	r3, r0
 8006226:	460c      	mov	r4, r1
 8006228:	4618      	mov	r0, r3
 800622a:	4621      	mov	r1, r4
 800622c:	f7fa fc54 	bl	8000ad8 <__aeabi_d2f>
 8006230:	4602      	mov	r2, r0
 8006232:	4b8f      	ldr	r3, [pc, #572]	; (8006470 <draw_radar+0x5b0>)
 8006234:	601a      	str	r2, [r3, #0]
                    ftoa32(tmpf, 1, &buf[0]);
 8006236:	4b8e      	ldr	r3, [pc, #568]	; (8006470 <draw_radar+0x5b0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a8e      	ldr	r2, [pc, #568]	; (8006474 <draw_radar+0x5b4>)
 800623c:	2101      	movs	r1, #1
 800623e:	4618      	mov	r0, r3
 8006240:	f002 fade 	bl	8008800 <ftoa32>
                    ssd1306_print_viceversa(another_radar_dev_row, 16, &buf[0], 0);
 8006244:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8006248:	2300      	movs	r3, #0
 800624a:	4a8a      	ldr	r2, [pc, #552]	; (8006474 <draw_radar+0x5b4>)
 800624c:	2110      	movs	r1, #16
 800624e:	f003 fa57 	bl	8009700 <ssd1306_print_viceversa>
 8006252:	e043      	b.n	80062dc <draw_radar+0x41c>
                }
                else if (pp_gps_rel[dev]->distance < 100000)    //10.-99. km
 8006254:	4b84      	ldr	r3, [pc, #528]	; (8006468 <draw_radar+0x5a8>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a84      	ldr	r2, [pc, #528]	; (8006478 <draw_radar+0x5b8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d831      	bhi.n	80062ce <draw_radar+0x40e>
                {
                    tmpf = pp_gps_rel[dev]->distance / 1000.0;
 800626a:	4b7f      	ldr	r3, [pc, #508]	; (8006468 <draw_radar+0x5a8>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f7fa f8ba 	bl	80003f4 <__aeabi_ui2d>
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	4b79      	ldr	r3, [pc, #484]	; (800646c <draw_radar+0x5ac>)
 8006286:	f7fa fa59 	bl	800073c <__aeabi_ddiv>
 800628a:	4603      	mov	r3, r0
 800628c:	460c      	mov	r4, r1
 800628e:	4618      	mov	r0, r3
 8006290:	4621      	mov	r1, r4
 8006292:	f7fa fc21 	bl	8000ad8 <__aeabi_d2f>
 8006296:	4602      	mov	r2, r0
 8006298:	4b75      	ldr	r3, [pc, #468]	; (8006470 <draw_radar+0x5b0>)
 800629a:	601a      	str	r2, [r3, #0]
                    itoa32((uint32_t)tmpf, &buf[0]);
 800629c:	4b74      	ldr	r3, [pc, #464]	; (8006470 <draw_radar+0x5b0>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fa ff63 	bl	800116c <__aeabi_f2uiz>
 80062a6:	4603      	mov	r3, r0
 80062a8:	4972      	ldr	r1, [pc, #456]	; (8006474 <draw_radar+0x5b4>)
 80062aa:	4618      	mov	r0, r3
 80062ac:	f002 fbf8 	bl	8008aa0 <itoa32>
                    ssd1306_print_viceversa(another_radar_dev_row, 16, &buf[0], 0);
 80062b0:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 80062b4:	2300      	movs	r3, #0
 80062b6:	4a6f      	ldr	r2, [pc, #444]	; (8006474 <draw_radar+0x5b4>)
 80062b8:	2110      	movs	r1, #16
 80062ba:	f003 fa21 	bl	8009700 <ssd1306_print_viceversa>
                    ssd1306_char_pos(another_radar_dev_row, 17, '.', 0);
 80062be:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 80062c2:	2300      	movs	r3, #0
 80062c4:	222e      	movs	r2, #46	; 0x2e
 80062c6:	2111      	movs	r1, #17
 80062c8:	f003 f9d8 	bl	800967c <ssd1306_char_pos>
 80062cc:	e006      	b.n	80062dc <draw_radar+0x41c>
                }
                else                                        // >100 km
                {
                    ssd1306_print(another_radar_dev_row, 14, "...", 0);
 80062ce:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 80062d2:	2300      	movs	r3, #0
 80062d4:	4a69      	ldr	r2, [pc, #420]	; (800647c <draw_radar+0x5bc>)
 80062d6:	210e      	movs	r1, #14
 80062d8:	f003 f9ef 	bl	80096ba <ssd1306_print>
                }

                //Search max distance
                if (pp_gps_rel[dev]->distance > max_distance)
 80062dc:	4b62      	ldr	r3, [pc, #392]	; (8006468 <draw_radar+0x5a8>)
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d20e      	bcs.n	8006310 <draw_radar+0x450>
                {
                	if (radar_list_hide[dev] == 0)
 80062f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062f6:	4a62      	ldr	r2, [pc, #392]	; (8006480 <draw_radar+0x5c0>)
 80062f8:	5cd3      	ldrb	r3, [r2, r3]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d108      	bne.n	8006310 <draw_radar+0x450>
                	{
                		max_distance = pp_gps_rel[dev]->distance;		//fix max distance only if device is not hided
 80062fe:	4b5a      	ldr	r3, [pc, #360]	; (8006468 <draw_radar+0x5a8>)
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
                	}
                }

                //Heading
                itoa32(pp_gps_rel[dev]->heading, &buf[0]);
 8006310:	4b55      	ldr	r3, [pc, #340]	; (8006468 <draw_radar+0x5a8>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	889b      	ldrh	r3, [r3, #4]
 8006320:	4954      	ldr	r1, [pc, #336]	; (8006474 <draw_radar+0x5b4>)
 8006322:	4618      	mov	r0, r3
 8006324:	f002 fbbc 	bl	8008aa0 <itoa32>
                ssd1306_print_viceversa(another_radar_dev_row, 20, &buf[0], 0);
 8006328:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 800632c:	2300      	movs	r3, #0
 800632e:	4a51      	ldr	r2, [pc, #324]	; (8006474 <draw_radar+0x5b4>)
 8006330:	2114      	movs	r1, #20
 8006332:	f003 f9e5 	bl	8009700 <ssd1306_print_viceversa>


                //Warning sign in case of timeout, alarm or fence
                if (get_device_flags(dev, FLAGS_ALARM) || pp_dev_aux[dev]->timeout_flag || pp_dev_aux[dev]->fence_flag)
 8006336:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800633a:	2104      	movs	r1, #4
 800633c:	4618      	mov	r0, r3
 800633e:	f7fc fb41 	bl	80029c4 <get_device_flags>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d113      	bne.n	8006370 <draw_radar+0x4b0>
 8006348:	4b4e      	ldr	r3, [pc, #312]	; (8006484 <draw_radar+0x5c4>)
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	7b1b      	ldrb	r3, [r3, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d109      	bne.n	8006370 <draw_radar+0x4b0>
 800635c:	4b49      	ldr	r3, [pc, #292]	; (8006484 <draw_radar+0x5c4>)
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	7b5b      	ldrb	r3, [r3, #13]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d006      	beq.n	800637e <draw_radar+0x4be>
                {
                	ssd1306_print_byte(another_radar_dev_row, 21, custom_exclam_mark, 2);
 8006370:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8006374:	2302      	movs	r3, #2
 8006376:	4a44      	ldr	r2, [pc, #272]	; (8006488 <draw_radar+0x5c8>)
 8006378:	2115      	movs	r1, #21
 800637a:	f003 fa31 	bl	80097e0 <ssd1306_print_byte>
                }

                another_radar_dev_row++;
 800637e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006382:	3301      	adds	r3, #1
 8006384:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006388:	e004      	b.n	8006394 <draw_radar+0x4d4>
    		}
    		else	//if device is not exist
    		{
    			radar_list_hide[dev] = 0;	//clear hide flag, so when device disappear, and appear again it will be not hided
 800638a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800638e:	4a3c      	ldr	r2, [pc, #240]	; (8006480 <draw_radar+0x5c0>)
 8006390:	2100      	movs	r1, #0
 8006392:	54d1      	strb	r1, [r2, r3]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8006394:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006398:	3301      	adds	r3, #1
 800639a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800639e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063a2:	2b06      	cmp	r3, #6
 80063a4:	f67f ae92 	bls.w	80060cc <draw_radar+0x20c>
    	}
    }


    //Pointer and bottom row information bar
    if (devices_enlisted_cntr > 0)
 80063a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80e6 	beq.w	800657e <draw_radar+0x6be>
    {
    	ssd1306_print(2 + radar_list[current_radar_device], 8, ">", 0);
 80063b2:	4b36      	ldr	r3, [pc, #216]	; (800648c <draw_radar+0x5cc>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	4b35      	ldr	r3, [pc, #212]	; (8006490 <draw_radar+0x5d0>)
 80063ba:	5c9b      	ldrb	r3, [r3, r2]
 80063bc:	3302      	adds	r3, #2
 80063be:	b2d8      	uxtb	r0, r3
 80063c0:	2300      	movs	r3, #0
 80063c2:	4a34      	ldr	r2, [pc, #208]	; (8006494 <draw_radar+0x5d4>)
 80063c4:	2108      	movs	r1, #8
 80063c6:	f003 f978 	bl	80096ba <ssd1306_print>

    	uint8_t icon_col = LCD_LAST_COL;
 80063ca:	2314      	movs	r3, #20
 80063cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

        if (pp_dev_aux[current_radar_device]->memory_point_flag == 0) //dont show battery icon for memory points
 80063d0:	4b2c      	ldr	r3, [pc, #176]	; (8006484 <draw_radar+0x5c4>)
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	4b2d      	ldr	r3, [pc, #180]	; (800648c <draw_radar+0x5cc>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	7b9b      	ldrb	r3, [r3, #14]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d164      	bne.n	80064ae <draw_radar+0x5ee>
        {
			//Battery
			switch (get_device_flags(current_radar_device, FLAGS_BATTERY))
 80063e4:	4b29      	ldr	r3, [pc, #164]	; (800648c <draw_radar+0x5cc>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2101      	movs	r1, #1
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fc faea 	bl	80029c4 <get_device_flags>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d85b      	bhi.n	80064ae <draw_radar+0x5ee>
 80063f6:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <draw_radar+0x53c>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	08006499 	.word	0x08006499
 8006400:	08006453 	.word	0x08006453
 8006404:	0800643d 	.word	0x0800643d
 8006408:	08006427 	.word	0x08006427
 800640c:	08006411 	.word	0x08006411
			{
				case FLAG_BATTERY_75_TO_100:
					ssd1306_char_pos(7, icon_col--, SYMB_BAT_4OF4, 0);
 8006410:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8006414:	1e4b      	subs	r3, r1, #1
 8006416:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800641a:	2300      	movs	r3, #0
 800641c:	228c      	movs	r2, #140	; 0x8c
 800641e:	2007      	movs	r0, #7
 8006420:	f003 f92c 	bl	800967c <ssd1306_char_pos>
					break;
 8006424:	e043      	b.n	80064ae <draw_radar+0x5ee>

				case FLAG_BATTERY_50_TO_75:
					ssd1306_char_pos(7, icon_col--, SYMB_BAT_3OF4, 0);
 8006426:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800642a:	1e4b      	subs	r3, r1, #1
 800642c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006430:	2300      	movs	r3, #0
 8006432:	228b      	movs	r2, #139	; 0x8b
 8006434:	2007      	movs	r0, #7
 8006436:	f003 f921 	bl	800967c <ssd1306_char_pos>
					break;
 800643a:	e038      	b.n	80064ae <draw_radar+0x5ee>

				case FLAG_BATTERY_25_TO_50:
					ssd1306_char_pos(7, icon_col--, SYMB_BAT_2OF4, 0);
 800643c:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8006440:	1e4b      	subs	r3, r1, #1
 8006442:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006446:	2300      	movs	r3, #0
 8006448:	228a      	movs	r2, #138	; 0x8a
 800644a:	2007      	movs	r0, #7
 800644c:	f003 f916 	bl	800967c <ssd1306_char_pos>
					break;
 8006450:	e02d      	b.n	80064ae <draw_radar+0x5ee>

				case FLAG_BATTERY_10_TO_25:
					ssd1306_char_pos(7, icon_col--, SYMB_BAT_1OF4, 0);
 8006452:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8006456:	1e4b      	subs	r3, r1, #1
 8006458:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800645c:	2300      	movs	r3, #0
 800645e:	2289      	movs	r2, #137	; 0x89
 8006460:	2007      	movs	r0, #7
 8006462:	f003 f90b 	bl	800967c <ssd1306_char_pos>
					break;
 8006466:	e022      	b.n	80064ae <draw_radar+0x5ee>
 8006468:	200007d0 	.word	0x200007d0
 800646c:	408f4000 	.word	0x408f4000
 8006470:	200007f4 	.word	0x200007f4
 8006474:	20000810 	.word	0x20000810
 8006478:	0001869f 	.word	0x0001869f
 800647c:	0800cf78 	.word	0x0800cf78
 8006480:	20000830 	.word	0x20000830
 8006484:	2000083c 	.word	0x2000083c
 8006488:	2000002c 	.word	0x2000002c
 800648c:	20000121 	.word	0x20000121
 8006490:	200007d8 	.word	0x200007d8
 8006494:	0800cf74 	.word	0x0800cf74

				case FLAG_BATTERY_0_TO_10:
					ssd1306_char_pos(7, icon_col--, SYMB_BAT_0OF4, 0);
 8006498:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800649c:	1e4b      	subs	r3, r1, #1
 800649e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80064a2:	2300      	movs	r3, #0
 80064a4:	2288      	movs	r2, #136	; 0x88
 80064a6:	2007      	movs	r0, #7
 80064a8:	f003 f8e8 	bl	800967c <ssd1306_char_pos>
					break;
 80064ac:	bf00      	nop
			}
        }


        if (pp_dev_aux[current_radar_device]->memory_point_flag == 0)
 80064ae:	4b70      	ldr	r3, [pc, #448]	; (8006670 <draw_radar+0x7b0>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b70      	ldr	r3, [pc, #448]	; (8006674 <draw_radar+0x7b4>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	7b9b      	ldrb	r3, [r3, #14]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d113      	bne.n	80064ea <draw_radar+0x62a>
        {
			//Timeout
			if (pp_dev_aux[current_radar_device]->timeout_flag)
 80064c2:	4b6b      	ldr	r3, [pc, #428]	; (8006670 <draw_radar+0x7b0>)
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4b6b      	ldr	r3, [pc, #428]	; (8006674 <draw_radar+0x7b4>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	7b1b      	ldrb	r3, [r3, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <draw_radar+0x62a>
			{
				ssd1306_char_pos(7, icon_col--, SYMB_TIMEOUT, 0);
 80064d6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80064da:	1e4b      	subs	r3, r1, #1
 80064dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80064e0:	2300      	movs	r3, #0
 80064e2:	2286      	movs	r2, #134	; 0x86
 80064e4:	2007      	movs	r0, #7
 80064e6:	f003 f8c9 	bl	800967c <ssd1306_char_pos>
			}
        }


        //Fence
        if (pp_dev_aux[current_radar_device]->fence_flag)
 80064ea:	4b61      	ldr	r3, [pc, #388]	; (8006670 <draw_radar+0x7b0>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4b61      	ldr	r3, [pc, #388]	; (8006674 <draw_radar+0x7b4>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	7b5b      	ldrb	r3, [r3, #13]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <draw_radar+0x652>
        {
        	ssd1306_char_pos(7, icon_col--, SYMB_FENCE, 0);
 80064fe:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8006502:	1e4b      	subs	r3, r1, #1
 8006504:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006508:	2300      	movs	r3, #0
 800650a:	228e      	movs	r2, #142	; 0x8e
 800650c:	2007      	movs	r0, #7
 800650e:	f003 f8b5 	bl	800967c <ssd1306_char_pos>
        }


        if (pp_dev_aux[current_radar_device]->memory_point_flag == 0)
 8006512:	4b57      	ldr	r3, [pc, #348]	; (8006670 <draw_radar+0x7b0>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b57      	ldr	r3, [pc, #348]	; (8006674 <draw_radar+0x7b4>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	7b9b      	ldrb	r3, [r3, #14]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d112      	bne.n	800654c <draw_radar+0x68c>
        {
			//Alarm
			if (get_device_flags(current_radar_device, FLAGS_ALARM) == FLAG_ALARM_ON)
 8006526:	4b53      	ldr	r3, [pc, #332]	; (8006674 <draw_radar+0x7b4>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2104      	movs	r1, #4
 800652c:	4618      	mov	r0, r3
 800652e:	f7fc fa49 	bl	80029c4 <get_device_flags>
 8006532:	4603      	mov	r3, r0
 8006534:	2b01      	cmp	r3, #1
 8006536:	d109      	bne.n	800654c <draw_radar+0x68c>
			{
				ssd1306_char_pos(7, icon_col--, SYMB_ALARM, 0);
 8006538:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800653c:	1e4b      	subs	r3, r1, #1
 800653e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006542:	2300      	movs	r3, #0
 8006544:	2287      	movs	r2, #135	; 0x87
 8006546:	2007      	movs	r0, #7
 8006548:	f003 f898 	bl	800967c <ssd1306_char_pos>
			}
        }


        //if mem point then print it name
        if (pp_dev_aux[current_radar_device]->memory_point_flag == 1)
 800654c:	4b48      	ldr	r3, [pc, #288]	; (8006670 <draw_radar+0x7b0>)
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	4b48      	ldr	r3, [pc, #288]	; (8006674 <draw_radar+0x7b4>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	7b9b      	ldrb	r3, [r3, #14]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d111      	bne.n	8006584 <draw_radar+0x6c4>
        {
        	ssd1306_print(7, 9, pp_dev_aux[current_radar_device]->point_name, 0);
 8006560:	4b43      	ldr	r3, [pc, #268]	; (8006670 <draw_radar+0x7b0>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4b43      	ldr	r3, [pc, #268]	; (8006674 <draw_radar+0x7b4>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f103 020f 	add.w	r2, r3, #15
 8006572:	2300      	movs	r3, #0
 8006574:	2109      	movs	r1, #9
 8006576:	2007      	movs	r0, #7
 8006578:	f003 f89f 	bl	80096ba <ssd1306_print>
 800657c:	e002      	b.n	8006584 <draw_radar+0x6c4>


    }
    else
    {
    	current_radar_device = 0;
 800657e:	4b3d      	ldr	r3, [pc, #244]	; (8006674 <draw_radar+0x7b4>)
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
    }


    //Radar implementation is here
    float mpd_ratio_f = 0.0;		//meters per dot ratio
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
    uint32_t mpd_ratio_i = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	623b      	str	r3, [r7, #32]

    if (max_distance < r_circ_dots)
 800658e:	2314      	movs	r3, #20
 8006590:	461a      	mov	r2, r3
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	4293      	cmp	r3, r2
 8006596:	d201      	bcs.n	800659c <draw_radar+0x6dc>
    {
    	max_distance = r_circ_dots;
 8006598:	2314      	movs	r3, #20
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    mpd_ratio_f = (float)max_distance / (float)r_circ_dots;	//calc ratio
 800659c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800659e:	f7fa fba1 	bl	8000ce4 <__aeabi_ui2f>
 80065a2:	4604      	mov	r4, r0
 80065a4:	2314      	movs	r3, #20
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fa fb9c 	bl	8000ce4 <__aeabi_ui2f>
 80065ac:	4603      	mov	r3, r0
 80065ae:	4619      	mov	r1, r3
 80065b0:	4620      	mov	r0, r4
 80065b2:	f7fa fca3 	bl	8000efc <__aeabi_fdiv>
 80065b6:	4603      	mov	r3, r0
 80065b8:	61bb      	str	r3, [r7, #24]
    mpd_ratio_i = (uint32_t)mpd_ratio_f;			//extract int part
 80065ba:	69b8      	ldr	r0, [r7, #24]
 80065bc:	f7fa fdd6 	bl	800116c <__aeabi_f2uiz>
 80065c0:	4603      	mov	r3, r0
 80065c2:	623b      	str	r3, [r7, #32]

    mpd_ratio_f -= mpd_ratio_i;					//extract frac part
 80065c4:	6a38      	ldr	r0, [r7, #32]
 80065c6:	f7fa fb8d 	bl	8000ce4 <__aeabi_ui2f>
 80065ca:	4603      	mov	r3, r0
 80065cc:	4619      	mov	r1, r3
 80065ce:	69b8      	ldr	r0, [r7, #24]
 80065d0:	f7fa fad6 	bl	8000b80 <__aeabi_fsub>
 80065d4:	4603      	mov	r3, r0
 80065d6:	61bb      	str	r3, [r7, #24]

    if (mpd_ratio_f > 0.001)					//if frac part is non-zero, then inc ratio
 80065d8:	69b8      	ldr	r0, [r7, #24]
 80065da:	f7f9 ff2d 	bl	8000438 <__aeabi_f2d>
 80065de:	a322      	add	r3, pc, #136	; (adr r3, 8006668 <draw_radar+0x7a8>)
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f7fa fa10 	bl	8000a08 <__aeabi_dcmpgt>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <draw_radar+0x734>
    {
    	mpd_ratio_i++;
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	3301      	adds	r3, #1
 80065f2:	623b      	str	r3, [r7, #32]
    }

    //print radar range
    uint32_t radar_range = mpd_ratio_i * r_circ_dots;	//i.e. radar screen radius
 80065f4:	2314      	movs	r3, #20
 80065f6:	461a      	mov	r2, r3
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	fb02 f303 	mul.w	r3, r2, r3
 80065fe:	617b      	str	r3, [r7, #20]

    if (radar_range < 10000) // 0...9999 meters, screen fits 4 characters max
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f242 720f 	movw	r2, #9999	; 0x270f
 8006606:	4293      	cmp	r3, r2
 8006608:	d80b      	bhi.n	8006622 <draw_radar+0x762>
    {
    	itoa32(radar_range, &buf[0]);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	491a      	ldr	r1, [pc, #104]	; (8006678 <draw_radar+0x7b8>)
 800660e:	4618      	mov	r0, r3
 8006610:	f002 fa46 	bl	8008aa0 <itoa32>
    	ssd1306_print_viceversa(7, 7, &buf[0], 0);
 8006614:	2300      	movs	r3, #0
 8006616:	4a18      	ldr	r2, [pc, #96]	; (8006678 <draw_radar+0x7b8>)
 8006618:	2107      	movs	r1, #7
 800661a:	2007      	movs	r0, #7
 800661c:	f003 f870 	bl	8009700 <ssd1306_print_viceversa>
 8006620:	e01f      	b.n	8006662 <draw_radar+0x7a2>
    }
    else if (radar_range < 1000000)	// 10000...999999 meters
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4a15      	ldr	r2, [pc, #84]	; (800667c <draw_radar+0x7bc>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d815      	bhi.n	8006656 <draw_radar+0x796>
    {
    	itoa32((radar_range / 1000), &buf[0]);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	4a14      	ldr	r2, [pc, #80]	; (8006680 <draw_radar+0x7c0>)
 800662e:	fba2 2303 	umull	r2, r3, r2, r3
 8006632:	099b      	lsrs	r3, r3, #6
 8006634:	4910      	ldr	r1, [pc, #64]	; (8006678 <draw_radar+0x7b8>)
 8006636:	4618      	mov	r0, r3
 8006638:	f002 fa32 	bl	8008aa0 <itoa32>
    	ssd1306_char_pos(7, 7, 'k', 0);
 800663c:	2300      	movs	r3, #0
 800663e:	226b      	movs	r2, #107	; 0x6b
 8006640:	2107      	movs	r1, #7
 8006642:	2007      	movs	r0, #7
 8006644:	f003 f81a 	bl	800967c <ssd1306_char_pos>
    	ssd1306_print_viceversa(7, 6, &buf[0], 0);
 8006648:	2300      	movs	r3, #0
 800664a:	4a0b      	ldr	r2, [pc, #44]	; (8006678 <draw_radar+0x7b8>)
 800664c:	2106      	movs	r1, #6
 800664e:	2007      	movs	r0, #7
 8006650:	f003 f856 	bl	8009700 <ssd1306_print_viceversa>
 8006654:	e005      	b.n	8006662 <draw_radar+0x7a2>
    }
    else
    {
    	ssd1306_print_viceversa(7, 7, "...", 0);
 8006656:	2300      	movs	r3, #0
 8006658:	4a0a      	ldr	r2, [pc, #40]	; (8006684 <draw_radar+0x7c4>)
 800665a:	2107      	movs	r1, #7
 800665c:	2007      	movs	r0, #7
 800665e:	f003 f84f 	bl	8009700 <ssd1306_print_viceversa>
    }


    //plot on radar
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8006662:	2301      	movs	r3, #1
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e0f4      	b.n	8006852 <draw_radar+0x992>
 8006668:	d2f1a9fc 	.word	0xd2f1a9fc
 800666c:	3f50624d 	.word	0x3f50624d
 8006670:	2000083c 	.word	0x2000083c
 8006674:	20000121 	.word	0x20000121
 8006678:	20000810 	.word	0x20000810
 800667c:	000f423f 	.word	0x000f423f
 8006680:	10624dd3 	.word	0x10624dd3
 8006684:	0800cf78 	.word	0x0800cf78
    {
    	if (dev != device_number)
 8006688:	4b77      	ldr	r3, [pc, #476]	; (8006868 <draw_radar+0x9a8>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	7ffa      	ldrb	r2, [r7, #31]
 800668e:	429a      	cmp	r2, r3
 8006690:	f000 80dc 	beq.w	800684c <draw_radar+0x98c>
    	{
    		if (pp_dev_aux[dev]->exist_flag == 1)
 8006694:	4b75      	ldr	r3, [pc, #468]	; (800686c <draw_radar+0x9ac>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	7ffb      	ldrb	r3, [r7, #31]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	f040 80d2 	bne.w	800684c <draw_radar+0x98c>
    		{
    			if (radar_list_hide[dev] == 0)		//if not hided
 80066a8:	7ffb      	ldrb	r3, [r7, #31]
 80066aa:	4a71      	ldr	r2, [pc, #452]	; (8006870 <draw_radar+0x9b0>)
 80066ac:	5cd3      	ldrb	r3, [r2, r3]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f040 80cc 	bne.w	800684c <draw_radar+0x98c>
    			{
					uint8_t sx1 = 0;		//device coordinates on the screen
 80066b4:	2300      	movs	r3, #0
 80066b6:	74fb      	strb	r3, [r7, #19]
					uint8_t sy1 = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	74bb      	strb	r3, [r7, #18]

					double x1 = 0.0;	//device coordinates relative from my position (0, 0)
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	f04f 0400 	mov.w	r4, #0
 80066c4:	e9c7 3402 	strd	r3, r4, [r7, #8]
					double y1 = 0.0;
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	f04f 0400 	mov.w	r4, #0
 80066d0:	e9c7 3400 	strd	r3, r4, [r7]

					x1 = -((pp_gps_rel[dev]->distance)/(double)mpd_ratio_i) * cos((pp_gps_rel[dev]->heading + 90) * deg_to_rad);
 80066d4:	4b67      	ldr	r3, [pc, #412]	; (8006874 <draw_radar+0x9b4>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	7ffb      	ldrb	r3, [r7, #31]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7f9 fe86 	bl	80003f4 <__aeabi_ui2d>
 80066e8:	4680      	mov	r8, r0
 80066ea:	4689      	mov	r9, r1
 80066ec:	6a38      	ldr	r0, [r7, #32]
 80066ee:	f7f9 fe81 	bl	80003f4 <__aeabi_ui2d>
 80066f2:	4603      	mov	r3, r0
 80066f4:	460c      	mov	r4, r1
 80066f6:	461a      	mov	r2, r3
 80066f8:	4623      	mov	r3, r4
 80066fa:	4640      	mov	r0, r8
 80066fc:	4649      	mov	r1, r9
 80066fe:	f7fa f81d 	bl	800073c <__aeabi_ddiv>
 8006702:	4603      	mov	r3, r0
 8006704:	460c      	mov	r4, r1
 8006706:	461d      	mov	r5, r3
 8006708:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 800670c:	4b59      	ldr	r3, [pc, #356]	; (8006874 <draw_radar+0x9b4>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	7ffb      	ldrb	r3, [r7, #31]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	889b      	ldrh	r3, [r3, #4]
 800671a:	335a      	adds	r3, #90	; 0x5a
 800671c:	4618      	mov	r0, r3
 800671e:	f7f9 fe79 	bl	8000414 <__aeabi_i2d>
 8006722:	4b55      	ldr	r3, [pc, #340]	; (8006878 <draw_radar+0x9b8>)
 8006724:	cb18      	ldmia	r3, {r3, r4}
 8006726:	461a      	mov	r2, r3
 8006728:	4623      	mov	r3, r4
 800672a:	f7f9 fedd 	bl	80004e8 <__aeabi_dmul>
 800672e:	4603      	mov	r3, r0
 8006730:	460c      	mov	r4, r1
 8006732:	4618      	mov	r0, r3
 8006734:	4621      	mov	r1, r4
 8006736:	f003 fd5d 	bl	800a1f4 <cos>
 800673a:	4603      	mov	r3, r0
 800673c:	460c      	mov	r4, r1
 800673e:	461a      	mov	r2, r3
 8006740:	4623      	mov	r3, r4
 8006742:	4628      	mov	r0, r5
 8006744:	4631      	mov	r1, r6
 8006746:	f7f9 fecf 	bl	80004e8 <__aeabi_dmul>
 800674a:	4603      	mov	r3, r0
 800674c:	460c      	mov	r4, r1
 800674e:	e9c7 3402 	strd	r3, r4, [r7, #8]
					y1 = ((pp_gps_rel[dev]->distance)/(double)mpd_ratio_i) * sin((pp_gps_rel[dev]->heading + 90) * deg_to_rad);
 8006752:	4b48      	ldr	r3, [pc, #288]	; (8006874 <draw_radar+0x9b4>)
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	7ffb      	ldrb	r3, [r7, #31]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f7f9 fe47 	bl	80003f4 <__aeabi_ui2d>
 8006766:	4680      	mov	r8, r0
 8006768:	4689      	mov	r9, r1
 800676a:	6a38      	ldr	r0, [r7, #32]
 800676c:	f7f9 fe42 	bl	80003f4 <__aeabi_ui2d>
 8006770:	4603      	mov	r3, r0
 8006772:	460c      	mov	r4, r1
 8006774:	461a      	mov	r2, r3
 8006776:	4623      	mov	r3, r4
 8006778:	4640      	mov	r0, r8
 800677a:	4649      	mov	r1, r9
 800677c:	f7f9 ffde 	bl	800073c <__aeabi_ddiv>
 8006780:	4603      	mov	r3, r0
 8006782:	460c      	mov	r4, r1
 8006784:	4698      	mov	r8, r3
 8006786:	46a1      	mov	r9, r4
 8006788:	4b3a      	ldr	r3, [pc, #232]	; (8006874 <draw_radar+0x9b4>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	7ffb      	ldrb	r3, [r7, #31]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	889b      	ldrh	r3, [r3, #4]
 8006796:	335a      	adds	r3, #90	; 0x5a
 8006798:	4618      	mov	r0, r3
 800679a:	f7f9 fe3b 	bl	8000414 <__aeabi_i2d>
 800679e:	4b36      	ldr	r3, [pc, #216]	; (8006878 <draw_radar+0x9b8>)
 80067a0:	cb18      	ldmia	r3, {r3, r4}
 80067a2:	461a      	mov	r2, r3
 80067a4:	4623      	mov	r3, r4
 80067a6:	f7f9 fe9f 	bl	80004e8 <__aeabi_dmul>
 80067aa:	4603      	mov	r3, r0
 80067ac:	460c      	mov	r4, r1
 80067ae:	4618      	mov	r0, r3
 80067b0:	4621      	mov	r1, r4
 80067b2:	f003 fd59 	bl	800a268 <sin>
 80067b6:	4603      	mov	r3, r0
 80067b8:	460c      	mov	r4, r1
 80067ba:	461a      	mov	r2, r3
 80067bc:	4623      	mov	r3, r4
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7f9 fe91 	bl	80004e8 <__aeabi_dmul>
 80067c6:	4603      	mov	r3, r0
 80067c8:	460c      	mov	r4, r1
 80067ca:	e9c7 3400 	strd	r3, r4, [r7]

					sx1 = sx0 + (int8_t)x1;
 80067ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067d2:	f7fa f939 	bl	8000a48 <__aeabi_d2iz>
 80067d6:	4603      	mov	r3, r0
 80067d8:	b25b      	sxtb	r3, r3
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2218      	movs	r2, #24
 80067de:	4413      	add	r3, r2
 80067e0:	74fb      	strb	r3, [r7, #19]
					sy1 = sy0 - (int8_t)y1;		//note: Y axis is inverted (counts from top to the bottom)
 80067e2:	241f      	movs	r4, #31
 80067e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067e8:	f7fa f92e 	bl	8000a48 <__aeabi_d2iz>
 80067ec:	4603      	mov	r3, r0
 80067ee:	b25b      	sxtb	r3, r3
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	1ae3      	subs	r3, r4, r3
 80067f4:	74bb      	strb	r3, [r7, #18]


					ssd1306_pixel(sx1, sy1+1, 1);	//pixel cross
 80067f6:	7cbb      	ldrb	r3, [r7, #18]
 80067f8:	3301      	adds	r3, #1
 80067fa:	b2d9      	uxtb	r1, r3
 80067fc:	7cfb      	ldrb	r3, [r7, #19]
 80067fe:	2201      	movs	r2, #1
 8006800:	4618      	mov	r0, r3
 8006802:	f002 fe6b 	bl	80094dc <ssd1306_pixel>
					ssd1306_pixel(sx1+1, sy1, 1);
 8006806:	7cfb      	ldrb	r3, [r7, #19]
 8006808:	3301      	adds	r3, #1
 800680a:	b2db      	uxtb	r3, r3
 800680c:	7cb9      	ldrb	r1, [r7, #18]
 800680e:	2201      	movs	r2, #1
 8006810:	4618      	mov	r0, r3
 8006812:	f002 fe63 	bl	80094dc <ssd1306_pixel>
					ssd1306_pixel(sx1, sy1-1, 1);
 8006816:	7cbb      	ldrb	r3, [r7, #18]
 8006818:	3b01      	subs	r3, #1
 800681a:	b2d9      	uxtb	r1, r3
 800681c:	7cfb      	ldrb	r3, [r7, #19]
 800681e:	2201      	movs	r2, #1
 8006820:	4618      	mov	r0, r3
 8006822:	f002 fe5b 	bl	80094dc <ssd1306_pixel>
					ssd1306_pixel(sx1-1, sy1, 1);
 8006826:	7cfb      	ldrb	r3, [r7, #19]
 8006828:	3b01      	subs	r3, #1
 800682a:	b2db      	uxtb	r3, r3
 800682c:	7cb9      	ldrb	r1, [r7, #18]
 800682e:	2201      	movs	r2, #1
 8006830:	4618      	mov	r0, r3
 8006832:	f002 fe53 	bl	80094dc <ssd1306_pixel>

					//center pixel if device is selected
					if (dev == current_radar_device)
 8006836:	4b11      	ldr	r3, [pc, #68]	; (800687c <draw_radar+0x9bc>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	7ffa      	ldrb	r2, [r7, #31]
 800683c:	429a      	cmp	r2, r3
 800683e:	d105      	bne.n	800684c <draw_radar+0x98c>
					{
						ssd1306_pixel(sx1, sy1, 1);
 8006840:	7cb9      	ldrb	r1, [r7, #18]
 8006842:	7cfb      	ldrb	r3, [r7, #19]
 8006844:	2201      	movs	r2, #1
 8006846:	4618      	mov	r0, r3
 8006848:	f002 fe48 	bl	80094dc <ssd1306_pixel>
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 800684c:	7ffb      	ldrb	r3, [r7, #31]
 800684e:	3301      	adds	r3, #1
 8006850:	77fb      	strb	r3, [r7, #31]
 8006852:	7ffb      	ldrb	r3, [r7, #31]
 8006854:	2b06      	cmp	r3, #6
 8006856:	f67f af17 	bls.w	8006688 <draw_radar+0x7c8>
    			}
    		}
    	}
    }

	ssd1306_update();
 800685a:	f002 fdfd 	bl	8009458 <ssd1306_update>
}
 800685e:	bf00      	nop
 8006860:	3734      	adds	r7, #52	; 0x34
 8006862:	46bd      	mov	sp, r7
 8006864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006868:	20000738 	.word	0x20000738
 800686c:	2000083c 	.word	0x2000083c
 8006870:	20000830 	.word	0x20000830
 8006874:	200007d0 	.word	0x200007d0
 8006878:	0800d4a8 	.word	0x0800d4a8
 800687c:	20000121 	.word	0x20000121

08006880 <draw_points>:



//POINTS
void draw_points(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
	#define POINTS_ROW               (2)
	#define POINTS_COL               (1)
	#define POINTS_NAME_COL          (4)
	#define POINTS_DATE_COL          (10)

	read_memory_slots();
 8006886:	f001 fb7d 	bl	8007f84 <read_memory_slots>

	ssd1306_clear();
 800688a:	f002 fe0f 	bl	80094ac <ssd1306_clear>
	ssd1306_print(0, POINTS_COL, "POINTS", 0);
 800688e:	2300      	movs	r3, #0
 8006890:	4a57      	ldr	r2, [pc, #348]	; (80069f0 <draw_points+0x170>)
 8006892:	2101      	movs	r1, #1
 8006894:	2000      	movs	r0, #0
 8006896:	f002 ff10 	bl	80096ba <ssd1306_print>

	for (uint8_t s = 1; s <= MEMORY_SLOTS_TOTAL; s++)
 800689a:	2301      	movs	r3, #1
 800689c:	71fb      	strb	r3, [r7, #7]
 800689e:	e094      	b.n	80069ca <draw_points+0x14a>
	{
		ssd1306_print(POINTS_ROW + s - 1, POINTS_COL, pp_memory_slot[s]->slot_name, 0);	//print slot name
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	3301      	adds	r3, #1
 80068a4:	b2d8      	uxtb	r0, r3
 80068a6:	4b53      	ldr	r3, [pc, #332]	; (80069f4 <draw_points+0x174>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	2300      	movs	r3, #0
 80068b6:	2101      	movs	r1, #1
 80068b8:	f002 feff 	bl	80096ba <ssd1306_print>

		if (pp_memory_slot[s]->exist_flag == 1)
 80068bc:	4b4d      	ldr	r3, [pc, #308]	; (80069f4 <draw_points+0x174>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d172      	bne.n	80069b4 <draw_points+0x134>
		{
			ssd1306_print(POINTS_ROW + s - 1, POINTS_NAME_COL, pp_memory_slot[s]->point_name, 0);	//print point name
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	3301      	adds	r3, #1
 80068d2:	b2d8      	uxtb	r0, r3
 80068d4:	4b47      	ldr	r3, [pc, #284]	; (80069f4 <draw_points+0x174>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	1d1a      	adds	r2, r3, #4
 80068e2:	2300      	movs	r3, #0
 80068e4:	2104      	movs	r1, #4
 80068e6:	f002 fee8 	bl	80096ba <ssd1306_print>

	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL, pp_memory_slot[s]->save_date[0], 0);	//print point save date
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	3301      	adds	r3, #1
 80068ee:	b2d8      	uxtb	r0, r3
 80068f0:	4b40      	ldr	r3, [pc, #256]	; (80069f4 <draw_points+0x174>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	7a9a      	ldrb	r2, [r3, #10]
 80068fe:	2300      	movs	r3, #0
 8006900:	210a      	movs	r1, #10
 8006902:	f002 febb 	bl	800967c <ssd1306_char_pos>
	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL + 1, pp_memory_slot[s]->save_date[1], 0);
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	3301      	adds	r3, #1
 800690a:	b2d8      	uxtb	r0, r3
 800690c:	4b39      	ldr	r3, [pc, #228]	; (80069f4 <draw_points+0x174>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	7ada      	ldrb	r2, [r3, #11]
 800691a:	2300      	movs	r3, #0
 800691c:	210b      	movs	r1, #11
 800691e:	f002 fead 	bl	800967c <ssd1306_char_pos>
	        ssd1306_print(POINTS_ROW + s - 1, POINTS_DATE_COL + 2, ".", 0);
 8006922:	79fb      	ldrb	r3, [r7, #7]
 8006924:	3301      	adds	r3, #1
 8006926:	b2d8      	uxtb	r0, r3
 8006928:	2300      	movs	r3, #0
 800692a:	4a33      	ldr	r2, [pc, #204]	; (80069f8 <draw_points+0x178>)
 800692c:	210c      	movs	r1, #12
 800692e:	f002 fec4 	bl	80096ba <ssd1306_print>

	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL + 3, pp_memory_slot[s]->save_date[2], 0);
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	3301      	adds	r3, #1
 8006936:	b2d8      	uxtb	r0, r3
 8006938:	4b2e      	ldr	r3, [pc, #184]	; (80069f4 <draw_points+0x174>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	7b1a      	ldrb	r2, [r3, #12]
 8006946:	2300      	movs	r3, #0
 8006948:	210d      	movs	r1, #13
 800694a:	f002 fe97 	bl	800967c <ssd1306_char_pos>
	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL + 4, pp_memory_slot[s]->save_date[3], 0);
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	3301      	adds	r3, #1
 8006952:	b2d8      	uxtb	r0, r3
 8006954:	4b27      	ldr	r3, [pc, #156]	; (80069f4 <draw_points+0x174>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	79fb      	ldrb	r3, [r7, #7]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	7b5a      	ldrb	r2, [r3, #13]
 8006962:	2300      	movs	r3, #0
 8006964:	210e      	movs	r1, #14
 8006966:	f002 fe89 	bl	800967c <ssd1306_char_pos>
	        ssd1306_print(POINTS_ROW + s - 1, POINTS_DATE_COL + 5, ".", 0);
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	3301      	adds	r3, #1
 800696e:	b2d8      	uxtb	r0, r3
 8006970:	2300      	movs	r3, #0
 8006972:	4a21      	ldr	r2, [pc, #132]	; (80069f8 <draw_points+0x178>)
 8006974:	210f      	movs	r1, #15
 8006976:	f002 fea0 	bl	80096ba <ssd1306_print>

	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL + 6, pp_memory_slot[s]->save_date[4], 0);
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	3301      	adds	r3, #1
 800697e:	b2d8      	uxtb	r0, r3
 8006980:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <draw_points+0x174>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	7b9a      	ldrb	r2, [r3, #14]
 800698e:	2300      	movs	r3, #0
 8006990:	2110      	movs	r1, #16
 8006992:	f002 fe73 	bl	800967c <ssd1306_char_pos>
	        ssd1306_char_pos(POINTS_ROW + s - 1, POINTS_DATE_COL + 7, pp_memory_slot[s]->save_date[5], 0);
 8006996:	79fb      	ldrb	r3, [r7, #7]
 8006998:	3301      	adds	r3, #1
 800699a:	b2d8      	uxtb	r0, r3
 800699c:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <draw_points+0x174>)
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	7bda      	ldrb	r2, [r3, #15]
 80069aa:	2300      	movs	r3, #0
 80069ac:	2111      	movs	r1, #17
 80069ae:	f002 fe65 	bl	800967c <ssd1306_char_pos>
 80069b2:	e007      	b.n	80069c4 <draw_points+0x144>
		}
		else
		{
			ssd1306_print(POINTS_ROW + s - 1, POINTS_NAME_COL, "empty", 0);
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	3301      	adds	r3, #1
 80069b8:	b2d8      	uxtb	r0, r3
 80069ba:	2300      	movs	r3, #0
 80069bc:	4a0f      	ldr	r2, [pc, #60]	; (80069fc <draw_points+0x17c>)
 80069be:	2104      	movs	r1, #4
 80069c0:	f002 fe7b 	bl	80096ba <ssd1306_print>
	for (uint8_t s = 1; s <= MEMORY_SLOTS_TOTAL; s++)
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	3301      	adds	r3, #1
 80069c8:	71fb      	strb	r3, [r7, #7]
 80069ca:	79fb      	ldrb	r3, [r7, #7]
 80069cc:	2b05      	cmp	r3, #5
 80069ce:	f67f af67 	bls.w	80068a0 <draw_points+0x20>
		}
	}

	ssd1306_print(POINTS_ROW + current_slot_to_load - 1, POINTS_COL - 1, ">", 0);	//print pointer
 80069d2:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <draw_points+0x180>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	3301      	adds	r3, #1
 80069d8:	b2d8      	uxtb	r0, r3
 80069da:	2300      	movs	r3, #0
 80069dc:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <draw_points+0x184>)
 80069de:	2100      	movs	r1, #0
 80069e0:	f002 fe6b 	bl	80096ba <ssd1306_print>

	ssd1306_update();
 80069e4:	f002 fd38 	bl	8009458 <ssd1306_update>
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	0800d0dc 	.word	0x0800d0dc
 80069f4:	200007d4 	.word	0x200007d4
 80069f8:	0800cf88 	.word	0x0800cf88
 80069fc:	0800d0e4 	.word	0x0800d0e4
 8006a00:	2000002b 	.word	0x2000002b
 8006a04:	0800cf74 	.word	0x0800cf74

08006a08 <draw_each_point>:



void draw_each_point(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
    #define EACH_POINT_ROW               (2)
    #define EACH_POINT_COL               (1)

    ssd1306_clear();
 8006a0c:	f002 fd4e 	bl	80094ac <ssd1306_clear>

	ssd1306_print(0, EACH_POINT_COL, "POINT ", 0);
 8006a10:	2300      	movs	r3, #0
 8006a12:	4a15      	ldr	r2, [pc, #84]	; (8006a68 <draw_each_point+0x60>)
 8006a14:	2101      	movs	r1, #1
 8006a16:	2000      	movs	r0, #0
 8006a18:	f002 fe4f 	bl	80096ba <ssd1306_print>
	ssd1306_print_next(pp_memory_slot[current_slot_to_load]->slot_name, 0);
 8006a1c:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <draw_each_point+0x64>)
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	4b13      	ldr	r3, [pc, #76]	; (8006a70 <draw_each_point+0x68>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f002 fea2 	bl	8009778 <ssd1306_print_next>

	ssd1306_print(EACH_POINT_ROW, EACH_POINT_COL, "Load", 0);
 8006a34:	2300      	movs	r3, #0
 8006a36:	4a0f      	ldr	r2, [pc, #60]	; (8006a74 <draw_each_point+0x6c>)
 8006a38:	2101      	movs	r1, #1
 8006a3a:	2002      	movs	r0, #2
 8006a3c:	f002 fe3d 	bl	80096ba <ssd1306_print>
	ssd1306_print(EACH_POINT_ROW + 1, EACH_POINT_COL, "Delete", 0);
 8006a40:	2300      	movs	r3, #0
 8006a42:	4a0d      	ldr	r2, [pc, #52]	; (8006a78 <draw_each_point+0x70>)
 8006a44:	2101      	movs	r1, #1
 8006a46:	2003      	movs	r0, #3
 8006a48:	f002 fe37 	bl	80096ba <ssd1306_print>
	ssd1306_print(EACH_POINT_ROW + get_current_item(), EACH_POINT_COL - 1, ">", 0);
 8006a4c:	f7fd fcb6 	bl	80043bc <get_current_item>
 8006a50:	4603      	mov	r3, r0
 8006a52:	3302      	adds	r3, #2
 8006a54:	b2d8      	uxtb	r0, r3
 8006a56:	2300      	movs	r3, #0
 8006a58:	4a08      	ldr	r2, [pc, #32]	; (8006a7c <draw_each_point+0x74>)
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	f002 fe2d 	bl	80096ba <ssd1306_print>

    ssd1306_update();
 8006a60:	f002 fcfa 	bl	8009458 <ssd1306_update>
}
 8006a64:	bf00      	nop
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	0800d0ec 	.word	0x0800d0ec
 8006a6c:	200007d4 	.word	0x200007d4
 8006a70:	2000002b 	.word	0x2000002b
 8006a74:	0800d0f4 	.word	0x0800d0f4
 8006a78:	0800d03c 	.word	0x0800d03c
 8006a7c:	0800cf74 	.word	0x0800cf74

08006a80 <draw_load_point>:



void draw_load_point(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
	#define LOAD_POINT_ROW               (2)
	#define LOAD_POINT_COL               (1)

	ssd1306_clear();
 8006a86:	f002 fd11 	bl	80094ac <ssd1306_clear>

	ssd1306_print(0, LOAD_POINT_COL, "Where to load ", 0);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	4a34      	ldr	r2, [pc, #208]	; (8006b60 <draw_load_point+0xe0>)
 8006a8e:	2101      	movs	r1, #1
 8006a90:	2000      	movs	r0, #0
 8006a92:	f002 fe12 	bl	80096ba <ssd1306_print>
	ssd1306_print_next(pp_memory_slot[current_slot_to_load]->slot_name, 0);
 8006a96:	4b33      	ldr	r3, [pc, #204]	; (8006b64 <draw_load_point+0xe4>)
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	4b33      	ldr	r3, [pc, #204]	; (8006b68 <draw_load_point+0xe8>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f002 fe65 	bl	8009778 <ssd1306_print_next>
	ssd1306_print_next("?", 0);
 8006aae:	2100      	movs	r1, #0
 8006ab0:	482e      	ldr	r0, [pc, #184]	; (8006b6c <draw_load_point+0xec>)
 8006ab2:	f002 fe61 	bl	8009778 <ssd1306_print_next>

    uint8_t another_device_to_load_row = LOAD_POINT_ROW;
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	71fb      	strb	r3, [r7, #7]
    uint8_t devices_enlisted_cntr = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	71bb      	strb	r3, [r7, #6]

    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8006abe:	2301      	movs	r3, #1
 8006ac0:	717b      	strb	r3, [r7, #5]
 8006ac2:	e02a      	b.n	8006b1a <draw_load_point+0x9a>
    {
		if (pp_dev_aux[dev]->exist_flag == 0)
 8006ac4:	4b2a      	ldr	r3, [pc, #168]	; (8006b70 <draw_load_point+0xf0>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	797b      	ldrb	r3, [r7, #5]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d11e      	bne.n	8006b14 <draw_load_point+0x94>
		{
			device_to_load_list[dev] = devices_enlisted_cntr++; 		//first nonexisting device will get index 0
 8006ad6:	79bb      	ldrb	r3, [r7, #6]
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	71ba      	strb	r2, [r7, #6]
 8006adc:	797a      	ldrb	r2, [r7, #5]
 8006ade:	4925      	ldr	r1, [pc, #148]	; (8006b74 <draw_load_point+0xf4>)
 8006ae0:	548b      	strb	r3, [r1, r2]

			if (current_device_to_load == 0) //if for the first time
 8006ae2:	4b25      	ldr	r3, [pc, #148]	; (8006b78 <draw_load_point+0xf8>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d102      	bne.n	8006af0 <draw_load_point+0x70>
			{
				current_device_to_load = dev;
 8006aea:	4a23      	ldr	r2, [pc, #140]	; (8006b78 <draw_load_point+0xf8>)
 8006aec:	797b      	ldrb	r3, [r7, #5]
 8006aee:	7013      	strb	r3, [r2, #0]
			}

			//Device
			ssd1306_print(another_device_to_load_row, LOAD_POINT_COL, "Device ", 0);
 8006af0:	79f8      	ldrb	r0, [r7, #7]
 8006af2:	2300      	movs	r3, #0
 8006af4:	4a21      	ldr	r2, [pc, #132]	; (8006b7c <draw_load_point+0xfc>)
 8006af6:	2101      	movs	r1, #1
 8006af8:	f002 fddf 	bl	80096ba <ssd1306_print>

            //Number
			itoa32(dev, &buf[0]);
 8006afc:	797b      	ldrb	r3, [r7, #5]
 8006afe:	4920      	ldr	r1, [pc, #128]	; (8006b80 <draw_load_point+0x100>)
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 ffcd 	bl	8008aa0 <itoa32>
			ssd1306_print_next(&buf[0], 0);
 8006b06:	2100      	movs	r1, #0
 8006b08:	481d      	ldr	r0, [pc, #116]	; (8006b80 <draw_load_point+0x100>)
 8006b0a:	f002 fe35 	bl	8009778 <ssd1306_print_next>

			another_device_to_load_row++;
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	3301      	adds	r3, #1
 8006b12:	71fb      	strb	r3, [r7, #7]
    for (uint8_t dev = 1; dev <= DEVICES_IN_GROUP; dev++)
 8006b14:	797b      	ldrb	r3, [r7, #5]
 8006b16:	3301      	adds	r3, #1
 8006b18:	717b      	strb	r3, [r7, #5]
 8006b1a:	797b      	ldrb	r3, [r7, #5]
 8006b1c:	2b06      	cmp	r3, #6
 8006b1e:	d9d1      	bls.n	8006ac4 <draw_load_point+0x44>
		}
    }

    if (devices_enlisted_cntr > 0)
 8006b20:	79bb      	ldrb	r3, [r7, #6]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00c      	beq.n	8006b40 <draw_load_point+0xc0>
    {
    	ssd1306_print(LOAD_POINT_ROW + device_to_load_list[current_device_to_load], LOAD_POINT_COL - 1, ">", 0);
 8006b26:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <draw_load_point+0xf8>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4b11      	ldr	r3, [pc, #68]	; (8006b74 <draw_load_point+0xf4>)
 8006b2e:	5c9b      	ldrb	r3, [r3, r2]
 8006b30:	3302      	adds	r3, #2
 8006b32:	b2d8      	uxtb	r0, r3
 8006b34:	2300      	movs	r3, #0
 8006b36:	4a13      	ldr	r2, [pc, #76]	; (8006b84 <draw_load_point+0x104>)
 8006b38:	2100      	movs	r1, #0
 8006b3a:	f002 fdbe 	bl	80096ba <ssd1306_print>
 8006b3e:	e008      	b.n	8006b52 <draw_load_point+0xd2>
    }
    else
    {
    	ssd1306_print(LOAD_POINT_ROW, LOAD_POINT_COL, "no empty devices", 0);
 8006b40:	2300      	movs	r3, #0
 8006b42:	4a11      	ldr	r2, [pc, #68]	; (8006b88 <draw_load_point+0x108>)
 8006b44:	2101      	movs	r1, #1
 8006b46:	2002      	movs	r0, #2
 8006b48:	f002 fdb7 	bl	80096ba <ssd1306_print>
    	current_device_to_load = 0;
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <draw_load_point+0xf8>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	701a      	strb	r2, [r3, #0]
    }

	ssd1306_update();
 8006b52:	f002 fc81 	bl	8009458 <ssd1306_update>
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	0800d0fc 	.word	0x0800d0fc
 8006b64:	200007d4 	.word	0x200007d4
 8006b68:	2000002b 	.word	0x2000002b
 8006b6c:	0800d054 	.word	0x0800d054
 8006b70:	2000083c 	.word	0x2000083c
 8006b74:	200007ec 	.word	0x200007ec
 8006b78:	20000122 	.word	0x20000122
 8006b7c:	0800d10c 	.word	0x0800d10c
 8006b80:	20000810 	.word	0x20000810
 8006b84:	0800cf74 	.word	0x0800cf74
 8006b88:	0800d114 	.word	0x0800d114

08006b8c <draw_delete_point>:



void draw_delete_point(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
    ssd1306_clear();
 8006b90:	f002 fc8c 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, 1, "Delete point ", 0);
 8006b94:	2300      	movs	r3, #0
 8006b96:	4a12      	ldr	r2, [pc, #72]	; (8006be0 <draw_delete_point+0x54>)
 8006b98:	2101      	movs	r1, #1
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	f002 fd8d 	bl	80096ba <ssd1306_print>
    ssd1306_print_next(pp_memory_slot[current_slot_to_load]->slot_name, 0);
 8006ba0:	4b10      	ldr	r3, [pc, #64]	; (8006be4 <draw_delete_point+0x58>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <draw_delete_point+0x5c>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f002 fde0 	bl	8009778 <ssd1306_print_next>
    ssd1306_print_next("?", 0);
 8006bb8:	2100      	movs	r1, #0
 8006bba:	480c      	ldr	r0, [pc, #48]	; (8006bec <draw_delete_point+0x60>)
 8006bbc:	f002 fddc 	bl	8009778 <ssd1306_print_next>
    ssd1306_print(3, 1, "OK - delete", 0);
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4a0b      	ldr	r2, [pc, #44]	; (8006bf0 <draw_delete_point+0x64>)
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	2003      	movs	r0, #3
 8006bc8:	f002 fd77 	bl	80096ba <ssd1306_print>
    ssd1306_print(4, 1, "ESC - cancel", 0);
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <draw_delete_point+0x68>)
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	2004      	movs	r0, #4
 8006bd4:	f002 fd71 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 8006bd8:	f002 fc3e 	bl	8009458 <ssd1306_update>
}
 8006bdc:	bf00      	nop
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	0800d128 	.word	0x0800d128
 8006be4:	200007d4 	.word	0x200007d4
 8006be8:	2000002b 	.word	0x2000002b
 8006bec:	0800d054 	.word	0x0800d054
 8006bf0:	0800d06c 	.word	0x0800d06c
 8006bf4:	0800d078 	.word	0x0800d078

08006bf8 <draw_settings>:



//SETTINGS
void draw_settings(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
    #define SETTINGS_ROW               (2)
    #define SETTINGS_COL               (1)
    
    ssd1306_clear();
 8006bfc:	f002 fc56 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, SETTINGS_COL, "SETTINGS", 0);
 8006c00:	2300      	movs	r3, #0
 8006c02:	4a12      	ldr	r2, [pc, #72]	; (8006c4c <draw_settings+0x54>)
 8006c04:	2101      	movs	r1, #1
 8006c06:	2000      	movs	r0, #0
 8006c08:	f002 fd57 	bl	80096ba <ssd1306_print>
    ssd1306_print(SETTINGS_ROW, SETTINGS_COL, "Edit", 0);
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4a10      	ldr	r2, [pc, #64]	; (8006c50 <draw_settings+0x58>)
 8006c10:	2101      	movs	r1, #1
 8006c12:	2002      	movs	r0, #2
 8006c14:	f002 fd51 	bl	80096ba <ssd1306_print>
    ssd1306_print(SETTINGS_ROW + 1, SETTINGS_COL, "Restore", 0);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	4a0e      	ldr	r2, [pc, #56]	; (8006c54 <draw_settings+0x5c>)
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	2003      	movs	r0, #3
 8006c20:	f002 fd4b 	bl	80096ba <ssd1306_print>
    ssd1306_print(SETTINGS_ROW + 2, SETTINGS_COL, "Erase", 0);
 8006c24:	2300      	movs	r3, #0
 8006c26:	4a0c      	ldr	r2, [pc, #48]	; (8006c58 <draw_settings+0x60>)
 8006c28:	2101      	movs	r1, #1
 8006c2a:	2004      	movs	r0, #4
 8006c2c:	f002 fd45 	bl	80096ba <ssd1306_print>
    ssd1306_print(SETTINGS_ROW + get_current_item(), SETTINGS_COL - 1, ">", 0);
 8006c30:	f7fd fbc4 	bl	80043bc <get_current_item>
 8006c34:	4603      	mov	r3, r0
 8006c36:	3302      	adds	r3, #2
 8006c38:	b2d8      	uxtb	r0, r3
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <draw_settings+0x64>)
 8006c3e:	2100      	movs	r1, #0
 8006c40:	f002 fd3b 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 8006c44:	f002 fc08 	bl	8009458 <ssd1306_update>
}
 8006c48:	bf00      	nop
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	0800d138 	.word	0x0800d138
 8006c50:	0800d144 	.word	0x0800d144
 8006c54:	0800d14c 	.word	0x0800d14c
 8006c58:	0800d154 	.word	0x0800d154
 8006c5c:	0800cf74 	.word	0x0800cf74

08006c60 <draw_info>:



//INFO
void draw_info(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
    ssd1306_clear();
 8006c64:	f002 fc22 	bl	80094ac <ssd1306_clear>

    ssd1306_bitmap(&info_blank[0]);
 8006c68:	481a      	ldr	r0, [pc, #104]	; (8006cd4 <draw_info+0x74>)
 8006c6a:	f002 fd9d 	bl	80097a8 <ssd1306_bitmap>

    ssd1306_print(0, 0, "LRNS Eleph", 0);
 8006c6e:	2300      	movs	r3, #0
 8006c70:	4a19      	ldr	r2, [pc, #100]	; (8006cd8 <draw_info+0x78>)
 8006c72:	2100      	movs	r1, #0
 8006c74:	2000      	movs	r0, #0
 8006c76:	f002 fd20 	bl	80096ba <ssd1306_print>

    ssd1306_print(2, 0, "HW/FW: ", 0);
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4a17      	ldr	r2, [pc, #92]	; (8006cdc <draw_info+0x7c>)
 8006c7e:	2100      	movs	r1, #0
 8006c80:	2002      	movs	r0, #2
 8006c82:	f002 fd1a 	bl	80096ba <ssd1306_print>
    ssd1306_print_next(HW_VERSION, 0);
 8006c86:	4b16      	ldr	r3, [pc, #88]	; (8006ce0 <draw_info+0x80>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f002 fd73 	bl	8009778 <ssd1306_print_next>
    ssd1306_print_next("/", 0);
 8006c92:	2100      	movs	r1, #0
 8006c94:	4813      	ldr	r0, [pc, #76]	; (8006ce4 <draw_info+0x84>)
 8006c96:	f002 fd6f 	bl	8009778 <ssd1306_print_next>
    ssd1306_print_next(FW_VERSION, 0);
 8006c9a:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <draw_info+0x88>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f002 fd69 	bl	8009778 <ssd1306_print_next>

    ssd1306_print(3, 0, __TIME__, 0);
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4a10      	ldr	r2, [pc, #64]	; (8006cec <draw_info+0x8c>)
 8006caa:	2100      	movs	r1, #0
 8006cac:	2003      	movs	r0, #3
 8006cae:	f002 fd04 	bl	80096ba <ssd1306_print>
    ssd1306_print(4, 0, __DATE__, 0);
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4a0e      	ldr	r2, [pc, #56]	; (8006cf0 <draw_info+0x90>)
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	2004      	movs	r0, #4
 8006cba:	f002 fcfe 	bl	80096ba <ssd1306_print>

    ssd1306_print(7, 0, "(C)2021 Feruz Topalov", 0);
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	4a0c      	ldr	r2, [pc, #48]	; (8006cf4 <draw_info+0x94>)
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	2007      	movs	r0, #7
 8006cc6:	f002 fcf8 	bl	80096ba <ssd1306_print>

    ssd1306_update();
 8006cca:	f002 fbc5 	bl	8009458 <ssd1306_update>
}
 8006cce:	bf00      	nop
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	0800e6ac 	.word	0x0800e6ac
 8006cd8:	0800d15c 	.word	0x0800d15c
 8006cdc:	0800d168 	.word	0x0800d168
 8006ce0:	20000014 	.word	0x20000014
 8006ce4:	0800cfe0 	.word	0x0800cfe0
 8006ce8:	20000010 	.word	0x20000010
 8006cec:	0800d170 	.word	0x0800d170
 8006cf0:	0800d17c 	.word	0x0800d17c
 8006cf4:	0800d188 	.word	0x0800d188

08006cf8 <draw_edit_settings>:



//EDIT SETTINGS
void draw_edit_settings(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
    #define EDIT_SETTINGS_ROW               (1)
    #define EDIT_SETTINGS_COL               (1)
    #define EDIT_SETTINGS_PARAM_COL         (15)
    
    ssd1306_clear();
 8006cfc:	f002 fbd6 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, EDIT_SETTINGS_COL + 1, "EDIT SETTINGS", 0);
 8006d00:	2300      	movs	r3, #0
 8006d02:	4a57      	ldr	r2, [pc, #348]	; (8006e60 <draw_edit_settings+0x168>)
 8006d04:	2102      	movs	r1, #2
 8006d06:	2000      	movs	r0, #0
 8006d08:	f002 fcd7 	bl	80096ba <ssd1306_print>
    
    ssd1306_print(EDIT_SETTINGS_ROW, EDIT_SETTINGS_COL, "Device number", 0);
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4a55      	ldr	r2, [pc, #340]	; (8006e64 <draw_edit_settings+0x16c>)
 8006d10:	2101      	movs	r1, #1
 8006d12:	2001      	movs	r0, #1
 8006d14:	f002 fcd1 	bl	80096ba <ssd1306_print>
    itoa32(settings_copy.device_number, &buf[0]);
 8006d18:	4b53      	ldr	r3, [pc, #332]	; (8006e68 <draw_edit_settings+0x170>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	4953      	ldr	r1, [pc, #332]	; (8006e6c <draw_edit_settings+0x174>)
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 febe 	bl	8008aa0 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006d24:	2300      	movs	r3, #0
 8006d26:	4a51      	ldr	r2, [pc, #324]	; (8006e6c <draw_edit_settings+0x174>)
 8006d28:	210f      	movs	r1, #15
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	f002 fcc5 	bl	80096ba <ssd1306_print>
    
    ssd1306_print(EDIT_SETTINGS_ROW + 1, EDIT_SETTINGS_COL, "Device ID", 0);
 8006d30:	2300      	movs	r3, #0
 8006d32:	4a4f      	ldr	r2, [pc, #316]	; (8006e70 <draw_edit_settings+0x178>)
 8006d34:	2101      	movs	r1, #1
 8006d36:	2002      	movs	r0, #2
 8006d38:	f002 fcbf 	bl	80096ba <ssd1306_print>
    buf[0] = settings_copy.device_id[0];
 8006d3c:	4b4a      	ldr	r3, [pc, #296]	; (8006e68 <draw_edit_settings+0x170>)
 8006d3e:	785a      	ldrb	r2, [r3, #1]
 8006d40:	4b4a      	ldr	r3, [pc, #296]	; (8006e6c <draw_edit_settings+0x174>)
 8006d42:	701a      	strb	r2, [r3, #0]
    buf[1] = settings_copy.device_id[1];
 8006d44:	4b48      	ldr	r3, [pc, #288]	; (8006e68 <draw_edit_settings+0x170>)
 8006d46:	789a      	ldrb	r2, [r3, #2]
 8006d48:	4b48      	ldr	r3, [pc, #288]	; (8006e6c <draw_edit_settings+0x174>)
 8006d4a:	705a      	strb	r2, [r3, #1]
    buf[2] = 0;
 8006d4c:	4b47      	ldr	r3, [pc, #284]	; (8006e6c <draw_edit_settings+0x174>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	709a      	strb	r2, [r3, #2]
    ssd1306_print(EDIT_SETTINGS_ROW + 1, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006d52:	2300      	movs	r3, #0
 8006d54:	4a45      	ldr	r2, [pc, #276]	; (8006e6c <draw_edit_settings+0x174>)
 8006d56:	210f      	movs	r1, #15
 8006d58:	2002      	movs	r0, #2
 8006d5a:	f002 fcae 	bl	80096ba <ssd1306_print>
    
    ssd1306_print(EDIT_SETTINGS_ROW + 2, EDIT_SETTINGS_COL, "Freq channel", 0);
 8006d5e:	2300      	movs	r3, #0
 8006d60:	4a44      	ldr	r2, [pc, #272]	; (8006e74 <draw_edit_settings+0x17c>)
 8006d62:	2101      	movs	r1, #1
 8006d64:	2003      	movs	r0, #3
 8006d66:	f002 fca8 	bl	80096ba <ssd1306_print>
    itoa32(settings_copy.freq_channel, &buf[0]);
 8006d6a:	4b3f      	ldr	r3, [pc, #252]	; (8006e68 <draw_edit_settings+0x170>)
 8006d6c:	78db      	ldrb	r3, [r3, #3]
 8006d6e:	493f      	ldr	r1, [pc, #252]	; (8006e6c <draw_edit_settings+0x174>)
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 fe95 	bl	8008aa0 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW + 2, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006d76:	2300      	movs	r3, #0
 8006d78:	4a3c      	ldr	r2, [pc, #240]	; (8006e6c <draw_edit_settings+0x174>)
 8006d7a:	210f      	movs	r1, #15
 8006d7c:	2003      	movs	r0, #3
 8006d7e:	f002 fc9c 	bl	80096ba <ssd1306_print>
    
    ssd1306_print(EDIT_SETTINGS_ROW + 3, EDIT_SETTINGS_COL, "TX power", 0);
 8006d82:	2300      	movs	r3, #0
 8006d84:	4a3c      	ldr	r2, [pc, #240]	; (8006e78 <draw_edit_settings+0x180>)
 8006d86:	2101      	movs	r1, #1
 8006d88:	2004      	movs	r0, #4
 8006d8a:	f002 fc96 	bl	80096ba <ssd1306_print>
    itoa32(p_get_tx_power_values[settings_copy.tx_power_opt], &buf[0]);
 8006d8e:	4b3b      	ldr	r3, [pc, #236]	; (8006e7c <draw_edit_settings+0x184>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a35      	ldr	r2, [pc, #212]	; (8006e68 <draw_edit_settings+0x170>)
 8006d94:	7912      	ldrb	r2, [r2, #4]
 8006d96:	4413      	add	r3, r2
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	4934      	ldr	r1, [pc, #208]	; (8006e6c <draw_edit_settings+0x174>)
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f001 fe7f 	bl	8008aa0 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW + 3, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006da2:	2300      	movs	r3, #0
 8006da4:	4a31      	ldr	r2, [pc, #196]	; (8006e6c <draw_edit_settings+0x174>)
 8006da6:	210f      	movs	r1, #15
 8006da8:	2004      	movs	r0, #4
 8006daa:	f002 fc86 	bl	80096ba <ssd1306_print>
    ssd1306_print_next(" mW", 0);
 8006dae:	2100      	movs	r1, #0
 8006db0:	4833      	ldr	r0, [pc, #204]	; (8006e80 <draw_edit_settings+0x188>)
 8006db2:	f002 fce1 	bl	8009778 <ssd1306_print_next>
    
    ssd1306_print(EDIT_SETTINGS_ROW + 4, EDIT_SETTINGS_COL, "Send interval", 0);
 8006db6:	2300      	movs	r3, #0
 8006db8:	4a32      	ldr	r2, [pc, #200]	; (8006e84 <draw_edit_settings+0x18c>)
 8006dba:	2101      	movs	r1, #1
 8006dbc:	2005      	movs	r0, #5
 8006dbe:	f002 fc7c 	bl	80096ba <ssd1306_print>
    itoa32(p_send_interval_values[settings_copy.send_interval_opt], &buf[0]);
 8006dc2:	4b31      	ldr	r3, [pc, #196]	; (8006e88 <draw_edit_settings+0x190>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a28      	ldr	r2, [pc, #160]	; (8006e68 <draw_edit_settings+0x170>)
 8006dc8:	7952      	ldrb	r2, [r2, #5]
 8006dca:	4413      	add	r3, r2
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	4927      	ldr	r1, [pc, #156]	; (8006e6c <draw_edit_settings+0x174>)
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 fe65 	bl	8008aa0 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW + 4, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4a24      	ldr	r2, [pc, #144]	; (8006e6c <draw_edit_settings+0x174>)
 8006dda:	210f      	movs	r1, #15
 8006ddc:	2005      	movs	r0, #5
 8006dde:	f002 fc6c 	bl	80096ba <ssd1306_print>
    ssd1306_print_next(" s", 0);
 8006de2:	2100      	movs	r1, #0
 8006de4:	4829      	ldr	r0, [pc, #164]	; (8006e8c <draw_edit_settings+0x194>)
 8006de6:	f002 fcc7 	bl	8009778 <ssd1306_print_next>

    ssd1306_print(EDIT_SETTINGS_ROW + 5, EDIT_SETTINGS_COL, "Timeout thr", 0);
 8006dea:	2300      	movs	r3, #0
 8006dec:	4a28      	ldr	r2, [pc, #160]	; (8006e90 <draw_edit_settings+0x198>)
 8006dee:	2101      	movs	r1, #1
 8006df0:	2006      	movs	r0, #6
 8006df2:	f002 fc62 	bl	80096ba <ssd1306_print>
    itoa32(settings_copy.timeout_threshold.as_integer, &buf[0]);
 8006df6:	4b1c      	ldr	r3, [pc, #112]	; (8006e68 <draw_edit_settings+0x170>)
 8006df8:	88db      	ldrh	r3, [r3, #6]
 8006dfa:	491c      	ldr	r1, [pc, #112]	; (8006e6c <draw_edit_settings+0x174>)
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 fe4f 	bl	8008aa0 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW + 5, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006e02:	2300      	movs	r3, #0
 8006e04:	4a19      	ldr	r2, [pc, #100]	; (8006e6c <draw_edit_settings+0x174>)
 8006e06:	210f      	movs	r1, #15
 8006e08:	2006      	movs	r0, #6
 8006e0a:	f002 fc56 	bl	80096ba <ssd1306_print>
    ssd1306_print_next(" s", 0);
 8006e0e:	2100      	movs	r1, #0
 8006e10:	481e      	ldr	r0, [pc, #120]	; (8006e8c <draw_edit_settings+0x194>)
 8006e12:	f002 fcb1 	bl	8009778 <ssd1306_print_next>

    ssd1306_print(EDIT_SETTINGS_ROW + 6, EDIT_SETTINGS_COL, "Fence thr", 0);
 8006e16:	2300      	movs	r3, #0
 8006e18:	4a1e      	ldr	r2, [pc, #120]	; (8006e94 <draw_edit_settings+0x19c>)
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	2007      	movs	r0, #7
 8006e1e:	f002 fc4c 	bl	80096ba <ssd1306_print>
    itoa32(settings_copy.fence_threshold.as_integer, &buf[0]);
 8006e22:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <draw_edit_settings+0x170>)
 8006e24:	891b      	ldrh	r3, [r3, #8]
 8006e26:	4911      	ldr	r1, [pc, #68]	; (8006e6c <draw_edit_settings+0x174>)
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 fe39 	bl	8008aa0 <itoa32>
    ssd1306_print(EDIT_SETTINGS_ROW + 6, EDIT_SETTINGS_PARAM_COL, &buf[0], 0);
 8006e2e:	2300      	movs	r3, #0
 8006e30:	4a0e      	ldr	r2, [pc, #56]	; (8006e6c <draw_edit_settings+0x174>)
 8006e32:	210f      	movs	r1, #15
 8006e34:	2007      	movs	r0, #7
 8006e36:	f002 fc40 	bl	80096ba <ssd1306_print>
    ssd1306_print_next(" m", 0);
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	4816      	ldr	r0, [pc, #88]	; (8006e98 <draw_edit_settings+0x1a0>)
 8006e3e:	f002 fc9b 	bl	8009778 <ssd1306_print_next>

    ssd1306_print(EDIT_SETTINGS_ROW + get_current_item(), EDIT_SETTINGS_COL - 1, ">", 0);
 8006e42:	f7fd fabb 	bl	80043bc <get_current_item>
 8006e46:	4603      	mov	r3, r0
 8006e48:	3301      	adds	r3, #1
 8006e4a:	b2d8      	uxtb	r0, r3
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4a13      	ldr	r2, [pc, #76]	; (8006e9c <draw_edit_settings+0x1a4>)
 8006e50:	2100      	movs	r1, #0
 8006e52:	f002 fc32 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 8006e56:	f002 faff 	bl	8009458 <ssd1306_update>
}
 8006e5a:	bf00      	nop
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	0800d1a0 	.word	0x0800d1a0
 8006e64:	0800d1b0 	.word	0x0800d1b0
 8006e68:	200007e0 	.word	0x200007e0
 8006e6c:	20000810 	.word	0x20000810
 8006e70:	0800d1c0 	.word	0x0800d1c0
 8006e74:	0800d1cc 	.word	0x0800d1cc
 8006e78:	0800d1dc 	.word	0x0800d1dc
 8006e7c:	2000080c 	.word	0x2000080c
 8006e80:	0800d1e8 	.word	0x0800d1e8
 8006e84:	0800d1ec 	.word	0x0800d1ec
 8006e88:	200007cc 	.word	0x200007cc
 8006e8c:	0800d1fc 	.word	0x0800d1fc
 8006e90:	0800d200 	.word	0x0800d200
 8006e94:	0800d20c 	.word	0x0800d20c
 8006e98:	0800d218 	.word	0x0800d218
 8006e9c:	0800cf74 	.word	0x0800cf74

08006ea0 <draw_set_dev_num>:



//SET DEV NUM
void draw_set_dev_num(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
    #define SET_DEV_NUM_ROW                 (2)
    #define SET_DEV_NUM_COL                 (1)
    #define SET_DEV_NUM_PARAM_COL           (15)
    
    ssd1306_clear();
 8006ea4:	f002 fb02 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, SET_DEV_NUM_COL, "SET DEV NUM", 0);
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4a10      	ldr	r2, [pc, #64]	; (8006eec <draw_set_dev_num+0x4c>)
 8006eac:	2101      	movs	r1, #1
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f002 fc03 	bl	80096ba <ssd1306_print>
    
    ssd1306_print(SET_DEV_NUM_ROW, SET_DEV_NUM_COL, "Device number", 0);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4a0e      	ldr	r2, [pc, #56]	; (8006ef0 <draw_set_dev_num+0x50>)
 8006eb8:	2101      	movs	r1, #1
 8006eba:	2002      	movs	r0, #2
 8006ebc:	f002 fbfd 	bl	80096ba <ssd1306_print>
    itoa32(settings_copy.device_number, &buf[0]);
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <draw_set_dev_num+0x54>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	490c      	ldr	r1, [pc, #48]	; (8006ef8 <draw_set_dev_num+0x58>)
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fdea 	bl	8008aa0 <itoa32>
    ssd1306_print(SET_DEV_NUM_ROW, SET_DEV_NUM_PARAM_COL, &buf[0], 0);
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <draw_set_dev_num+0x58>)
 8006ed0:	210f      	movs	r1, #15
 8006ed2:	2002      	movs	r0, #2
 8006ed4:	f002 fbf1 	bl	80096ba <ssd1306_print>
    ssd1306_print(SET_DEV_NUM_ROW + 1, SET_DEV_NUM_PARAM_COL, "^", 0);
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4a08      	ldr	r2, [pc, #32]	; (8006efc <draw_set_dev_num+0x5c>)
 8006edc:	210f      	movs	r1, #15
 8006ede:	2003      	movs	r0, #3
 8006ee0:	f002 fbeb 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 8006ee4:	f002 fab8 	bl	8009458 <ssd1306_update>
}
 8006ee8:	bf00      	nop
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	0800d21c 	.word	0x0800d21c
 8006ef0:	0800d1b0 	.word	0x0800d1b0
 8006ef4:	200007e0 	.word	0x200007e0
 8006ef8:	20000810 	.word	0x20000810
 8006efc:	0800d0c0 	.word	0x0800d0c0

08006f00 <draw_set_dev_id>:



//SET DEV ID
void draw_set_dev_id(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
    #define SET_DEV_ID_ROW                 (2)
    #define SET_DEV_ID_COL                 (1)
    #define SET_DEV_ID_PARAM_COL           (15)
    
    ssd1306_clear();
 8006f04:	f002 fad2 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, SET_DEV_NUM_COL, "SET DEV ID", 0);
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <draw_set_dev_id+0x68>)
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	2000      	movs	r0, #0
 8006f10:	f002 fbd3 	bl	80096ba <ssd1306_print>
    
    ssd1306_print(SET_DEV_ID_ROW, SET_DEV_ID_COL, "Device ID", 0);
 8006f14:	2300      	movs	r3, #0
 8006f16:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <draw_set_dev_id+0x6c>)
 8006f18:	2101      	movs	r1, #1
 8006f1a:	2002      	movs	r0, #2
 8006f1c:	f002 fbcd 	bl	80096ba <ssd1306_print>
    buf[0] = settings_copy.device_id[0];
 8006f20:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <draw_set_dev_id+0x70>)
 8006f22:	785a      	ldrb	r2, [r3, #1]
 8006f24:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <draw_set_dev_id+0x74>)
 8006f26:	701a      	strb	r2, [r3, #0]
    buf[1] = settings_copy.device_id[1];
 8006f28:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <draw_set_dev_id+0x70>)
 8006f2a:	789a      	ldrb	r2, [r3, #2]
 8006f2c:	4b11      	ldr	r3, [pc, #68]	; (8006f74 <draw_set_dev_id+0x74>)
 8006f2e:	705a      	strb	r2, [r3, #1]
    buf[2] = 0;
 8006f30:	4b10      	ldr	r3, [pc, #64]	; (8006f74 <draw_set_dev_id+0x74>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	709a      	strb	r2, [r3, #2]
    ssd1306_print(SET_DEV_ID_ROW, SET_DEV_ID_PARAM_COL, &buf[0], 0);
 8006f36:	2300      	movs	r3, #0
 8006f38:	4a0e      	ldr	r2, [pc, #56]	; (8006f74 <draw_set_dev_id+0x74>)
 8006f3a:	210f      	movs	r1, #15
 8006f3c:	2002      	movs	r0, #2
 8006f3e:	f002 fbbc 	bl	80096ba <ssd1306_print>
    ssd1306_print(SET_DEV_ID_ROW + 1, SET_DEV_ID_PARAM_COL + device_id_current_symbol, "^", 0);
 8006f42:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <draw_set_dev_id+0x78>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	330f      	adds	r3, #15
 8006f48:	b2d9      	uxtb	r1, r3
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	4a0b      	ldr	r2, [pc, #44]	; (8006f7c <draw_set_dev_id+0x7c>)
 8006f4e:	2003      	movs	r0, #3
 8006f50:	f002 fbb3 	bl	80096ba <ssd1306_print>
    ssd1306_print(SET_DEV_ID_ROW + 3, SET_DEV_ID_COL, "Long OK - apply", 0);
 8006f54:	2300      	movs	r3, #0
 8006f56:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <draw_set_dev_id+0x80>)
 8006f58:	2101      	movs	r1, #1
 8006f5a:	2005      	movs	r0, #5
 8006f5c:	f002 fbad 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 8006f60:	f002 fa7a 	bl	8009458 <ssd1306_update>
}
 8006f64:	bf00      	nop
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	0800d228 	.word	0x0800d228
 8006f6c:	0800d1c0 	.word	0x0800d1c0
 8006f70:	200007e0 	.word	0x200007e0
 8006f74:	20000810 	.word	0x20000810
 8006f78:	2000011f 	.word	0x2000011f
 8006f7c:	0800d0c0 	.word	0x0800d0c0
 8006f80:	0800d234 	.word	0x0800d234

08006f84 <draw_set_freq_ch>:



//SET FREQ CH
void draw_set_freq_ch(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
    #define SET_FREQ_CH_ROW         (2)
    #define SET_FREQ_CH_COL         (1)
    #define SET_FREQ_CH_PARAM_COL   (16)
    
    ssd1306_clear();
 8006f88:	f002 fa90 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, SET_FREQ_CH_COL, "SET FREQ CH", 0);
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	4a10      	ldr	r2, [pc, #64]	; (8006fd0 <draw_set_freq_ch+0x4c>)
 8006f90:	2101      	movs	r1, #1
 8006f92:	2000      	movs	r0, #0
 8006f94:	f002 fb91 	bl	80096ba <ssd1306_print>
    
    ssd1306_print(SET_FREQ_CH_ROW, SET_FREQ_CH_COL, "Freq channel", 0);
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4a0e      	ldr	r2, [pc, #56]	; (8006fd4 <draw_set_freq_ch+0x50>)
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	2002      	movs	r0, #2
 8006fa0:	f002 fb8b 	bl	80096ba <ssd1306_print>
    itoa32(settings_copy.freq_channel, &buf[0]);
 8006fa4:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <draw_set_freq_ch+0x54>)
 8006fa6:	78db      	ldrb	r3, [r3, #3]
 8006fa8:	490c      	ldr	r1, [pc, #48]	; (8006fdc <draw_set_freq_ch+0x58>)
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 fd78 	bl	8008aa0 <itoa32>
    ssd1306_print_viceversa(SET_FREQ_CH_ROW, SET_FREQ_CH_PARAM_COL, &buf[0], 0);
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4a0a      	ldr	r2, [pc, #40]	; (8006fdc <draw_set_freq_ch+0x58>)
 8006fb4:	2110      	movs	r1, #16
 8006fb6:	2002      	movs	r0, #2
 8006fb8:	f002 fba2 	bl	8009700 <ssd1306_print_viceversa>
    ssd1306_print(SET_FREQ_CH_ROW + 1, SET_FREQ_CH_PARAM_COL, "^", 0);
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4a08      	ldr	r2, [pc, #32]	; (8006fe0 <draw_set_freq_ch+0x5c>)
 8006fc0:	2110      	movs	r1, #16
 8006fc2:	2003      	movs	r0, #3
 8006fc4:	f002 fb79 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 8006fc8:	f002 fa46 	bl	8009458 <ssd1306_update>
}
 8006fcc:	bf00      	nop
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	0800d244 	.word	0x0800d244
 8006fd4:	0800d1cc 	.word	0x0800d1cc
 8006fd8:	200007e0 	.word	0x200007e0
 8006fdc:	20000810 	.word	0x20000810
 8006fe0:	0800d0c0 	.word	0x0800d0c0

08006fe4 <draw_set_tx_pow>:



//SET TX POW
void draw_set_tx_pow(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
    #define SET_TX_POW_ROW          (2)
    #define SET_TX_POW_COL          (1)
    #define SET_TX_POW_PARAM_COL    (15)
    
    ssd1306_clear();
 8006fe8:	f002 fa60 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, SET_TX_POW_COL, "SET TX POW", 0);
 8006fec:	2300      	movs	r3, #0
 8006fee:	4a14      	ldr	r2, [pc, #80]	; (8007040 <draw_set_tx_pow+0x5c>)
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f002 fb61 	bl	80096ba <ssd1306_print>
    
    ssd1306_print(SET_TX_POW_ROW, SET_TX_POW_COL, "TX power", 0);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4a12      	ldr	r2, [pc, #72]	; (8007044 <draw_set_tx_pow+0x60>)
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	2002      	movs	r0, #2
 8007000:	f002 fb5b 	bl	80096ba <ssd1306_print>
    itoa32(p_get_tx_power_values[settings_copy.tx_power_opt], &buf[0]);
 8007004:	4b10      	ldr	r3, [pc, #64]	; (8007048 <draw_set_tx_pow+0x64>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a10      	ldr	r2, [pc, #64]	; (800704c <draw_set_tx_pow+0x68>)
 800700a:	7912      	ldrb	r2, [r2, #4]
 800700c:	4413      	add	r3, r2
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	490f      	ldr	r1, [pc, #60]	; (8007050 <draw_set_tx_pow+0x6c>)
 8007012:	4618      	mov	r0, r3
 8007014:	f001 fd44 	bl	8008aa0 <itoa32>
    ssd1306_print(SET_TX_POW_ROW, SET_TX_POW_PARAM_COL, &buf[0], 0);
 8007018:	2300      	movs	r3, #0
 800701a:	4a0d      	ldr	r2, [pc, #52]	; (8007050 <draw_set_tx_pow+0x6c>)
 800701c:	210f      	movs	r1, #15
 800701e:	2002      	movs	r0, #2
 8007020:	f002 fb4b 	bl	80096ba <ssd1306_print>
    ssd1306_print_next(" mW", 0);
 8007024:	2100      	movs	r1, #0
 8007026:	480b      	ldr	r0, [pc, #44]	; (8007054 <draw_set_tx_pow+0x70>)
 8007028:	f002 fba6 	bl	8009778 <ssd1306_print_next>
    ssd1306_print(SET_TX_POW_ROW + 1, SET_TX_POW_PARAM_COL, "^", 0);
 800702c:	2300      	movs	r3, #0
 800702e:	4a0a      	ldr	r2, [pc, #40]	; (8007058 <draw_set_tx_pow+0x74>)
 8007030:	210f      	movs	r1, #15
 8007032:	2003      	movs	r0, #3
 8007034:	f002 fb41 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 8007038:	f002 fa0e 	bl	8009458 <ssd1306_update>
}
 800703c:	bf00      	nop
 800703e:	bd80      	pop	{r7, pc}
 8007040:	0800d250 	.word	0x0800d250
 8007044:	0800d1dc 	.word	0x0800d1dc
 8007048:	2000080c 	.word	0x2000080c
 800704c:	200007e0 	.word	0x200007e0
 8007050:	20000810 	.word	0x20000810
 8007054:	0800d1e8 	.word	0x0800d1e8
 8007058:	0800d0c0 	.word	0x0800d0c0

0800705c <draw_set_send_intvl>:



//SET SEND INTRVL
void draw_set_send_intvl(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
    #define SET_SEND_INTVL_ROW                 (2)
    #define SET_SEND_INTVL_COL                 (1)
    #define SET_SEND_INTVL_PARAM_COL           (16)

    ssd1306_clear();
 8007060:	f002 fa24 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, SET_SEND_INTVL_COL, "SET SEND INTVL", 0);
 8007064:	2300      	movs	r3, #0
 8007066:	4a14      	ldr	r2, [pc, #80]	; (80070b8 <draw_set_send_intvl+0x5c>)
 8007068:	2101      	movs	r1, #1
 800706a:	2000      	movs	r0, #0
 800706c:	f002 fb25 	bl	80096ba <ssd1306_print>

    ssd1306_print(SET_SEND_INTVL_ROW, SET_SEND_INTVL_COL, "Send interval", 0);
 8007070:	2300      	movs	r3, #0
 8007072:	4a12      	ldr	r2, [pc, #72]	; (80070bc <draw_set_send_intvl+0x60>)
 8007074:	2101      	movs	r1, #1
 8007076:	2002      	movs	r0, #2
 8007078:	f002 fb1f 	bl	80096ba <ssd1306_print>
    itoa32(p_send_interval_values[settings_copy.send_interval_opt], &buf[0]);
 800707c:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <draw_set_send_intvl+0x64>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a10      	ldr	r2, [pc, #64]	; (80070c4 <draw_set_send_intvl+0x68>)
 8007082:	7952      	ldrb	r2, [r2, #5]
 8007084:	4413      	add	r3, r2
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	490f      	ldr	r1, [pc, #60]	; (80070c8 <draw_set_send_intvl+0x6c>)
 800708a:	4618      	mov	r0, r3
 800708c:	f001 fd08 	bl	8008aa0 <itoa32>
    ssd1306_print(SET_SEND_INTVL_ROW, SET_SEND_INTVL_PARAM_COL, &buf[0], 0);
 8007090:	2300      	movs	r3, #0
 8007092:	4a0d      	ldr	r2, [pc, #52]	; (80070c8 <draw_set_send_intvl+0x6c>)
 8007094:	2110      	movs	r1, #16
 8007096:	2002      	movs	r0, #2
 8007098:	f002 fb0f 	bl	80096ba <ssd1306_print>
    ssd1306_print_next(" s", 0);
 800709c:	2100      	movs	r1, #0
 800709e:	480b      	ldr	r0, [pc, #44]	; (80070cc <draw_set_send_intvl+0x70>)
 80070a0:	f002 fb6a 	bl	8009778 <ssd1306_print_next>
    ssd1306_print(SET_SEND_INTVL_ROW + 1, SET_SEND_INTVL_PARAM_COL, "^", 0);
 80070a4:	2300      	movs	r3, #0
 80070a6:	4a0a      	ldr	r2, [pc, #40]	; (80070d0 <draw_set_send_intvl+0x74>)
 80070a8:	2110      	movs	r1, #16
 80070aa:	2003      	movs	r0, #3
 80070ac:	f002 fb05 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 80070b0:	f002 f9d2 	bl	8009458 <ssd1306_update>
}
 80070b4:	bf00      	nop
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	0800d25c 	.word	0x0800d25c
 80070bc:	0800d1ec 	.word	0x0800d1ec
 80070c0:	200007cc 	.word	0x200007cc
 80070c4:	200007e0 	.word	0x200007e0
 80070c8:	20000810 	.word	0x20000810
 80070cc:	0800d1fc 	.word	0x0800d1fc
 80070d0:	0800d0c0 	.word	0x0800d0c0

080070d4 <draw_set_to_thr>:



//SET TIMEOUT THR
void draw_set_to_thr(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
    #define SET_TO_THR_ROW                 (2)
    #define SET_TO_THR_COL                 (1)
    #define SET_TO_THR_PARAM_COL           (14)

    ssd1306_clear();
 80070d8:	f002 f9e8 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, SET_TO_THR_COL, "SET TO THR", 0);
 80070dc:	2300      	movs	r3, #0
 80070de:	4a12      	ldr	r2, [pc, #72]	; (8007128 <draw_set_to_thr+0x54>)
 80070e0:	2101      	movs	r1, #1
 80070e2:	2000      	movs	r0, #0
 80070e4:	f002 fae9 	bl	80096ba <ssd1306_print>

    ssd1306_print(SET_TO_THR_ROW, SET_TO_THR_COL, "Timeout thr", 0);
 80070e8:	2300      	movs	r3, #0
 80070ea:	4a10      	ldr	r2, [pc, #64]	; (800712c <draw_set_to_thr+0x58>)
 80070ec:	2101      	movs	r1, #1
 80070ee:	2002      	movs	r0, #2
 80070f0:	f002 fae3 	bl	80096ba <ssd1306_print>
    itoa32(settings_copy.timeout_threshold.as_integer, &buf[0]);
 80070f4:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <draw_set_to_thr+0x5c>)
 80070f6:	88db      	ldrh	r3, [r3, #6]
 80070f8:	490e      	ldr	r1, [pc, #56]	; (8007134 <draw_set_to_thr+0x60>)
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 fcd0 	bl	8008aa0 <itoa32>
    ssd1306_print(SET_TO_THR_ROW, SET_TO_THR_PARAM_COL, &buf[0], 0);
 8007100:	2300      	movs	r3, #0
 8007102:	4a0c      	ldr	r2, [pc, #48]	; (8007134 <draw_set_to_thr+0x60>)
 8007104:	210e      	movs	r1, #14
 8007106:	2002      	movs	r0, #2
 8007108:	f002 fad7 	bl	80096ba <ssd1306_print>
    ssd1306_print_next(" s", 0);
 800710c:	2100      	movs	r1, #0
 800710e:	480a      	ldr	r0, [pc, #40]	; (8007138 <draw_set_to_thr+0x64>)
 8007110:	f002 fb32 	bl	8009778 <ssd1306_print_next>
    ssd1306_print(SET_TO_THR_ROW + 1, SET_TO_THR_PARAM_COL, "^", 0);
 8007114:	2300      	movs	r3, #0
 8007116:	4a09      	ldr	r2, [pc, #36]	; (800713c <draw_set_to_thr+0x68>)
 8007118:	210e      	movs	r1, #14
 800711a:	2003      	movs	r0, #3
 800711c:	f002 facd 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 8007120:	f002 f99a 	bl	8009458 <ssd1306_update>
}
 8007124:	bf00      	nop
 8007126:	bd80      	pop	{r7, pc}
 8007128:	0800d26c 	.word	0x0800d26c
 800712c:	0800d200 	.word	0x0800d200
 8007130:	200007e0 	.word	0x200007e0
 8007134:	20000810 	.word	0x20000810
 8007138:	0800d1fc 	.word	0x0800d1fc
 800713c:	0800d0c0 	.word	0x0800d0c0

08007140 <draw_set_fnc_thr>:



//SET TIMEOUT THR
void draw_set_fnc_thr(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
    #define SET_FNC_THR_ROW                 (2)
    #define SET_FNC_THR_COL                 (1)
    #define SET_FNC_THR_PARAM_COL           (14)

    ssd1306_clear();
 8007144:	f002 f9b2 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, SET_FNC_THR_COL, "SET FNC THR", 0);
 8007148:	2300      	movs	r3, #0
 800714a:	4a12      	ldr	r2, [pc, #72]	; (8007194 <draw_set_fnc_thr+0x54>)
 800714c:	2101      	movs	r1, #1
 800714e:	2000      	movs	r0, #0
 8007150:	f002 fab3 	bl	80096ba <ssd1306_print>

    ssd1306_print(SET_FNC_THR_ROW, SET_FNC_THR_COL, "Fence thr", 0);
 8007154:	2300      	movs	r3, #0
 8007156:	4a10      	ldr	r2, [pc, #64]	; (8007198 <draw_set_fnc_thr+0x58>)
 8007158:	2101      	movs	r1, #1
 800715a:	2002      	movs	r0, #2
 800715c:	f002 faad 	bl	80096ba <ssd1306_print>
    itoa32(settings_copy.fence_threshold.as_integer, &buf[0]);
 8007160:	4b0e      	ldr	r3, [pc, #56]	; (800719c <draw_set_fnc_thr+0x5c>)
 8007162:	891b      	ldrh	r3, [r3, #8]
 8007164:	490e      	ldr	r1, [pc, #56]	; (80071a0 <draw_set_fnc_thr+0x60>)
 8007166:	4618      	mov	r0, r3
 8007168:	f001 fc9a 	bl	8008aa0 <itoa32>
    ssd1306_print(SET_FNC_THR_ROW, SET_FNC_THR_PARAM_COL, &buf[0], 0);
 800716c:	2300      	movs	r3, #0
 800716e:	4a0c      	ldr	r2, [pc, #48]	; (80071a0 <draw_set_fnc_thr+0x60>)
 8007170:	210e      	movs	r1, #14
 8007172:	2002      	movs	r0, #2
 8007174:	f002 faa1 	bl	80096ba <ssd1306_print>
    ssd1306_print_next(" m", 0);
 8007178:	2100      	movs	r1, #0
 800717a:	480a      	ldr	r0, [pc, #40]	; (80071a4 <draw_set_fnc_thr+0x64>)
 800717c:	f002 fafc 	bl	8009778 <ssd1306_print_next>
    ssd1306_print(SET_FNC_THR_ROW + 1, SET_FNC_THR_PARAM_COL, "^", 0);
 8007180:	2300      	movs	r3, #0
 8007182:	4a09      	ldr	r2, [pc, #36]	; (80071a8 <draw_set_fnc_thr+0x68>)
 8007184:	210e      	movs	r1, #14
 8007186:	2003      	movs	r0, #3
 8007188:	f002 fa97 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 800718c:	f002 f964 	bl	8009458 <ssd1306_update>
}
 8007190:	bf00      	nop
 8007192:	bd80      	pop	{r7, pc}
 8007194:	0800d278 	.word	0x0800d278
 8007198:	0800d20c 	.word	0x0800d20c
 800719c:	200007e0 	.word	0x200007e0
 80071a0:	20000810 	.word	0x20000810
 80071a4:	0800d218 	.word	0x0800d218
 80071a8:	0800d0c0 	.word	0x0800d0c0

080071ac <draw_confirm_settings_save>:



//CONFIRM SETTINGS SAVE
void draw_confirm_settings_save(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
    if (flag_settings_changed)
 80071b0:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <draw_confirm_settings_save+0x48>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d016      	beq.n	80071e6 <draw_confirm_settings_save+0x3a>
    {
        ssd1306_clear();
 80071b8:	f002 f978 	bl	80094ac <ssd1306_clear>
        ssd1306_print(0, 1, "Settings changed", 0);
 80071bc:	2300      	movs	r3, #0
 80071be:	4a0e      	ldr	r2, [pc, #56]	; (80071f8 <draw_confirm_settings_save+0x4c>)
 80071c0:	2101      	movs	r1, #1
 80071c2:	2000      	movs	r0, #0
 80071c4:	f002 fa79 	bl	80096ba <ssd1306_print>
        ssd1306_print(3, 1, "OK - save & restart", 0);
 80071c8:	2300      	movs	r3, #0
 80071ca:	4a0c      	ldr	r2, [pc, #48]	; (80071fc <draw_confirm_settings_save+0x50>)
 80071cc:	2101      	movs	r1, #1
 80071ce:	2003      	movs	r0, #3
 80071d0:	f002 fa73 	bl	80096ba <ssd1306_print>
        ssd1306_print(4, 1, "ESC - cancel changes", 0);
 80071d4:	2300      	movs	r3, #0
 80071d6:	4a0a      	ldr	r2, [pc, #40]	; (8007200 <draw_confirm_settings_save+0x54>)
 80071d8:	2101      	movs	r1, #1
 80071da:	2004      	movs	r0, #4
 80071dc:	f002 fa6d 	bl	80096ba <ssd1306_print>
        ssd1306_update();
 80071e0:	f002 f93a 	bl	8009458 <ssd1306_update>
    else
    {
        current_menu = M_SETTINGS;
        draw_current_menu();
    }
}
 80071e4:	e004      	b.n	80071f0 <draw_confirm_settings_save+0x44>
        current_menu = M_SETTINGS;
 80071e6:	4b07      	ldr	r3, [pc, #28]	; (8007204 <draw_confirm_settings_save+0x58>)
 80071e8:	220e      	movs	r2, #14
 80071ea:	701a      	strb	r2, [r3, #0]
        draw_current_menu();
 80071ec:	f7fd f9a8 	bl	8004540 <draw_current_menu>
}
 80071f0:	bf00      	nop
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	2000011e 	.word	0x2000011e
 80071f8:	0800d284 	.word	0x0800d284
 80071fc:	0800d298 	.word	0x0800d298
 8007200:	0800d2ac 	.word	0x0800d2ac
 8007204:	200007fa 	.word	0x200007fa

08007208 <draw_restore_defaults>:



//RESTORE DEFAULTS
void draw_restore_defaults(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
    ssd1306_clear();
 800720c:	f002 f94e 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, 1, "Restore defaults?", 0);
 8007210:	2300      	movs	r3, #0
 8007212:	4a0a      	ldr	r2, [pc, #40]	; (800723c <draw_restore_defaults+0x34>)
 8007214:	2101      	movs	r1, #1
 8007216:	2000      	movs	r0, #0
 8007218:	f002 fa4f 	bl	80096ba <ssd1306_print>
    ssd1306_print(3, 1, "OK - restore & reset", 0);
 800721c:	2300      	movs	r3, #0
 800721e:	4a08      	ldr	r2, [pc, #32]	; (8007240 <draw_restore_defaults+0x38>)
 8007220:	2101      	movs	r1, #1
 8007222:	2003      	movs	r0, #3
 8007224:	f002 fa49 	bl	80096ba <ssd1306_print>
    ssd1306_print(4, 1, "ESC - cancel", 0);
 8007228:	2300      	movs	r3, #0
 800722a:	4a06      	ldr	r2, [pc, #24]	; (8007244 <draw_restore_defaults+0x3c>)
 800722c:	2101      	movs	r1, #1
 800722e:	2004      	movs	r0, #4
 8007230:	f002 fa43 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 8007234:	f002 f910 	bl	8009458 <ssd1306_update>
}
 8007238:	bf00      	nop
 800723a:	bd80      	pop	{r7, pc}
 800723c:	0800d2c4 	.word	0x0800d2c4
 8007240:	0800d2d8 	.word	0x0800d2d8
 8007244:	0800d078 	.word	0x0800d078

08007248 <draw_erase_all>:



//ERASE ALL
void draw_erase_all(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
    ssd1306_clear();
 800724c:	f002 f92e 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, 1, "Erase all EEPROM?", 0);
 8007250:	2300      	movs	r3, #0
 8007252:	4a0a      	ldr	r2, [pc, #40]	; (800727c <draw_erase_all+0x34>)
 8007254:	2101      	movs	r1, #1
 8007256:	2000      	movs	r0, #0
 8007258:	f002 fa2f 	bl	80096ba <ssd1306_print>
    ssd1306_print(3, 1, "OK - erase & reset", 0);
 800725c:	2300      	movs	r3, #0
 800725e:	4a08      	ldr	r2, [pc, #32]	; (8007280 <draw_erase_all+0x38>)
 8007260:	2101      	movs	r1, #1
 8007262:	2003      	movs	r0, #3
 8007264:	f002 fa29 	bl	80096ba <ssd1306_print>
    ssd1306_print(4, 1, "ESC - cancel", 0);
 8007268:	2300      	movs	r3, #0
 800726a:	4a06      	ldr	r2, [pc, #24]	; (8007284 <draw_erase_all+0x3c>)
 800726c:	2101      	movs	r1, #1
 800726e:	2004      	movs	r0, #4
 8007270:	f002 fa23 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 8007274:	f002 f8f0 	bl	8009458 <ssd1306_update>
}
 8007278:	bf00      	nop
 800727a:	bd80      	pop	{r7, pc}
 800727c:	0800d2f0 	.word	0x0800d2f0
 8007280:	0800d304 	.word	0x0800d304
 8007284:	0800d078 	.word	0x0800d078

08007288 <devices_ok>:



void devices_ok(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
    if (pp_dev_aux[current_each_device]->exist_flag == 0)
 800728c:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <devices_ok+0x2c>)
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <devices_ok+0x30>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <devices_ok+0x1c>
    {
        each_device_up();
 80072a0:	f000 f80e 	bl	80072c0 <each_device_up>
    }
    
    current_menu = M_EACH_DEVICE;
 80072a4:	4b05      	ldr	r3, [pc, #20]	; (80072bc <devices_ok+0x34>)
 80072a6:	2203      	movs	r2, #3
 80072a8:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 80072aa:	f7fd f949 	bl	8004540 <draw_current_menu>
}
 80072ae:	bf00      	nop
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	2000083c 	.word	0x2000083c
 80072b8:	2000002a 	.word	0x2000002a
 80072bc:	200007fa 	.word	0x200007fa

080072c0 <each_device_up>:



void each_device_up(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
    do
    {
        if (current_each_device == DEVICE_NUMBER_FIRST)
 80072c4:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <each_device_up+0x3c>)
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d103      	bne.n	80072d4 <each_device_up+0x14>
        {
            current_each_device = DEVICE_NUMBER_LAST;
 80072cc:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <each_device_up+0x3c>)
 80072ce:	2206      	movs	r2, #6
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	e005      	b.n	80072e0 <each_device_up+0x20>
        }
        else
        {
            current_each_device--;
 80072d4:	4b09      	ldr	r3, [pc, #36]	; (80072fc <each_device_up+0x3c>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	3b01      	subs	r3, #1
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	4b07      	ldr	r3, [pc, #28]	; (80072fc <each_device_up+0x3c>)
 80072de:	701a      	strb	r2, [r3, #0]
        }
    }
    while (pp_dev_aux[current_each_device]->exist_flag == 0);
 80072e0:	4b07      	ldr	r3, [pc, #28]	; (8007300 <each_device_up+0x40>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	4b05      	ldr	r3, [pc, #20]	; (80072fc <each_device_up+0x3c>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0e7      	beq.n	80072c4 <each_device_up+0x4>
    
    draw_current_menu();
 80072f4:	f7fd f924 	bl	8004540 <draw_current_menu>
}
 80072f8:	bf00      	nop
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	2000002a 	.word	0x2000002a
 8007300:	2000083c 	.word	0x2000083c

08007304 <each_device_down>:



void each_device_down(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
    do
    {
        if (current_each_device == DEVICE_NUMBER_LAST)
 8007308:	4b0d      	ldr	r3, [pc, #52]	; (8007340 <each_device_down+0x3c>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b06      	cmp	r3, #6
 800730e:	d103      	bne.n	8007318 <each_device_down+0x14>
        {
            current_each_device = DEVICE_NUMBER_FIRST;
 8007310:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <each_device_down+0x3c>)
 8007312:	2201      	movs	r2, #1
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	e005      	b.n	8007324 <each_device_down+0x20>
        }
        else
        {
            current_each_device++;
 8007318:	4b09      	ldr	r3, [pc, #36]	; (8007340 <each_device_down+0x3c>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	3301      	adds	r3, #1
 800731e:	b2da      	uxtb	r2, r3
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <each_device_down+0x3c>)
 8007322:	701a      	strb	r2, [r3, #0]
        }
    }
    while (pp_dev_aux[current_each_device]->exist_flag == 0);
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <each_device_down+0x40>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	4b05      	ldr	r3, [pc, #20]	; (8007340 <each_device_down+0x3c>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0e7      	beq.n	8007308 <each_device_down+0x4>
    
    draw_current_menu();
 8007338:	f7fd f902 	bl	8004540 <draw_current_menu>
}
 800733c:	bf00      	nop
 800733e:	bd80      	pop	{r7, pc}
 8007340:	2000002a 	.word	0x2000002a
 8007344:	2000083c 	.word	0x2000083c

08007348 <each_device_ok>:



void each_device_ok(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
	current_menu = M_EACH_DEVICE_SUBMENU;
 800734c:	4b03      	ldr	r3, [pc, #12]	; (800735c <each_device_ok+0x14>)
 800734e:	2204      	movs	r2, #4
 8007350:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 8007352:	f7fd f8f5 	bl	8004540 <draw_current_menu>
}
 8007356:	bf00      	nop
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	200007fa 	.word	0x200007fa

08007360 <save_device_up>:



void save_device_up(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
	if (current_slot_to_save != 0)
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <save_device_up+0x44>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d019      	beq.n	80073a0 <save_device_up+0x40>
	{
		do
		{
			if (current_slot_to_save == MEMORY_SLOT_FIRST)
 800736c:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <save_device_up+0x44>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d103      	bne.n	800737c <save_device_up+0x1c>
			{
				current_slot_to_save = MEMORY_SLOT_LAST;
 8007374:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <save_device_up+0x44>)
 8007376:	2205      	movs	r2, #5
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	e005      	b.n	8007388 <save_device_up+0x28>
			}
			else
			{
				current_slot_to_save--;
 800737c:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <save_device_up+0x44>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	3b01      	subs	r3, #1
 8007382:	b2da      	uxtb	r2, r3
 8007384:	4b07      	ldr	r3, [pc, #28]	; (80073a4 <save_device_up+0x44>)
 8007386:	701a      	strb	r2, [r3, #0]
			}
		}
		while (pp_memory_slot[current_slot_to_save]->exist_flag == 1);
 8007388:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <save_device_up+0x48>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <save_device_up+0x44>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d0e7      	beq.n	800736c <save_device_up+0xc>

		draw_current_menu();
 800739c:	f7fd f8d0 	bl	8004540 <draw_current_menu>
	}
}
 80073a0:	bf00      	nop
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000123 	.word	0x20000123
 80073a8:	200007d4 	.word	0x200007d4

080073ac <save_device_down>:



void save_device_down(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	af00      	add	r7, sp, #0
	if (current_slot_to_save != 0)
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <save_device_down+0x44>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d019      	beq.n	80073ec <save_device_down+0x40>
	{
		do
		{
			if (current_slot_to_save == MEMORY_SLOT_LAST)
 80073b8:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <save_device_down+0x44>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b05      	cmp	r3, #5
 80073be:	d103      	bne.n	80073c8 <save_device_down+0x1c>
			{
				current_slot_to_save = MEMORY_SLOT_FIRST;
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <save_device_down+0x44>)
 80073c2:	2201      	movs	r2, #1
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	e005      	b.n	80073d4 <save_device_down+0x28>
			}
			else
			{
				current_slot_to_save++;
 80073c8:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <save_device_down+0x44>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <save_device_down+0x44>)
 80073d2:	701a      	strb	r2, [r3, #0]
			}
		}
		while (pp_memory_slot[current_slot_to_save]->exist_flag == 1);
 80073d4:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <save_device_down+0x48>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <save_device_down+0x44>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d0e7      	beq.n	80073b8 <save_device_down+0xc>

		draw_current_menu();
 80073e8:	f7fd f8aa 	bl	8004540 <draw_current_menu>
	}
}
 80073ec:	bf00      	nop
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20000123 	.word	0x20000123
 80073f4:	200007d4 	.word	0x200007d4

080073f8 <save_device_ok>:



void save_device_ok(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
	if (current_slot_to_save != 0)
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <save_device_ok+0x1c>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <save_device_ok+0x16>
	{
		current_menu = M_SAVE_DEVICE_AS;
 8007404:	4b04      	ldr	r3, [pc, #16]	; (8007418 <save_device_ok+0x20>)
 8007406:	2207      	movs	r2, #7
 8007408:	701a      	strb	r2, [r3, #0]
		draw_current_menu();
 800740a:	f7fd f899 	bl	8004540 <draw_current_menu>
	}
}
 800740e:	bf00      	nop
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20000123 	.word	0x20000123
 8007418:	200007fa 	.word	0x200007fa

0800741c <save_device_esc>:



void save_device_esc(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
	current_slot_to_save = 0;
 8007420:	4b04      	ldr	r3, [pc, #16]	; (8007434 <save_device_esc+0x18>)
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
	current_menu = M_EACH_DEVICE_SUBMENU;
 8007426:	4b04      	ldr	r3, [pc, #16]	; (8007438 <save_device_esc+0x1c>)
 8007428:	2204      	movs	r2, #4
 800742a:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 800742c:	f7fd f888 	bl	8004540 <draw_current_menu>
}
 8007430:	bf00      	nop
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20000123 	.word	0x20000123
 8007438:	200007fa 	.word	0x200007fa

0800743c <save_device_as_up>:



void save_device_as_up(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
    if (point_to_save_name[point_name_current_symbol] == POINT_NAME_LAST_SYMBOL)
 8007440:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <save_device_as_up+0x38>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <save_device_as_up+0x3c>)
 8007448:	5c9b      	ldrb	r3, [r3, r2]
 800744a:	2b7e      	cmp	r3, #126	; 0x7e
 800744c:	d106      	bne.n	800745c <save_device_as_up+0x20>
    {
    	point_to_save_name[point_name_current_symbol] = POINT_NAME_FIRST_SYMBOL;
 800744e:	4b09      	ldr	r3, [pc, #36]	; (8007474 <save_device_as_up+0x38>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	4b08      	ldr	r3, [pc, #32]	; (8007478 <save_device_as_up+0x3c>)
 8007456:	2120      	movs	r1, #32
 8007458:	5499      	strb	r1, [r3, r2]
 800745a:	e007      	b.n	800746c <save_device_as_up+0x30>
    }
    else
    {
    	point_to_save_name[point_name_current_symbol]++;
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <save_device_as_up+0x38>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	4a05      	ldr	r2, [pc, #20]	; (8007478 <save_device_as_up+0x3c>)
 8007462:	5cd2      	ldrb	r2, [r2, r3]
 8007464:	3201      	adds	r2, #1
 8007466:	b2d1      	uxtb	r1, r2
 8007468:	4a03      	ldr	r2, [pc, #12]	; (8007478 <save_device_as_up+0x3c>)
 800746a:	54d1      	strb	r1, [r2, r3]
    }

    draw_current_menu();
 800746c:	f7fd f868 	bl	8004540 <draw_current_menu>
}
 8007470:	bf00      	nop
 8007472:	bd80      	pop	{r7, pc}
 8007474:	20000120 	.word	0x20000120
 8007478:	20000828 	.word	0x20000828

0800747c <save_device_as_down>:



void save_device_as_down(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
    if (point_to_save_name[point_name_current_symbol] == POINT_NAME_FIRST_SYMBOL)
 8007480:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <save_device_as_down+0x38>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <save_device_as_down+0x3c>)
 8007488:	5c9b      	ldrb	r3, [r3, r2]
 800748a:	2b20      	cmp	r3, #32
 800748c:	d106      	bne.n	800749c <save_device_as_down+0x20>
    {
    	point_to_save_name[point_name_current_symbol] = POINT_NAME_LAST_SYMBOL;
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <save_device_as_down+0x38>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	4b08      	ldr	r3, [pc, #32]	; (80074b8 <save_device_as_down+0x3c>)
 8007496:	217e      	movs	r1, #126	; 0x7e
 8007498:	5499      	strb	r1, [r3, r2]
 800749a:	e007      	b.n	80074ac <save_device_as_down+0x30>
    }
    else
    {
    	point_to_save_name[point_name_current_symbol]--;
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <save_device_as_down+0x38>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	4a05      	ldr	r2, [pc, #20]	; (80074b8 <save_device_as_down+0x3c>)
 80074a2:	5cd2      	ldrb	r2, [r2, r3]
 80074a4:	3a01      	subs	r2, #1
 80074a6:	b2d1      	uxtb	r1, r2
 80074a8:	4a03      	ldr	r2, [pc, #12]	; (80074b8 <save_device_as_down+0x3c>)
 80074aa:	54d1      	strb	r1, [r2, r3]
    }

    draw_current_menu();
 80074ac:	f7fd f848 	bl	8004540 <draw_current_menu>
}
 80074b0:	bf00      	nop
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000120 	.word	0x20000120
 80074b8:	20000828 	.word	0x20000828

080074bc <save_device_as_ok>:



void save_device_as_ok(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
    if (++point_name_current_symbol == MEMORY_POINT_NAME_LENGTH)
 80074c0:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <save_device_as_ok+0x28>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	3301      	adds	r3, #1
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <save_device_as_ok+0x28>)
 80074ca:	701a      	strb	r2, [r3, #0]
 80074cc:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <save_device_as_ok+0x28>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b05      	cmp	r3, #5
 80074d2:	d102      	bne.n	80074da <save_device_as_ok+0x1e>
    {
    	point_name_current_symbol = 0;
 80074d4:	4b03      	ldr	r3, [pc, #12]	; (80074e4 <save_device_as_ok+0x28>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
    }

    draw_current_menu();
 80074da:	f7fd f831 	bl	8004540 <draw_current_menu>
}
 80074de:	bf00      	nop
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000120 	.word	0x20000120

080074e8 <save_device_as_ok_long>:



void save_device_as_ok_long(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
	save_memory_point(current_each_device, &point_to_save_name[0], current_slot_to_save);
 80074ec:	4b0c      	ldr	r3, [pc, #48]	; (8007520 <save_device_as_ok_long+0x38>)
 80074ee:	7818      	ldrb	r0, [r3, #0]
 80074f0:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <save_device_as_ok_long+0x3c>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	490c      	ldr	r1, [pc, #48]	; (8007528 <save_device_as_ok_long+0x40>)
 80074f8:	f000 fdf8 	bl	80080ec <save_memory_point>

	current_each_device = device_number;
 80074fc:	4b0b      	ldr	r3, [pc, #44]	; (800752c <save_device_as_ok_long+0x44>)
 80074fe:	781a      	ldrb	r2, [r3, #0]
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <save_device_as_ok_long+0x38>)
 8007502:	701a      	strb	r2, [r3, #0]
	current_slot_to_save = 0;
 8007504:	4b07      	ldr	r3, [pc, #28]	; (8007524 <save_device_as_ok_long+0x3c>)
 8007506:	2200      	movs	r2, #0
 8007508:	701a      	strb	r2, [r3, #0]
	point_name_current_symbol = 0;
 800750a:	4b09      	ldr	r3, [pc, #36]	; (8007530 <save_device_as_ok_long+0x48>)
 800750c:	2200      	movs	r2, #0
 800750e:	701a      	strb	r2, [r3, #0]

	current_menu = M_SAVED_POPUP;
 8007510:	4b08      	ldr	r3, [pc, #32]	; (8007534 <save_device_as_ok_long+0x4c>)
 8007512:	2208      	movs	r2, #8
 8007514:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 8007516:	f7fd f813 	bl	8004540 <draw_current_menu>
}
 800751a:	bf00      	nop
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	2000002a 	.word	0x2000002a
 8007524:	20000123 	.word	0x20000123
 8007528:	20000828 	.word	0x20000828
 800752c:	20000738 	.word	0x20000738
 8007530:	20000120 	.word	0x20000120
 8007534:	200007fa 	.word	0x200007fa

08007538 <save_device_as_esc>:



void save_device_as_esc(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
	point_name_current_symbol = 0;
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <save_device_as_esc+0x18>)
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]
	current_menu = M_SAVE_DEVICE;
 8007542:	4b04      	ldr	r3, [pc, #16]	; (8007554 <save_device_as_esc+0x1c>)
 8007544:	2206      	movs	r2, #6
 8007546:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 8007548:	f7fc fffa 	bl	8004540 <draw_current_menu>
}
 800754c:	bf00      	nop
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000120 	.word	0x20000120
 8007554:	200007fa 	.word	0x200007fa

08007558 <saved_popup_esc>:



void saved_popup_esc(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	af00      	add	r7, sp, #0
	current_each_device = device_number;
 800755c:	4b08      	ldr	r3, [pc, #32]	; (8007580 <saved_popup_esc+0x28>)
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	4b08      	ldr	r3, [pc, #32]	; (8007584 <saved_popup_esc+0x2c>)
 8007562:	701a      	strb	r2, [r3, #0]
	current_slot_to_save = 0;
 8007564:	4b08      	ldr	r3, [pc, #32]	; (8007588 <saved_popup_esc+0x30>)
 8007566:	2200      	movs	r2, #0
 8007568:	701a      	strb	r2, [r3, #0]
	point_name_current_symbol = 0;
 800756a:	4b08      	ldr	r3, [pc, #32]	; (800758c <saved_popup_esc+0x34>)
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]

	current_menu = M_DEVICES;
 8007570:	4b07      	ldr	r3, [pc, #28]	; (8007590 <saved_popup_esc+0x38>)
 8007572:	2202      	movs	r2, #2
 8007574:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 8007576:	f7fc ffe3 	bl	8004540 <draw_current_menu>
}
 800757a:	bf00      	nop
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000738 	.word	0x20000738
 8007584:	2000002a 	.word	0x2000002a
 8007588:	20000123 	.word	0x20000123
 800758c:	20000120 	.word	0x20000120
 8007590:	200007fa 	.word	0x200007fa

08007594 <radar_up>:



void radar_up(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
	if (current_radar_device != 0)
 8007598:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <radar_up+0x50>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01f      	beq.n	80075e0 <radar_up+0x4c>
	{
		do
		{
			do
			{
				if (current_radar_device == DEVICE_NUMBER_FIRST)
 80075a0:	4b10      	ldr	r3, [pc, #64]	; (80075e4 <radar_up+0x50>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d103      	bne.n	80075b0 <radar_up+0x1c>
				{
					current_radar_device = DEVICE_NUMBER_LAST;
 80075a8:	4b0e      	ldr	r3, [pc, #56]	; (80075e4 <radar_up+0x50>)
 80075aa:	2206      	movs	r2, #6
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	e005      	b.n	80075bc <radar_up+0x28>
				}
				else
				{
					current_radar_device--;
 80075b0:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <radar_up+0x50>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <radar_up+0x50>)
 80075ba:	701a      	strb	r2, [r3, #0]
				}
			}
			while (pp_dev_aux[current_radar_device]->exist_flag == 0);
 80075bc:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <radar_up+0x54>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b08      	ldr	r3, [pc, #32]	; (80075e4 <radar_up+0x50>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0e7      	beq.n	80075a0 <radar_up+0xc>
		}
		while (current_radar_device == device_number);
 80075d0:	4b04      	ldr	r3, [pc, #16]	; (80075e4 <radar_up+0x50>)
 80075d2:	781a      	ldrb	r2, [r3, #0]
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <radar_up+0x58>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d0e1      	beq.n	80075a0 <radar_up+0xc>

		draw_current_menu();
 80075dc:	f7fc ffb0 	bl	8004540 <draw_current_menu>
	}
}
 80075e0:	bf00      	nop
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	20000121 	.word	0x20000121
 80075e8:	2000083c 	.word	0x2000083c
 80075ec:	20000738 	.word	0x20000738

080075f0 <radar_down>:



void radar_down(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
	if (current_radar_device != 0)
 80075f4:	4b12      	ldr	r3, [pc, #72]	; (8007640 <radar_down+0x50>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01f      	beq.n	800763c <radar_down+0x4c>
	{
		do
		{
			do
			{
				if (current_radar_device == DEVICE_NUMBER_LAST)
 80075fc:	4b10      	ldr	r3, [pc, #64]	; (8007640 <radar_down+0x50>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b06      	cmp	r3, #6
 8007602:	d103      	bne.n	800760c <radar_down+0x1c>
				{
					current_radar_device = DEVICE_NUMBER_FIRST;
 8007604:	4b0e      	ldr	r3, [pc, #56]	; (8007640 <radar_down+0x50>)
 8007606:	2201      	movs	r2, #1
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	e005      	b.n	8007618 <radar_down+0x28>
				}
				else
				{
					current_radar_device++;
 800760c:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <radar_down+0x50>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	b2da      	uxtb	r2, r3
 8007614:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <radar_down+0x50>)
 8007616:	701a      	strb	r2, [r3, #0]
				}
			}
			while (pp_dev_aux[current_radar_device]->exist_flag == 0);
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <radar_down+0x54>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	4b08      	ldr	r3, [pc, #32]	; (8007640 <radar_down+0x50>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0e7      	beq.n	80075fc <radar_down+0xc>
		}
		while (current_radar_device == device_number);
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <radar_down+0x50>)
 800762e:	781a      	ldrb	r2, [r3, #0]
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <radar_down+0x58>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d0e1      	beq.n	80075fc <radar_down+0xc>

		draw_current_menu();
 8007638:	f7fc ff82 	bl	8004540 <draw_current_menu>
	}
}
 800763c:	bf00      	nop
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000121 	.word	0x20000121
 8007644:	2000083c 	.word	0x2000083c
 8007648:	20000738 	.word	0x20000738

0800764c <radar_ok>:



void radar_ok(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
	if (current_radar_device != 0)
 8007650:	4b09      	ldr	r3, [pc, #36]	; (8007678 <radar_ok+0x2c>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00d      	beq.n	8007674 <radar_ok+0x28>
	{
		radar_list_hide[current_radar_device] ^= 1;		//Invert hide flag
 8007658:	4b07      	ldr	r3, [pc, #28]	; (8007678 <radar_ok+0x2c>)
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	4b07      	ldr	r3, [pc, #28]	; (800767c <radar_ok+0x30>)
 8007660:	5c9b      	ldrb	r3, [r3, r2]
 8007662:	4a05      	ldr	r2, [pc, #20]	; (8007678 <radar_ok+0x2c>)
 8007664:	7812      	ldrb	r2, [r2, #0]
 8007666:	f083 0301 	eor.w	r3, r3, #1
 800766a:	b2d9      	uxtb	r1, r3
 800766c:	4b03      	ldr	r3, [pc, #12]	; (800767c <radar_ok+0x30>)
 800766e:	5499      	strb	r1, [r3, r2]

		draw_current_menu();
 8007670:	f7fc ff66 	bl	8004540 <draw_current_menu>
	}
}
 8007674:	bf00      	nop
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20000121 	.word	0x20000121
 800767c:	20000830 	.word	0x20000830

08007680 <points_up>:



void points_up(void)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
	if (current_slot_to_load == MEMORY_SLOT_FIRST)
 8007684:	4b08      	ldr	r3, [pc, #32]	; (80076a8 <points_up+0x28>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d103      	bne.n	8007694 <points_up+0x14>
    {
		current_slot_to_load = MEMORY_SLOT_LAST;
 800768c:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <points_up+0x28>)
 800768e:	2205      	movs	r2, #5
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	e005      	b.n	80076a0 <points_up+0x20>
    }
    else
    {
    	current_slot_to_load--;
 8007694:	4b04      	ldr	r3, [pc, #16]	; (80076a8 <points_up+0x28>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	3b01      	subs	r3, #1
 800769a:	b2da      	uxtb	r2, r3
 800769c:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <points_up+0x28>)
 800769e:	701a      	strb	r2, [r3, #0]
    }
    
    draw_current_menu();
 80076a0:	f7fc ff4e 	bl	8004540 <draw_current_menu>
}
 80076a4:	bf00      	nop
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	2000002b 	.word	0x2000002b

080076ac <points_down>:



void points_down(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
	if (current_slot_to_load == MEMORY_SLOT_LAST)
 80076b0:	4b08      	ldr	r3, [pc, #32]	; (80076d4 <points_down+0x28>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b05      	cmp	r3, #5
 80076b6:	d103      	bne.n	80076c0 <points_down+0x14>
    {
		current_slot_to_load = MEMORY_SLOT_FIRST;
 80076b8:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <points_down+0x28>)
 80076ba:	2201      	movs	r2, #1
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	e005      	b.n	80076cc <points_down+0x20>
    }
    else
    {
    	current_slot_to_load++;
 80076c0:	4b04      	ldr	r3, [pc, #16]	; (80076d4 <points_down+0x28>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	3301      	adds	r3, #1
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	4b02      	ldr	r3, [pc, #8]	; (80076d4 <points_down+0x28>)
 80076ca:	701a      	strb	r2, [r3, #0]
    }

    draw_current_menu();
 80076cc:	f7fc ff38 	bl	8004540 <draw_current_menu>
}
 80076d0:	bf00      	nop
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	2000002b 	.word	0x2000002b

080076d8 <points_ok>:



void points_ok(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
    if (pp_memory_slot[current_slot_to_load]->exist_flag == 1)
 80076dc:	4b08      	ldr	r3, [pc, #32]	; (8007700 <points_ok+0x28>)
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	4b08      	ldr	r3, [pc, #32]	; (8007704 <points_ok+0x2c>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d104      	bne.n	80076fa <points_ok+0x22>
    {
		current_menu = M_EACH_POINT;
 80076f0:	4b05      	ldr	r3, [pc, #20]	; (8007708 <points_ok+0x30>)
 80076f2:	220b      	movs	r2, #11
 80076f4:	701a      	strb	r2, [r3, #0]
		draw_current_menu();
 80076f6:	f7fc ff23 	bl	8004540 <draw_current_menu>
    }
}
 80076fa:	bf00      	nop
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	200007d4 	.word	0x200007d4
 8007704:	2000002b 	.word	0x2000002b
 8007708:	200007fa 	.word	0x200007fa

0800770c <points_esc>:



void points_esc(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
	current_slot_to_load = MEMORY_SLOT_FIRST;
 8007710:	4b04      	ldr	r3, [pc, #16]	; (8007724 <points_esc+0x18>)
 8007712:	2201      	movs	r2, #1
 8007714:	701a      	strb	r2, [r3, #0]
	current_menu = M_MAIN;
 8007716:	4b04      	ldr	r3, [pc, #16]	; (8007728 <points_esc+0x1c>)
 8007718:	2201      	movs	r2, #1
 800771a:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 800771c:	f7fc ff10 	bl	8004540 <draw_current_menu>
}
 8007720:	bf00      	nop
 8007722:	bd80      	pop	{r7, pc}
 8007724:	2000002b 	.word	0x2000002b
 8007728:	200007fa 	.word	0x200007fa

0800772c <load_point_up>:



void load_point_up(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
	if (current_device_to_load != 0)
 8007730:	4b12      	ldr	r3, [pc, #72]	; (800777c <load_point_up+0x50>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d01f      	beq.n	8007778 <load_point_up+0x4c>
	{
		do
		{
			do
			{
				if (current_device_to_load == DEVICE_NUMBER_FIRST)
 8007738:	4b10      	ldr	r3, [pc, #64]	; (800777c <load_point_up+0x50>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d103      	bne.n	8007748 <load_point_up+0x1c>
				{
					current_device_to_load = DEVICE_NUMBER_LAST;
 8007740:	4b0e      	ldr	r3, [pc, #56]	; (800777c <load_point_up+0x50>)
 8007742:	2206      	movs	r2, #6
 8007744:	701a      	strb	r2, [r3, #0]
 8007746:	e005      	b.n	8007754 <load_point_up+0x28>
				}
				else
				{
					current_device_to_load--;
 8007748:	4b0c      	ldr	r3, [pc, #48]	; (800777c <load_point_up+0x50>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	3b01      	subs	r3, #1
 800774e:	b2da      	uxtb	r2, r3
 8007750:	4b0a      	ldr	r3, [pc, #40]	; (800777c <load_point_up+0x50>)
 8007752:	701a      	strb	r2, [r3, #0]
				}
			}
			while (pp_dev_aux[current_device_to_load]->exist_flag == 1);
 8007754:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <load_point_up+0x54>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	4b08      	ldr	r3, [pc, #32]	; (800777c <load_point_up+0x50>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d0e7      	beq.n	8007738 <load_point_up+0xc>
		}
		while (current_device_to_load == device_number);
 8007768:	4b04      	ldr	r3, [pc, #16]	; (800777c <load_point_up+0x50>)
 800776a:	781a      	ldrb	r2, [r3, #0]
 800776c:	4b05      	ldr	r3, [pc, #20]	; (8007784 <load_point_up+0x58>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	429a      	cmp	r2, r3
 8007772:	d0e1      	beq.n	8007738 <load_point_up+0xc>

		draw_current_menu();
 8007774:	f7fc fee4 	bl	8004540 <draw_current_menu>
	}
}
 8007778:	bf00      	nop
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000122 	.word	0x20000122
 8007780:	2000083c 	.word	0x2000083c
 8007784:	20000738 	.word	0x20000738

08007788 <load_point_down>:



void load_point_down(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
	if (current_device_to_load != 0)
 800778c:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <load_point_down+0x50>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01f      	beq.n	80077d4 <load_point_down+0x4c>
	{
		do
		{
			do
			{
				if (current_device_to_load == DEVICE_NUMBER_LAST)
 8007794:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <load_point_down+0x50>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b06      	cmp	r3, #6
 800779a:	d103      	bne.n	80077a4 <load_point_down+0x1c>
				{
					current_device_to_load = DEVICE_NUMBER_FIRST;
 800779c:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <load_point_down+0x50>)
 800779e:	2201      	movs	r2, #1
 80077a0:	701a      	strb	r2, [r3, #0]
 80077a2:	e005      	b.n	80077b0 <load_point_down+0x28>
				}
				else
				{
					current_device_to_load++;
 80077a4:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <load_point_down+0x50>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	3301      	adds	r3, #1
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <load_point_down+0x50>)
 80077ae:	701a      	strb	r2, [r3, #0]
				}
			}
			while (pp_dev_aux[current_device_to_load]->exist_flag == 1);
 80077b0:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <load_point_down+0x54>)
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	4b08      	ldr	r3, [pc, #32]	; (80077d8 <load_point_down+0x50>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d0e7      	beq.n	8007794 <load_point_down+0xc>
		}
		while (current_device_to_load == device_number);
 80077c4:	4b04      	ldr	r3, [pc, #16]	; (80077d8 <load_point_down+0x50>)
 80077c6:	781a      	ldrb	r2, [r3, #0]
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <load_point_down+0x58>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d0e1      	beq.n	8007794 <load_point_down+0xc>

		draw_current_menu();
 80077d0:	f7fc feb6 	bl	8004540 <draw_current_menu>
	}
}
 80077d4:	bf00      	nop
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000122 	.word	0x20000122
 80077dc:	2000083c 	.word	0x2000083c
 80077e0:	20000738 	.word	0x20000738

080077e4 <load_point_ok>:



void load_point_ok(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
	if (current_device_to_load != 0)
 80077e8:	4b0c      	ldr	r3, [pc, #48]	; (800781c <load_point_ok+0x38>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d012      	beq.n	8007816 <load_point_ok+0x32>
	{
		load_memory_point(current_device_to_load, current_slot_to_load);
 80077f0:	4b0a      	ldr	r3, [pc, #40]	; (800781c <load_point_ok+0x38>)
 80077f2:	781a      	ldrb	r2, [r3, #0]
 80077f4:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <load_point_ok+0x3c>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	4619      	mov	r1, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	f000 fd22 	bl	8008244 <load_memory_point>

		current_slot_to_load = MEMORY_SLOT_FIRST;
 8007800:	4b07      	ldr	r3, [pc, #28]	; (8007820 <load_point_ok+0x3c>)
 8007802:	2201      	movs	r2, #1
 8007804:	701a      	strb	r2, [r3, #0]
		current_device_to_load = 0;
 8007806:	4b05      	ldr	r3, [pc, #20]	; (800781c <load_point_ok+0x38>)
 8007808:	2200      	movs	r2, #0
 800780a:	701a      	strb	r2, [r3, #0]
		current_menu = M_MAIN;
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <load_point_ok+0x40>)
 800780e:	2201      	movs	r2, #1
 8007810:	701a      	strb	r2, [r3, #0]
		draw_current_menu();
 8007812:	f7fc fe95 	bl	8004540 <draw_current_menu>
	}
}
 8007816:	bf00      	nop
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000122 	.word	0x20000122
 8007820:	2000002b 	.word	0x2000002b
 8007824:	200007fa 	.word	0x200007fa

08007828 <load_point_esc>:



void load_point_esc(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
	current_device_to_load = 0;
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <load_point_esc+0x18>)
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
	current_menu = M_EACH_POINT;
 8007832:	4b04      	ldr	r3, [pc, #16]	; (8007844 <load_point_esc+0x1c>)
 8007834:	220b      	movs	r2, #11
 8007836:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 8007838:	f7fc fe82 	bl	8004540 <draw_current_menu>
}
 800783c:	bf00      	nop
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000122 	.word	0x20000122
 8007844:	200007fa 	.word	0x200007fa

08007848 <delete_point_ok>:



void delete_point_ok(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
	delete_memory_point(current_slot_to_load);
 800784c:	4b08      	ldr	r3, [pc, #32]	; (8007870 <delete_point_ok+0x28>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f000 fdd7 	bl	8008404 <delete_memory_point>

	reset_current_item_in_menu(M_EACH_POINT);
 8007856:	200b      	movs	r0, #11
 8007858:	f7fc fe42 	bl	80044e0 <reset_current_item_in_menu>
	current_slot_to_load = MEMORY_SLOT_FIRST;
 800785c:	4b04      	ldr	r3, [pc, #16]	; (8007870 <delete_point_ok+0x28>)
 800785e:	2201      	movs	r2, #1
 8007860:	701a      	strb	r2, [r3, #0]
	current_menu = M_POINTS;
 8007862:	4b04      	ldr	r3, [pc, #16]	; (8007874 <delete_point_ok+0x2c>)
 8007864:	220a      	movs	r2, #10
 8007866:	701a      	strb	r2, [r3, #0]
	draw_current_menu();
 8007868:	f7fc fe6a 	bl	8004540 <draw_current_menu>
}
 800786c:	bf00      	nop
 800786e:	bd80      	pop	{r7, pc}
 8007870:	2000002b 	.word	0x2000002b
 8007874:	200007fa 	.word	0x200007fa

08007878 <set_dev_num_up>:



void set_dev_num_up(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
    if (settings_copy.device_number == DEVICE_NUMBER_LAST)
 800787c:	4b08      	ldr	r3, [pc, #32]	; (80078a0 <set_dev_num_up+0x28>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b06      	cmp	r3, #6
 8007882:	d103      	bne.n	800788c <set_dev_num_up+0x14>
    {
        settings_copy.device_number = DEVICE_NUMBER_FIRST;
 8007884:	4b06      	ldr	r3, [pc, #24]	; (80078a0 <set_dev_num_up+0x28>)
 8007886:	2201      	movs	r2, #1
 8007888:	701a      	strb	r2, [r3, #0]
 800788a:	e005      	b.n	8007898 <set_dev_num_up+0x20>
    }
    else
    {
        settings_copy.device_number++;
 800788c:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <set_dev_num_up+0x28>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	b2da      	uxtb	r2, r3
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <set_dev_num_up+0x28>)
 8007896:	701a      	strb	r2, [r3, #0]
    }

    draw_current_menu();
 8007898:	f7fc fe52 	bl	8004540 <draw_current_menu>
}
 800789c:	bf00      	nop
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	200007e0 	.word	0x200007e0

080078a4 <set_dev_num_down>:



void set_dev_num_down(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
    if (settings_copy.device_number == DEVICE_NUMBER_FIRST)
 80078a8:	4b08      	ldr	r3, [pc, #32]	; (80078cc <set_dev_num_down+0x28>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d103      	bne.n	80078b8 <set_dev_num_down+0x14>
    {
        settings_copy.device_number = DEVICE_NUMBER_LAST;
 80078b0:	4b06      	ldr	r3, [pc, #24]	; (80078cc <set_dev_num_down+0x28>)
 80078b2:	2206      	movs	r2, #6
 80078b4:	701a      	strb	r2, [r3, #0]
 80078b6:	e005      	b.n	80078c4 <set_dev_num_down+0x20>
    }
    else
    {
        settings_copy.device_number--;
 80078b8:	4b04      	ldr	r3, [pc, #16]	; (80078cc <set_dev_num_down+0x28>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	3b01      	subs	r3, #1
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	4b02      	ldr	r3, [pc, #8]	; (80078cc <set_dev_num_down+0x28>)
 80078c2:	701a      	strb	r2, [r3, #0]
    }
    
    draw_current_menu();
 80078c4:	f7fc fe3c 	bl	8004540 <draw_current_menu>
}
 80078c8:	bf00      	nop
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	200007e0 	.word	0x200007e0

080078d0 <set_dev_num_ok>:



void set_dev_num_ok(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
    if (settings_copy.device_number != device_number)
 80078d4:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <set_dev_num_ok+0x24>)
 80078d6:	781a      	ldrb	r2, [r3, #0]
 80078d8:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <set_dev_num_ok+0x28>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d002      	beq.n	80078e6 <set_dev_num_ok+0x16>
    {
        flag_settings_changed = 1;
 80078e0:	4b06      	ldr	r3, [pc, #24]	; (80078fc <set_dev_num_ok+0x2c>)
 80078e2:	2201      	movs	r2, #1
 80078e4:	701a      	strb	r2, [r3, #0]
    }
    
    current_menu = M_EDIT_SETTINGS;
 80078e6:	4b06      	ldr	r3, [pc, #24]	; (8007900 <set_dev_num_ok+0x30>)
 80078e8:	2210      	movs	r2, #16
 80078ea:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 80078ec:	f7fc fe28 	bl	8004540 <draw_current_menu>
}
 80078f0:	bf00      	nop
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	200007e0 	.word	0x200007e0
 80078f8:	20000738 	.word	0x20000738
 80078fc:	2000011e 	.word	0x2000011e
 8007900:	200007fa 	.word	0x200007fa

08007904 <set_dev_num_esc>:



void set_dev_num_esc(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
    settings_copy.device_number = device_number;   //exit no save, reset value
 8007908:	4b05      	ldr	r3, [pc, #20]	; (8007920 <set_dev_num_esc+0x1c>)
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <set_dev_num_esc+0x20>)
 800790e:	701a      	strb	r2, [r3, #0]
    current_menu = M_EDIT_SETTINGS;
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <set_dev_num_esc+0x24>)
 8007912:	2210      	movs	r2, #16
 8007914:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007916:	f7fc fe13 	bl	8004540 <draw_current_menu>
}
 800791a:	bf00      	nop
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000738 	.word	0x20000738
 8007924:	200007e0 	.word	0x200007e0
 8007928:	200007fa 	.word	0x200007fa

0800792c <confirm_settings_save_ok>:



void confirm_settings_save_ok(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
    settings_save(&settings_copy);
 8007930:	4803      	ldr	r0, [pc, #12]	; (8007940 <confirm_settings_save_ok+0x14>)
 8007932:	f001 f9cd 	bl	8008cd0 <settings_save>
    NVIC_SystemReset();
 8007936:	f7fc fb95 	bl	8004064 <NVIC_SystemReset>
}
 800793a:	bf00      	nop
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	200007e0 	.word	0x200007e0

08007944 <set_dev_id_up>:



void set_dev_id_up(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
    if (settings_copy.device_id[device_id_current_symbol] == DEVICE_ID_LAST_SYMBOL)
 8007948:	4b0f      	ldr	r3, [pc, #60]	; (8007988 <set_dev_id_up+0x44>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	4b0f      	ldr	r3, [pc, #60]	; (800798c <set_dev_id_up+0x48>)
 8007950:	4413      	add	r3, r2
 8007952:	785b      	ldrb	r3, [r3, #1]
 8007954:	2b5a      	cmp	r3, #90	; 0x5a
 8007956:	d107      	bne.n	8007968 <set_dev_id_up+0x24>
    {
        settings_copy.device_id[device_id_current_symbol] = DEVICE_ID_FIRST_SYMBOL;
 8007958:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <set_dev_id_up+0x44>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	4b0b      	ldr	r3, [pc, #44]	; (800798c <set_dev_id_up+0x48>)
 8007960:	4413      	add	r3, r2
 8007962:	2241      	movs	r2, #65	; 0x41
 8007964:	705a      	strb	r2, [r3, #1]
 8007966:	e00a      	b.n	800797e <set_dev_id_up+0x3a>
    }
    else
    {
        settings_copy.device_id[device_id_current_symbol]++;
 8007968:	4b07      	ldr	r3, [pc, #28]	; (8007988 <set_dev_id_up+0x44>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	4a07      	ldr	r2, [pc, #28]	; (800798c <set_dev_id_up+0x48>)
 800796e:	441a      	add	r2, r3
 8007970:	7852      	ldrb	r2, [r2, #1]
 8007972:	3201      	adds	r2, #1
 8007974:	b2d1      	uxtb	r1, r2
 8007976:	4a05      	ldr	r2, [pc, #20]	; (800798c <set_dev_id_up+0x48>)
 8007978:	4413      	add	r3, r2
 800797a:	460a      	mov	r2, r1
 800797c:	705a      	strb	r2, [r3, #1]
    }
    
    draw_current_menu();
 800797e:	f7fc fddf 	bl	8004540 <draw_current_menu>
}
 8007982:	bf00      	nop
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	2000011f 	.word	0x2000011f
 800798c:	200007e0 	.word	0x200007e0

08007990 <set_dev_id_down>:



void set_dev_id_down(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
    if (settings_copy.device_id[device_id_current_symbol] == DEVICE_ID_FIRST_SYMBOL)
 8007994:	4b0f      	ldr	r3, [pc, #60]	; (80079d4 <set_dev_id_down+0x44>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	4b0f      	ldr	r3, [pc, #60]	; (80079d8 <set_dev_id_down+0x48>)
 800799c:	4413      	add	r3, r2
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b41      	cmp	r3, #65	; 0x41
 80079a2:	d107      	bne.n	80079b4 <set_dev_id_down+0x24>
    {
        settings_copy.device_id[device_id_current_symbol] = DEVICE_ID_LAST_SYMBOL;
 80079a4:	4b0b      	ldr	r3, [pc, #44]	; (80079d4 <set_dev_id_down+0x44>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	4b0b      	ldr	r3, [pc, #44]	; (80079d8 <set_dev_id_down+0x48>)
 80079ac:	4413      	add	r3, r2
 80079ae:	225a      	movs	r2, #90	; 0x5a
 80079b0:	705a      	strb	r2, [r3, #1]
 80079b2:	e00a      	b.n	80079ca <set_dev_id_down+0x3a>
    }
    else
    {
        settings_copy.device_id[device_id_current_symbol]--;
 80079b4:	4b07      	ldr	r3, [pc, #28]	; (80079d4 <set_dev_id_down+0x44>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	4a07      	ldr	r2, [pc, #28]	; (80079d8 <set_dev_id_down+0x48>)
 80079ba:	441a      	add	r2, r3
 80079bc:	7852      	ldrb	r2, [r2, #1]
 80079be:	3a01      	subs	r2, #1
 80079c0:	b2d1      	uxtb	r1, r2
 80079c2:	4a05      	ldr	r2, [pc, #20]	; (80079d8 <set_dev_id_down+0x48>)
 80079c4:	4413      	add	r3, r2
 80079c6:	460a      	mov	r2, r1
 80079c8:	705a      	strb	r2, [r3, #1]
    }
    
    draw_current_menu();
 80079ca:	f7fc fdb9 	bl	8004540 <draw_current_menu>
}
 80079ce:	bf00      	nop
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	2000011f 	.word	0x2000011f
 80079d8:	200007e0 	.word	0x200007e0

080079dc <set_dev_id_ok>:



void set_dev_id_ok(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
    if (++device_id_current_symbol == DEVICE_ID_LEN)
 80079e0:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <set_dev_id_ok+0x28>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	3301      	adds	r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <set_dev_id_ok+0x28>)
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <set_dev_id_ok+0x28>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d102      	bne.n	80079fa <set_dev_id_ok+0x1e>
    {
        device_id_current_symbol = 0;
 80079f4:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <set_dev_id_ok+0x28>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	701a      	strb	r2, [r3, #0]
    }
    
    draw_current_menu();
 80079fa:	f7fc fda1 	bl	8004540 <draw_current_menu>
}
 80079fe:	bf00      	nop
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	2000011f 	.word	0x2000011f

08007a08 <set_dev_id_ok_long>:



void set_dev_id_ok_long(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < DEVICE_ID_LEN; i++)
 8007a0e:	2300      	movs	r3, #0
 8007a10:	71fb      	strb	r3, [r7, #7]
 8007a12:	e011      	b.n	8007a38 <set_dev_id_ok_long+0x30>
    {
        if (settings_copy.device_id[i] != p_settings->device_id[i])
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	4a0e      	ldr	r2, [pc, #56]	; (8007a50 <set_dev_id_ok_long+0x48>)
 8007a18:	4413      	add	r3, r2
 8007a1a:	785a      	ldrb	r2, [r3, #1]
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	; (8007a54 <set_dev_id_ok_long+0x4c>)
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	440b      	add	r3, r1
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d003      	beq.n	8007a32 <set_dev_id_ok_long+0x2a>
        {
            flag_settings_changed = 1;
 8007a2a:	4b0b      	ldr	r3, [pc, #44]	; (8007a58 <set_dev_id_ok_long+0x50>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	701a      	strb	r2, [r3, #0]
            break;
 8007a30:	e005      	b.n	8007a3e <set_dev_id_ok_long+0x36>
    for (uint8_t i = 0; i < DEVICE_ID_LEN; i++)
 8007a32:	79fb      	ldrb	r3, [r7, #7]
 8007a34:	3301      	adds	r3, #1
 8007a36:	71fb      	strb	r3, [r7, #7]
 8007a38:	79fb      	ldrb	r3, [r7, #7]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d9ea      	bls.n	8007a14 <set_dev_id_ok_long+0xc>
        }
    }
    
    current_menu = M_EDIT_SETTINGS;
 8007a3e:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <set_dev_id_ok_long+0x54>)
 8007a40:	2210      	movs	r2, #16
 8007a42:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007a44:	f7fc fd7c 	bl	8004540 <draw_current_menu>
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	200007e0 	.word	0x200007e0
 8007a54:	2000061c 	.word	0x2000061c
 8007a58:	2000011e 	.word	0x2000011e
 8007a5c:	200007fa 	.word	0x200007fa

08007a60 <set_dev_id_esc>:



void set_dev_id_esc(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < DEVICE_ID_LEN; i++)
 8007a66:	2300      	movs	r3, #0
 8007a68:	71fb      	strb	r3, [r7, #7]
 8007a6a:	e00c      	b.n	8007a86 <set_dev_id_esc+0x26>
    {
        settings_copy.device_id[i] = p_settings->device_id[i];   //exit no save, reset value
 8007a6c:	4b0d      	ldr	r3, [pc, #52]	; (8007aa4 <set_dev_id_esc+0x44>)
 8007a6e:	6819      	ldr	r1, [r3, #0]
 8007a70:	79fa      	ldrb	r2, [r7, #7]
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	440a      	add	r2, r1
 8007a76:	7851      	ldrb	r1, [r2, #1]
 8007a78:	4a0b      	ldr	r2, [pc, #44]	; (8007aa8 <set_dev_id_esc+0x48>)
 8007a7a:	4413      	add	r3, r2
 8007a7c:	460a      	mov	r2, r1
 8007a7e:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < DEVICE_ID_LEN; i++)
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	3301      	adds	r3, #1
 8007a84:	71fb      	strb	r3, [r7, #7]
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d9ef      	bls.n	8007a6c <set_dev_id_esc+0xc>
    }
    device_id_current_symbol = 0;
 8007a8c:	4b07      	ldr	r3, [pc, #28]	; (8007aac <set_dev_id_esc+0x4c>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
    
    current_menu = M_EDIT_SETTINGS;
 8007a92:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <set_dev_id_esc+0x50>)
 8007a94:	2210      	movs	r2, #16
 8007a96:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007a98:	f7fc fd52 	bl	8004540 <draw_current_menu>
}
 8007a9c:	bf00      	nop
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	2000061c 	.word	0x2000061c
 8007aa8:	200007e0 	.word	0x200007e0
 8007aac:	2000011f 	.word	0x2000011f
 8007ab0:	200007fa 	.word	0x200007fa

08007ab4 <set_freq_ch_up>:



void set_freq_ch_up(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
    if (settings_copy.freq_channel == FREQ_CHANNEL_LAST)
 8007ab8:	4b08      	ldr	r3, [pc, #32]	; (8007adc <set_freq_ch_up+0x28>)
 8007aba:	78db      	ldrb	r3, [r3, #3]
 8007abc:	2b45      	cmp	r3, #69	; 0x45
 8007abe:	d103      	bne.n	8007ac8 <set_freq_ch_up+0x14>
    {
        settings_copy.freq_channel = FREQ_CHANNEL_FIRST;
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <set_freq_ch_up+0x28>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	70da      	strb	r2, [r3, #3]
 8007ac6:	e005      	b.n	8007ad4 <set_freq_ch_up+0x20>
    }
    else
    {
        settings_copy.freq_channel++;
 8007ac8:	4b04      	ldr	r3, [pc, #16]	; (8007adc <set_freq_ch_up+0x28>)
 8007aca:	78db      	ldrb	r3, [r3, #3]
 8007acc:	3301      	adds	r3, #1
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	4b02      	ldr	r3, [pc, #8]	; (8007adc <set_freq_ch_up+0x28>)
 8007ad2:	70da      	strb	r2, [r3, #3]
    }
    
    draw_current_menu();
 8007ad4:	f7fc fd34 	bl	8004540 <draw_current_menu>
}
 8007ad8:	bf00      	nop
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	200007e0 	.word	0x200007e0

08007ae0 <set_freq_ch_down>:



void set_freq_ch_down(void)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	af00      	add	r7, sp, #0
    if (settings_copy.freq_channel == FREQ_CHANNEL_FIRST)
 8007ae4:	4b08      	ldr	r3, [pc, #32]	; (8007b08 <set_freq_ch_down+0x28>)
 8007ae6:	78db      	ldrb	r3, [r3, #3]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d103      	bne.n	8007af4 <set_freq_ch_down+0x14>
    {
        settings_copy.freq_channel = FREQ_CHANNEL_LAST;
 8007aec:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <set_freq_ch_down+0x28>)
 8007aee:	2245      	movs	r2, #69	; 0x45
 8007af0:	70da      	strb	r2, [r3, #3]
 8007af2:	e005      	b.n	8007b00 <set_freq_ch_down+0x20>
    }
    else
    {
        settings_copy.freq_channel--;
 8007af4:	4b04      	ldr	r3, [pc, #16]	; (8007b08 <set_freq_ch_down+0x28>)
 8007af6:	78db      	ldrb	r3, [r3, #3]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <set_freq_ch_down+0x28>)
 8007afe:	70da      	strb	r2, [r3, #3]
    }
    
    draw_current_menu();
 8007b00:	f7fc fd1e 	bl	8004540 <draw_current_menu>
}
 8007b04:	bf00      	nop
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	200007e0 	.word	0x200007e0

08007b0c <set_freq_ch_ok>:



void set_freq_ch_ok(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
    if (settings_copy.freq_channel != p_settings->freq_channel)
 8007b10:	4b08      	ldr	r3, [pc, #32]	; (8007b34 <set_freq_ch_ok+0x28>)
 8007b12:	78da      	ldrb	r2, [r3, #3]
 8007b14:	4b08      	ldr	r3, [pc, #32]	; (8007b38 <set_freq_ch_ok+0x2c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	78db      	ldrb	r3, [r3, #3]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d002      	beq.n	8007b24 <set_freq_ch_ok+0x18>
    {
        flag_settings_changed = 1;
 8007b1e:	4b07      	ldr	r3, [pc, #28]	; (8007b3c <set_freq_ch_ok+0x30>)
 8007b20:	2201      	movs	r2, #1
 8007b22:	701a      	strb	r2, [r3, #0]
    }
    
    current_menu = M_EDIT_SETTINGS;
 8007b24:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <set_freq_ch_ok+0x34>)
 8007b26:	2210      	movs	r2, #16
 8007b28:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007b2a:	f7fc fd09 	bl	8004540 <draw_current_menu>
}
 8007b2e:	bf00      	nop
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	200007e0 	.word	0x200007e0
 8007b38:	2000061c 	.word	0x2000061c
 8007b3c:	2000011e 	.word	0x2000011e
 8007b40:	200007fa 	.word	0x200007fa

08007b44 <set_freq_ch_esc>:



void set_freq_ch_esc(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
    settings_copy.freq_channel = p_settings->freq_channel;   //exit no save, reset value
 8007b48:	4b05      	ldr	r3, [pc, #20]	; (8007b60 <set_freq_ch_esc+0x1c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	78da      	ldrb	r2, [r3, #3]
 8007b4e:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <set_freq_ch_esc+0x20>)
 8007b50:	70da      	strb	r2, [r3, #3]
    current_menu = M_EDIT_SETTINGS;
 8007b52:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <set_freq_ch_esc+0x24>)
 8007b54:	2210      	movs	r2, #16
 8007b56:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007b58:	f7fc fcf2 	bl	8004540 <draw_current_menu>
}
 8007b5c:	bf00      	nop
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	2000061c 	.word	0x2000061c
 8007b64:	200007e0 	.word	0x200007e0
 8007b68:	200007fa 	.word	0x200007fa

08007b6c <set_tx_pow_up>:



void set_tx_pow_up(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
    if (settings_copy.tx_power_opt == TX_POWER_LAST_OPTION)
 8007b70:	4b08      	ldr	r3, [pc, #32]	; (8007b94 <set_tx_pow_up+0x28>)
 8007b72:	791b      	ldrb	r3, [r3, #4]
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d103      	bne.n	8007b80 <set_tx_pow_up+0x14>
    {
        settings_copy.tx_power_opt = TX_POWER_FIRST_OPTION;
 8007b78:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <set_tx_pow_up+0x28>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	711a      	strb	r2, [r3, #4]
 8007b7e:	e005      	b.n	8007b8c <set_tx_pow_up+0x20>
    }
    else
    {
        settings_copy.tx_power_opt++;
 8007b80:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <set_tx_pow_up+0x28>)
 8007b82:	791b      	ldrb	r3, [r3, #4]
 8007b84:	3301      	adds	r3, #1
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	4b02      	ldr	r3, [pc, #8]	; (8007b94 <set_tx_pow_up+0x28>)
 8007b8a:	711a      	strb	r2, [r3, #4]
    }
    
    draw_current_menu();
 8007b8c:	f7fc fcd8 	bl	8004540 <draw_current_menu>
}
 8007b90:	bf00      	nop
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	200007e0 	.word	0x200007e0

08007b98 <set_tx_pow_down>:



void set_tx_pow_down(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
    if (settings_copy.tx_power_opt == TX_POWER_FIRST_OPTION)
 8007b9c:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <set_tx_pow_down+0x28>)
 8007b9e:	791b      	ldrb	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d103      	bne.n	8007bac <set_tx_pow_down+0x14>
    {
        settings_copy.tx_power_opt = TX_POWER_LAST_OPTION;
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <set_tx_pow_down+0x28>)
 8007ba6:	2203      	movs	r2, #3
 8007ba8:	711a      	strb	r2, [r3, #4]
 8007baa:	e005      	b.n	8007bb8 <set_tx_pow_down+0x20>
    }
    else
    {
        settings_copy.tx_power_opt--;
 8007bac:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <set_tx_pow_down+0x28>)
 8007bae:	791b      	ldrb	r3, [r3, #4]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	4b02      	ldr	r3, [pc, #8]	; (8007bc0 <set_tx_pow_down+0x28>)
 8007bb6:	711a      	strb	r2, [r3, #4]
    }
    
    draw_current_menu();
 8007bb8:	f7fc fcc2 	bl	8004540 <draw_current_menu>
}
 8007bbc:	bf00      	nop
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	200007e0 	.word	0x200007e0

08007bc4 <set_tx_pow_ok>:



void set_tx_pow_ok(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
    if (settings_copy.tx_power_opt != p_settings->tx_power_opt)
 8007bc8:	4b08      	ldr	r3, [pc, #32]	; (8007bec <set_tx_pow_ok+0x28>)
 8007bca:	791a      	ldrb	r2, [r3, #4]
 8007bcc:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <set_tx_pow_ok+0x2c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	791b      	ldrb	r3, [r3, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d002      	beq.n	8007bdc <set_tx_pow_ok+0x18>
    {
        flag_settings_changed = 1;
 8007bd6:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <set_tx_pow_ok+0x30>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	701a      	strb	r2, [r3, #0]
    }
    
    current_menu = M_EDIT_SETTINGS;
 8007bdc:	4b06      	ldr	r3, [pc, #24]	; (8007bf8 <set_tx_pow_ok+0x34>)
 8007bde:	2210      	movs	r2, #16
 8007be0:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007be2:	f7fc fcad 	bl	8004540 <draw_current_menu>
}
 8007be6:	bf00      	nop
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200007e0 	.word	0x200007e0
 8007bf0:	2000061c 	.word	0x2000061c
 8007bf4:	2000011e 	.word	0x2000011e
 8007bf8:	200007fa 	.word	0x200007fa

08007bfc <set_tx_pow_esc>:



void set_tx_pow_esc(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0
    settings_copy.tx_power_opt = p_settings->tx_power_opt;   //exit no save, reset value
 8007c00:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <set_tx_pow_esc+0x1c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	791a      	ldrb	r2, [r3, #4]
 8007c06:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <set_tx_pow_esc+0x20>)
 8007c08:	711a      	strb	r2, [r3, #4]
    current_menu = M_EDIT_SETTINGS;
 8007c0a:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <set_tx_pow_esc+0x24>)
 8007c0c:	2210      	movs	r2, #16
 8007c0e:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007c10:	f7fc fc96 	bl	8004540 <draw_current_menu>
}
 8007c14:	bf00      	nop
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	2000061c 	.word	0x2000061c
 8007c1c:	200007e0 	.word	0x200007e0
 8007c20:	200007fa 	.word	0x200007fa

08007c24 <set_send_intvl_up>:



void set_send_intvl_up(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
    if (settings_copy.send_interval_opt == SEND_INTERVAL_LAST_OPTION)
 8007c28:	4b08      	ldr	r3, [pc, #32]	; (8007c4c <set_send_intvl_up+0x28>)
 8007c2a:	795b      	ldrb	r3, [r3, #5]
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d103      	bne.n	8007c38 <set_send_intvl_up+0x14>
    {
    	settings_copy.send_interval_opt = SEND_INTERVAL_FIRST_OPTION;
 8007c30:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <set_send_intvl_up+0x28>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	715a      	strb	r2, [r3, #5]
 8007c36:	e005      	b.n	8007c44 <set_send_intvl_up+0x20>
    }
    else
    {
    	settings_copy.send_interval_opt++;
 8007c38:	4b04      	ldr	r3, [pc, #16]	; (8007c4c <set_send_intvl_up+0x28>)
 8007c3a:	795b      	ldrb	r3, [r3, #5]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	4b02      	ldr	r3, [pc, #8]	; (8007c4c <set_send_intvl_up+0x28>)
 8007c42:	715a      	strb	r2, [r3, #5]
    }

    draw_current_menu();
 8007c44:	f7fc fc7c 	bl	8004540 <draw_current_menu>
}
 8007c48:	bf00      	nop
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	200007e0 	.word	0x200007e0

08007c50 <set_send_intvl_down>:



void set_send_intvl_down(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
    if (settings_copy.send_interval_opt == SEND_INTERVAL_FIRST_OPTION)
 8007c54:	4b08      	ldr	r3, [pc, #32]	; (8007c78 <set_send_intvl_down+0x28>)
 8007c56:	795b      	ldrb	r3, [r3, #5]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d103      	bne.n	8007c64 <set_send_intvl_down+0x14>
    {
    	settings_copy.send_interval_opt = SEND_INTERVAL_LAST_OPTION;
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <set_send_intvl_down+0x28>)
 8007c5e:	2204      	movs	r2, #4
 8007c60:	715a      	strb	r2, [r3, #5]
 8007c62:	e005      	b.n	8007c70 <set_send_intvl_down+0x20>
    }
    else
    {
    	settings_copy.send_interval_opt--;
 8007c64:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <set_send_intvl_down+0x28>)
 8007c66:	795b      	ldrb	r3, [r3, #5]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	4b02      	ldr	r3, [pc, #8]	; (8007c78 <set_send_intvl_down+0x28>)
 8007c6e:	715a      	strb	r2, [r3, #5]
    }

    draw_current_menu();
 8007c70:	f7fc fc66 	bl	8004540 <draw_current_menu>
}
 8007c74:	bf00      	nop
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	200007e0 	.word	0x200007e0

08007c7c <set_send_intvl_ok>:



void set_send_intvl_ok(void)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	af00      	add	r7, sp, #0
    if (settings_copy.send_interval_opt != p_settings->send_interval_opt)
 8007c80:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <set_send_intvl_ok+0x28>)
 8007c82:	795a      	ldrb	r2, [r3, #5]
 8007c84:	4b08      	ldr	r3, [pc, #32]	; (8007ca8 <set_send_intvl_ok+0x2c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	795b      	ldrb	r3, [r3, #5]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d002      	beq.n	8007c94 <set_send_intvl_ok+0x18>
    {
        flag_settings_changed = 1;
 8007c8e:	4b07      	ldr	r3, [pc, #28]	; (8007cac <set_send_intvl_ok+0x30>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	701a      	strb	r2, [r3, #0]
    }

    current_menu = M_EDIT_SETTINGS;
 8007c94:	4b06      	ldr	r3, [pc, #24]	; (8007cb0 <set_send_intvl_ok+0x34>)
 8007c96:	2210      	movs	r2, #16
 8007c98:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007c9a:	f7fc fc51 	bl	8004540 <draw_current_menu>
}
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200007e0 	.word	0x200007e0
 8007ca8:	2000061c 	.word	0x2000061c
 8007cac:	2000011e 	.word	0x2000011e
 8007cb0:	200007fa 	.word	0x200007fa

08007cb4 <set_send_intvl_esc>:



void set_send_intvl_esc(void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
    settings_copy.send_interval_opt = p_settings->send_interval_opt;   //exit no save, reset value
 8007cb8:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <set_send_intvl_esc+0x1c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	795a      	ldrb	r2, [r3, #5]
 8007cbe:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <set_send_intvl_esc+0x20>)
 8007cc0:	715a      	strb	r2, [r3, #5]
    current_menu = M_EDIT_SETTINGS;
 8007cc2:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <set_send_intvl_esc+0x24>)
 8007cc4:	2210      	movs	r2, #16
 8007cc6:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007cc8:	f7fc fc3a 	bl	8004540 <draw_current_menu>
}
 8007ccc:	bf00      	nop
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	2000061c 	.word	0x2000061c
 8007cd4:	200007e0 	.word	0x200007e0
 8007cd8:	200007fa 	.word	0x200007fa

08007cdc <set_to_thr_up>:



void set_to_thr_up(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
	#define TIMEOUT_THRESHOLD_MAX 	(3600)
	#define TIMEOUT_THRESHOLD_STEP 	(10)

	if (settings_copy.timeout_threshold.as_integer < TIMEOUT_THRESHOLD_MAX)
 8007ce0:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <set_to_thr_up+0x24>)
 8007ce2:	88db      	ldrh	r3, [r3, #6]
 8007ce4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8007ce8:	d205      	bcs.n	8007cf6 <set_to_thr_up+0x1a>
	{
		settings_copy.timeout_threshold.as_integer += TIMEOUT_THRESHOLD_STEP;
 8007cea:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <set_to_thr_up+0x24>)
 8007cec:	88db      	ldrh	r3, [r3, #6]
 8007cee:	330a      	adds	r3, #10
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	4b03      	ldr	r3, [pc, #12]	; (8007d00 <set_to_thr_up+0x24>)
 8007cf4:	80da      	strh	r2, [r3, #6]
	}

    draw_current_menu();
 8007cf6:	f7fc fc23 	bl	8004540 <draw_current_menu>
}
 8007cfa:	bf00      	nop
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	200007e0 	.word	0x200007e0

08007d04 <set_to_thr_down>:



void set_to_thr_down(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
	#define TIMEOUT_THRESHOLD_MIN 	(0)

	if (settings_copy.timeout_threshold.as_integer > TIMEOUT_THRESHOLD_MIN)
 8007d08:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <set_to_thr_down+0x20>)
 8007d0a:	88db      	ldrh	r3, [r3, #6]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <set_to_thr_down+0x18>
	{
		settings_copy.timeout_threshold.as_integer -= TIMEOUT_THRESHOLD_STEP;
 8007d10:	4b04      	ldr	r3, [pc, #16]	; (8007d24 <set_to_thr_down+0x20>)
 8007d12:	88db      	ldrh	r3, [r3, #6]
 8007d14:	3b0a      	subs	r3, #10
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	4b02      	ldr	r3, [pc, #8]	; (8007d24 <set_to_thr_down+0x20>)
 8007d1a:	80da      	strh	r2, [r3, #6]
	}

    draw_current_menu();
 8007d1c:	f7fc fc10 	bl	8004540 <draw_current_menu>
}
 8007d20:	bf00      	nop
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	200007e0 	.word	0x200007e0

08007d28 <set_to_thr_ok>:



void set_to_thr_ok(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
    if (settings_copy.timeout_threshold.as_integer != p_settings->timeout_threshold.as_integer)
 8007d2c:	4b08      	ldr	r3, [pc, #32]	; (8007d50 <set_to_thr_ok+0x28>)
 8007d2e:	88da      	ldrh	r2, [r3, #6]
 8007d30:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <set_to_thr_ok+0x2c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	88db      	ldrh	r3, [r3, #6]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d002      	beq.n	8007d40 <set_to_thr_ok+0x18>
    {
        flag_settings_changed = 1;
 8007d3a:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <set_to_thr_ok+0x30>)
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	701a      	strb	r2, [r3, #0]
    }

    current_menu = M_EDIT_SETTINGS;
 8007d40:	4b06      	ldr	r3, [pc, #24]	; (8007d5c <set_to_thr_ok+0x34>)
 8007d42:	2210      	movs	r2, #16
 8007d44:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007d46:	f7fc fbfb 	bl	8004540 <draw_current_menu>
}
 8007d4a:	bf00      	nop
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	200007e0 	.word	0x200007e0
 8007d54:	2000061c 	.word	0x2000061c
 8007d58:	2000011e 	.word	0x2000011e
 8007d5c:	200007fa 	.word	0x200007fa

08007d60 <set_to_thr_esc>:



void set_to_thr_esc(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
	settings_copy.timeout_threshold.as_integer = p_settings->timeout_threshold.as_integer;   //exit no save, reset value
 8007d64:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <set_to_thr_esc+0x1c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	88da      	ldrh	r2, [r3, #6]
 8007d6a:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <set_to_thr_esc+0x20>)
 8007d6c:	80da      	strh	r2, [r3, #6]
    current_menu = M_EDIT_SETTINGS;
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <set_to_thr_esc+0x24>)
 8007d70:	2210      	movs	r2, #16
 8007d72:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007d74:	f7fc fbe4 	bl	8004540 <draw_current_menu>
}
 8007d78:	bf00      	nop
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	2000061c 	.word	0x2000061c
 8007d80:	200007e0 	.word	0x200007e0
 8007d84:	200007fa 	.word	0x200007fa

08007d88 <set_fnc_thr_up>:



void set_fnc_thr_up(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
	#define FENCE_THRESHOLD_MAX 	(3600)
	#define FENCE_THRESHOLD_STEP 	(10)

	if (settings_copy.fence_threshold.as_integer < FENCE_THRESHOLD_MAX)
 8007d8c:	4b07      	ldr	r3, [pc, #28]	; (8007dac <set_fnc_thr_up+0x24>)
 8007d8e:	891b      	ldrh	r3, [r3, #8]
 8007d90:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8007d94:	d205      	bcs.n	8007da2 <set_fnc_thr_up+0x1a>
	{
		settings_copy.fence_threshold.as_integer += FENCE_THRESHOLD_STEP;
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <set_fnc_thr_up+0x24>)
 8007d98:	891b      	ldrh	r3, [r3, #8]
 8007d9a:	330a      	adds	r3, #10
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	4b03      	ldr	r3, [pc, #12]	; (8007dac <set_fnc_thr_up+0x24>)
 8007da0:	811a      	strh	r2, [r3, #8]
	}

    draw_current_menu();
 8007da2:	f7fc fbcd 	bl	8004540 <draw_current_menu>
}
 8007da6:	bf00      	nop
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	200007e0 	.word	0x200007e0

08007db0 <set_fnc_thr_down>:



void set_fnc_thr_down(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
	#define FENCE_THRESHOLD_MIN 	(0)

	if (settings_copy.fence_threshold.as_integer > FENCE_THRESHOLD_MIN)
 8007db4:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <set_fnc_thr_down+0x20>)
 8007db6:	891b      	ldrh	r3, [r3, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <set_fnc_thr_down+0x18>
	{
		settings_copy.fence_threshold.as_integer -= FENCE_THRESHOLD_STEP;
 8007dbc:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <set_fnc_thr_down+0x20>)
 8007dbe:	891b      	ldrh	r3, [r3, #8]
 8007dc0:	3b0a      	subs	r3, #10
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <set_fnc_thr_down+0x20>)
 8007dc6:	811a      	strh	r2, [r3, #8]
	}

    draw_current_menu();
 8007dc8:	f7fc fbba 	bl	8004540 <draw_current_menu>
}
 8007dcc:	bf00      	nop
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	200007e0 	.word	0x200007e0

08007dd4 <set_fnc_thr_ok>:



void set_fnc_thr_ok(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
    if (settings_copy.fence_threshold.as_integer != p_settings->fence_threshold.as_integer)
 8007dd8:	4b08      	ldr	r3, [pc, #32]	; (8007dfc <set_fnc_thr_ok+0x28>)
 8007dda:	891a      	ldrh	r2, [r3, #8]
 8007ddc:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <set_fnc_thr_ok+0x2c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	891b      	ldrh	r3, [r3, #8]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d002      	beq.n	8007dec <set_fnc_thr_ok+0x18>
    {
        flag_settings_changed = 1;
 8007de6:	4b07      	ldr	r3, [pc, #28]	; (8007e04 <set_fnc_thr_ok+0x30>)
 8007de8:	2201      	movs	r2, #1
 8007dea:	701a      	strb	r2, [r3, #0]
    }

    current_menu = M_EDIT_SETTINGS;
 8007dec:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <set_fnc_thr_ok+0x34>)
 8007dee:	2210      	movs	r2, #16
 8007df0:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007df2:	f7fc fba5 	bl	8004540 <draw_current_menu>
}
 8007df6:	bf00      	nop
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	200007e0 	.word	0x200007e0
 8007e00:	2000061c 	.word	0x2000061c
 8007e04:	2000011e 	.word	0x2000011e
 8007e08:	200007fa 	.word	0x200007fa

08007e0c <set_fnc_thr_esc>:



void set_fnc_thr_esc(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
	settings_copy.fence_threshold.as_integer = p_settings->fence_threshold.as_integer;   //exit no save, reset value
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <set_fnc_thr_esc+0x1c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	891a      	ldrh	r2, [r3, #8]
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <set_fnc_thr_esc+0x20>)
 8007e18:	811a      	strh	r2, [r3, #8]
    current_menu = M_EDIT_SETTINGS;
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <set_fnc_thr_esc+0x24>)
 8007e1c:	2210      	movs	r2, #16
 8007e1e:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007e20:	f7fc fb8e 	bl	8004540 <draw_current_menu>
}
 8007e24:	bf00      	nop
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	2000061c 	.word	0x2000061c
 8007e2c:	200007e0 	.word	0x200007e0
 8007e30:	200007fa 	.word	0x200007fa

08007e34 <confirm_settings_save_esc>:



void confirm_settings_save_esc(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
    settings_copy = *p_settings;   //reset to no changes state
 8007e38:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <confirm_settings_save_esc+0x2c>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <confirm_settings_save_esc+0x30>)
 8007e3e:	6810      	ldr	r0, [r2, #0]
 8007e40:	6851      	ldr	r1, [r2, #4]
 8007e42:	6018      	str	r0, [r3, #0]
 8007e44:	6059      	str	r1, [r3, #4]
 8007e46:	8912      	ldrh	r2, [r2, #8]
 8007e48:	811a      	strh	r2, [r3, #8]
    flag_settings_changed = 0;  //clear flag
 8007e4a:	4b07      	ldr	r3, [pc, #28]	; (8007e68 <confirm_settings_save_esc+0x34>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	701a      	strb	r2, [r3, #0]
    current_menu = M_SETTINGS;
 8007e50:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <confirm_settings_save_esc+0x38>)
 8007e52:	220e      	movs	r2, #14
 8007e54:	701a      	strb	r2, [r3, #0]
    draw_current_menu();
 8007e56:	f7fc fb73 	bl	8004540 <draw_current_menu>
}
 8007e5a:	bf00      	nop
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	2000061c 	.word	0x2000061c
 8007e64:	200007e0 	.word	0x200007e0
 8007e68:	2000011e 	.word	0x2000011e
 8007e6c:	200007fa 	.word	0x200007fa

08007e70 <restore_defaults_ok>:



void restore_defaults_ok(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
    settings_save_default();
 8007e74:	f000 fef0 	bl	8008c58 <settings_save_default>
    NVIC_SystemReset();
 8007e78:	f7fc f8f4 	bl	8004064 <NVIC_SystemReset>
}
 8007e7c:	bf00      	nop
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <erase_all_ok>:



void erase_all_ok(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
    ssd1306_clear();
 8007e84:	f001 fb12 	bl	80094ac <ssd1306_clear>
    ssd1306_print(0, 1, "WAIT...", 0);
 8007e88:	2300      	movs	r3, #0
 8007e8a:	4a06      	ldr	r2, [pc, #24]	; (8007ea4 <erase_all_ok+0x24>)
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	2000      	movs	r0, #0
 8007e90:	f001 fc13 	bl	80096ba <ssd1306_print>
    ssd1306_update();
 8007e94:	f001 fae0 	bl	8009458 <ssd1306_update>
    m24c64_erase_all();
 8007e98:	f7fb fe8d 	bl	8003bb6 <m24c64_erase_all>
    NVIC_SystemReset();
 8007e9c:	f7fc f8e2 	bl	8004064 <NVIC_SystemReset>
}
 8007ea0:	bf00      	nop
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	0800d318 	.word	0x0800d318

08007ea8 <get_memory_slot>:
char *memory_slot_names[MEMORY_SLOTS_TOTAL + 1] = MEMORY_SLOT_NAMES;



struct memory_slot_struct **get_memory_slot(void)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 8007eae:	2301      	movs	r3, #1
 8007eb0:	71fb      	strb	r3, [r7, #7]
 8007eb2:	e00c      	b.n	8007ece <get_memory_slot+0x26>
	{
		p_memory_slot[slot] = &memory_slot[slot];
 8007eb4:	79fa      	ldrb	r2, [r7, #7]
 8007eb6:	79f9      	ldrb	r1, [r7, #7]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	011b      	lsls	r3, r3, #4
 8007ebc:	4413      	add	r3, r2
 8007ebe:	4a08      	ldr	r2, [pc, #32]	; (8007ee0 <get_memory_slot+0x38>)
 8007ec0:	4413      	add	r3, r2
 8007ec2:	4a08      	ldr	r2, [pc, #32]	; (8007ee4 <get_memory_slot+0x3c>)
 8007ec4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	71fb      	strb	r3, [r7, #7]
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	2b05      	cmp	r3, #5
 8007ed2:	d9ef      	bls.n	8007eb4 <get_memory_slot+0xc>
	}

	return &p_memory_slot[0];
 8007ed4:	4b03      	ldr	r3, [pc, #12]	; (8007ee4 <get_memory_slot+0x3c>)
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bc80      	pop	{r7}
 8007ede:	4770      	bx	lr
 8007ee0:	20000878 	.word	0x20000878
 8007ee4:	20000860 	.word	0x20000860

08007ee8 <init_points>:



void init_points(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
	p_gps_raw = get_gps_raw();
 8007eee:	f7fa fc11 	bl	8002714 <get_gps_raw>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	4b1e      	ldr	r3, [pc, #120]	; (8007f70 <init_points+0x88>)
 8007ef6:	601a      	str	r2, [r3, #0]
	pp_gps_air = get_gps_air();
 8007ef8:	f7fb fb62 	bl	80035c0 <get_gps_air>
 8007efc:	4602      	mov	r2, r0
 8007efe:	4b1d      	ldr	r3, [pc, #116]	; (8007f74 <init_points+0x8c>)
 8007f00:	601a      	str	r2, [r3, #0]
	pp_dev_aux = get_dev_aux();
 8007f02:	f7fb fb9d 	bl	8003640 <get_dev_aux>
 8007f06:	4602      	mov	r2, r0
 8007f08:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <init_points+0x90>)
 8007f0a:	601a      	str	r2, [r3, #0]

	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	71fb      	strb	r3, [r7, #7]
 8007f10:	e027      	b.n	8007f62 <init_points+0x7a>
	{
		memory_slot[slot].slot_name[0] = memory_slot_names[slot][0];	//init slot names
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	4a19      	ldr	r2, [pc, #100]	; (8007f7c <init_points+0x94>)
 8007f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f1a:	79fa      	ldrb	r2, [r7, #7]
 8007f1c:	7818      	ldrb	r0, [r3, #0]
 8007f1e:	4918      	ldr	r1, [pc, #96]	; (8007f80 <init_points+0x98>)
 8007f20:	4613      	mov	r3, r2
 8007f22:	011b      	lsls	r3, r3, #4
 8007f24:	4413      	add	r3, r2
 8007f26:	440b      	add	r3, r1
 8007f28:	3301      	adds	r3, #1
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	701a      	strb	r2, [r3, #0]
		memory_slot[slot].slot_name[1] = memory_slot_names[slot][1];
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	4a12      	ldr	r2, [pc, #72]	; (8007f7c <init_points+0x94>)
 8007f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f36:	79fa      	ldrb	r2, [r7, #7]
 8007f38:	7858      	ldrb	r0, [r3, #1]
 8007f3a:	4911      	ldr	r1, [pc, #68]	; (8007f80 <init_points+0x98>)
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	011b      	lsls	r3, r3, #4
 8007f40:	4413      	add	r3, r2
 8007f42:	440b      	add	r3, r1
 8007f44:	3302      	adds	r3, #2
 8007f46:	4602      	mov	r2, r0
 8007f48:	701a      	strb	r2, [r3, #0]
		memory_slot[slot].slot_name[2] = 0;
 8007f4a:	79fa      	ldrb	r2, [r7, #7]
 8007f4c:	490c      	ldr	r1, [pc, #48]	; (8007f80 <init_points+0x98>)
 8007f4e:	4613      	mov	r3, r2
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	4413      	add	r3, r2
 8007f54:	440b      	add	r3, r1
 8007f56:	3303      	adds	r3, #3
 8007f58:	2200      	movs	r2, #0
 8007f5a:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	71fb      	strb	r3, [r7, #7]
 8007f62:	79fb      	ldrb	r3, [r7, #7]
 8007f64:	2b05      	cmp	r3, #5
 8007f66:	d9d4      	bls.n	8007f12 <init_points+0x2a>
	}
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000808 	.word	0x20000808
 8007f74:	20000804 	.word	0x20000804
 8007f78:	2000083c 	.word	0x2000083c
 8007f7c:	20000030 	.word	0x20000030
 8007f80:	20000878 	.word	0x20000878

08007f84 <read_memory_slots>:



void read_memory_slots(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	71fb      	strb	r3, [r7, #7]
 8007f8e:	e0a1      	b.n	80080d4 <read_memory_slots+0x150>
	{

		clear_point_buffer();
 8007f90:	f000 fa4a 	bl	8008428 <clear_point_buffer>
		m24c64_read_page(&point_buffer[0], slot);
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	4619      	mov	r1, r3
 8007f98:	4852      	ldr	r0, [pc, #328]	; (80080e4 <read_memory_slots+0x160>)
 8007f9a:	f7fb fc8d 	bl	80038b8 <m24c64_read_page>

		if (point_buffer[MEMORY_POINT_EXIST_FLAG_POS] == POINT_EXIST_FLAG_DEFAULT)
 8007f9e:	4b51      	ldr	r3, [pc, #324]	; (80080e4 <read_memory_slots+0x160>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2baa      	cmp	r3, #170	; 0xaa
 8007fa4:	f040 808b 	bne.w	80080be <read_memory_slots+0x13a>
		{
			memory_slot[slot].exist_flag = 1;
 8007fa8:	79fa      	ldrb	r2, [r7, #7]
 8007faa:	494f      	ldr	r1, [pc, #316]	; (80080e8 <read_memory_slots+0x164>)
 8007fac:	4613      	mov	r3, r2
 8007fae:	011b      	lsls	r3, r3, #4
 8007fb0:	4413      	add	r3, r2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	701a      	strb	r2, [r3, #0]

			memory_slot[slot].point_name[0] = point_buffer[MEMORY_POINT_NAME_POS];
 8007fb8:	79fa      	ldrb	r2, [r7, #7]
 8007fba:	4b4a      	ldr	r3, [pc, #296]	; (80080e4 <read_memory_slots+0x160>)
 8007fbc:	7858      	ldrb	r0, [r3, #1]
 8007fbe:	494a      	ldr	r1, [pc, #296]	; (80080e8 <read_memory_slots+0x164>)
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	4413      	add	r3, r2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4602      	mov	r2, r0
 8007fcc:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].point_name[1] = point_buffer[MEMORY_POINT_NAME_POS + 1];
 8007fce:	79fa      	ldrb	r2, [r7, #7]
 8007fd0:	4b44      	ldr	r3, [pc, #272]	; (80080e4 <read_memory_slots+0x160>)
 8007fd2:	7898      	ldrb	r0, [r3, #2]
 8007fd4:	4944      	ldr	r1, [pc, #272]	; (80080e8 <read_memory_slots+0x164>)
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	011b      	lsls	r3, r3, #4
 8007fda:	4413      	add	r3, r2
 8007fdc:	440b      	add	r3, r1
 8007fde:	3305      	adds	r3, #5
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].point_name[2] = point_buffer[MEMORY_POINT_NAME_POS + 2];
 8007fe4:	79fa      	ldrb	r2, [r7, #7]
 8007fe6:	4b3f      	ldr	r3, [pc, #252]	; (80080e4 <read_memory_slots+0x160>)
 8007fe8:	78d8      	ldrb	r0, [r3, #3]
 8007fea:	493f      	ldr	r1, [pc, #252]	; (80080e8 <read_memory_slots+0x164>)
 8007fec:	4613      	mov	r3, r2
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	4413      	add	r3, r2
 8007ff2:	440b      	add	r3, r1
 8007ff4:	3306      	adds	r3, #6
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].point_name[3] = point_buffer[MEMORY_POINT_NAME_POS + 3];
 8007ffa:	79fa      	ldrb	r2, [r7, #7]
 8007ffc:	4b39      	ldr	r3, [pc, #228]	; (80080e4 <read_memory_slots+0x160>)
 8007ffe:	7918      	ldrb	r0, [r3, #4]
 8008000:	4939      	ldr	r1, [pc, #228]	; (80080e8 <read_memory_slots+0x164>)
 8008002:	4613      	mov	r3, r2
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	4413      	add	r3, r2
 8008008:	440b      	add	r3, r1
 800800a:	3307      	adds	r3, #7
 800800c:	4602      	mov	r2, r0
 800800e:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].point_name[4] = point_buffer[MEMORY_POINT_NAME_POS + 4];
 8008010:	79fa      	ldrb	r2, [r7, #7]
 8008012:	4b34      	ldr	r3, [pc, #208]	; (80080e4 <read_memory_slots+0x160>)
 8008014:	7958      	ldrb	r0, [r3, #5]
 8008016:	4934      	ldr	r1, [pc, #208]	; (80080e8 <read_memory_slots+0x164>)
 8008018:	4613      	mov	r3, r2
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	4413      	add	r3, r2
 800801e:	440b      	add	r3, r1
 8008020:	3308      	adds	r3, #8
 8008022:	4602      	mov	r2, r0
 8008024:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].point_name[5] = 0;
 8008026:	79fa      	ldrb	r2, [r7, #7]
 8008028:	492f      	ldr	r1, [pc, #188]	; (80080e8 <read_memory_slots+0x164>)
 800802a:	4613      	mov	r3, r2
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	4413      	add	r3, r2
 8008030:	440b      	add	r3, r1
 8008032:	3309      	adds	r3, #9
 8008034:	2200      	movs	r2, #0
 8008036:	701a      	strb	r2, [r3, #0]

			memory_slot[slot].save_date[0] = point_buffer[MEMORY_POINT_DAY_POS];
 8008038:	79fa      	ldrb	r2, [r7, #7]
 800803a:	4b2a      	ldr	r3, [pc, #168]	; (80080e4 <read_memory_slots+0x160>)
 800803c:	7998      	ldrb	r0, [r3, #6]
 800803e:	492a      	ldr	r1, [pc, #168]	; (80080e8 <read_memory_slots+0x164>)
 8008040:	4613      	mov	r3, r2
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	4413      	add	r3, r2
 8008046:	440b      	add	r3, r1
 8008048:	330a      	adds	r3, #10
 800804a:	4602      	mov	r2, r0
 800804c:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].save_date[1] = point_buffer[MEMORY_POINT_DAY_POS + 1];
 800804e:	79fa      	ldrb	r2, [r7, #7]
 8008050:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <read_memory_slots+0x160>)
 8008052:	79d8      	ldrb	r0, [r3, #7]
 8008054:	4924      	ldr	r1, [pc, #144]	; (80080e8 <read_memory_slots+0x164>)
 8008056:	4613      	mov	r3, r2
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	4413      	add	r3, r2
 800805c:	440b      	add	r3, r1
 800805e:	330b      	adds	r3, #11
 8008060:	4602      	mov	r2, r0
 8008062:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].save_date[2] = point_buffer[MEMORY_POINT_MONTH_POS];
 8008064:	79fa      	ldrb	r2, [r7, #7]
 8008066:	4b1f      	ldr	r3, [pc, #124]	; (80080e4 <read_memory_slots+0x160>)
 8008068:	7a18      	ldrb	r0, [r3, #8]
 800806a:	491f      	ldr	r1, [pc, #124]	; (80080e8 <read_memory_slots+0x164>)
 800806c:	4613      	mov	r3, r2
 800806e:	011b      	lsls	r3, r3, #4
 8008070:	4413      	add	r3, r2
 8008072:	440b      	add	r3, r1
 8008074:	330c      	adds	r3, #12
 8008076:	4602      	mov	r2, r0
 8008078:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].save_date[3] = point_buffer[MEMORY_POINT_MONTH_POS + 1];
 800807a:	79fa      	ldrb	r2, [r7, #7]
 800807c:	4b19      	ldr	r3, [pc, #100]	; (80080e4 <read_memory_slots+0x160>)
 800807e:	7a58      	ldrb	r0, [r3, #9]
 8008080:	4919      	ldr	r1, [pc, #100]	; (80080e8 <read_memory_slots+0x164>)
 8008082:	4613      	mov	r3, r2
 8008084:	011b      	lsls	r3, r3, #4
 8008086:	4413      	add	r3, r2
 8008088:	440b      	add	r3, r1
 800808a:	330d      	adds	r3, #13
 800808c:	4602      	mov	r2, r0
 800808e:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].save_date[4] = point_buffer[MEMORY_POINT_YEAR_POS];
 8008090:	79fa      	ldrb	r2, [r7, #7]
 8008092:	4b14      	ldr	r3, [pc, #80]	; (80080e4 <read_memory_slots+0x160>)
 8008094:	7a98      	ldrb	r0, [r3, #10]
 8008096:	4914      	ldr	r1, [pc, #80]	; (80080e8 <read_memory_slots+0x164>)
 8008098:	4613      	mov	r3, r2
 800809a:	011b      	lsls	r3, r3, #4
 800809c:	4413      	add	r3, r2
 800809e:	440b      	add	r3, r1
 80080a0:	330e      	adds	r3, #14
 80080a2:	4602      	mov	r2, r0
 80080a4:	701a      	strb	r2, [r3, #0]
			memory_slot[slot].save_date[5] = point_buffer[MEMORY_POINT_YEAR_POS + 1];
 80080a6:	79fa      	ldrb	r2, [r7, #7]
 80080a8:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <read_memory_slots+0x160>)
 80080aa:	7ad8      	ldrb	r0, [r3, #11]
 80080ac:	490e      	ldr	r1, [pc, #56]	; (80080e8 <read_memory_slots+0x164>)
 80080ae:	4613      	mov	r3, r2
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	4413      	add	r3, r2
 80080b4:	440b      	add	r3, r1
 80080b6:	330f      	adds	r3, #15
 80080b8:	4602      	mov	r2, r0
 80080ba:	701a      	strb	r2, [r3, #0]
 80080bc:	e007      	b.n	80080ce <read_memory_slots+0x14a>
		}
		else
		{
			memory_slot[slot].exist_flag = 0;
 80080be:	79fa      	ldrb	r2, [r7, #7]
 80080c0:	4909      	ldr	r1, [pc, #36]	; (80080e8 <read_memory_slots+0x164>)
 80080c2:	4613      	mov	r3, r2
 80080c4:	011b      	lsls	r3, r3, #4
 80080c6:	4413      	add	r3, r2
 80080c8:	440b      	add	r3, r1
 80080ca:	2200      	movs	r2, #0
 80080cc:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 1; slot <= MEMORY_SLOTS_TOTAL; slot++)
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	3301      	adds	r3, #1
 80080d2:	71fb      	strb	r3, [r7, #7]
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	2b05      	cmp	r3, #5
 80080d8:	f67f af5a 	bls.w	8007f90 <read_memory_slots+0xc>
		}
	}
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20000840 	.word	0x20000840
 80080e8:	20000878 	.word	0x20000878

080080ec <save_memory_point>:



//Save selected device in a slot
void save_memory_point(uint8_t dev_num, char *point_name, uint8_t slot_num)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	6039      	str	r1, [r7, #0]
 80080f6:	71fb      	strb	r3, [r7, #7]
 80080f8:	4613      	mov	r3, r2
 80080fa:	71bb      	strb	r3, [r7, #6]
	clear_point_buffer();
 80080fc:	f000 f994 	bl	8008428 <clear_point_buffer>

	point_buffer[MEMORY_POINT_EXIST_FLAG_POS] = 		POINT_EXIST_FLAG_DEFAULT;
 8008100:	4b4d      	ldr	r3, [pc, #308]	; (8008238 <save_memory_point+0x14c>)
 8008102:	22aa      	movs	r2, #170	; 0xaa
 8008104:	701a      	strb	r2, [r3, #0]

	point_buffer[MEMORY_POINT_NAME_POS] = 				point_name[0];
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	4b4b      	ldr	r3, [pc, #300]	; (8008238 <save_memory_point+0x14c>)
 800810c:	705a      	strb	r2, [r3, #1]
	point_buffer[MEMORY_POINT_NAME_POS + 1] = 			point_name[1];
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	3301      	adds	r3, #1
 8008112:	781a      	ldrb	r2, [r3, #0]
 8008114:	4b48      	ldr	r3, [pc, #288]	; (8008238 <save_memory_point+0x14c>)
 8008116:	709a      	strb	r2, [r3, #2]
	point_buffer[MEMORY_POINT_NAME_POS + 2] = 			point_name[2];
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	3302      	adds	r3, #2
 800811c:	781a      	ldrb	r2, [r3, #0]
 800811e:	4b46      	ldr	r3, [pc, #280]	; (8008238 <save_memory_point+0x14c>)
 8008120:	70da      	strb	r2, [r3, #3]
	point_buffer[MEMORY_POINT_NAME_POS + 3] = 			point_name[3];
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	3303      	adds	r3, #3
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	4b43      	ldr	r3, [pc, #268]	; (8008238 <save_memory_point+0x14c>)
 800812a:	711a      	strb	r2, [r3, #4]
	point_buffer[MEMORY_POINT_NAME_POS + 4] = 			point_name[4];
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	3304      	adds	r3, #4
 8008130:	781a      	ldrb	r2, [r3, #0]
 8008132:	4b41      	ldr	r3, [pc, #260]	; (8008238 <save_memory_point+0x14c>)
 8008134:	715a      	strb	r2, [r3, #5]

	point_buffer[MEMORY_POINT_DAY_POS] = 				p_gps_raw->date[0];	//save in char format for easy print in the menu
 8008136:	4b41      	ldr	r3, [pc, #260]	; (800823c <save_memory_point+0x150>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	7b1a      	ldrb	r2, [r3, #12]
 800813c:	4b3e      	ldr	r3, [pc, #248]	; (8008238 <save_memory_point+0x14c>)
 800813e:	719a      	strb	r2, [r3, #6]
	point_buffer[MEMORY_POINT_DAY_POS + 1] = 			p_gps_raw->date[1];
 8008140:	4b3e      	ldr	r3, [pc, #248]	; (800823c <save_memory_point+0x150>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	7b5a      	ldrb	r2, [r3, #13]
 8008146:	4b3c      	ldr	r3, [pc, #240]	; (8008238 <save_memory_point+0x14c>)
 8008148:	71da      	strb	r2, [r3, #7]

	point_buffer[MEMORY_POINT_MONTH_POS] = 			p_gps_raw->date[2];
 800814a:	4b3c      	ldr	r3, [pc, #240]	; (800823c <save_memory_point+0x150>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	7b9a      	ldrb	r2, [r3, #14]
 8008150:	4b39      	ldr	r3, [pc, #228]	; (8008238 <save_memory_point+0x14c>)
 8008152:	721a      	strb	r2, [r3, #8]
	point_buffer[MEMORY_POINT_MONTH_POS + 1] = 		p_gps_raw->date[3];
 8008154:	4b39      	ldr	r3, [pc, #228]	; (800823c <save_memory_point+0x150>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	7bda      	ldrb	r2, [r3, #15]
 800815a:	4b37      	ldr	r3, [pc, #220]	; (8008238 <save_memory_point+0x14c>)
 800815c:	725a      	strb	r2, [r3, #9]

	point_buffer[MEMORY_POINT_YEAR_POS] = 				p_gps_raw->date[4];
 800815e:	4b37      	ldr	r3, [pc, #220]	; (800823c <save_memory_point+0x150>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	7c1a      	ldrb	r2, [r3, #16]
 8008164:	4b34      	ldr	r3, [pc, #208]	; (8008238 <save_memory_point+0x14c>)
 8008166:	729a      	strb	r2, [r3, #10]
	point_buffer[MEMORY_POINT_YEAR_POS + 1] = 			p_gps_raw->date[5];
 8008168:	4b34      	ldr	r3, [pc, #208]	; (800823c <save_memory_point+0x150>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	7c5a      	ldrb	r2, [r3, #17]
 800816e:	4b32      	ldr	r3, [pc, #200]	; (8008238 <save_memory_point+0x14c>)
 8008170:	72da      	strb	r2, [r3, #11]

	point_buffer[MEMORY_POINT_LATITUDE_POS] = 			pp_gps_air[dev_num]->latitude.as_array[0];
 8008172:	4b33      	ldr	r3, [pc, #204]	; (8008240 <save_memory_point+0x154>)
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	791a      	ldrb	r2, [r3, #4]
 8008180:	4b2d      	ldr	r3, [pc, #180]	; (8008238 <save_memory_point+0x14c>)
 8008182:	731a      	strb	r2, [r3, #12]
	point_buffer[MEMORY_POINT_LATITUDE_POS + 1] = 		pp_gps_air[dev_num]->latitude.as_array[1];
 8008184:	4b2e      	ldr	r3, [pc, #184]	; (8008240 <save_memory_point+0x154>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	79fb      	ldrb	r3, [r7, #7]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	795a      	ldrb	r2, [r3, #5]
 8008192:	4b29      	ldr	r3, [pc, #164]	; (8008238 <save_memory_point+0x14c>)
 8008194:	735a      	strb	r2, [r3, #13]
	point_buffer[MEMORY_POINT_LATITUDE_POS + 2] = 		pp_gps_air[dev_num]->latitude.as_array[2];
 8008196:	4b2a      	ldr	r3, [pc, #168]	; (8008240 <save_memory_point+0x154>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	799a      	ldrb	r2, [r3, #6]
 80081a4:	4b24      	ldr	r3, [pc, #144]	; (8008238 <save_memory_point+0x14c>)
 80081a6:	739a      	strb	r2, [r3, #14]
	point_buffer[MEMORY_POINT_LATITUDE_POS + 3] = 		pp_gps_air[dev_num]->latitude.as_array[3];
 80081a8:	4b25      	ldr	r3, [pc, #148]	; (8008240 <save_memory_point+0x154>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	79da      	ldrb	r2, [r3, #7]
 80081b6:	4b20      	ldr	r3, [pc, #128]	; (8008238 <save_memory_point+0x14c>)
 80081b8:	73da      	strb	r2, [r3, #15]

	point_buffer[MEMORY_POINT_LONGITUDE_POS] = 		pp_gps_air[dev_num]->longitude.as_array[0];
 80081ba:	4b21      	ldr	r3, [pc, #132]	; (8008240 <save_memory_point+0x154>)
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	7a1a      	ldrb	r2, [r3, #8]
 80081c8:	4b1b      	ldr	r3, [pc, #108]	; (8008238 <save_memory_point+0x14c>)
 80081ca:	741a      	strb	r2, [r3, #16]
	point_buffer[MEMORY_POINT_LONGITUDE_POS + 1] = 	pp_gps_air[dev_num]->longitude.as_array[1];
 80081cc:	4b1c      	ldr	r3, [pc, #112]	; (8008240 <save_memory_point+0x154>)
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	79fb      	ldrb	r3, [r7, #7]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	7a5a      	ldrb	r2, [r3, #9]
 80081da:	4b17      	ldr	r3, [pc, #92]	; (8008238 <save_memory_point+0x14c>)
 80081dc:	745a      	strb	r2, [r3, #17]
	point_buffer[MEMORY_POINT_LONGITUDE_POS + 2] = 	pp_gps_air[dev_num]->longitude.as_array[2];
 80081de:	4b18      	ldr	r3, [pc, #96]	; (8008240 <save_memory_point+0x154>)
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	7a9a      	ldrb	r2, [r3, #10]
 80081ec:	4b12      	ldr	r3, [pc, #72]	; (8008238 <save_memory_point+0x14c>)
 80081ee:	749a      	strb	r2, [r3, #18]
	point_buffer[MEMORY_POINT_LONGITUDE_POS + 3] = 	pp_gps_air[dev_num]->longitude.as_array[3];
 80081f0:	4b13      	ldr	r3, [pc, #76]	; (8008240 <save_memory_point+0x154>)
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	7ada      	ldrb	r2, [r3, #11]
 80081fe:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <save_memory_point+0x14c>)
 8008200:	74da      	strb	r2, [r3, #19]

	point_buffer[MEMORY_POINT_ALTITUDE_POS] = 			pp_gps_air[dev_num]->altitude.as_array[0];
 8008202:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <save_memory_point+0x154>)
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	79fb      	ldrb	r3, [r7, #7]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	7b1a      	ldrb	r2, [r3, #12]
 8008210:	4b09      	ldr	r3, [pc, #36]	; (8008238 <save_memory_point+0x14c>)
 8008212:	751a      	strb	r2, [r3, #20]
	point_buffer[MEMORY_POINT_ALTITUDE_POS + 1] = 		pp_gps_air[dev_num]->altitude.as_array[1];
 8008214:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <save_memory_point+0x154>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	7b5a      	ldrb	r2, [r3, #13]
 8008222:	4b05      	ldr	r3, [pc, #20]	; (8008238 <save_memory_point+0x14c>)
 8008224:	755a      	strb	r2, [r3, #21]

	m24c64_write_page(&point_buffer[0], slot_num);
 8008226:	79bb      	ldrb	r3, [r7, #6]
 8008228:	4619      	mov	r1, r3
 800822a:	4803      	ldr	r0, [pc, #12]	; (8008238 <save_memory_point+0x14c>)
 800822c:	f7fb fc14 	bl	8003a58 <m24c64_write_page>
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20000840 	.word	0x20000840
 800823c:	20000808 	.word	0x20000808
 8008240:	20000804 	.word	0x20000804

08008244 <load_memory_point>:



void load_memory_point(uint8_t dev_num, uint8_t slot_num)
{
 8008244:	b5b0      	push	{r4, r5, r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	460a      	mov	r2, r1
 800824e:	71fb      	strb	r3, [r7, #7]
 8008250:	4613      	mov	r3, r2
 8008252:	71bb      	strb	r3, [r7, #6]
	clear_point_buffer();
 8008254:	f000 f8e8 	bl	8008428 <clear_point_buffer>

	m24c64_read_page(&point_buffer[0], slot_num);
 8008258:	79bb      	ldrb	r3, [r7, #6]
 800825a:	4619      	mov	r1, r3
 800825c:	4865      	ldr	r0, [pc, #404]	; (80083f4 <load_memory_point+0x1b0>)
 800825e:	f7fb fb2b 	bl	80038b8 <m24c64_read_page>

	memset(pp_gps_air[dev_num], 0, sizeof(*(pp_gps_air[dev_num])));
 8008262:	4b65      	ldr	r3, [pc, #404]	; (80083f8 <load_memory_point+0x1b4>)
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2214      	movs	r2, #20
 8008270:	2100      	movs	r1, #0
 8008272:	4618      	mov	r0, r3
 8008274:	f001 fe2b 	bl	8009ece <memset>
	memset(pp_dev_aux[dev_num], 0, sizeof(*(pp_dev_aux[dev_num])));
 8008278:	4b60      	ldr	r3, [pc, #384]	; (80083fc <load_memory_point+0x1b8>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2218      	movs	r2, #24
 8008286:	2100      	movs	r1, #0
 8008288:	4618      	mov	r0, r3
 800828a:	f001 fe20 	bl	8009ece <memset>

	pp_dev_aux[dev_num]->exist_flag = 1;
 800828e:	4b5b      	ldr	r3, [pc, #364]	; (80083fc <load_memory_point+0x1b8>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2201      	movs	r2, #1
 800829c:	701a      	strb	r2, [r3, #0]
	pp_dev_aux[dev_num]->memory_point_flag = 1;
 800829e:	4b57      	ldr	r3, [pc, #348]	; (80083fc <load_memory_point+0x1b8>)
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	79fb      	ldrb	r3, [r7, #7]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2201      	movs	r2, #1
 80082ac:	739a      	strb	r2, [r3, #14]
	pp_dev_aux[dev_num]->timestamp = get_uptime();
 80082ae:	4b53      	ldr	r3, [pc, #332]	; (80083fc <load_memory_point+0x1b8>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	681c      	ldr	r4, [r3, #0]
 80082ba:	f7fb feb7 	bl	800402c <get_uptime>
 80082be:	4603      	mov	r3, r0
 80082c0:	6063      	str	r3, [r4, #4]

	for (uint8_t c = 0; c < MEMORY_POINT_NAME_LENGTH; c++)
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]
 80082c6:	e015      	b.n	80082f4 <load_memory_point+0xb0>
	{
		pp_dev_aux[dev_num]->point_name[c] = memory_slot[slot_num].point_name[c];
 80082c8:	79ba      	ldrb	r2, [r7, #6]
 80082ca:	7bfc      	ldrb	r4, [r7, #15]
 80082cc:	4b4b      	ldr	r3, [pc, #300]	; (80083fc <load_memory_point+0x1b8>)
 80082ce:	6819      	ldr	r1, [r3, #0]
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	7bf9      	ldrb	r1, [r7, #15]
 80082da:	4d49      	ldr	r5, [pc, #292]	; (8008400 <load_memory_point+0x1bc>)
 80082dc:	4613      	mov	r3, r2
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	4413      	add	r3, r2
 80082e2:	442b      	add	r3, r5
 80082e4:	4423      	add	r3, r4
 80082e6:	3304      	adds	r3, #4
 80082e8:	781a      	ldrb	r2, [r3, #0]
 80082ea:	1843      	adds	r3, r0, r1
 80082ec:	73da      	strb	r2, [r3, #15]
	for (uint8_t c = 0; c < MEMORY_POINT_NAME_LENGTH; c++)
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	3301      	adds	r3, #1
 80082f2:	73fb      	strb	r3, [r7, #15]
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d9e6      	bls.n	80082c8 <load_memory_point+0x84>
	}

	pp_gps_air[dev_num]->device_id[0] = memory_slot[slot_num].slot_name[0];
 80082fa:	79ba      	ldrb	r2, [r7, #6]
 80082fc:	4b3e      	ldr	r3, [pc, #248]	; (80083f8 <load_memory_point+0x1b4>)
 80082fe:	6819      	ldr	r1, [r3, #0]
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	440b      	add	r3, r1
 8008306:	6819      	ldr	r1, [r3, #0]
 8008308:	483d      	ldr	r0, [pc, #244]	; (8008400 <load_memory_point+0x1bc>)
 800830a:	4613      	mov	r3, r2
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	4413      	add	r3, r2
 8008310:	4403      	add	r3, r0
 8008312:	3301      	adds	r3, #1
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	700b      	strb	r3, [r1, #0]
	pp_gps_air[dev_num]->device_id[1] = memory_slot[slot_num].slot_name[1];
 8008318:	79ba      	ldrb	r2, [r7, #6]
 800831a:	4b37      	ldr	r3, [pc, #220]	; (80083f8 <load_memory_point+0x1b4>)
 800831c:	6819      	ldr	r1, [r3, #0]
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	440b      	add	r3, r1
 8008324:	6819      	ldr	r1, [r3, #0]
 8008326:	4836      	ldr	r0, [pc, #216]	; (8008400 <load_memory_point+0x1bc>)
 8008328:	4613      	mov	r3, r2
 800832a:	011b      	lsls	r3, r3, #4
 800832c:	4413      	add	r3, r2
 800832e:	4403      	add	r3, r0
 8008330:	3302      	adds	r3, #2
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	704b      	strb	r3, [r1, #1]

	pp_gps_air[dev_num]->latitude.as_array[0] = 	point_buffer[MEMORY_POINT_LATITUDE_POS];
 8008336:	4b30      	ldr	r3, [pc, #192]	; (80083f8 <load_memory_point+0x1b4>)
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a2c      	ldr	r2, [pc, #176]	; (80083f4 <load_memory_point+0x1b0>)
 8008344:	7b12      	ldrb	r2, [r2, #12]
 8008346:	711a      	strb	r2, [r3, #4]
	pp_gps_air[dev_num]->latitude.as_array[1] =  	point_buffer[MEMORY_POINT_LATITUDE_POS + 1];
 8008348:	4b2b      	ldr	r3, [pc, #172]	; (80083f8 <load_memory_point+0x1b4>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a27      	ldr	r2, [pc, #156]	; (80083f4 <load_memory_point+0x1b0>)
 8008356:	7b52      	ldrb	r2, [r2, #13]
 8008358:	715a      	strb	r2, [r3, #5]
	pp_gps_air[dev_num]->latitude.as_array[2] =  	point_buffer[MEMORY_POINT_LATITUDE_POS + 2];
 800835a:	4b27      	ldr	r3, [pc, #156]	; (80083f8 <load_memory_point+0x1b4>)
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	79fb      	ldrb	r3, [r7, #7]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a23      	ldr	r2, [pc, #140]	; (80083f4 <load_memory_point+0x1b0>)
 8008368:	7b92      	ldrb	r2, [r2, #14]
 800836a:	719a      	strb	r2, [r3, #6]
	pp_gps_air[dev_num]->latitude.as_array[3] =  	point_buffer[MEMORY_POINT_LATITUDE_POS + 3];
 800836c:	4b22      	ldr	r3, [pc, #136]	; (80083f8 <load_memory_point+0x1b4>)
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a1e      	ldr	r2, [pc, #120]	; (80083f4 <load_memory_point+0x1b0>)
 800837a:	7bd2      	ldrb	r2, [r2, #15]
 800837c:	71da      	strb	r2, [r3, #7]

	pp_gps_air[dev_num]->longitude.as_array[0] = 	point_buffer[MEMORY_POINT_LONGITUDE_POS];
 800837e:	4b1e      	ldr	r3, [pc, #120]	; (80083f8 <load_memory_point+0x1b4>)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1a      	ldr	r2, [pc, #104]	; (80083f4 <load_memory_point+0x1b0>)
 800838c:	7c12      	ldrb	r2, [r2, #16]
 800838e:	721a      	strb	r2, [r3, #8]
	pp_gps_air[dev_num]->longitude.as_array[1] = 	point_buffer[MEMORY_POINT_LONGITUDE_POS + 1];
 8008390:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <load_memory_point+0x1b4>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	79fb      	ldrb	r3, [r7, #7]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a15      	ldr	r2, [pc, #84]	; (80083f4 <load_memory_point+0x1b0>)
 800839e:	7c52      	ldrb	r2, [r2, #17]
 80083a0:	725a      	strb	r2, [r3, #9]
	pp_gps_air[dev_num]->longitude.as_array[2] = 	point_buffer[MEMORY_POINT_LONGITUDE_POS + 2];
 80083a2:	4b15      	ldr	r3, [pc, #84]	; (80083f8 <load_memory_point+0x1b4>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a11      	ldr	r2, [pc, #68]	; (80083f4 <load_memory_point+0x1b0>)
 80083b0:	7c92      	ldrb	r2, [r2, #18]
 80083b2:	729a      	strb	r2, [r3, #10]
	pp_gps_air[dev_num]->longitude.as_array[3] = 	point_buffer[MEMORY_POINT_LONGITUDE_POS + 3];
 80083b4:	4b10      	ldr	r3, [pc, #64]	; (80083f8 <load_memory_point+0x1b4>)
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a0c      	ldr	r2, [pc, #48]	; (80083f4 <load_memory_point+0x1b0>)
 80083c2:	7cd2      	ldrb	r2, [r2, #19]
 80083c4:	72da      	strb	r2, [r3, #11]

	pp_gps_air[dev_num]->altitude.as_array[0] =  	point_buffer[MEMORY_POINT_ALTITUDE_POS];
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <load_memory_point+0x1b4>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <load_memory_point+0x1b0>)
 80083d4:	7d12      	ldrb	r2, [r2, #20]
 80083d6:	731a      	strb	r2, [r3, #12]
	pp_gps_air[dev_num]->altitude.as_array[1] =		point_buffer[MEMORY_POINT_ALTITUDE_POS + 1];
 80083d8:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <load_memory_point+0x1b4>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a03      	ldr	r2, [pc, #12]	; (80083f4 <load_memory_point+0x1b0>)
 80083e6:	7d52      	ldrb	r2, [r2, #21]
 80083e8:	735a      	strb	r2, [r3, #13]
}
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bdb0      	pop	{r4, r5, r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000840 	.word	0x20000840
 80083f8:	20000804 	.word	0x20000804
 80083fc:	2000083c 	.word	0x2000083c
 8008400:	20000878 	.word	0x20000878

08008404 <delete_memory_point>:




void delete_memory_point(uint8_t slot_num)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	71fb      	strb	r3, [r7, #7]
	clear_point_buffer();
 800840e:	f000 f80b 	bl	8008428 <clear_point_buffer>
	m24c64_write_page(&point_buffer[0], slot_num);
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	4619      	mov	r1, r3
 8008416:	4803      	ldr	r0, [pc, #12]	; (8008424 <delete_memory_point+0x20>)
 8008418:	f7fb fb1e 	bl	8003a58 <m24c64_write_page>
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	20000840 	.word	0x20000840

08008428 <clear_point_buffer>:




void clear_point_buffer(void)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 800842e:	2300      	movs	r3, #0
 8008430:	71fb      	strb	r3, [r7, #7]
 8008432:	e006      	b.n	8008442 <clear_point_buffer+0x1a>
	{
		point_buffer[i] = M24C64_EMPTY_CELL_VALUE;
 8008434:	79fb      	ldrb	r3, [r7, #7]
 8008436:	4a07      	ldr	r2, [pc, #28]	; (8008454 <clear_point_buffer+0x2c>)
 8008438:	21ff      	movs	r1, #255	; 0xff
 800843a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	3301      	adds	r3, #1
 8008440:	71fb      	strb	r3, [r7, #7]
 8008442:	79fb      	ldrb	r3, [r7, #7]
 8008444:	2b1f      	cmp	r3, #31
 8008446:	d9f5      	bls.n	8008434 <clear_point_buffer+0xc>
	}
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	bc80      	pop	{r7}
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	20000840 	.word	0x20000840

08008458 <convert_timeout>:



//Convert timeout in seconds to timeout in "XXdXXhXXmXXs"
void convert_timeout(uint32_t timeout_val, char *buffer)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b088      	sub	sp, #32
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
    uint32_t sec = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	61fb      	str	r3, [r7, #28]
    uint32_t min = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	61bb      	str	r3, [r7, #24]
    uint32_t hour = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	617b      	str	r3, [r7, #20]
    uint32_t day = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	613b      	str	r3, [r7, #16]
    char buf[3];
    
    
    if (timeout_val >= 60)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b3b      	cmp	r3, #59	; 0x3b
 8008476:	d939      	bls.n	80084ec <convert_timeout+0x94>
    {
        min = timeout_val / 60;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a8b      	ldr	r2, [pc, #556]	; (80086a8 <convert_timeout+0x250>)
 800847c:	fba2 2303 	umull	r2, r3, r2, r3
 8008480:	095b      	lsrs	r3, r3, #5
 8008482:	61bb      	str	r3, [r7, #24]
        sec = timeout_val % 60;
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	4b88      	ldr	r3, [pc, #544]	; (80086a8 <convert_timeout+0x250>)
 8008488:	fba3 1302 	umull	r1, r3, r3, r2
 800848c:	0959      	lsrs	r1, r3, #5
 800848e:	460b      	mov	r3, r1
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	1a5b      	subs	r3, r3, r1
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	61fb      	str	r3, [r7, #28]

        if (min >= 60)
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	2b3b      	cmp	r3, #59	; 0x3b
 800849e:	d927      	bls.n	80084f0 <convert_timeout+0x98>
        {
            hour = min / 60;
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	4a81      	ldr	r2, [pc, #516]	; (80086a8 <convert_timeout+0x250>)
 80084a4:	fba2 2303 	umull	r2, r3, r2, r3
 80084a8:	095b      	lsrs	r3, r3, #5
 80084aa:	617b      	str	r3, [r7, #20]
            min = min % 60;
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	4b7e      	ldr	r3, [pc, #504]	; (80086a8 <convert_timeout+0x250>)
 80084b0:	fba3 1302 	umull	r1, r3, r3, r2
 80084b4:	0959      	lsrs	r1, r3, #5
 80084b6:	460b      	mov	r3, r1
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	1a5b      	subs	r3, r3, r1
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	61bb      	str	r3, [r7, #24]

            if (hour >= 24)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b17      	cmp	r3, #23
 80084c6:	d913      	bls.n	80084f0 <convert_timeout+0x98>
            {
                day = hour / 24;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	4a78      	ldr	r2, [pc, #480]	; (80086ac <convert_timeout+0x254>)
 80084cc:	fba2 2303 	umull	r2, r3, r2, r3
 80084d0:	091b      	lsrs	r3, r3, #4
 80084d2:	613b      	str	r3, [r7, #16]
                hour = hour % 24;
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	4b75      	ldr	r3, [pc, #468]	; (80086ac <convert_timeout+0x254>)
 80084d8:	fba3 1302 	umull	r1, r3, r3, r2
 80084dc:	0919      	lsrs	r1, r3, #4
 80084de:	460b      	mov	r3, r1
 80084e0:	005b      	lsls	r3, r3, #1
 80084e2:	440b      	add	r3, r1
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	617b      	str	r3, [r7, #20]
 80084ea:	e001      	b.n	80084f0 <convert_timeout+0x98>
            }
        }
    }
    else
    {
        sec = timeout_val;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	61fb      	str	r3, [r7, #28]
    }
    
    if (day)
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d044      	beq.n	8008580 <convert_timeout+0x128>
    {
        //XXdXXh
        itoa32(day, &buf[0]);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f107 020c 	add.w	r2, r7, #12
 80084fc:	4611      	mov	r1, r2
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 face 	bl	8008aa0 <itoa32>
        if (day > 9)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2b09      	cmp	r3, #9
 8008508:	d90b      	bls.n	8008522 <convert_timeout+0xca>
        {
            buffer[0] = buf[0];
 800850a:	7b3a      	ldrb	r2, [r7, #12]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[1];
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	3301      	adds	r3, #1
 8008514:	7b7a      	ldrb	r2, [r7, #13]
 8008516:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'd';
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	3302      	adds	r3, #2
 800851c:	2264      	movs	r2, #100	; 0x64
 800851e:	701a      	strb	r2, [r3, #0]
 8008520:	e00a      	b.n	8008538 <convert_timeout+0xe0>
        }
        else
        {
            buffer[0] = '0';
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2230      	movs	r2, #48	; 0x30
 8008526:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[0];
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	3301      	adds	r3, #1
 800852c:	7b3a      	ldrb	r2, [r7, #12]
 800852e:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'd';
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	3302      	adds	r3, #2
 8008534:	2264      	movs	r2, #100	; 0x64
 8008536:	701a      	strb	r2, [r3, #0]
        }
        
        itoa32(hour, &buf[0]);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f107 020c 	add.w	r2, r7, #12
 800853e:	4611      	mov	r1, r2
 8008540:	4618      	mov	r0, r3
 8008542:	f000 faad 	bl	8008aa0 <itoa32>
        if (hour > 9)
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b09      	cmp	r3, #9
 800854a:	d90c      	bls.n	8008566 <convert_timeout+0x10e>
        {
            buffer[3] = buf[0];
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	3303      	adds	r3, #3
 8008550:	7b3a      	ldrb	r2, [r7, #12]
 8008552:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[1];
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	3304      	adds	r3, #4
 8008558:	7b7a      	ldrb	r2, [r7, #13]
 800855a:	701a      	strb	r2, [r3, #0]
            buffer[5] = 'h';
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	3305      	adds	r3, #5
 8008560:	2268      	movs	r2, #104	; 0x68
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	e098      	b.n	8008698 <convert_timeout+0x240>
        }
        else
        {
            buffer[3] = '0';
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	3303      	adds	r3, #3
 800856a:	2230      	movs	r2, #48	; 0x30
 800856c:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[0];
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	3304      	adds	r3, #4
 8008572:	7b3a      	ldrb	r2, [r7, #12]
 8008574:	701a      	strb	r2, [r3, #0]
            buffer[5] = 'h';
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	3305      	adds	r3, #5
 800857a:	2268      	movs	r2, #104	; 0x68
 800857c:	701a      	strb	r2, [r3, #0]
 800857e:	e08b      	b.n	8008698 <convert_timeout+0x240>
        }
    }
    else if (hour)
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d044      	beq.n	8008610 <convert_timeout+0x1b8>
    {
        //XXhXXm
        itoa32(hour, &buf[0]);
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f107 020c 	add.w	r2, r7, #12
 800858c:	4611      	mov	r1, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fa86 	bl	8008aa0 <itoa32>
        if (hour > 9)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b09      	cmp	r3, #9
 8008598:	d90b      	bls.n	80085b2 <convert_timeout+0x15a>
        {
            buffer[0] = buf[0];
 800859a:	7b3a      	ldrb	r2, [r7, #12]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[1];
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	3301      	adds	r3, #1
 80085a4:	7b7a      	ldrb	r2, [r7, #13]
 80085a6:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'h';
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	3302      	adds	r3, #2
 80085ac:	2268      	movs	r2, #104	; 0x68
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	e00a      	b.n	80085c8 <convert_timeout+0x170>
        }
        else
        {
            buffer[0] = '0';
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2230      	movs	r2, #48	; 0x30
 80085b6:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[0];
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	3301      	adds	r3, #1
 80085bc:	7b3a      	ldrb	r2, [r7, #12]
 80085be:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'h';
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	3302      	adds	r3, #2
 80085c4:	2268      	movs	r2, #104	; 0x68
 80085c6:	701a      	strb	r2, [r3, #0]
        }
        
        itoa32(min, &buf[0]);
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	f107 020c 	add.w	r2, r7, #12
 80085ce:	4611      	mov	r1, r2
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 fa65 	bl	8008aa0 <itoa32>
        if (min > 9)
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b09      	cmp	r3, #9
 80085da:	d90c      	bls.n	80085f6 <convert_timeout+0x19e>
        {
            buffer[3] = buf[0];
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	3303      	adds	r3, #3
 80085e0:	7b3a      	ldrb	r2, [r7, #12]
 80085e2:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[1];
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	3304      	adds	r3, #4
 80085e8:	7b7a      	ldrb	r2, [r7, #13]
 80085ea:	701a      	strb	r2, [r3, #0]
            buffer[5] = 'm';
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	3305      	adds	r3, #5
 80085f0:	226d      	movs	r2, #109	; 0x6d
 80085f2:	701a      	strb	r2, [r3, #0]
 80085f4:	e050      	b.n	8008698 <convert_timeout+0x240>
        }
        else
        {
            buffer[3] = '0';
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	3303      	adds	r3, #3
 80085fa:	2230      	movs	r2, #48	; 0x30
 80085fc:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[0];
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	3304      	adds	r3, #4
 8008602:	7b3a      	ldrb	r2, [r7, #12]
 8008604:	701a      	strb	r2, [r3, #0]
            buffer[5] = 'm';
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	3305      	adds	r3, #5
 800860a:	226d      	movs	r2, #109	; 0x6d
 800860c:	701a      	strb	r2, [r3, #0]
 800860e:	e043      	b.n	8008698 <convert_timeout+0x240>
        }
    }
    else
    {
        //XXmXXs
        itoa32(min, &buf[0]);
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	f107 020c 	add.w	r2, r7, #12
 8008616:	4611      	mov	r1, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fa41 	bl	8008aa0 <itoa32>
        if (min > 9)
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	2b09      	cmp	r3, #9
 8008622:	d90b      	bls.n	800863c <convert_timeout+0x1e4>
        {
            buffer[0] = buf[0];
 8008624:	7b3a      	ldrb	r2, [r7, #12]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[1];
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	3301      	adds	r3, #1
 800862e:	7b7a      	ldrb	r2, [r7, #13]
 8008630:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'm';
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	3302      	adds	r3, #2
 8008636:	226d      	movs	r2, #109	; 0x6d
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	e00a      	b.n	8008652 <convert_timeout+0x1fa>
        }
        else
        {
            buffer[0] = '0';
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2230      	movs	r2, #48	; 0x30
 8008640:	701a      	strb	r2, [r3, #0]
            buffer[1] = buf[0];
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	3301      	adds	r3, #1
 8008646:	7b3a      	ldrb	r2, [r7, #12]
 8008648:	701a      	strb	r2, [r3, #0]
            buffer[2] = 'm';
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	3302      	adds	r3, #2
 800864e:	226d      	movs	r2, #109	; 0x6d
 8008650:	701a      	strb	r2, [r3, #0]
        }
        
        itoa32(sec, &buf[0]);
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	f107 020c 	add.w	r2, r7, #12
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f000 fa20 	bl	8008aa0 <itoa32>
        if (sec > 9)
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	2b09      	cmp	r3, #9
 8008664:	d90c      	bls.n	8008680 <convert_timeout+0x228>
        {
            buffer[3] = buf[0];
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	3303      	adds	r3, #3
 800866a:	7b3a      	ldrb	r2, [r7, #12]
 800866c:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[1];
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	3304      	adds	r3, #4
 8008672:	7b7a      	ldrb	r2, [r7, #13]
 8008674:	701a      	strb	r2, [r3, #0]
            buffer[5] = 's';
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	3305      	adds	r3, #5
 800867a:	2273      	movs	r2, #115	; 0x73
 800867c:	701a      	strb	r2, [r3, #0]
 800867e:	e00b      	b.n	8008698 <convert_timeout+0x240>
        }
        else
        {
            buffer[3] = '0';
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	3303      	adds	r3, #3
 8008684:	2230      	movs	r2, #48	; 0x30
 8008686:	701a      	strb	r2, [r3, #0]
            buffer[4] = buf[0];
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	3304      	adds	r3, #4
 800868c:	7b3a      	ldrb	r2, [r7, #12]
 800868e:	701a      	strb	r2, [r3, #0]
            buffer[5] = 's';
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	3305      	adds	r3, #5
 8008694:	2273      	movs	r2, #115	; 0x73
 8008696:	701a      	strb	r2, [r3, #0]
        }
    }
    
    buffer[6] = 0;  //string end
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	3306      	adds	r3, #6
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]
}
 80086a0:	bf00      	nop
 80086a2:	3720      	adds	r7, #32
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	88888889 	.word	0x88888889
 80086ac:	aaaaaaab 	.word	0xaaaaaaab

080086b0 <delay_cyc>:



//Simple delay in cycles
void delay_cyc(uint32_t cycles)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
    while (cycles)
 80086b8:	e002      	b.n	80086c0 <delay_cyc+0x10>
    {
        cycles--;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3b01      	subs	r3, #1
 80086be:	607b      	str	r3, [r7, #4]
    while (cycles)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1f9      	bne.n	80086ba <delay_cyc+0xa>
    }
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bc80      	pop	{r7}
 80086ce:	4770      	bx	lr

080086d0 <atof32>:



//Converts string to float
float atof32(char *input)
{
 80086d0:	b5b0      	push	{r4, r5, r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	75fb      	strb	r3, [r7, #23]
    int32_t sign = 1;
 80086dc:	2301      	movs	r3, #1
 80086de:	613b      	str	r3, [r7, #16]
    float power = 1.0;
 80086e0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80086e4:	60fb      	str	r3, [r7, #12]
    float result = 0.0;
 80086e6:	f04f 0300 	mov.w	r3, #0
 80086ea:	60bb      	str	r3, [r7, #8]
    
    if(input[0] == 0)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d102      	bne.n	80086fa <atof32+0x2a>
    {
        return 0.0;
 80086f4:	f04f 0300 	mov.w	r3, #0
 80086f8:	e07a      	b.n	80087f0 <atof32+0x120>
    }
    
    if(input[i] == '-')
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	4413      	add	r3, r2
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	2b2d      	cmp	r3, #45	; 0x2d
 8008704:	d12b      	bne.n	800875e <atof32+0x8e>
    {
        sign = -1;
 8008706:	f04f 33ff 	mov.w	r3, #4294967295
 800870a:	613b      	str	r3, [r7, #16]
        i++;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	3301      	adds	r3, #1
 8008710:	75fb      	strb	r3, [r7, #23]
    }
    
    while(input[i] != '.')
 8008712:	e024      	b.n	800875e <atof32+0x8e>
    {
        result = result * 10.0 + (input[i] - '0');
 8008714:	68b8      	ldr	r0, [r7, #8]
 8008716:	f7f7 fe8f 	bl	8000438 <__aeabi_f2d>
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <atof32+0x128>)
 8008720:	f7f7 fee2 	bl	80004e8 <__aeabi_dmul>
 8008724:	4603      	mov	r3, r0
 8008726:	460c      	mov	r4, r1
 8008728:	4625      	mov	r5, r4
 800872a:	461c      	mov	r4, r3
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	4413      	add	r3, r2
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	3b30      	subs	r3, #48	; 0x30
 8008736:	4618      	mov	r0, r3
 8008738:	f7f7 fe6c 	bl	8000414 <__aeabi_i2d>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4620      	mov	r0, r4
 8008742:	4629      	mov	r1, r5
 8008744:	f7f7 fd1a 	bl	800017c <__adddf3>
 8008748:	4603      	mov	r3, r0
 800874a:	460c      	mov	r4, r1
 800874c:	4618      	mov	r0, r3
 800874e:	4621      	mov	r1, r4
 8008750:	f7f8 f9c2 	bl	8000ad8 <__aeabi_d2f>
 8008754:	4603      	mov	r3, r0
 8008756:	60bb      	str	r3, [r7, #8]
        i++;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	3301      	adds	r3, #1
 800875c:	75fb      	strb	r3, [r7, #23]
    while(input[i] != '.')
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	4413      	add	r3, r2
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b2e      	cmp	r3, #46	; 0x2e
 8008768:	d1d4      	bne.n	8008714 <atof32+0x44>
    }
    
    i++;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	3301      	adds	r3, #1
 800876e:	75fb      	strb	r3, [r7, #23]
    
    while(input[i] != 0)
 8008770:	e02a      	b.n	80087c8 <atof32+0xf8>
    {
        result = result * 10.0 + (input[i] - '0');
 8008772:	68b8      	ldr	r0, [r7, #8]
 8008774:	f7f7 fe60 	bl	8000438 <__aeabi_f2d>
 8008778:	f04f 0200 	mov.w	r2, #0
 800877c:	4b1e      	ldr	r3, [pc, #120]	; (80087f8 <atof32+0x128>)
 800877e:	f7f7 feb3 	bl	80004e8 <__aeabi_dmul>
 8008782:	4603      	mov	r3, r0
 8008784:	460c      	mov	r4, r1
 8008786:	4625      	mov	r5, r4
 8008788:	461c      	mov	r4, r3
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	4413      	add	r3, r2
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	3b30      	subs	r3, #48	; 0x30
 8008794:	4618      	mov	r0, r3
 8008796:	f7f7 fe3d 	bl	8000414 <__aeabi_i2d>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	4620      	mov	r0, r4
 80087a0:	4629      	mov	r1, r5
 80087a2:	f7f7 fceb 	bl	800017c <__adddf3>
 80087a6:	4603      	mov	r3, r0
 80087a8:	460c      	mov	r4, r1
 80087aa:	4618      	mov	r0, r3
 80087ac:	4621      	mov	r1, r4
 80087ae:	f7f8 f993 	bl	8000ad8 <__aeabi_d2f>
 80087b2:	4603      	mov	r3, r0
 80087b4:	60bb      	str	r3, [r7, #8]
        power *= 10.0;
 80087b6:	4911      	ldr	r1, [pc, #68]	; (80087fc <atof32+0x12c>)
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7f8 faeb 	bl	8000d94 <__aeabi_fmul>
 80087be:	4603      	mov	r3, r0
 80087c0:	60fb      	str	r3, [r7, #12]
        i++;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	3301      	adds	r3, #1
 80087c6:	75fb      	strb	r3, [r7, #23]
    while(input[i] != 0)
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1ce      	bne.n	8008772 <atof32+0xa2>
    }
    
    return (sign * result / power);
 80087d4:	6938      	ldr	r0, [r7, #16]
 80087d6:	f7f8 fa89 	bl	8000cec <__aeabi_i2f>
 80087da:	4603      	mov	r3, r0
 80087dc:	68b9      	ldr	r1, [r7, #8]
 80087de:	4618      	mov	r0, r3
 80087e0:	f7f8 fad8 	bl	8000d94 <__aeabi_fmul>
 80087e4:	4603      	mov	r3, r0
 80087e6:	68f9      	ldr	r1, [r7, #12]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7f8 fb87 	bl	8000efc <__aeabi_fdiv>
 80087ee:	4603      	mov	r3, r0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bdb0      	pop	{r4, r5, r7, pc}
 80087f8:	40240000 	.word	0x40240000
 80087fc:	41200000 	.word	0x41200000

08008800 <ftoa32>:



//Converts float to string
void ftoa32(float value, uint8_t precision, char *buffer)
{
 8008800:	b590      	push	{r4, r7, lr}
 8008802:	b08d      	sub	sp, #52	; 0x34
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	460b      	mov	r3, r1
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	72fb      	strb	r3, [r7, #11]
    uint8_t i = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t mod = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	61bb      	str	r3, [r7, #24]
    float pow = 1.0;
 8008818:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800881c:	62bb      	str	r3, [r7, #40]	; 0x28
    char sgn = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    float value_copy;
    
    if((value == 0.0) || (value == -0.0))
 8008824:	f04f 0100 	mov.w	r1, #0
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7f8 fc47 	bl	80010bc <__aeabi_fcmpeq>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d107      	bne.n	8008844 <ftoa32+0x44>
 8008834:	f04f 0100 	mov.w	r1, #0
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7f8 fc3f 	bl	80010bc <__aeabi_fcmpeq>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d007      	beq.n	8008854 <ftoa32+0x54>
    {
        buffer[0] = '0';
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2230      	movs	r2, #48	; 0x30
 8008848:	701a      	strb	r2, [r3, #0]
        buffer[1] = 0;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3301      	adds	r3, #1
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
        return;
 8008852:	e0d6      	b.n	8008a02 <ftoa32+0x202>
    }
    
    if(value < 0)
 8008854:	f04f 0100 	mov.w	r1, #0
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f7f8 fc39 	bl	80010d0 <__aeabi_fcmplt>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00f      	beq.n	8008884 <ftoa32+0x84>
    {
        sgn = '-';
 8008864:	232d      	movs	r3, #45	; 0x2d
 8008866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        value *= -1.0;
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7f7 fde4 	bl	8000438 <__aeabi_f2d>
 8008870:	4603      	mov	r3, r0
 8008872:	460c      	mov	r4, r1
 8008874:	4618      	mov	r0, r3
 8008876:	4621      	mov	r1, r4
 8008878:	f7f8 f92e 	bl	8000ad8 <__aeabi_d2f>
 800887c:	4603      	mov	r3, r0
 800887e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008882:	60fb      	str	r3, [r7, #12]
    }
    
    value_copy = value;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	617b      	str	r3, [r7, #20]
    
    for(uint8_t p = 0; p < precision; p++)
 8008888:	2300      	movs	r3, #0
 800888a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800888e:	e00a      	b.n	80088a6 <ftoa32+0xa6>
    {
        pow = pow * 10.0;
 8008890:	495d      	ldr	r1, [pc, #372]	; (8008a08 <ftoa32+0x208>)
 8008892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008894:	f7f8 fa7e 	bl	8000d94 <__aeabi_fmul>
 8008898:	4603      	mov	r3, r0
 800889a:	62bb      	str	r3, [r7, #40]	; 0x28
    for(uint8_t p = 0; p < precision; p++)
 800889c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088a0:	3301      	adds	r3, #1
 80088a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80088a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80088aa:	7afb      	ldrb	r3, [r7, #11]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d3ef      	bcc.n	8008890 <ftoa32+0x90>
    }
    
    value = value * pow;
 80088b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7f8 fa6e 	bl	8000d94 <__aeabi_fmul>
 80088b8:	4603      	mov	r3, r0
 80088ba:	60fb      	str	r3, [r7, #12]
    uint32_t ipart = value;
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7f8 fc55 	bl	800116c <__aeabi_f2uiz>
 80088c2:	4603      	mov	r3, r0
 80088c4:	623b      	str	r3, [r7, #32]
    
    buffer[i++] = 0;
 80088c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80088d0:	461a      	mov	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4413      	add	r3, r2
 80088d6:	2200      	movs	r2, #0
 80088d8:	701a      	strb	r2, [r3, #0]
    
    do
    {
        mod = ipart % 10;
 80088da:	6a3a      	ldr	r2, [r7, #32]
 80088dc:	4b4b      	ldr	r3, [pc, #300]	; (8008a0c <ftoa32+0x20c>)
 80088de:	fba3 1302 	umull	r1, r3, r3, r2
 80088e2:	08d9      	lsrs	r1, r3, #3
 80088e4:	460b      	mov	r3, r1
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	440b      	add	r3, r1
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	61bb      	str	r3, [r7, #24]
        ipart /= 10;
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	4a46      	ldr	r2, [pc, #280]	; (8008a0c <ftoa32+0x20c>)
 80088f4:	fba2 2303 	umull	r2, r3, r2, r3
 80088f8:	08db      	lsrs	r3, r3, #3
 80088fa:	623b      	str	r3, [r7, #32]
        buffer[i++] = mod + '0';
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008904:	1c59      	adds	r1, r3, #1
 8008906:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 800890a:	4619      	mov	r1, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	440b      	add	r3, r1
 8008910:	3230      	adds	r2, #48	; 0x30
 8008912:	b2d2      	uxtb	r2, r2
 8008914:	701a      	strb	r2, [r3, #0]
    }
    while(ipart > 0);
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1de      	bne.n	80088da <ftoa32+0xda>
    
    if (value_copy < 1.0)
 800891c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008920:	6978      	ldr	r0, [r7, #20]
 8008922:	f7f8 fbd5 	bl	80010d0 <__aeabi_fcmplt>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d014      	beq.n	8008956 <ftoa32+0x156>
    {
        for(uint8_t p = 0; p < precision; p++)
 800892c:	2300      	movs	r3, #0
 800892e:	77fb      	strb	r3, [r7, #31]
 8008930:	e00d      	b.n	800894e <ftoa32+0x14e>
        {
            buffer[i] = '0';
 8008932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	4413      	add	r3, r2
 800893a:	2230      	movs	r2, #48	; 0x30
 800893c:	701a      	strb	r2, [r3, #0]
            i++;
 800893e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008942:	3301      	adds	r3, #1
 8008944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        for(uint8_t p = 0; p < precision; p++)
 8008948:	7ffb      	ldrb	r3, [r7, #31]
 800894a:	3301      	adds	r3, #1
 800894c:	77fb      	strb	r3, [r7, #31]
 800894e:	7ffa      	ldrb	r2, [r7, #31]
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	429a      	cmp	r2, r3
 8008954:	d3ed      	bcc.n	8008932 <ftoa32+0x132>
        }
    }
    
    if(sgn == '-')
 8008956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800895a:	2b2d      	cmp	r3, #45	; 0x2d
 800895c:	d107      	bne.n	800896e <ftoa32+0x16e>
    {
        buffer[i] = sgn;
 800895e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	4413      	add	r3, r2
 8008966:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800896a:	701a      	strb	r2, [r3, #0]
 800896c:	e004      	b.n	8008978 <ftoa32+0x178>
    }
    else
    {
        i--;
 800896e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008972:	3b01      	subs	r3, #1
 8008974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    for(uint8_t n = i + 1; n > precision + 1; n--)
 8008978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800897c:	3301      	adds	r3, #1
 800897e:	77bb      	strb	r3, [r7, #30]
 8008980:	e00b      	b.n	800899a <ftoa32+0x19a>
    {
        buffer[n] = buffer[n - 1];
 8008982:	7fbb      	ldrb	r3, [r7, #30]
 8008984:	3b01      	subs	r3, #1
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	441a      	add	r2, r3
 800898a:	7fbb      	ldrb	r3, [r7, #30]
 800898c:	6879      	ldr	r1, [r7, #4]
 800898e:	440b      	add	r3, r1
 8008990:	7812      	ldrb	r2, [r2, #0]
 8008992:	701a      	strb	r2, [r3, #0]
    for(uint8_t n = i + 1; n > precision + 1; n--)
 8008994:	7fbb      	ldrb	r3, [r7, #30]
 8008996:	3b01      	subs	r3, #1
 8008998:	77bb      	strb	r3, [r7, #30]
 800899a:	7fba      	ldrb	r2, [r7, #30]
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	3301      	adds	r3, #1
 80089a0:	429a      	cmp	r2, r3
 80089a2:	dcee      	bgt.n	8008982 <ftoa32+0x182>
    }
    buffer[precision + 1] = '.';
 80089a4:	7afb      	ldrb	r3, [r7, #11]
 80089a6:	3301      	adds	r3, #1
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	4413      	add	r3, r2
 80089ac:	222e      	movs	r2, #46	; 0x2e
 80089ae:	701a      	strb	r2, [r3, #0]
    i++;
 80089b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089b4:	3301      	adds	r3, #1
 80089b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    
    char c;
    for(uint8_t j = 0; j < i; j++, i--)
 80089ba:	2300      	movs	r3, #0
 80089bc:	777b      	strb	r3, [r7, #29]
 80089be:	e01b      	b.n	80089f8 <ftoa32+0x1f8>
    {
        c = buffer[j];
 80089c0:	7f7b      	ldrb	r3, [r7, #29]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	4413      	add	r3, r2
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	74fb      	strb	r3, [r7, #19]
        buffer[j] = buffer[i];
 80089ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	441a      	add	r2, r3
 80089d2:	7f7b      	ldrb	r3, [r7, #29]
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	440b      	add	r3, r1
 80089d8:	7812      	ldrb	r2, [r2, #0]
 80089da:	701a      	strb	r2, [r3, #0]
        buffer[i] = c;
 80089dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	4413      	add	r3, r2
 80089e4:	7cfa      	ldrb	r2, [r7, #19]
 80089e6:	701a      	strb	r2, [r3, #0]
    for(uint8_t j = 0; j < i; j++, i--)
 80089e8:	7f7b      	ldrb	r3, [r7, #29]
 80089ea:	3301      	adds	r3, #1
 80089ec:	777b      	strb	r3, [r7, #29]
 80089ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089f2:	3b01      	subs	r3, #1
 80089f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80089f8:	7f7a      	ldrb	r2, [r7, #29]
 80089fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d3de      	bcc.n	80089c0 <ftoa32+0x1c0>
    }
}
 8008a02:	3734      	adds	r7, #52	; 0x34
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd90      	pop	{r4, r7, pc}
 8008a08:	41200000 	.word	0x41200000
 8008a0c:	cccccccd 	.word	0xcccccccd

08008a10 <atoi32>:



//Converts string to integer
int32_t atoi32(char *input)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	75fb      	strb	r3, [r7, #23]
    int32_t sign = 1;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	613b      	str	r3, [r7, #16]
    int32_t result = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]
    
    if(input[0] == 0)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <atoi32+0x20>
    {
        return 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	e031      	b.n	8008a94 <atoi32+0x84>
    }
    
    if((input[0] == '0') && (input[1] == 0))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b30      	cmp	r3, #48	; 0x30
 8008a36:	d106      	bne.n	8008a46 <atoi32+0x36>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <atoi32+0x36>
    {
        return 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	e026      	b.n	8008a94 <atoi32+0x84>
    }
    
    if(input[i] == '-')
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	2b2d      	cmp	r3, #45	; 0x2d
 8008a50:	d116      	bne.n	8008a80 <atoi32+0x70>
    {
        sign = -1;
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295
 8008a56:	613b      	str	r3, [r7, #16]
        i++;
 8008a58:	7dfb      	ldrb	r3, [r7, #23]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	75fb      	strb	r3, [r7, #23]
    }
    
    while(input[i] != 0)
 8008a5e:	e00f      	b.n	8008a80 <atoi32+0x70>
    {
        result = result * 10 + (input[i] - '0');
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	7dfb      	ldrb	r3, [r7, #23]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	4413      	add	r3, r2
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	3b30      	subs	r3, #48	; 0x30
 8008a76:	440b      	add	r3, r1
 8008a78:	60fb      	str	r3, [r7, #12]
        i++;
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	75fb      	strb	r3, [r7, #23]
    while(input[i] != 0)
 8008a80:	7dfb      	ldrb	r3, [r7, #23]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	4413      	add	r3, r2
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1e9      	bne.n	8008a60 <atoi32+0x50>
    }
    
    return result * sign;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	fb02 f303 	mul.w	r3, r2, r3
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	371c      	adds	r7, #28
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bc80      	pop	{r7}
 8008a9c:	4770      	bx	lr
	...

08008aa0 <itoa32>:



//Converts integer to string
void itoa32(int32_t value, char *buffer)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
    uint8_t i = 0;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]
    uint8_t mod = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	733b      	strb	r3, [r7, #12]
    char sgn = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73bb      	strb	r3, [r7, #14]
    
    if(value == 0)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d107      	bne.n	8008acc <itoa32+0x2c>
    {
        buffer[0] = '0';
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2230      	movs	r2, #48	; 0x30
 8008ac0:	701a      	strb	r2, [r3, #0]
        buffer[1] = 0;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	701a      	strb	r2, [r3, #0]
        return;
 8008aca:	e05e      	b.n	8008b8a <itoa32+0xea>
    }
    
    if(value < 0)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	da04      	bge.n	8008adc <itoa32+0x3c>
    {
        sgn = '-';
 8008ad2:	232d      	movs	r3, #45	; 0x2d
 8008ad4:	73bb      	strb	r3, [r7, #14]
        value *= -1;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	425b      	negs	r3, r3
 8008ada:	607b      	str	r3, [r7, #4]
    }
    
    buffer[i++] = 0;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	73fa      	strb	r2, [r7, #15]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	2200      	movs	r2, #0
 8008aea:	701a      	strb	r2, [r3, #0]
    
    while(value > 0)
 8008aec:	e01f      	b.n	8008b2e <itoa32+0x8e>
    {
        mod = value % 10;
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	4b28      	ldr	r3, [pc, #160]	; (8008b94 <itoa32+0xf4>)
 8008af2:	fb83 1302 	smull	r1, r3, r3, r2
 8008af6:	1099      	asrs	r1, r3, #2
 8008af8:	17d3      	asrs	r3, r2, #31
 8008afa:	1ac9      	subs	r1, r1, r3
 8008afc:	460b      	mov	r3, r1
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	1ad1      	subs	r1, r2, r3
 8008b06:	460b      	mov	r3, r1
 8008b08:	733b      	strb	r3, [r7, #12]
        value /= 10;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a21      	ldr	r2, [pc, #132]	; (8008b94 <itoa32+0xf4>)
 8008b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8008b12:	1092      	asrs	r2, r2, #2
 8008b14:	17db      	asrs	r3, r3, #31
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	607b      	str	r3, [r7, #4]
        buffer[i++] = mod + '0';
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	73fa      	strb	r2, [r7, #15]
 8008b20:	461a      	mov	r2, r3
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	7b3a      	ldrb	r2, [r7, #12]
 8008b28:	3230      	adds	r2, #48	; 0x30
 8008b2a:	b2d2      	uxtb	r2, r2
 8008b2c:	701a      	strb	r2, [r3, #0]
    while(value > 0)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	dcdc      	bgt.n	8008aee <itoa32+0x4e>
    }
    
    if(sgn == '-')
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	2b2d      	cmp	r3, #45	; 0x2d
 8008b38:	d105      	bne.n	8008b46 <itoa32+0xa6>
    {
        buffer[i] = sgn;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	4413      	add	r3, r2
 8008b40:	7bba      	ldrb	r2, [r7, #14]
 8008b42:	701a      	strb	r2, [r3, #0]
 8008b44:	e002      	b.n	8008b4c <itoa32+0xac>
    }
    else
    {
        i--;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
    }
    
    char c;
    for(uint8_t j = 0; j < i; j++, i--)
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	737b      	strb	r3, [r7, #13]
 8008b50:	e017      	b.n	8008b82 <itoa32+0xe2>
    {
        c = buffer[j];
 8008b52:	7b7b      	ldrb	r3, [r7, #13]
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	4413      	add	r3, r2
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	72fb      	strb	r3, [r7, #11]
        buffer[j] = buffer[i];
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	441a      	add	r2, r3
 8008b62:	7b7b      	ldrb	r3, [r7, #13]
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	440b      	add	r3, r1
 8008b68:	7812      	ldrb	r2, [r2, #0]
 8008b6a:	701a      	strb	r2, [r3, #0]
        buffer[i] = c;
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	4413      	add	r3, r2
 8008b72:	7afa      	ldrb	r2, [r7, #11]
 8008b74:	701a      	strb	r2, [r3, #0]
    for(uint8_t j = 0; j < i; j++, i--)
 8008b76:	7b7b      	ldrb	r3, [r7, #13]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	737b      	strb	r3, [r7, #13]
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	73fb      	strb	r3, [r7, #15]
 8008b82:	7b7a      	ldrb	r2, [r7, #13]
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d3e3      	bcc.n	8008b52 <itoa32+0xb2>
    }
}
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bc80      	pop	{r7}
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	66666667 	.word	0x66666667

08008b98 <get_send_interval_values>:
uint8_t send_interval_values[] = SEND_INTERVAL_VALUES_ARRAY;
uint8_t tx_power_values[] = TX_POWER_VALUES_ARRAY;


uint8_t *get_send_interval_values(void)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
	return &send_interval_values[0];
 8008b9c:	4b02      	ldr	r3, [pc, #8]	; (8008ba8 <get_send_interval_values+0x10>)
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bc80      	pop	{r7}
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	20000048 	.word	0x20000048

08008bac <get_tx_power_values>:



uint8_t *get_tx_power_values(void)
{
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0
	return &tx_power_values[0];
 8008bb0:	4b02      	ldr	r3, [pc, #8]	; (8008bbc <get_tx_power_values+0x10>)
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bc80      	pop	{r7}
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	20000050 	.word	0x20000050

08008bc0 <get_settings>:



struct settings_struct *get_settings(void)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	af00      	add	r7, sp, #0
	return &settings;
 8008bc4:	4b02      	ldr	r3, [pc, #8]	; (8008bd0 <get_settings+0x10>)
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bc80      	pop	{r7}
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	200008e0 	.word	0x200008e0

08008bd4 <settings_load>:



void settings_load(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
    uint16_t init_flag_addr = EEPROM_SETTINGS_PAGE_ADDRESS * M24C64_PAGE_SIZE + SETTINGS_INIT_FLAG_POS;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	80fb      	strh	r3, [r7, #6]
    
    if (m24c64_read_byte(init_flag_addr) != SETTINGS_INIT_FLAG_DEFAULT)     //if first power-up or EEPROM had been erased
 8008bde:	88fb      	ldrh	r3, [r7, #6]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fa fdc3 	bl	800376c <m24c64_read_byte>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2baa      	cmp	r3, #170	; 0xaa
 8008bea:	d001      	beq.n	8008bf0 <settings_load+0x1c>
    {
        settings_save_default();
 8008bec:	f000 f834 	bl	8008c58 <settings_save_default>
    }
    
    //read from EEPROM
    m24c64_read_page(&settings_array[0], EEPROM_SETTINGS_PAGE_ADDRESS);
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	4817      	ldr	r0, [pc, #92]	; (8008c50 <settings_load+0x7c>)
 8008bf4:	f7fa fe60 	bl	80038b8 <m24c64_read_page>
    
    //load settings to struct
    settings.device_number = 					settings_array[SETTINGS_DEVICE_NUMBER_POS];
 8008bf8:	4b15      	ldr	r3, [pc, #84]	; (8008c50 <settings_load+0x7c>)
 8008bfa:	785a      	ldrb	r2, [r3, #1]
 8008bfc:	4b15      	ldr	r3, [pc, #84]	; (8008c54 <settings_load+0x80>)
 8008bfe:	701a      	strb	r2, [r3, #0]
    settings.device_id[0] = 					settings_array[SETTINGS_DEVICE_ID_POS];
 8008c00:	4b13      	ldr	r3, [pc, #76]	; (8008c50 <settings_load+0x7c>)
 8008c02:	789a      	ldrb	r2, [r3, #2]
 8008c04:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <settings_load+0x80>)
 8008c06:	705a      	strb	r2, [r3, #1]
    settings.device_id[1] = 					settings_array[SETTINGS_DEVICE_ID_POS + 1];
 8008c08:	4b11      	ldr	r3, [pc, #68]	; (8008c50 <settings_load+0x7c>)
 8008c0a:	78da      	ldrb	r2, [r3, #3]
 8008c0c:	4b11      	ldr	r3, [pc, #68]	; (8008c54 <settings_load+0x80>)
 8008c0e:	709a      	strb	r2, [r3, #2]
    settings.freq_channel = 					settings_array[SETTINGS_FREQ_CHANNEL_POS];
 8008c10:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <settings_load+0x7c>)
 8008c12:	791a      	ldrb	r2, [r3, #4]
 8008c14:	4b0f      	ldr	r3, [pc, #60]	; (8008c54 <settings_load+0x80>)
 8008c16:	70da      	strb	r2, [r3, #3]
    settings.tx_power_opt = 					settings_array[SETTINGS_TX_POWER_POS];
 8008c18:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <settings_load+0x7c>)
 8008c1a:	795a      	ldrb	r2, [r3, #5]
 8008c1c:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <settings_load+0x80>)
 8008c1e:	711a      	strb	r2, [r3, #4]
    settings.send_interval_opt = 				settings_array[SETTINGS_SEND_INTERVAL_POS];
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <settings_load+0x7c>)
 8008c22:	799a      	ldrb	r2, [r3, #6]
 8008c24:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <settings_load+0x80>)
 8008c26:	715a      	strb	r2, [r3, #5]
    settings.timeout_threshold.as_array[0] = 	settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS];
 8008c28:	4b09      	ldr	r3, [pc, #36]	; (8008c50 <settings_load+0x7c>)
 8008c2a:	79da      	ldrb	r2, [r3, #7]
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <settings_load+0x80>)
 8008c2e:	719a      	strb	r2, [r3, #6]
    settings.timeout_threshold.as_array[1] = 	settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS + 1];
 8008c30:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <settings_load+0x7c>)
 8008c32:	7a1a      	ldrb	r2, [r3, #8]
 8008c34:	4b07      	ldr	r3, [pc, #28]	; (8008c54 <settings_load+0x80>)
 8008c36:	71da      	strb	r2, [r3, #7]
    settings.fence_threshold.as_array[0] = 		settings_array[SETTINGS_FENCE_THRESHOLD_POS];
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <settings_load+0x7c>)
 8008c3a:	7a5a      	ldrb	r2, [r3, #9]
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <settings_load+0x80>)
 8008c3e:	721a      	strb	r2, [r3, #8]
    settings.fence_threshold.as_array[1] = 		settings_array[SETTINGS_FENCE_THRESHOLD_POS + 1];
 8008c40:	4b03      	ldr	r3, [pc, #12]	; (8008c50 <settings_load+0x7c>)
 8008c42:	7a9a      	ldrb	r2, [r3, #10]
 8008c44:	4b03      	ldr	r3, [pc, #12]	; (8008c54 <settings_load+0x80>)
 8008c46:	725a      	strb	r2, [r3, #9]
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	200008ec 	.word	0x200008ec
 8008c54:	200008e0 	.word	0x200008e0

08008c58 <settings_save_default>:



void settings_save_default(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 8008c5e:	2300      	movs	r3, #0
 8008c60:	71fb      	strb	r3, [r7, #7]
 8008c62:	e006      	b.n	8008c72 <settings_save_default+0x1a>
    {
        settings_array[i] = M24C64_EMPTY_CELL_VALUE;    //clear array
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	4a19      	ldr	r2, [pc, #100]	; (8008ccc <settings_save_default+0x74>)
 8008c68:	21ff      	movs	r1, #255	; 0xff
 8008c6a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 8008c6c:	79fb      	ldrb	r3, [r7, #7]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	71fb      	strb	r3, [r7, #7]
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	2b1f      	cmp	r3, #31
 8008c76:	d9f5      	bls.n	8008c64 <settings_save_default+0xc>
    }
    
    //assign default values
    settings_array[SETTINGS_INIT_FLAG_POS] = 			SETTINGS_INIT_FLAG_DEFAULT;
 8008c78:	4b14      	ldr	r3, [pc, #80]	; (8008ccc <settings_save_default+0x74>)
 8008c7a:	22aa      	movs	r2, #170	; 0xaa
 8008c7c:	701a      	strb	r2, [r3, #0]
    settings_array[SETTINGS_DEVICE_NUMBER_POS] = 		SETTINGS_DEVICE_NUMBER_DEFAULT;
 8008c7e:	4b13      	ldr	r3, [pc, #76]	; (8008ccc <settings_save_default+0x74>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	705a      	strb	r2, [r3, #1]
    settings_array[SETTINGS_DEVICE_ID_POS] = 			SETTINGS_DEVICE_ID_0_DEFAULT;
 8008c84:	4b11      	ldr	r3, [pc, #68]	; (8008ccc <settings_save_default+0x74>)
 8008c86:	2249      	movs	r2, #73	; 0x49
 8008c88:	709a      	strb	r2, [r3, #2]
    settings_array[SETTINGS_DEVICE_ID_POS + 1] = 		SETTINGS_DEVICE_ID_1_DEFAULT;
 8008c8a:	4b10      	ldr	r3, [pc, #64]	; (8008ccc <settings_save_default+0x74>)
 8008c8c:	2244      	movs	r2, #68	; 0x44
 8008c8e:	70da      	strb	r2, [r3, #3]
    settings_array[SETTINGS_FREQ_CHANNEL_POS] = 		SETTINGS_FREQ_CHANNEL_DEFAULT;
 8008c90:	4b0e      	ldr	r3, [pc, #56]	; (8008ccc <settings_save_default+0x74>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	711a      	strb	r2, [r3, #4]
    settings_array[SETTINGS_TX_POWER_POS] = 			SETTINGS_TX_POWER_DEFAULT;
 8008c96:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <settings_save_default+0x74>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	715a      	strb	r2, [r3, #5]
    settings_array[SETTINGS_SEND_INTERVAL_POS] = 		SETTINGS_SEND_INTERVAL_DEFAULT;
 8008c9c:	4b0b      	ldr	r3, [pc, #44]	; (8008ccc <settings_save_default+0x74>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	719a      	strb	r2, [r3, #6]
    settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS] = 	(uint8_t)((uint8_t)0xFF & (uint16_t)SETTINGS_TIMEOUT_THRESHOLD_DEFAULT);				//note: little-endian assumed
 8008ca2:	4b0a      	ldr	r3, [pc, #40]	; (8008ccc <settings_save_default+0x74>)
 8008ca4:	223c      	movs	r2, #60	; 0x3c
 8008ca6:	71da      	strb	r2, [r3, #7]
    settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS + 1]= (uint8_t)((uint8_t)0xFF & ((uint16_t)SETTINGS_TIMEOUT_THRESHOLD_DEFAULT >> 8));
 8008ca8:	4b08      	ldr	r3, [pc, #32]	; (8008ccc <settings_save_default+0x74>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	721a      	strb	r2, [r3, #8]
    settings_array[SETTINGS_FENCE_THRESHOLD_POS] = 		(uint8_t)((uint8_t)0xFF & (uint16_t)SETTINGS_FENCE_THRESHOLD_DEFAULT);				//note: little-endian assumed
 8008cae:	4b07      	ldr	r3, [pc, #28]	; (8008ccc <settings_save_default+0x74>)
 8008cb0:	2264      	movs	r2, #100	; 0x64
 8008cb2:	725a      	strb	r2, [r3, #9]
    settings_array[SETTINGS_FENCE_THRESHOLD_POS + 1] = 	(uint8_t)((uint8_t)0xFF & ((uint16_t)SETTINGS_FENCE_THRESHOLD_DEFAULT >> 8));
 8008cb4:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <settings_save_default+0x74>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	729a      	strb	r2, [r3, #10]
    
    //write to EEPROM
    m24c64_write_page(&settings_array[0], EEPROM_SETTINGS_PAGE_ADDRESS);
 8008cba:	2100      	movs	r1, #0
 8008cbc:	4803      	ldr	r0, [pc, #12]	; (8008ccc <settings_save_default+0x74>)
 8008cbe:	f7fa fecb 	bl	8003a58 <m24c64_write_page>
}
 8008cc2:	bf00      	nop
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	200008ec 	.word	0x200008ec

08008cd0 <settings_save>:



void settings_save(struct settings_struct *p_settings)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]
 8008cdc:	e006      	b.n	8008cec <settings_save+0x1c>
    {
        settings_array[i] = M24C64_EMPTY_CELL_VALUE;    //clear array
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	4a1d      	ldr	r2, [pc, #116]	; (8008d58 <settings_save+0x88>)
 8008ce2:	21ff      	movs	r1, #255	; 0xff
 8008ce4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < M24C64_PAGE_SIZE; i++)
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	73fb      	strb	r3, [r7, #15]
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	2b1f      	cmp	r3, #31
 8008cf0:	d9f5      	bls.n	8008cde <settings_save+0xe>
    }
    
    //assign values
    settings_array[SETTINGS_INIT_FLAG_POS] = 			SETTINGS_INIT_FLAG_DEFAULT;
 8008cf2:	4b19      	ldr	r3, [pc, #100]	; (8008d58 <settings_save+0x88>)
 8008cf4:	22aa      	movs	r2, #170	; 0xaa
 8008cf6:	701a      	strb	r2, [r3, #0]
    settings_array[SETTINGS_DEVICE_NUMBER_POS] = 		p_settings->device_number;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	781a      	ldrb	r2, [r3, #0]
 8008cfc:	4b16      	ldr	r3, [pc, #88]	; (8008d58 <settings_save+0x88>)
 8008cfe:	705a      	strb	r2, [r3, #1]
    settings_array[SETTINGS_DEVICE_ID_POS] = 			p_settings->device_id[0];
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	785a      	ldrb	r2, [r3, #1]
 8008d04:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <settings_save+0x88>)
 8008d06:	709a      	strb	r2, [r3, #2]
    settings_array[SETTINGS_DEVICE_ID_POS + 1] = 		p_settings->device_id[1];
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	789a      	ldrb	r2, [r3, #2]
 8008d0c:	4b12      	ldr	r3, [pc, #72]	; (8008d58 <settings_save+0x88>)
 8008d0e:	70da      	strb	r2, [r3, #3]
    settings_array[SETTINGS_FREQ_CHANNEL_POS] = 		p_settings->freq_channel;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	78da      	ldrb	r2, [r3, #3]
 8008d14:	4b10      	ldr	r3, [pc, #64]	; (8008d58 <settings_save+0x88>)
 8008d16:	711a      	strb	r2, [r3, #4]
    settings_array[SETTINGS_TX_POWER_POS] = 			p_settings->tx_power_opt;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	791a      	ldrb	r2, [r3, #4]
 8008d1c:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <settings_save+0x88>)
 8008d1e:	715a      	strb	r2, [r3, #5]
    settings_array[SETTINGS_SEND_INTERVAL_POS] = 		p_settings->send_interval_opt;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	795a      	ldrb	r2, [r3, #5]
 8008d24:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <settings_save+0x88>)
 8008d26:	719a      	strb	r2, [r3, #6]
    settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS] = 	p_settings->timeout_threshold.as_array[0];
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	799a      	ldrb	r2, [r3, #6]
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <settings_save+0x88>)
 8008d2e:	71da      	strb	r2, [r3, #7]
    settings_array[SETTINGS_TIMEOUT_THRESHOLD_POS + 1]= p_settings->timeout_threshold.as_array[1];
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	79da      	ldrb	r2, [r3, #7]
 8008d34:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <settings_save+0x88>)
 8008d36:	721a      	strb	r2, [r3, #8]
    settings_array[SETTINGS_FENCE_THRESHOLD_POS] = 		p_settings->fence_threshold.as_array[0];
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	7a1a      	ldrb	r2, [r3, #8]
 8008d3c:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <settings_save+0x88>)
 8008d3e:	725a      	strb	r2, [r3, #9]
    settings_array[SETTINGS_FENCE_THRESHOLD_POS + 1] = 	p_settings->fence_threshold.as_array[1];
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	7a5a      	ldrb	r2, [r3, #9]
 8008d44:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <settings_save+0x88>)
 8008d46:	729a      	strb	r2, [r3, #10]
    
    //write to EEPROM
    m24c64_write_page(&settings_array[0], EEPROM_SETTINGS_PAGE_ADDRESS);
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4803      	ldr	r0, [pc, #12]	; (8008d58 <settings_save+0x88>)
 8008d4c:	f7fa fe84 	bl	8003a58 <m24c64_write_page>
}
 8008d50:	bf00      	nop
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	200008ec 	.word	0x200008ec

08008d5c <si4463_init>:
uint8_t tx_power_register_values[] = TX_POWER_REGISTER_VALUES_ARRAY;


//SI4463 Init
void si4463_init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b0de      	sub	sp, #376	; 0x178
 8008d60:	af00      	add	r7, sp, #0
	spi1_clock_enable();
 8008d62:	f000 fa35 	bl	80091d0 <spi1_clock_enable>

    cs_si4463_inactive();       //set pins initial state
 8008d66:	f7f8 fff9 	bl	8001d5c <cs_si4463_inactive>
    sdn_si4463_inactive();
 8008d6a:	f7f8 ffdf 	bl	8001d2c <sdn_si4463_inactive>
    delay_cyc(100000);
 8008d6e:	4830      	ldr	r0, [pc, #192]	; (8008e30 <si4463_init+0xd4>)
 8008d70:	f7ff fc9e 	bl	80086b0 <delay_cyc>
    
    sdn_si4463_active();        //reset the chip
 8008d74:	f7f8 ffce 	bl	8001d14 <sdn_si4463_active>
    delay_cyc(100000);
 8008d78:	482d      	ldr	r0, [pc, #180]	; (8008e30 <si4463_init+0xd4>)
 8008d7a:	f7ff fc99 	bl	80086b0 <delay_cyc>
    sdn_si4463_inactive();
 8008d7e:	f7f8 ffd5 	bl	8001d2c <sdn_si4463_inactive>
    
    uint8_t init_arr[] = RADIO_CONFIGURATION_DATA_ARRAY;    //array with init data, generated by WDS software
 8008d82:	1d3b      	adds	r3, r7, #4
 8008d84:	4a2b      	ldr	r2, [pc, #172]	; (8008e34 <si4463_init+0xd8>)
 8008d86:	4618      	mov	r0, r3
 8008d88:	4611      	mov	r1, r2
 8008d8a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f001 f892 	bl	8009eb8 <memcpy>
    uint8_t *p_init_arr = &init_arr[0];                     //pointer to the array
 8008d94:	1d3b      	adds	r3, r7, #4
 8008d96:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    
    //Send all commands while pointer not equal 0x00 (0x00 presented in the end of the configuration array)
    while(*p_init_arr != 0x00)
 8008d9a:	e029      	b.n	8008df0 <si4463_init+0x94>
    {
        uint8_t len = *p_init_arr;      //command len (first byte of the each line in configuration array)
 8008d9c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
        p_init_arr++;                   //move pointer to the first data byte (which is next after the command len)
 8008da6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008daa:	3301      	adds	r3, #1
 8008dac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
        
        si4463_wait_cts();              //check cts before any command
 8008db0:	f000 f856 	bl	8008e60 <si4463_wait_cts>
        cs_si4463_active();
 8008db4:	f7f8 ffc6 	bl	8001d44 <cs_si4463_active>
        for(uint8_t i = 0; i < len; i++)
 8008db8:	2300      	movs	r3, #0
 8008dba:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
 8008dbe:	e00f      	b.n	8008de0 <si4463_init+0x84>
        {
            spi1_trx(*p_init_arr);      //send command byte
 8008dc0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fa6e 	bl	80092a8 <spi1_trx>
            p_init_arr++;               //move pointer to the next byte in command
 8008dcc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
        for(uint8_t i = 0; i < len; i++)
 8008dd6:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8008dda:	3301      	adds	r3, #1
 8008ddc:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
 8008de0:	f897 2173 	ldrb.w	r2, [r7, #371]	; 0x173
 8008de4:	f897 3172 	ldrb.w	r3, [r7, #370]	; 0x172
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d3e9      	bcc.n	8008dc0 <si4463_init+0x64>
        }
        cs_si4463_inactive();
 8008dec:	f7f8 ffb6 	bl	8001d5c <cs_si4463_inactive>
    while(*p_init_arr != 0x00)
 8008df0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1d0      	bne.n	8008d9c <si4463_init+0x40>
    }

    //Set len of the packet
    si4463_set_packet_len(AIR_PACKET_LEN);
 8008dfa:	2011      	movs	r0, #17
 8008dfc:	f000 f840 	bl	8008e80 <si4463_set_packet_len>

    //Get current settings
    p_settings = get_settings();
 8008e00:	f7ff fede 	bl	8008bc0 <get_settings>
 8008e04:	4602      	mov	r2, r0
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <si4463_init+0xdc>)
 8008e08:	601a      	str	r2, [r3, #0]

    //Set TX power
    si4463_set_tx_power(tx_power_register_values[p_settings->tx_power_opt]);
 8008e0a:	4b0b      	ldr	r3, [pc, #44]	; (8008e38 <si4463_init+0xdc>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	791b      	ldrb	r3, [r3, #4]
 8008e10:	461a      	mov	r2, r3
 8008e12:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <si4463_init+0xe0>)
 8008e14:	5c9b      	ldrb	r3, [r3, r2]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 f854 	bl	8008ec4 <si4463_set_tx_power>

    //Force standby state to reduce Icc. Affects the state si4463 goes after TX and RX (why?)
    si4463_standby();
 8008e1c:	f000 f810 	bl	8008e40 <si4463_standby>

    spi1_clock_disable();
 8008e20:	f000 f9ca 	bl	80091b8 <spi1_clock_disable>

}
 8008e24:	bf00      	nop
 8008e26:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	000186a0 	.word	0x000186a0
 8008e34:	0800d338 	.word	0x0800d338
 8008e38:	2000061c 	.word	0x2000061c
 8008e3c:	20000054 	.word	0x20000054

08008e40 <si4463_standby>:



void si4463_standby(void)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	af00      	add	r7, sp, #0
    si4463_wait_cts();
 8008e44:	f000 f80c 	bl	8008e60 <si4463_wait_cts>
    cs_si4463_active();
 8008e48:	f7f8 ff7c 	bl	8001d44 <cs_si4463_active>
    spi1_trx(SI4463_CMD_CHANGE_STATE);
 8008e4c:	2034      	movs	r0, #52	; 0x34
 8008e4e:	f000 fa2b 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_SLEEP_STATE);
 8008e52:	2001      	movs	r0, #1
 8008e54:	f000 fa28 	bl	80092a8 <spi1_trx>
    cs_si4463_inactive();
 8008e58:	f7f8 ff80 	bl	8001d5c <cs_si4463_inactive>
}
 8008e5c:	bf00      	nop
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <si4463_wait_cts>:



//Wait for hardware CTS pin
void si4463_wait_cts(void)
{
 8008e60:	b480      	push	{r7}
 8008e62:	af00      	add	r7, sp, #0
    while(!(GPIOA->IDR & GPIO_IDR_IDR12)){}      //while GPIO1 = 0
 8008e64:	bf00      	nop
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <si4463_wait_cts+0x1c>)
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0f9      	beq.n	8008e66 <si4463_wait_cts+0x6>
}
 8008e72:	bf00      	nop
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bc80      	pop	{r7}
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	40010800 	.word	0x40010800

08008e80 <si4463_set_packet_len>:



//Set air packet length
void si4463_set_packet_len(uint8_t packet_len)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	71fb      	strb	r3, [r7, #7]
    si4463_wait_cts();
 8008e8a:	f7ff ffe9 	bl	8008e60 <si4463_wait_cts>
    cs_si4463_active();
 8008e8e:	f7f8 ff59 	bl	8001d44 <cs_si4463_active>
    spi1_trx(SI4463_CMD_SET_PROPERTY);
 8008e92:	2011      	movs	r0, #17
 8008e94:	f000 fa08 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_PKT_FIELD_1_LENGTH_GROUP_ID);
 8008e98:	2012      	movs	r0, #18
 8008e9a:	f000 fa05 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_PKT_FIELD_1_LENGTH_NUM_PROPS);
 8008e9e:	2002      	movs	r0, #2
 8008ea0:	f000 fa02 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_PKT_FIELD_1_LENGTH_START_PROP);
 8008ea4:	200d      	movs	r0, #13
 8008ea6:	f000 f9ff 	bl	80092a8 <spi1_trx>
    spi1_trx(0x00);                 //packet len high byte
 8008eaa:	2000      	movs	r0, #0
 8008eac:	f000 f9fc 	bl	80092a8 <spi1_trx>
    spi1_trx(packet_len);           //packet len low byte
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 f9f8 	bl	80092a8 <spi1_trx>
    cs_si4463_inactive();
 8008eb8:	f7f8 ff50 	bl	8001d5c <cs_si4463_inactive>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <si4463_set_tx_power>:



void si4463_set_tx_power(uint8_t tx_pow_reg_val)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	71fb      	strb	r3, [r7, #7]
    si4463_wait_cts();
 8008ece:	f7ff ffc7 	bl	8008e60 <si4463_wait_cts>
    cs_si4463_active();
 8008ed2:	f7f8 ff37 	bl	8001d44 <cs_si4463_active>
    spi1_trx(SI4463_CMD_SET_PROPERTY);
 8008ed6:	2011      	movs	r0, #17
 8008ed8:	f000 f9e6 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_PA_PWR_LVL_GROUP_ID);
 8008edc:	2022      	movs	r0, #34	; 0x22
 8008ede:	f000 f9e3 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_PA_PWR_LVL_NUM_PROPS);
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	f000 f9e0 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_PA_PWR_LVL_START_PROP);
 8008ee8:	2001      	movs	r0, #1
 8008eea:	f000 f9dd 	bl	80092a8 <spi1_trx>
    spi1_trx(tx_pow_reg_val);
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f9d9 	bl	80092a8 <spi1_trx>
    cs_si4463_inactive();
 8008ef6:	f7f8 ff31 	bl	8001d5c <cs_si4463_inactive>
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <si4463_tx_packet>:



//SI4463 TX packet
void si4463_tx_packet(void)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
	spi1_clock_enable();
 8008f0a:	f000 f961 	bl	80091d0 <spi1_clock_enable>

    //reset TX FIFO
    si4463_wait_cts();
 8008f0e:	f7ff ffa7 	bl	8008e60 <si4463_wait_cts>
    cs_si4463_active();
 8008f12:	f7f8 ff17 	bl	8001d44 <cs_si4463_active>
    spi1_trx(SI4463_CMD_FIFO_INFO);
 8008f16:	2015      	movs	r0, #21
 8008f18:	f000 f9c6 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_FIFO_INFO_TX_BIT);
 8008f1c:	2001      	movs	r0, #1
 8008f1e:	f000 f9c3 	bl	80092a8 <spi1_trx>
    cs_si4463_inactive();
 8008f22:	f7f8 ff1b 	bl	8001d5c <cs_si4463_inactive>
    
    //fill TX FIFO buffer
    si4463_wait_cts();
 8008f26:	f7ff ff9b 	bl	8008e60 <si4463_wait_cts>
    cs_si4463_active();
 8008f2a:	f7f8 ff0b 	bl	8001d44 <cs_si4463_active>
    spi1_trx(SI4463_CMD_WRITE_TX_FIFO);
 8008f2e:	2066      	movs	r0, #102	; 0x66
 8008f30:	f000 f9ba 	bl	80092a8 <spi1_trx>
    for (uint8_t i = 0; i < AIR_PACKET_LEN; i++)
 8008f34:	2300      	movs	r3, #0
 8008f36:	71fb      	strb	r3, [r7, #7]
 8008f38:	e008      	b.n	8008f4c <si4463_tx_packet+0x48>
    {
        spi1_trx(air_packet_tx[i]);
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	4a15      	ldr	r2, [pc, #84]	; (8008f94 <si4463_tx_packet+0x90>)
 8008f3e:	5cd3      	ldrb	r3, [r2, r3]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 f9b1 	bl	80092a8 <spi1_trx>
    for (uint8_t i = 0; i < AIR_PACKET_LEN; i++)
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	71fb      	strb	r3, [r7, #7]
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	2b10      	cmp	r3, #16
 8008f50:	d9f3      	bls.n	8008f3a <si4463_tx_packet+0x36>
    }
    cs_si4463_inactive();
 8008f52:	f7f8 ff03 	bl	8001d5c <cs_si4463_inactive>
    
    //start TX
    si4463_wait_cts();
 8008f56:	f7ff ff83 	bl	8008e60 <si4463_wait_cts>
    cs_si4463_active();
 8008f5a:	f7f8 fef3 	bl	8001d44 <cs_si4463_active>
    spi1_trx(SI4463_CMD_START_TX);
 8008f5e:	2031      	movs	r0, #49	; 0x31
 8008f60:	f000 f9a2 	bl	80092a8 <spi1_trx>
    spi1_trx(p_settings->freq_channel);                 //frequency channel
 8008f64:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <si4463_tx_packet+0x94>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	78db      	ldrb	r3, [r3, #3]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 f99c 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_SLEEP_STATE << 4);                  //return to sleep state, send FIFO content, start TX immediately
 8008f70:	2010      	movs	r0, #16
 8008f72:	f000 f999 	bl	80092a8 <spi1_trx>
    spi1_trx(0x00);                                     //the number of data bytes to be transmitted
 8008f76:	2000      	movs	r0, #0
 8008f78:	f000 f996 	bl	80092a8 <spi1_trx>
    spi1_trx(0x00);                                     //is specified by the value(s) of the PKT_FIELD_X_LENGTH properties
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	f000 f993 	bl	80092a8 <spi1_trx>
    cs_si4463_inactive();
 8008f82:	f7f8 feeb 	bl	8001d5c <cs_si4463_inactive>

    spi1_clock_disable();
 8008f86:	f000 f917 	bl	80091b8 <spi1_clock_disable>
}
 8008f8a:	bf00      	nop
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20000920 	.word	0x20000920
 8008f98:	2000061c 	.word	0x2000061c

08008f9c <si4463_start_rx>:



//SI4463 start packet RX
void si4463_start_rx(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
	spi1_clock_enable();
 8008fa0:	f000 f916 	bl	80091d0 <spi1_clock_enable>

    si4463_wait_cts();
 8008fa4:	f7ff ff5c 	bl	8008e60 <si4463_wait_cts>
    cs_si4463_active();
 8008fa8:	f7f8 fecc 	bl	8001d44 <cs_si4463_active>
    spi1_trx(SI4463_CMD_START_RX);
 8008fac:	2032      	movs	r0, #50	; 0x32
 8008fae:	f000 f97b 	bl	80092a8 <spi1_trx>
    spi1_trx(p_settings->freq_channel);                 //frequency channel
 8008fb2:	4b0f      	ldr	r3, [pc, #60]	; (8008ff0 <si4463_start_rx+0x54>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	78db      	ldrb	r3, [r3, #3]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 f975 	bl	80092a8 <spi1_trx>
    spi1_trx(0x00);                                     //start RX immediately
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	f000 f972 	bl	80092a8 <spi1_trx>
    spi1_trx(0x00);                                     //RX packet len is specified
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f000 f96f 	bl	80092a8 <spi1_trx>
    spi1_trx(0x00);                                     //in packet handler configuration
 8008fca:	2000      	movs	r0, #0
 8008fcc:	f000 f96c 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_SLEEP_STATE);                       //if RX timeout then go to sleep (after RX_PREAMBLE_TIMEOUT)
 8008fd0:	2001      	movs	r0, #1
 8008fd2:	f000 f969 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_SLEEP_STATE);                       //if RX valid then go to sleep
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	f000 f966 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_SLEEP_STATE);                       //if RX invalid then go to sleep
 8008fdc:	2001      	movs	r0, #1
 8008fde:	f000 f963 	bl	80092a8 <spi1_trx>
    cs_si4463_inactive();
 8008fe2:	f7f8 febb 	bl	8001d5c <cs_si4463_inactive>

    spi1_clock_disable();
 8008fe6:	f000 f8e7 	bl	80091b8 <spi1_clock_disable>
}
 8008fea:	bf00      	nop
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	2000061c 	.word	0x2000061c

08008ff4 <si4463_get_rx_packet>:



//SI4463 get received packet
uint8_t si4463_get_rx_packet(void)
{
 8008ff4:	b590      	push	{r4, r7, lr}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
	spi1_clock_enable();
 8008ffa:	f000 f8e9 	bl	80091d0 <spi1_clock_enable>

    uint8_t ph_pending = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	71bb      	strb	r3, [r7, #6]
    
    //send get PH status command
    si4463_wait_cts();
 8009002:	f7ff ff2d 	bl	8008e60 <si4463_wait_cts>
    cs_si4463_active();
 8009006:	f7f8 fe9d 	bl	8001d44 <cs_si4463_active>
    spi1_trx(SI4463_CMD_GET_PH_STATUS);
 800900a:	2021      	movs	r0, #33	; 0x21
 800900c:	f000 f94c 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_BYTE_DUMMY);                //also clear all pending interrupts
 8009010:	2000      	movs	r0, #0
 8009012:	f000 f949 	bl	80092a8 <spi1_trx>
    cs_si4463_inactive();
 8009016:	f7f8 fea1 	bl	8001d5c <cs_si4463_inactive>
    
    //retrieve response
    si4463_wait_cts();
 800901a:	f7ff ff21 	bl	8008e60 <si4463_wait_cts>
    cs_si4463_active();
 800901e:	f7f8 fe91 	bl	8001d44 <cs_si4463_active>
    spi1_trx(SI4463_CMD_READ_CMD_BUF);
 8009022:	2044      	movs	r0, #68	; 0x44
 8009024:	f000 f940 	bl	80092a8 <spi1_trx>
    spi1_trx(SI4463_BYTE_DUMMY);                //skip CTS byte
 8009028:	2000      	movs	r0, #0
 800902a:	f000 f93d 	bl	80092a8 <spi1_trx>
    ph_pending = spi1_trx(SI4463_BYTE_DUMMY);
 800902e:	2000      	movs	r0, #0
 8009030:	f000 f93a 	bl	80092a8 <spi1_trx>
 8009034:	4603      	mov	r3, r0
 8009036:	71bb      	strb	r3, [r7, #6]
    cs_si4463_inactive();
 8009038:	f7f8 fe90 	bl	8001d5c <cs_si4463_inactive>
    
    if (ph_pending & SI4463_PH_PEND_CRC_ERROR_BIT)
 800903c:	79bb      	ldrb	r3, [r7, #6]
 800903e:	f003 0308 	and.w	r3, r3, #8
 8009042:	2b00      	cmp	r3, #0
 8009044:	d01b      	beq.n	800907e <si4463_get_rx_packet+0x8a>
    {
        si4463_wait_cts();                      //clear RX FIFO content
 8009046:	f7ff ff0b 	bl	8008e60 <si4463_wait_cts>
        cs_si4463_active();
 800904a:	f7f8 fe7b 	bl	8001d44 <cs_si4463_active>
        spi1_trx(SI4463_CMD_FIFO_INFO);
 800904e:	2015      	movs	r0, #21
 8009050:	f000 f92a 	bl	80092a8 <spi1_trx>
        spi1_trx(SI4463_FIFO_INFO_RX_BIT);
 8009054:	2002      	movs	r0, #2
 8009056:	f000 f927 	bl	80092a8 <spi1_trx>
        cs_si4463_inactive();
 800905a:	f7f8 fe7f 	bl	8001d5c <cs_si4463_inactive>
        
        si4463_wait_cts();                      //workaround if received packet has CRC error (see si4463 revB1 errata)
 800905e:	f7ff feff 	bl	8008e60 <si4463_wait_cts>
        cs_si4463_active();
 8009062:	f7f8 fe6f 	bl	8001d44 <cs_si4463_active>
        spi1_trx(SI4463_CMD_CHANGE_STATE);
 8009066:	2034      	movs	r0, #52	; 0x34
 8009068:	f000 f91e 	bl	80092a8 <spi1_trx>
        spi1_trx(SI4463_SLEEP_STATE);
 800906c:	2001      	movs	r0, #1
 800906e:	f000 f91b 	bl	80092a8 <spi1_trx>
        cs_si4463_inactive();
 8009072:	f7f8 fe73 	bl	8001d5c <cs_si4463_inactive>
        
        spi1_clock_disable();
 8009076:	f000 f89f 	bl	80091b8 <spi1_clock_disable>
        return 0;
 800907a:	2300      	movs	r3, #0
 800907c:	e025      	b.n	80090ca <si4463_get_rx_packet+0xd6>
    }
    else if (ph_pending & SI4463_PH_PEND_PACKET_RX_BIT)
 800907e:	79bb      	ldrb	r3, [r7, #6]
 8009080:	f003 0310 	and.w	r3, r3, #16
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01d      	beq.n	80090c4 <si4463_get_rx_packet+0xd0>
    {
        //read RX FIFO buffer
        si4463_wait_cts();
 8009088:	f7ff feea 	bl	8008e60 <si4463_wait_cts>
        cs_si4463_active();
 800908c:	f7f8 fe5a 	bl	8001d44 <cs_si4463_active>
        spi1_trx(SI4463_CMD_READ_RX_FIFO);
 8009090:	2077      	movs	r0, #119	; 0x77
 8009092:	f000 f909 	bl	80092a8 <spi1_trx>
        for (uint8_t i = 0; i < AIR_PACKET_LEN; i++)
 8009096:	2300      	movs	r3, #0
 8009098:	71fb      	strb	r3, [r7, #7]
 800909a:	e00a      	b.n	80090b2 <si4463_get_rx_packet+0xbe>
        {
        	air_packet_rx[i] = spi1_trx(SI4463_BYTE_DUMMY);
 800909c:	79fc      	ldrb	r4, [r7, #7]
 800909e:	2000      	movs	r0, #0
 80090a0:	f000 f902 	bl	80092a8 <spi1_trx>
 80090a4:	4603      	mov	r3, r0
 80090a6:	461a      	mov	r2, r3
 80090a8:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <si4463_get_rx_packet+0xe0>)
 80090aa:	551a      	strb	r2, [r3, r4]
        for (uint8_t i = 0; i < AIR_PACKET_LEN; i++)
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	3301      	adds	r3, #1
 80090b0:	71fb      	strb	r3, [r7, #7]
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	2b10      	cmp	r3, #16
 80090b6:	d9f1      	bls.n	800909c <si4463_get_rx_packet+0xa8>
        }
        cs_si4463_inactive();
 80090b8:	f7f8 fe50 	bl	8001d5c <cs_si4463_inactive>
        
        spi1_clock_disable();
 80090bc:	f000 f87c 	bl	80091b8 <spi1_clock_disable>
        return 1;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e002      	b.n	80090ca <si4463_get_rx_packet+0xd6>
    }
    else
    {
    	spi1_clock_disable();
 80090c4:	f000 f878 	bl	80091b8 <spi1_clock_disable>
        return 0;
 80090c8:	2300      	movs	r3, #0
    }
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd90      	pop	{r4, r7, pc}
 80090d2:	bf00      	nop
 80090d4:	2000090c 	.word	0x2000090c

080090d8 <get_air_packet_tx>:



uint8_t *get_air_packet_tx(void)
{
 80090d8:	b480      	push	{r7}
 80090da:	af00      	add	r7, sp, #0
	return &air_packet_tx[0];
 80090dc:	4b02      	ldr	r3, [pc, #8]	; (80090e8 <get_air_packet_tx+0x10>)
}
 80090de:	4618      	mov	r0, r3
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bc80      	pop	{r7}
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	20000920 	.word	0x20000920

080090ec <get_air_packet_rx>:



uint8_t *get_air_packet_rx(void)
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
	return &air_packet_rx[0];
 80090f0:	4b02      	ldr	r3, [pc, #8]	; (80090fc <get_air_packet_rx+0x10>)
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bc80      	pop	{r7}
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	2000090c 	.word	0x2000090c

08009100 <spi1_init>:



//Init SPI1
void spi1_init(void)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;             //enable clock spi1
 8009104:	4b29      	ldr	r3, [pc, #164]	; (80091ac <spi1_init+0xac>)
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	4a28      	ldr	r2, [pc, #160]	; (80091ac <spi1_init+0xac>)
 800910a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800910e:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;             //enable alternate function clock
 8009110:	4b26      	ldr	r3, [pc, #152]	; (80091ac <spi1_init+0xac>)
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	4a25      	ldr	r2, [pc, #148]	; (80091ac <spi1_init+0xac>)
 8009116:	f043 0301 	orr.w	r3, r3, #1
 800911a:	6193      	str	r3, [r2, #24]
    AFIO->MAPR |= AFIO_MAPR_SPI1_REMAP;             //remap spi
 800911c:	4b24      	ldr	r3, [pc, #144]	; (80091b0 <spi1_init+0xb0>)
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	4a23      	ldr	r2, [pc, #140]	; (80091b0 <spi1_init+0xb0>)
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	6053      	str	r3, [r2, #4]
    AFIO->MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;    //disable JTAG
 8009128:	4b21      	ldr	r3, [pc, #132]	; (80091b0 <spi1_init+0xb0>)
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	4a20      	ldr	r2, [pc, #128]	; (80091b0 <spi1_init+0xb0>)
 800912e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009132:	6053      	str	r3, [r2, #4]
    SPI1->CR1 &= ~SPI_CR1_BR;                       //clock/2
 8009134:	4b1f      	ldr	r3, [pc, #124]	; (80091b4 <spi1_init+0xb4>)
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	b29b      	uxth	r3, r3
 800913a:	4a1e      	ldr	r2, [pc, #120]	; (80091b4 <spi1_init+0xb4>)
 800913c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009140:	b29b      	uxth	r3, r3
 8009142:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SSM;
 8009144:	4b1b      	ldr	r3, [pc, #108]	; (80091b4 <spi1_init+0xb4>)
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	4a1a      	ldr	r2, [pc, #104]	; (80091b4 <spi1_init+0xb4>)
 800914c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009150:	b29b      	uxth	r3, r3
 8009152:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SSI;
 8009154:	4b17      	ldr	r3, [pc, #92]	; (80091b4 <spi1_init+0xb4>)
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	b29b      	uxth	r3, r3
 800915a:	4a16      	ldr	r2, [pc, #88]	; (80091b4 <spi1_init+0xb4>)
 800915c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009160:	b29b      	uxth	r3, r3
 8009162:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_MSTR;                      //master mode
 8009164:	4b13      	ldr	r3, [pc, #76]	; (80091b4 <spi1_init+0xb4>)
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	b29b      	uxth	r3, r3
 800916a:	4a12      	ldr	r2, [pc, #72]	; (80091b4 <spi1_init+0xb4>)
 800916c:	f043 0304 	orr.w	r3, r3, #4
 8009170:	b29b      	uxth	r3, r3
 8009172:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_CPOL;                     //SCK = 0 in IDLE
 8009174:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <spi1_init+0xb4>)
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	b29b      	uxth	r3, r3
 800917a:	4a0e      	ldr	r2, [pc, #56]	; (80091b4 <spi1_init+0xb4>)
 800917c:	f023 0302 	bic.w	r3, r3, #2
 8009180:	b29b      	uxth	r3, r3
 8009182:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 &= ~SPI_CR1_CPHA;                     //first rising edge capture
 8009184:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <spi1_init+0xb4>)
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	b29b      	uxth	r3, r3
 800918a:	4a0a      	ldr	r2, [pc, #40]	; (80091b4 <spi1_init+0xb4>)
 800918c:	f023 0301 	bic.w	r3, r3, #1
 8009190:	b29b      	uxth	r3, r3
 8009192:	8013      	strh	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SPE;                       //enable spi
 8009194:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <spi1_init+0xb4>)
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	b29b      	uxth	r3, r3
 800919a:	4a06      	ldr	r2, [pc, #24]	; (80091b4 <spi1_init+0xb4>)
 800919c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	8013      	strh	r3, [r2, #0]

    spi1_clock_disable();
 80091a4:	f000 f808 	bl	80091b8 <spi1_clock_disable>
}
 80091a8:	bf00      	nop
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	40021000 	.word	0x40021000
 80091b0:	40010000 	.word	0x40010000
 80091b4:	40013000 	.word	0x40013000

080091b8 <spi1_clock_disable>:



void spi1_clock_disable(void)
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB2ENR, RCC_APB2ENR_SPI1EN) = 0;
 80091bc:	4b03      	ldr	r3, [pc, #12]	; (80091cc <spi1_clock_disable+0x14>)
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
}
 80091c2:	bf00      	nop
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bc80      	pop	{r7}
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	42420330 	.word	0x42420330

080091d0 <spi1_clock_enable>:



void spi1_clock_enable(void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB2ENR, RCC_APB2ENR_SPI1EN) = 1;
 80091d4:	4b03      	ldr	r3, [pc, #12]	; (80091e4 <spi1_clock_enable+0x14>)
 80091d6:	2201      	movs	r2, #1
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	bf00      	nop
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	42420330 	.word	0x42420330

080091e8 <spi2_init>:



//Init SPI2
void spi2_init(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;     //enable clock spi2
 80091ec:	4b20      	ldr	r3, [pc, #128]	; (8009270 <spi2_init+0x88>)
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	4a1f      	ldr	r2, [pc, #124]	; (8009270 <spi2_init+0x88>)
 80091f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091f6:	61d3      	str	r3, [r2, #28]
    SPI2->CR1 &= ~SPI_CR1_BR;               //clock/2
 80091f8:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <spi2_init+0x8c>)
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	4a1d      	ldr	r2, [pc, #116]	; (8009274 <spi2_init+0x8c>)
 8009200:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009204:	b29b      	uxth	r3, r3
 8009206:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_SSM;
 8009208:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <spi2_init+0x8c>)
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	b29b      	uxth	r3, r3
 800920e:	4a19      	ldr	r2, [pc, #100]	; (8009274 <spi2_init+0x8c>)
 8009210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009214:	b29b      	uxth	r3, r3
 8009216:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_SSI;
 8009218:	4b16      	ldr	r3, [pc, #88]	; (8009274 <spi2_init+0x8c>)
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	4a15      	ldr	r2, [pc, #84]	; (8009274 <spi2_init+0x8c>)
 8009220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009224:	b29b      	uxth	r3, r3
 8009226:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_MSTR;              //master mode
 8009228:	4b12      	ldr	r3, [pc, #72]	; (8009274 <spi2_init+0x8c>)
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	4a11      	ldr	r2, [pc, #68]	; (8009274 <spi2_init+0x8c>)
 8009230:	f043 0304 	orr.w	r3, r3, #4
 8009234:	b29b      	uxth	r3, r3
 8009236:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 &= ~SPI_CR1_CPOL;             //SCK = 0 in IDLE
 8009238:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <spi2_init+0x8c>)
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	4a0d      	ldr	r2, [pc, #52]	; (8009274 <spi2_init+0x8c>)
 8009240:	f023 0302 	bic.w	r3, r3, #2
 8009244:	b29b      	uxth	r3, r3
 8009246:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 &= ~SPI_CR1_CPHA;             //first rising edge capture
 8009248:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <spi2_init+0x8c>)
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	b29b      	uxth	r3, r3
 800924e:	4a09      	ldr	r2, [pc, #36]	; (8009274 <spi2_init+0x8c>)
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	b29b      	uxth	r3, r3
 8009256:	8013      	strh	r3, [r2, #0]
    SPI2->CR1 |= SPI_CR1_SPE;               //enable spi
 8009258:	4b06      	ldr	r3, [pc, #24]	; (8009274 <spi2_init+0x8c>)
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	b29b      	uxth	r3, r3
 800925e:	4a05      	ldr	r2, [pc, #20]	; (8009274 <spi2_init+0x8c>)
 8009260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009264:	b29b      	uxth	r3, r3
 8009266:	8013      	strh	r3, [r2, #0]

    spi2_clock_disable();
 8009268:	f000 f806 	bl	8009278 <spi2_clock_disable>
}
 800926c:	bf00      	nop
 800926e:	bd80      	pop	{r7, pc}
 8009270:	40021000 	.word	0x40021000
 8009274:	40003800 	.word	0x40003800

08009278 <spi2_clock_disable>:



void spi2_clock_disable(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB1ENR, RCC_APB1ENR_SPI2EN) = 0;
 800927c:	4b03      	ldr	r3, [pc, #12]	; (800928c <spi2_clock_disable+0x14>)
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]
}
 8009282:	bf00      	nop
 8009284:	46bd      	mov	sp, r7
 8009286:	bc80      	pop	{r7}
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	424203b8 	.word	0x424203b8

08009290 <spi2_clock_enable>:



void spi2_clock_enable(void)
{
 8009290:	b480      	push	{r7}
 8009292:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB1ENR, RCC_APB1ENR_SPI2EN) = 1;
 8009294:	4b03      	ldr	r3, [pc, #12]	; (80092a4 <spi2_clock_enable+0x14>)
 8009296:	2201      	movs	r2, #1
 8009298:	601a      	str	r2, [r3, #0]
}
 800929a:	bf00      	nop
 800929c:	46bd      	mov	sp, r7
 800929e:	bc80      	pop	{r7}
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	424203b8 	.word	0x424203b8

080092a8 <spi1_trx>:



//TRX one byte via SPI1
uint8_t spi1_trx(uint8_t send_data)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	71fb      	strb	r3, [r7, #7]
    while(!(SPI1->SR & SPI_SR_TXE)){}       //while TXE bit = 0
 80092b2:	bf00      	nop
 80092b4:	4b0d      	ldr	r3, [pc, #52]	; (80092ec <spi1_trx+0x44>)
 80092b6:	891b      	ldrh	r3, [r3, #8]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0f8      	beq.n	80092b4 <spi1_trx+0xc>
    SPI1->DR = send_data;
 80092c2:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <spi1_trx+0x44>)
 80092c4:	79fa      	ldrb	r2, [r7, #7]
 80092c6:	b292      	uxth	r2, r2
 80092c8:	819a      	strh	r2, [r3, #12]
    
    while(!(SPI1->SR & SPI_SR_RXNE)){}      //while RXNE = 0
 80092ca:	bf00      	nop
 80092cc:	4b07      	ldr	r3, [pc, #28]	; (80092ec <spi1_trx+0x44>)
 80092ce:	891b      	ldrh	r3, [r3, #8]
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0f8      	beq.n	80092cc <spi1_trx+0x24>
    return SPI1->DR;
 80092da:	4b04      	ldr	r3, [pc, #16]	; (80092ec <spi1_trx+0x44>)
 80092dc:	899b      	ldrh	r3, [r3, #12]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	b2db      	uxtb	r3, r3
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	370c      	adds	r7, #12
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bc80      	pop	{r7}
 80092ea:	4770      	bx	lr
 80092ec:	40013000 	.word	0x40013000

080092f0 <spi2_trx>:



//TRX one byte via SPI2
uint8_t spi2_trx(uint8_t send_data)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	71fb      	strb	r3, [r7, #7]
    while (!(SPI2->SR & SPI_SR_TXE)){}      //while TXE bit = 0
 80092fa:	bf00      	nop
 80092fc:	4b0d      	ldr	r3, [pc, #52]	; (8009334 <spi2_trx+0x44>)
 80092fe:	891b      	ldrh	r3, [r3, #8]
 8009300:	b29b      	uxth	r3, r3
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d0f8      	beq.n	80092fc <spi2_trx+0xc>
    SPI2->DR = send_data;
 800930a:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <spi2_trx+0x44>)
 800930c:	79fa      	ldrb	r2, [r7, #7]
 800930e:	b292      	uxth	r2, r2
 8009310:	819a      	strh	r2, [r3, #12]
    
    while (!(SPI2->SR & SPI_SR_RXNE)){}     //while RXNE = 0
 8009312:	bf00      	nop
 8009314:	4b07      	ldr	r3, [pc, #28]	; (8009334 <spi2_trx+0x44>)
 8009316:	891b      	ldrh	r3, [r3, #8]
 8009318:	b29b      	uxth	r3, r3
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0f8      	beq.n	8009314 <spi2_trx+0x24>
    return  SPI2->DR;
 8009322:	4b04      	ldr	r3, [pc, #16]	; (8009334 <spi2_trx+0x44>)
 8009324:	899b      	ldrh	r3, [r3, #12]
 8009326:	b29b      	uxth	r3, r3
 8009328:	b2db      	uxtb	r3, r3
}
 800932a:	4618      	mov	r0, r3
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr
 8009334:	40003800 	.word	0x40003800

08009338 <ssd1306_init>:



//SSD1306 Init
void ssd1306_init(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
	spi2_clock_enable();
 800933e:	f7ff ffa7 	bl	8009290 <spi2_clock_enable>

    cs_ssd1306_inactive();      //ports init state
 8009342:	f7f8 fd53 	bl	8001dec <cs_ssd1306_inactive>
    res_ssd1306_inactive();
 8009346:	f7f8 fd21 	bl	8001d8c <res_ssd1306_inactive>
    ssd1306_command_mode();
 800934a:	f7f8 fd37 	bl	8001dbc <ssd1306_command_mode>
    delay_cyc(10000);
 800934e:	f242 7010 	movw	r0, #10000	; 0x2710
 8009352:	f7ff f9ad 	bl	80086b0 <delay_cyc>
    
    res_ssd1306_active();       //reset ssd1306
 8009356:	f7f8 fd0d 	bl	8001d74 <res_ssd1306_active>
    delay_cyc(10000);
 800935a:	f242 7010 	movw	r0, #10000	; 0x2710
 800935e:	f7ff f9a7 	bl	80086b0 <delay_cyc>
    res_ssd1306_inactive();
 8009362:	f7f8 fd13 	bl	8001d8c <res_ssd1306_inactive>
    delay_cyc(10000);
 8009366:	f242 7010 	movw	r0, #10000	; 0x2710
 800936a:	f7ff f9a1 	bl	80086b0 <delay_cyc>
    
    uint8_t i = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	71fb      	strb	r3, [r7, #7]
    uint8_t len = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	71bb      	strb	r3, [r7, #6]
    while (ssd1306_conf[i] != 0x00)
 8009376:	e019      	b.n	80093ac <ssd1306_init+0x74>
    {
        len = ssd1306_conf[i++];
 8009378:	79fb      	ldrb	r3, [r7, #7]
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	71fa      	strb	r2, [r7, #7]
 800937e:	461a      	mov	r2, r3
 8009380:	4b12      	ldr	r3, [pc, #72]	; (80093cc <ssd1306_init+0x94>)
 8009382:	5c9b      	ldrb	r3, [r3, r2]
 8009384:	71bb      	strb	r3, [r7, #6]
        
        cs_ssd1306_active();
 8009386:	f7f8 fd25 	bl	8001dd4 <cs_ssd1306_active>
        while (len--)
 800938a:	e008      	b.n	800939e <ssd1306_init+0x66>
        {
            spi2_trx(ssd1306_conf[i++]);
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	71fa      	strb	r2, [r7, #7]
 8009392:	461a      	mov	r2, r3
 8009394:	4b0d      	ldr	r3, [pc, #52]	; (80093cc <ssd1306_init+0x94>)
 8009396:	5c9b      	ldrb	r3, [r3, r2]
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff ffa9 	bl	80092f0 <spi2_trx>
        while (len--)
 800939e:	79bb      	ldrb	r3, [r7, #6]
 80093a0:	1e5a      	subs	r2, r3, #1
 80093a2:	71ba      	strb	r2, [r7, #6]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1f1      	bne.n	800938c <ssd1306_init+0x54>
        }
        cs_ssd1306_inactive();
 80093a8:	f7f8 fd20 	bl	8001dec <cs_ssd1306_inactive>
    while (ssd1306_conf[i] != 0x00)
 80093ac:	79fb      	ldrb	r3, [r7, #7]
 80093ae:	4a07      	ldr	r2, [pc, #28]	; (80093cc <ssd1306_init+0x94>)
 80093b0:	5cd3      	ldrb	r3, [r2, r3]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1e0      	bne.n	8009378 <ssd1306_init+0x40>
    }
    
    spi2_clock_disable();
 80093b6:	f7ff ff5f 	bl	8009278 <spi2_clock_disable>

    ssd1306_clear();
 80093ba:	f000 f877 	bl	80094ac <ssd1306_clear>
    ssd1306_update();
 80093be:	f000 f84b 	bl	8009458 <ssd1306_update>
}
 80093c2:	bf00      	nop
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	0800daa0 	.word	0x0800daa0

080093d0 <ssd1306_on>:



void ssd1306_on(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0
	spi2_clock_enable();
 80093d4:	f7ff ff5c 	bl	8009290 <spi2_clock_enable>
	ssd1306_command_mode();
 80093d8:	f7f8 fcf0 	bl	8001dbc <ssd1306_command_mode>
	cs_ssd1306_active();
 80093dc:	f7f8 fcfa 	bl	8001dd4 <cs_ssd1306_active>
	spi2_trx(SSD1306_COMMAND_ON);
 80093e0:	20af      	movs	r0, #175	; 0xaf
 80093e2:	f7ff ff85 	bl	80092f0 <spi2_trx>
	cs_ssd1306_inactive();
 80093e6:	f7f8 fd01 	bl	8001dec <cs_ssd1306_inactive>
	spi2_clock_disable();
 80093ea:	f7ff ff45 	bl	8009278 <spi2_clock_disable>
}
 80093ee:	bf00      	nop
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <ssd1306_off>:



void ssd1306_off(void)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	af00      	add	r7, sp, #0
	spi2_clock_enable();
 80093f6:	f7ff ff4b 	bl	8009290 <spi2_clock_enable>
	ssd1306_command_mode();
 80093fa:	f7f8 fcdf 	bl	8001dbc <ssd1306_command_mode>
	cs_ssd1306_active();
 80093fe:	f7f8 fce9 	bl	8001dd4 <cs_ssd1306_active>
	spi2_trx(SSD1306_COMMAND_OFF);
 8009402:	20ae      	movs	r0, #174	; 0xae
 8009404:	f7ff ff74 	bl	80092f0 <spi2_trx>
	cs_ssd1306_inactive();
 8009408:	f7f8 fcf0 	bl	8001dec <cs_ssd1306_inactive>
	spi2_clock_disable();
 800940c:	f7ff ff34 	bl	8009278 <spi2_clock_disable>
}
 8009410:	bf00      	nop
 8009412:	bd80      	pop	{r7, pc}

08009414 <ssd1306_toggle_display>:



//Toggle display on or off
void ssd1306_toggle_display(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
	if (display_status == SSD1306_DISPLAY_ON)
 8009418:	4b09      	ldr	r3, [pc, #36]	; (8009440 <ssd1306_toggle_display+0x2c>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d105      	bne.n	800942c <ssd1306_toggle_display+0x18>
	{
		display_status = SSD1306_DISPLAY_OFF;
 8009420:	4b07      	ldr	r3, [pc, #28]	; (8009440 <ssd1306_toggle_display+0x2c>)
 8009422:	2200      	movs	r2, #0
 8009424:	701a      	strb	r2, [r3, #0]
		ssd1306_off();
 8009426:	f7ff ffe4 	bl	80093f2 <ssd1306_off>
	{
		display_status = SSD1306_DISPLAY_ON;
		draw_current_menu(); //update screen content before enabling the lcd
		ssd1306_on();
	}
}
 800942a:	e006      	b.n	800943a <ssd1306_toggle_display+0x26>
		display_status = SSD1306_DISPLAY_ON;
 800942c:	4b04      	ldr	r3, [pc, #16]	; (8009440 <ssd1306_toggle_display+0x2c>)
 800942e:	2201      	movs	r2, #1
 8009430:	701a      	strb	r2, [r3, #0]
		draw_current_menu(); //update screen content before enabling the lcd
 8009432:	f7fb f885 	bl	8004540 <draw_current_menu>
		ssd1306_on();
 8009436:	f7ff ffcb 	bl	80093d0 <ssd1306_on>
}
 800943a:	bf00      	nop
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20000058 	.word	0x20000058

08009444 <ssd1306_get_display_status>:



uint8_t ssd1306_get_display_status(void)
{
 8009444:	b480      	push	{r7}
 8009446:	af00      	add	r7, sp, #0
	return display_status;
 8009448:	4b02      	ldr	r3, [pc, #8]	; (8009454 <ssd1306_get_display_status+0x10>)
 800944a:	781b      	ldrb	r3, [r3, #0]
}
 800944c:	4618      	mov	r0, r3
 800944e:	46bd      	mov	sp, r7
 8009450:	bc80      	pop	{r7}
 8009452:	4770      	bx	lr
 8009454:	20000058 	.word	0x20000058

08009458 <ssd1306_update>:



//Update screen with buffer content
void ssd1306_update(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
	if (display_status == SSD1306_DISPLAY_ON) //update display content only if the display is on
 800945e:	4b11      	ldr	r3, [pc, #68]	; (80094a4 <ssd1306_update+0x4c>)
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d119      	bne.n	800949a <ssd1306_update+0x42>
	{
		spi2_clock_enable();
 8009466:	f7ff ff13 	bl	8009290 <spi2_clock_enable>

		ssd1306_data_mode();
 800946a:	f7f8 fc9b 	bl	8001da4 <ssd1306_data_mode>
		cs_ssd1306_active();
 800946e:	f7f8 fcb1 	bl	8001dd4 <cs_ssd1306_active>
		for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 8009472:	2300      	movs	r3, #0
 8009474:	80fb      	strh	r3, [r7, #6]
 8009476:	e008      	b.n	800948a <ssd1306_update+0x32>
		{
			spi2_trx(screen_buf[i]);
 8009478:	88fb      	ldrh	r3, [r7, #6]
 800947a:	4a0b      	ldr	r2, [pc, #44]	; (80094a8 <ssd1306_update+0x50>)
 800947c:	5cd3      	ldrb	r3, [r2, r3]
 800947e:	4618      	mov	r0, r3
 8009480:	f7ff ff36 	bl	80092f0 <spi2_trx>
		for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 8009484:	88fb      	ldrh	r3, [r7, #6]
 8009486:	3301      	adds	r3, #1
 8009488:	80fb      	strh	r3, [r7, #6]
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009490:	d3f2      	bcc.n	8009478 <ssd1306_update+0x20>
		}
		cs_ssd1306_inactive();
 8009492:	f7f8 fcab 	bl	8001dec <cs_ssd1306_inactive>

		spi2_clock_disable();
 8009496:	f7ff feef 	bl	8009278 <spi2_clock_disable>
	}
}
 800949a:	bf00      	nop
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20000058 	.word	0x20000058
 80094a8:	20000934 	.word	0x20000934

080094ac <ssd1306_clear>:



//Clear all screen buffer pixels
void ssd1306_clear(void)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 80094b2:	2300      	movs	r3, #0
 80094b4:	80fb      	strh	r3, [r7, #6]
 80094b6:	e006      	b.n	80094c6 <ssd1306_clear+0x1a>
    {
        screen_buf[i] = 0x00;
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	4a07      	ldr	r2, [pc, #28]	; (80094d8 <ssd1306_clear+0x2c>)
 80094bc:	2100      	movs	r1, #0
 80094be:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 80094c0:	88fb      	ldrh	r3, [r7, #6]
 80094c2:	3301      	adds	r3, #1
 80094c4:	80fb      	strh	r3, [r7, #6]
 80094c6:	88fb      	ldrh	r3, [r7, #6]
 80094c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094cc:	d3f4      	bcc.n	80094b8 <ssd1306_clear+0xc>
    }
}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bc80      	pop	{r7}
 80094d6:	4770      	bx	lr
 80094d8:	20000934 	.word	0x20000934

080094dc <ssd1306_pixel>:



//Clear, Set or Reset any pixel on the screen (x 0-127, y 0-63)
void ssd1306_pixel(uint8_t x, uint8_t y, int8_t action)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	4603      	mov	r3, r0
 80094e4:	71fb      	strb	r3, [r7, #7]
 80094e6:	460b      	mov	r3, r1
 80094e8:	71bb      	strb	r3, [r7, #6]
 80094ea:	4613      	mov	r3, r2
 80094ec:	717b      	strb	r3, [r7, #5]
    switch (action)
 80094ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <ssd1306_pixel+0x20>
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d01d      	beq.n	8009536 <ssd1306_pixel+0x5a>
 80094fa:	e037      	b.n	800956c <ssd1306_pixel+0x90>
    {
        case 0:     //clear pixel
            screen_buf[x + (y / 8) * LCD_SIZE_X] &= ~(1 << (y % 8));
 80094fc:	79fa      	ldrb	r2, [r7, #7]
 80094fe:	79bb      	ldrb	r3, [r7, #6]
 8009500:	08db      	lsrs	r3, r3, #3
 8009502:	b2d8      	uxtb	r0, r3
 8009504:	4603      	mov	r3, r0
 8009506:	01db      	lsls	r3, r3, #7
 8009508:	4413      	add	r3, r2
 800950a:	4a28      	ldr	r2, [pc, #160]	; (80095ac <ssd1306_pixel+0xd0>)
 800950c:	5cd3      	ldrb	r3, [r2, r3]
 800950e:	b25a      	sxtb	r2, r3
 8009510:	79bb      	ldrb	r3, [r7, #6]
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	2101      	movs	r1, #1
 8009518:	fa01 f303 	lsl.w	r3, r1, r3
 800951c:	b25b      	sxtb	r3, r3
 800951e:	43db      	mvns	r3, r3
 8009520:	b25b      	sxtb	r3, r3
 8009522:	4013      	ands	r3, r2
 8009524:	b259      	sxtb	r1, r3
 8009526:	79fa      	ldrb	r2, [r7, #7]
 8009528:	4603      	mov	r3, r0
 800952a:	01db      	lsls	r3, r3, #7
 800952c:	4413      	add	r3, r2
 800952e:	b2c9      	uxtb	r1, r1
 8009530:	4a1e      	ldr	r2, [pc, #120]	; (80095ac <ssd1306_pixel+0xd0>)
 8009532:	54d1      	strb	r1, [r2, r3]
            break;
 8009534:	e035      	b.n	80095a2 <ssd1306_pixel+0xc6>
        case 1:     //set pixel
            screen_buf[x + (y / 8) * LCD_SIZE_X] |= 1 << (y % 8);
 8009536:	79fa      	ldrb	r2, [r7, #7]
 8009538:	79bb      	ldrb	r3, [r7, #6]
 800953a:	08db      	lsrs	r3, r3, #3
 800953c:	b2d8      	uxtb	r0, r3
 800953e:	4603      	mov	r3, r0
 8009540:	01db      	lsls	r3, r3, #7
 8009542:	4413      	add	r3, r2
 8009544:	4a19      	ldr	r2, [pc, #100]	; (80095ac <ssd1306_pixel+0xd0>)
 8009546:	5cd3      	ldrb	r3, [r2, r3]
 8009548:	b25a      	sxtb	r2, r3
 800954a:	79bb      	ldrb	r3, [r7, #6]
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	2101      	movs	r1, #1
 8009552:	fa01 f303 	lsl.w	r3, r1, r3
 8009556:	b25b      	sxtb	r3, r3
 8009558:	4313      	orrs	r3, r2
 800955a:	b259      	sxtb	r1, r3
 800955c:	79fa      	ldrb	r2, [r7, #7]
 800955e:	4603      	mov	r3, r0
 8009560:	01db      	lsls	r3, r3, #7
 8009562:	4413      	add	r3, r2
 8009564:	b2c9      	uxtb	r1, r1
 8009566:	4a11      	ldr	r2, [pc, #68]	; (80095ac <ssd1306_pixel+0xd0>)
 8009568:	54d1      	strb	r1, [r2, r3]
            break;
 800956a:	e01a      	b.n	80095a2 <ssd1306_pixel+0xc6>
        default:    //invert pixel
            screen_buf[x + (y / 8) * LCD_SIZE_X] ^= 1 << (y % 8);
 800956c:	79fa      	ldrb	r2, [r7, #7]
 800956e:	79bb      	ldrb	r3, [r7, #6]
 8009570:	08db      	lsrs	r3, r3, #3
 8009572:	b2d8      	uxtb	r0, r3
 8009574:	4603      	mov	r3, r0
 8009576:	01db      	lsls	r3, r3, #7
 8009578:	4413      	add	r3, r2
 800957a:	4a0c      	ldr	r2, [pc, #48]	; (80095ac <ssd1306_pixel+0xd0>)
 800957c:	5cd3      	ldrb	r3, [r2, r3]
 800957e:	b25a      	sxtb	r2, r3
 8009580:	79bb      	ldrb	r3, [r7, #6]
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2101      	movs	r1, #1
 8009588:	fa01 f303 	lsl.w	r3, r1, r3
 800958c:	b25b      	sxtb	r3, r3
 800958e:	4053      	eors	r3, r2
 8009590:	b259      	sxtb	r1, r3
 8009592:	79fa      	ldrb	r2, [r7, #7]
 8009594:	4603      	mov	r3, r0
 8009596:	01db      	lsls	r3, r3, #7
 8009598:	4413      	add	r3, r2
 800959a:	b2c9      	uxtb	r1, r1
 800959c:	4a03      	ldr	r2, [pc, #12]	; (80095ac <ssd1306_pixel+0xd0>)
 800959e:	54d1      	strb	r1, [r2, r3]
            break;
 80095a0:	bf00      	nop
    }
}
 80095a2:	bf00      	nop
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bc80      	pop	{r7}
 80095aa:	4770      	bx	lr
 80095ac:	20000934 	.word	0x20000934

080095b0 <ssd1306_pos>:



//Set character position on screen (rows 0-7, cols 0-20)
void ssd1306_pos(uint8_t row, uint8_t col)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	460a      	mov	r2, r1
 80095ba:	71fb      	strb	r3, [r7, #7]
 80095bc:	4613      	mov	r3, r2
 80095be:	71bb      	strb	r3, [r7, #6]
    buf_pos = (row * 21 + col) * FONT_SIZE_X + 2 * row;   //+2 bytes, because 128 - 21 * 6 = 2
 80095c0:	79fa      	ldrb	r2, [r7, #7]
 80095c2:	4613      	mov	r3, r2
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	4413      	add	r3, r2
 80095c8:	00da      	lsls	r2, r3, #3
 80095ca:	1ad2      	subs	r2, r2, r3
 80095cc:	79bb      	ldrb	r3, [r7, #6]
 80095ce:	441a      	add	r2, r3
 80095d0:	4613      	mov	r3, r2
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	441a      	add	r2, r3
 80095d6:	79fb      	ldrb	r3, [r7, #7]
 80095d8:	4413      	add	r3, r2
 80095da:	b29b      	uxth	r3, r3
 80095dc:	005b      	lsls	r3, r3, #1
 80095de:	b29a      	uxth	r2, r3
 80095e0:	4b03      	ldr	r3, [pc, #12]	; (80095f0 <ssd1306_pos+0x40>)
 80095e2:	801a      	strh	r2, [r3, #0]
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	20000124 	.word	0x20000124

080095f4 <ssd1306_char>:



//Put one char in buffer in position, defined previously via ssd1306_pos()
void ssd1306_char(char chr, uint8_t inv)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	460a      	mov	r2, r1
 80095fe:	71fb      	strb	r3, [r7, #7]
 8009600:	4613      	mov	r3, r2
 8009602:	71bb      	strb	r3, [r7, #6]
    if (inv)
 8009604:	79bb      	ldrb	r3, [r7, #6]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d002      	beq.n	8009610 <ssd1306_char+0x1c>
    {
        inv = 0xFF;
 800960a:	23ff      	movs	r3, #255	; 0xff
 800960c:	71bb      	strb	r3, [r7, #6]
 800960e:	e001      	b.n	8009614 <ssd1306_char+0x20>
    }
    else
    {
        inv = 0x00;
 8009610:	2300      	movs	r3, #0
 8009612:	71bb      	strb	r3, [r7, #6]
    }
    
    for (uint8_t i = 0; i < FONT_SIZE_X - 1; i++)
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]
 8009618:	e017      	b.n	800964a <ssd1306_char+0x56>
    {
        screen_buf[buf_pos++] = font[(uint8_t)chr][i] ^ inv;
 800961a:	79fa      	ldrb	r2, [r7, #7]
 800961c:	7bf9      	ldrb	r1, [r7, #15]
 800961e:	4814      	ldr	r0, [pc, #80]	; (8009670 <ssd1306_char+0x7c>)
 8009620:	4613      	mov	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	4403      	add	r3, r0
 8009628:	440b      	add	r3, r1
 800962a:	781a      	ldrb	r2, [r3, #0]
 800962c:	4b11      	ldr	r3, [pc, #68]	; (8009674 <ssd1306_char+0x80>)
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	1c59      	adds	r1, r3, #1
 8009632:	b288      	uxth	r0, r1
 8009634:	490f      	ldr	r1, [pc, #60]	; (8009674 <ssd1306_char+0x80>)
 8009636:	8008      	strh	r0, [r1, #0]
 8009638:	4619      	mov	r1, r3
 800963a:	79bb      	ldrb	r3, [r7, #6]
 800963c:	4053      	eors	r3, r2
 800963e:	b2da      	uxtb	r2, r3
 8009640:	4b0d      	ldr	r3, [pc, #52]	; (8009678 <ssd1306_char+0x84>)
 8009642:	545a      	strb	r2, [r3, r1]
    for (uint8_t i = 0; i < FONT_SIZE_X - 1; i++)
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	3301      	adds	r3, #1
 8009648:	73fb      	strb	r3, [r7, #15]
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	2b04      	cmp	r3, #4
 800964e:	d9e4      	bls.n	800961a <ssd1306_char+0x26>
    }
    screen_buf[buf_pos++] = 0x00 ^ inv;       //intercharacter space
 8009650:	4b08      	ldr	r3, [pc, #32]	; (8009674 <ssd1306_char+0x80>)
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	b291      	uxth	r1, r2
 8009658:	4a06      	ldr	r2, [pc, #24]	; (8009674 <ssd1306_char+0x80>)
 800965a:	8011      	strh	r1, [r2, #0]
 800965c:	4619      	mov	r1, r3
 800965e:	4a06      	ldr	r2, [pc, #24]	; (8009678 <ssd1306_char+0x84>)
 8009660:	79bb      	ldrb	r3, [r7, #6]
 8009662:	5453      	strb	r3, [r2, r1]
}
 8009664:	bf00      	nop
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	bc80      	pop	{r7}
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	0800d7d0 	.word	0x0800d7d0
 8009674:	20000124 	.word	0x20000124
 8009678:	20000934 	.word	0x20000934

0800967c <ssd1306_char_pos>:



//Put one char in defined pos
void ssd1306_char_pos(uint8_t row, uint8_t col, char chr, uint8_t inv)
{
 800967c:	b590      	push	{r4, r7, lr}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	4611      	mov	r1, r2
 8009688:	461a      	mov	r2, r3
 800968a:	4623      	mov	r3, r4
 800968c:	71fb      	strb	r3, [r7, #7]
 800968e:	4603      	mov	r3, r0
 8009690:	71bb      	strb	r3, [r7, #6]
 8009692:	460b      	mov	r3, r1
 8009694:	717b      	strb	r3, [r7, #5]
 8009696:	4613      	mov	r3, r2
 8009698:	713b      	strb	r3, [r7, #4]
    ssd1306_pos(row, col);
 800969a:	79ba      	ldrb	r2, [r7, #6]
 800969c:	79fb      	ldrb	r3, [r7, #7]
 800969e:	4611      	mov	r1, r2
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff ff85 	bl	80095b0 <ssd1306_pos>
    ssd1306_char(chr, inv);
 80096a6:	793a      	ldrb	r2, [r7, #4]
 80096a8:	797b      	ldrb	r3, [r7, #5]
 80096aa:	4611      	mov	r1, r2
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff ffa1 	bl	80095f4 <ssd1306_char>
}
 80096b2:	bf00      	nop
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd90      	pop	{r4, r7, pc}

080096ba <ssd1306_print>:



//Print string on screen (with position)
void ssd1306_print(uint8_t row, uint8_t col, char *p_str, uint8_t inv)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	603a      	str	r2, [r7, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	4603      	mov	r3, r0
 80096c6:	71fb      	strb	r3, [r7, #7]
 80096c8:	460b      	mov	r3, r1
 80096ca:	71bb      	strb	r3, [r7, #6]
 80096cc:	4613      	mov	r3, r2
 80096ce:	717b      	strb	r3, [r7, #5]
    ssd1306_pos(row, col);
 80096d0:	79ba      	ldrb	r2, [r7, #6]
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	4611      	mov	r1, r2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7ff ff6a 	bl	80095b0 <ssd1306_pos>
    
    while (*p_str)
 80096dc:	e008      	b.n	80096f0 <ssd1306_print+0x36>
    {
        ssd1306_char(*p_str++, inv);
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	603a      	str	r2, [r7, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	797a      	ldrb	r2, [r7, #5]
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7ff ff82 	bl	80095f4 <ssd1306_char>
    while (*p_str)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1f2      	bne.n	80096de <ssd1306_print+0x24>
    }
}
 80096f8:	bf00      	nop
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <ssd1306_print_viceversa>:



//Print string on screen (with position) in viceversa direction (decrease collumn)
void ssd1306_print_viceversa(uint8_t row, uint8_t col, char *p_str, uint8_t inv)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	603a      	str	r2, [r7, #0]
 8009708:	461a      	mov	r2, r3
 800970a:	4603      	mov	r3, r0
 800970c:	71fb      	strb	r3, [r7, #7]
 800970e:	460b      	mov	r3, r1
 8009710:	71bb      	strb	r3, [r7, #6]
 8009712:	4613      	mov	r3, r2
 8009714:	717b      	strb	r3, [r7, #5]
    uint8_t symb_cntr = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
    
    ssd1306_pos(row, col);
 800971a:	79ba      	ldrb	r2, [r7, #6]
 800971c:	79fb      	ldrb	r3, [r7, #7]
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f7ff ff45 	bl	80095b0 <ssd1306_pos>
    
    while (*p_str)
 8009726:	e005      	b.n	8009734 <ssd1306_print_viceversa+0x34>
    {
        p_str++;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	3301      	adds	r3, #1
 800972c:	603b      	str	r3, [r7, #0]
        symb_cntr++;
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	3301      	adds	r3, #1
 8009732:	73fb      	strb	r3, [r7, #15]
    while (*p_str)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1f5      	bne.n	8009728 <ssd1306_print_viceversa+0x28>
    }
    
    while (symb_cntr)
 800973c:	e012      	b.n	8009764 <ssd1306_print_viceversa+0x64>
    {
        symb_cntr--;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	3b01      	subs	r3, #1
 8009742:	73fb      	strb	r3, [r7, #15]
        ssd1306_char(*--p_str, inv);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	3b01      	subs	r3, #1
 8009748:	603b      	str	r3, [r7, #0]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	797a      	ldrb	r2, [r7, #5]
 8009750:	4611      	mov	r1, r2
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff ff4e 	bl	80095f4 <ssd1306_char>
        buf_pos -= 2 * FONT_SIZE_X;         //minus two characters position
 8009758:	4b06      	ldr	r3, [pc, #24]	; (8009774 <ssd1306_print_viceversa+0x74>)
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	3b0c      	subs	r3, #12
 800975e:	b29a      	uxth	r2, r3
 8009760:	4b04      	ldr	r3, [pc, #16]	; (8009774 <ssd1306_print_viceversa+0x74>)
 8009762:	801a      	strh	r2, [r3, #0]
    while (symb_cntr)
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1e9      	bne.n	800973e <ssd1306_print_viceversa+0x3e>
    }
}
 800976a:	bf00      	nop
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20000124 	.word	0x20000124

08009778 <ssd1306_print_next>:



//Print string on screen
void ssd1306_print_next(char *p_str, uint8_t inv)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
    while (*p_str)
 8009784:	e008      	b.n	8009798 <ssd1306_print_next+0x20>
    {
        ssd1306_char(*p_str++, inv);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	78fa      	ldrb	r2, [r7, #3]
 8009790:	4611      	mov	r1, r2
 8009792:	4618      	mov	r0, r3
 8009794:	f7ff ff2e 	bl	80095f4 <ssd1306_char>
    while (*p_str)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1f2      	bne.n	8009786 <ssd1306_print_next+0xe>
    }
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <ssd1306_bitmap>:



//Show bitmap
void ssd1306_bitmap(const uint8_t arr[])
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 80097b0:	2300      	movs	r3, #0
 80097b2:	81fb      	strh	r3, [r7, #14]
 80097b4:	e009      	b.n	80097ca <ssd1306_bitmap+0x22>
    {
        screen_buf[i] = arr[i];
 80097b6:	89fb      	ldrh	r3, [r7, #14]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	441a      	add	r2, r3
 80097bc:	89fb      	ldrh	r3, [r7, #14]
 80097be:	7811      	ldrb	r1, [r2, #0]
 80097c0:	4a06      	ldr	r2, [pc, #24]	; (80097dc <ssd1306_bitmap+0x34>)
 80097c2:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < LCD_SIZE_BYTES; i++)
 80097c4:	89fb      	ldrh	r3, [r7, #14]
 80097c6:	3301      	adds	r3, #1
 80097c8:	81fb      	strh	r3, [r7, #14]
 80097ca:	89fb      	ldrh	r3, [r7, #14]
 80097cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097d0:	d3f1      	bcc.n	80097b6 <ssd1306_bitmap+0xe>
    }
}
 80097d2:	bf00      	nop
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bc80      	pop	{r7}
 80097da:	4770      	bx	lr
 80097dc:	20000934 	.word	0x20000934

080097e0 <ssd1306_print_byte>:



//Print byte on screen (debug function)
void ssd1306_print_byte(uint8_t row, uint8_t col, uint8_t *p_byte, uint8_t amount)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	603a      	str	r2, [r7, #0]
 80097e8:	461a      	mov	r2, r3
 80097ea:	4603      	mov	r3, r0
 80097ec:	71fb      	strb	r3, [r7, #7]
 80097ee:	460b      	mov	r3, r1
 80097f0:	71bb      	strb	r3, [r7, #6]
 80097f2:	4613      	mov	r3, r2
 80097f4:	717b      	strb	r3, [r7, #5]
    ssd1306_pos(row, col);
 80097f6:	79ba      	ldrb	r2, [r7, #6]
 80097f8:	79fb      	ldrb	r3, [r7, #7]
 80097fa:	4611      	mov	r1, r2
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff fed7 	bl	80095b0 <ssd1306_pos>
    
    while (amount--)
 8009802:	e00b      	b.n	800981c <ssd1306_print_byte+0x3c>
    {
        screen_buf[buf_pos++] = *p_byte++;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	1c5a      	adds	r2, r3, #1
 8009808:	603a      	str	r2, [r7, #0]
 800980a:	4a09      	ldr	r2, [pc, #36]	; (8009830 <ssd1306_print_byte+0x50>)
 800980c:	8812      	ldrh	r2, [r2, #0]
 800980e:	1c51      	adds	r1, r2, #1
 8009810:	b288      	uxth	r0, r1
 8009812:	4907      	ldr	r1, [pc, #28]	; (8009830 <ssd1306_print_byte+0x50>)
 8009814:	8008      	strh	r0, [r1, #0]
 8009816:	7819      	ldrb	r1, [r3, #0]
 8009818:	4b06      	ldr	r3, [pc, #24]	; (8009834 <ssd1306_print_byte+0x54>)
 800981a:	5499      	strb	r1, [r3, r2]
    while (amount--)
 800981c:	797b      	ldrb	r3, [r7, #5]
 800981e:	1e5a      	subs	r2, r3, #1
 8009820:	717a      	strb	r2, [r7, #5]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1ee      	bne.n	8009804 <ssd1306_print_byte+0x24>
    }
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	20000124 	.word	0x20000124
 8009834:	20000934 	.word	0x20000934

08009838 <NVIC_EnableIRQ>:
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	4603      	mov	r3, r0
 8009840:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8009842:	79fb      	ldrb	r3, [r7, #7]
 8009844:	f003 031f 	and.w	r3, r3, #31
 8009848:	2201      	movs	r2, #1
 800984a:	fa02 f103 	lsl.w	r1, r2, r3
 800984e:	4a05      	ldr	r2, [pc, #20]	; (8009864 <NVIC_EnableIRQ+0x2c>)
 8009850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009854:	095b      	lsrs	r3, r3, #5
 8009856:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800985a:	bf00      	nop
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr
 8009864:	e000e100 	.word	0xe000e100

08009868 <timers_init>:



//Init all timers together
void timers_init(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
	systick_init();
 800986c:	f000 f8ba 	bl	80099e4 <systick_init>
	rtc_init();
 8009870:	f000 f838 	bl	80098e4 <rtc_init>
	timer1_init();
 8009874:	f000 f8ee 	bl	8009a54 <timer1_init>
	timer2_init();
 8009878:	f000 f95e 	bl	8009b38 <timer2_init>
	timer3_init();
 800987c:	f000 f98c 	bl	8009b98 <timer3_init>
}
 8009880:	bf00      	nop
 8009882:	bd80      	pop	{r7, pc}

08009884 <make_a_beep>:



void make_a_beep(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
	if (beep_mute == 0)
 8009888:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <make_a_beep+0x1c>)
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d105      	bne.n	800989c <make_a_beep+0x18>
	{
		timer3_clock_enable();
 8009890:	f000 f9ca 	bl	8009c28 <timer3_clock_enable>
		timer3_start();		//pwm
 8009894:	f000 f9e8 	bl	8009c68 <timer3_start>
		systick_start();	//gating
 8009898:	f000 f8ce 	bl	8009a38 <systick_start>
	}
}
 800989c:	bf00      	nop
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	20000126 	.word	0x20000126

080098a4 <toggle_mute>:



void toggle_mute(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
	if (beep_mute == 0)
 80098a8:	4b08      	ldr	r3, [pc, #32]	; (80098cc <toggle_mute+0x28>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d105      	bne.n	80098bc <toggle_mute+0x18>
	{
		make_a_beep();
 80098b0:	f7ff ffe8 	bl	8009884 <make_a_beep>
		beep_mute = 1;
 80098b4:	4b05      	ldr	r3, [pc, #20]	; (80098cc <toggle_mute+0x28>)
 80098b6:	2201      	movs	r2, #1
 80098b8:	701a      	strb	r2, [r3, #0]
	else
	{
		beep_mute = 0;
		make_a_beep();
	}
}
 80098ba:	e004      	b.n	80098c6 <toggle_mute+0x22>
		beep_mute = 0;
 80098bc:	4b03      	ldr	r3, [pc, #12]	; (80098cc <toggle_mute+0x28>)
 80098be:	2200      	movs	r2, #0
 80098c0:	701a      	strb	r2, [r3, #0]
		make_a_beep();
 80098c2:	f7ff ffdf 	bl	8009884 <make_a_beep>
}
 80098c6:	bf00      	nop
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	20000126 	.word	0x20000126

080098d0 <get_mute_flag>:



uint8_t get_mute_flag(void)
{
 80098d0:	b480      	push	{r7}
 80098d2:	af00      	add	r7, sp, #0
	return beep_mute;
 80098d4:	4b02      	ldr	r3, [pc, #8]	; (80098e0 <get_mute_flag+0x10>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	46bd      	mov	sp, r7
 80098dc:	bc80      	pop	{r7}
 80098de:	4770      	bx	lr
 80098e0:	20000126 	.word	0x20000126

080098e4 <rtc_init>:



void rtc_init(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;				//Enable power interface
 80098e8:	4b3b      	ldr	r3, [pc, #236]	; (80099d8 <rtc_init+0xf4>)
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	4a3a      	ldr	r2, [pc, #232]	; (80099d8 <rtc_init+0xf4>)
 80098ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098f2:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_BKPEN;				//Enable backup interface
 80098f4:	4b38      	ldr	r3, [pc, #224]	; (80099d8 <rtc_init+0xf4>)
 80098f6:	69db      	ldr	r3, [r3, #28]
 80098f8:	4a37      	ldr	r2, [pc, #220]	; (80099d8 <rtc_init+0xf4>)
 80098fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098fe:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;							//Disable backup domain write protection
 8009900:	4b36      	ldr	r3, [pc, #216]	; (80099dc <rtc_init+0xf8>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a35      	ldr	r2, [pc, #212]	; (80099dc <rtc_init+0xf8>)
 8009906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800990a:	6013      	str	r3, [r2, #0]
    RCC->BDCR |=  RCC_BDCR_BDRST;					//Reset entire backup domain (reset RTC)
 800990c:	4b32      	ldr	r3, [pc, #200]	; (80099d8 <rtc_init+0xf4>)
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	4a31      	ldr	r2, [pc, #196]	; (80099d8 <rtc_init+0xf4>)
 8009912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009916:	6213      	str	r3, [r2, #32]
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 8009918:	4b2f      	ldr	r3, [pc, #188]	; (80099d8 <rtc_init+0xf4>)
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	4a2e      	ldr	r2, [pc, #184]	; (80099d8 <rtc_init+0xf4>)
 800991e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009922:	6213      	str	r3, [r2, #32]

	RCC->CSR |= RCC_CSR_LSION;  					//Enable LSI 40 kHz
 8009924:	4b2c      	ldr	r3, [pc, #176]	; (80099d8 <rtc_init+0xf4>)
 8009926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009928:	4a2b      	ldr	r2, [pc, #172]	; (80099d8 <rtc_init+0xf4>)
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	6253      	str	r3, [r2, #36]	; 0x24
	while ((RCC->CSR & RCC_CSR_LSIRDY) == 0){}		//Wait for stabilize
 8009930:	bf00      	nop
 8009932:	4b29      	ldr	r3, [pc, #164]	; (80099d8 <rtc_init+0xf4>)
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0f9      	beq.n	8009932 <rtc_init+0x4e>
	RCC->BDCR |= RCC_BDCR_RTCSEL_1;					//LSI is RTC clock source
 800993e:	4b26      	ldr	r3, [pc, #152]	; (80099d8 <rtc_init+0xf4>)
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	4a25      	ldr	r2, [pc, #148]	; (80099d8 <rtc_init+0xf4>)
 8009944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009948:	6213      	str	r3, [r2, #32]
	RCC->BDCR &= ~RCC_BDCR_RTCSEL_0;
 800994a:	4b23      	ldr	r3, [pc, #140]	; (80099d8 <rtc_init+0xf4>)
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	4a22      	ldr	r2, [pc, #136]	; (80099d8 <rtc_init+0xf4>)
 8009950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009954:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_RTCEN;					//Enable RTC
 8009956:	4b20      	ldr	r3, [pc, #128]	; (80099d8 <rtc_init+0xf4>)
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	4a1f      	ldr	r2, [pc, #124]	; (80099d8 <rtc_init+0xf4>)
 800995c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009960:	6213      	str	r3, [r2, #32]

	while ((RTC->CRL & RTC_CRL_RTOFF) == 0){}		//Wait RTC ready to acquire new command
 8009962:	bf00      	nop
 8009964:	4b1e      	ldr	r3, [pc, #120]	; (80099e0 <rtc_init+0xfc>)
 8009966:	889b      	ldrh	r3, [r3, #4]
 8009968:	b29b      	uxth	r3, r3
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0f8      	beq.n	8009964 <rtc_init+0x80>
	RTC->CRL |= RTC_CRL_CNF;						//Enter config mode
 8009972:	4b1b      	ldr	r3, [pc, #108]	; (80099e0 <rtc_init+0xfc>)
 8009974:	889b      	ldrh	r3, [r3, #4]
 8009976:	b29b      	uxth	r3, r3
 8009978:	4a19      	ldr	r2, [pc, #100]	; (80099e0 <rtc_init+0xfc>)
 800997a:	f043 0310 	orr.w	r3, r3, #16
 800997e:	b29b      	uxth	r3, r3
 8009980:	8093      	strh	r3, [r2, #4]
	RTC->PRLH = 0;
 8009982:	4b17      	ldr	r3, [pc, #92]	; (80099e0 <rtc_init+0xfc>)
 8009984:	2200      	movs	r2, #0
 8009986:	811a      	strh	r2, [r3, #8]
	RTC->PRLL = 39999;								//(40000Hz-1)
 8009988:	4b15      	ldr	r3, [pc, #84]	; (80099e0 <rtc_init+0xfc>)
 800998a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800998e:	819a      	strh	r2, [r3, #12]
	RTC->CRH |= RTC_CRH_SECIE;						//Enable Interrupt
 8009990:	4b13      	ldr	r3, [pc, #76]	; (80099e0 <rtc_init+0xfc>)
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	4a12      	ldr	r2, [pc, #72]	; (80099e0 <rtc_init+0xfc>)
 8009998:	f043 0301 	orr.w	r3, r3, #1
 800999c:	b29b      	uxth	r3, r3
 800999e:	8013      	strh	r3, [r2, #0]
	RTC->CRL &= ~RTC_CRL_CNF;						//Exit config mode
 80099a0:	4b0f      	ldr	r3, [pc, #60]	; (80099e0 <rtc_init+0xfc>)
 80099a2:	889b      	ldrh	r3, [r3, #4]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	4a0e      	ldr	r2, [pc, #56]	; (80099e0 <rtc_init+0xfc>)
 80099a8:	f023 0310 	bic.w	r3, r3, #16
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	8093      	strh	r3, [r2, #4]
	while ((RTC->CRL & RTC_CRL_RTOFF) == 0){}
 80099b0:	bf00      	nop
 80099b2:	4b0b      	ldr	r3, [pc, #44]	; (80099e0 <rtc_init+0xfc>)
 80099b4:	889b      	ldrh	r3, [r3, #4]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f003 0320 	and.w	r3, r3, #32
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d0f8      	beq.n	80099b2 <rtc_init+0xce>

	PWR->CR &= ~PWR_CR_DBP;							//Enable backup domain write protection
 80099c0:	4b06      	ldr	r3, [pc, #24]	; (80099dc <rtc_init+0xf8>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a05      	ldr	r2, [pc, #20]	; (80099dc <rtc_init+0xf8>)
 80099c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099ca:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(RTC_IRQn);
 80099cc:	2003      	movs	r0, #3
 80099ce:	f7ff ff33 	bl	8009838 <NVIC_EnableIRQ>
}
 80099d2:	bf00      	nop
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	40021000 	.word	0x40021000
 80099dc:	40007000 	.word	0x40007000
 80099e0:	40002800 	.word	0x40002800

080099e4 <systick_init>:



//SysTick timer init (tick every 1s to count uptime)
void systick_init(void)
{
 80099e4:	b480      	push	{r7}
 80099e6:	af00      	add	r7, sp, #0
    SysTick->CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;   //clock source = AHB/8 = 3MHz/8 = 375 kHz
 80099e8:	4b0b      	ldr	r3, [pc, #44]	; (8009a18 <systick_init+0x34>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a0a      	ldr	r2, [pc, #40]	; (8009a18 <systick_init+0x34>)
 80099ee:	f023 0304 	bic.w	r3, r3, #4
 80099f2:	6013      	str	r3, [r2, #0]
    SysTick->LOAD = (uint32_t)37499;              	//375000Hz/(37499+1)=10Hz
 80099f4:	4b08      	ldr	r3, [pc, #32]	; (8009a18 <systick_init+0x34>)
 80099f6:	f249 227b 	movw	r2, #37499	; 0x927b
 80099fa:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;                               //reset counter value
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <systick_init+0x34>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	609a      	str	r2, [r3, #8]
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;      //enable interrupt
 8009a02:	4b05      	ldr	r3, [pc, #20]	; (8009a18 <systick_init+0x34>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a04      	ldr	r2, [pc, #16]	; (8009a18 <systick_init+0x34>)
 8009a08:	f043 0302 	orr.w	r3, r3, #2
 8009a0c:	6013      	str	r3, [r2, #0]
}
 8009a0e:	bf00      	nop
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bc80      	pop	{r7}
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	e000e010 	.word	0xe000e010

08009a1c <systick_stop>:



//Stop buzzer gating timer
void systick_stop(void)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8009a20:	4b04      	ldr	r3, [pc, #16]	; (8009a34 <systick_stop+0x18>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a03      	ldr	r2, [pc, #12]	; (8009a34 <systick_stop+0x18>)
 8009a26:	f023 0301 	bic.w	r3, r3, #1
 8009a2a:	6013      	str	r3, [r2, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bc80      	pop	{r7}
 8009a32:	4770      	bx	lr
 8009a34:	e000e010 	.word	0xe000e010

08009a38 <systick_start>:



//Start buzzer gating timer
void systick_start(void)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	af00      	add	r7, sp, #0
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8009a3c:	4b04      	ldr	r3, [pc, #16]	; (8009a50 <systick_start+0x18>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a03      	ldr	r2, [pc, #12]	; (8009a50 <systick_start+0x18>)
 8009a42:	f043 0301 	orr.w	r3, r3, #1
 8009a46:	6013      	str	r3, [r2, #0]
}
 8009a48:	bf00      	nop
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bc80      	pop	{r7}
 8009a4e:	4770      	bx	lr
 8009a50:	e000e010 	.word	0xe000e010

08009a54 <timer1_init>:



//Timer1 init (time slot counter)
void timer1_init(void)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;     //enable timer 1 clock
 8009a58:	4b17      	ldr	r3, [pc, #92]	; (8009ab8 <timer1_init+0x64>)
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	4a16      	ldr	r2, [pc, #88]	; (8009ab8 <timer1_init+0x64>)
 8009a5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009a62:	6193      	str	r3, [r2, #24]
    TIM1->PSC = (uint16_t)2999;            	// 3MHz/(2999+1)=1kHz
 8009a64:	4b15      	ldr	r3, [pc, #84]	; (8009abc <timer1_init+0x68>)
 8009a66:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8009a6a:	851a      	strh	r2, [r3, #40]	; 0x28
    TIM1->ARR = (uint16_t)99;              	// 1kHz/(99+1)=10Hz(100ms)
 8009a6c:	4b13      	ldr	r3, [pc, #76]	; (8009abc <timer1_init+0x68>)
 8009a6e:	2263      	movs	r2, #99	; 0x63
 8009a70:	859a      	strh	r2, [r3, #44]	; 0x2c
    TIM1->CR1 |= TIM_CR1_URS;               //only overflow generates interrupt
 8009a72:	4b12      	ldr	r3, [pc, #72]	; (8009abc <timer1_init+0x68>)
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	4a10      	ldr	r2, [pc, #64]	; (8009abc <timer1_init+0x68>)
 8009a7a:	f043 0304 	orr.w	r3, r3, #4
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	8013      	strh	r3, [r2, #0]
    TIM1->EGR = TIM_EGR_UG;                 //software update generation
 8009a82:	4b0e      	ldr	r3, [pc, #56]	; (8009abc <timer1_init+0x68>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	829a      	strh	r2, [r3, #20]
    TIM1->SR &= ~TIM_SR_UIF;                //clear update interrupt
 8009a88:	4b0c      	ldr	r3, [pc, #48]	; (8009abc <timer1_init+0x68>)
 8009a8a:	8a1b      	ldrh	r3, [r3, #16]
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	4a0b      	ldr	r2, [pc, #44]	; (8009abc <timer1_init+0x68>)
 8009a90:	f023 0301 	bic.w	r3, r3, #1
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	8213      	strh	r3, [r2, #16]
    TIM1->DIER |= TIM_DIER_UIE;             //update interrupt enable
 8009a98:	4b08      	ldr	r3, [pc, #32]	; (8009abc <timer1_init+0x68>)
 8009a9a:	899b      	ldrh	r3, [r3, #12]
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	4a07      	ldr	r2, [pc, #28]	; (8009abc <timer1_init+0x68>)
 8009aa0:	f043 0301 	orr.w	r3, r3, #1
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	8193      	strh	r3, [r2, #12]
    
    NVIC_EnableIRQ(TIM1_UP_IRQn);           //enable interrupt
 8009aa8:	2019      	movs	r0, #25
 8009aaa:	f7ff fec5 	bl	8009838 <NVIC_EnableIRQ>
    timer1_clock_disable();
 8009aae:	f000 f807 	bl	8009ac0 <timer1_clock_disable>
}
 8009ab2:	bf00      	nop
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	40021000 	.word	0x40021000
 8009abc:	40012c00 	.word	0x40012c00

08009ac0 <timer1_clock_disable>:



void timer1_clock_disable(void)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB2ENR, RCC_APB2ENR_TIM1EN) = 0;
 8009ac4:	4b03      	ldr	r3, [pc, #12]	; (8009ad4 <timer1_clock_disable+0x14>)
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	601a      	str	r2, [r3, #0]
}
 8009aca:	bf00      	nop
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bc80      	pop	{r7}
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	4242032c 	.word	0x4242032c

08009ad8 <timer1_clock_enable>:



void timer1_clock_enable(void)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB2ENR, RCC_APB2ENR_TIM1EN) = 1;
 8009adc:	4b03      	ldr	r3, [pc, #12]	; (8009aec <timer1_clock_enable+0x14>)
 8009ade:	2201      	movs	r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]
}
 8009ae2:	bf00      	nop
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bc80      	pop	{r7}
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	4242032c 	.word	0x4242032c

08009af0 <timer1_start>:



//Timer1 start
void timer1_start(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	af00      	add	r7, sp, #0
	timer1_clock_enable();
 8009af4:	f7ff fff0 	bl	8009ad8 <timer1_clock_enable>
    TIM1->CR1 |= TIM_CR1_CEN;               //enable counter
 8009af8:	4b04      	ldr	r3, [pc, #16]	; (8009b0c <timer1_start+0x1c>)
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	4a03      	ldr	r2, [pc, #12]	; (8009b0c <timer1_start+0x1c>)
 8009b00:	f043 0301 	orr.w	r3, r3, #1
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	8013      	strh	r3, [r2, #0]
}
 8009b08:	bf00      	nop
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	40012c00 	.word	0x40012c00

08009b10 <timer1_stop_reload>:



//Timer1 stop and reload
void timer1_stop_reload(void)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	af00      	add	r7, sp, #0
    TIM1->CR1 &= ~TIM_CR1_CEN;              //disable counter
 8009b14:	4b07      	ldr	r3, [pc, #28]	; (8009b34 <timer1_stop_reload+0x24>)
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	4a06      	ldr	r2, [pc, #24]	; (8009b34 <timer1_stop_reload+0x24>)
 8009b1c:	f023 0301 	bic.w	r3, r3, #1
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	8013      	strh	r3, [r2, #0]
    TIM1->EGR = TIM_EGR_UG;                 //software update generation
 8009b24:	4b03      	ldr	r3, [pc, #12]	; (8009b34 <timer1_stop_reload+0x24>)
 8009b26:	2201      	movs	r2, #1
 8009b28:	829a      	strh	r2, [r3, #20]
    timer1_clock_disable();
 8009b2a:	f7ff ffc9 	bl	8009ac0 <timer1_clock_disable>
}
 8009b2e:	bf00      	nop
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	40012c00 	.word	0x40012c00

08009b38 <timer2_init>:



//Timer 2 init (buttons scan interval)
void timer2_init(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; //enable timer clock
 8009b3c:	4b15      	ldr	r3, [pc, #84]	; (8009b94 <timer2_init+0x5c>)
 8009b3e:	69db      	ldr	r3, [r3, #28]
 8009b40:	4a14      	ldr	r2, [pc, #80]	; (8009b94 <timer2_init+0x5c>)
 8009b42:	f043 0301 	orr.w	r3, r3, #1
 8009b46:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = (uint16_t)299;         	// 3MHz/(299+1)=10kHz
 8009b48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b4c:	f240 122b 	movw	r2, #299	; 0x12b
 8009b50:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = (uint16_t)99;           // 10kHz/(99+1)=100Hz(10ms)
 8009b52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b56:	2263      	movs	r2, #99	; 0x63
 8009b58:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM2->EGR = TIM_EGR_UG;             //software update generation
 8009b5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b5e:	2201      	movs	r2, #1
 8009b60:	829a      	strh	r2, [r3, #20]
	TIM2->DIER |= TIM_DIER_UIE;         //update interrupt enable
 8009b62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b66:	899b      	ldrh	r3, [r3, #12]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009b6e:	f043 0301 	orr.w	r3, r3, #1
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	8193      	strh	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_CEN;   		//start timer
 8009b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009b82:	f043 0301 	orr.w	r3, r3, #1
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	8013      	strh	r3, [r2, #0]

	NVIC_EnableIRQ(TIM2_IRQn);
 8009b8a:	201c      	movs	r0, #28
 8009b8c:	f7ff fe54 	bl	8009838 <NVIC_EnableIRQ>
}
 8009b90:	bf00      	nop
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	40021000 	.word	0x40021000

08009b98 <timer3_init>:



//Timer 3 init (pwm timer, the frequency of the "beep")
void timer3_init(void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; //enable timer clock
 8009b9c:	4b1a      	ldr	r3, [pc, #104]	; (8009c08 <timer3_init+0x70>)
 8009b9e:	69db      	ldr	r3, [r3, #28]
 8009ba0:	4a19      	ldr	r2, [pc, #100]	; (8009c08 <timer3_init+0x70>)
 8009ba2:	f043 0302 	orr.w	r3, r3, #2
 8009ba6:	61d3      	str	r3, [r2, #28]
	TIM3->PSC = (uint16_t)374;         	//3MHz/(374+1)=8kHz
 8009ba8:	4b18      	ldr	r3, [pc, #96]	; (8009c0c <timer3_init+0x74>)
 8009baa:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8009bae:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->ARR = (uint16_t)3;            //8kHz/(3+1)=2kHz
 8009bb0:	4b16      	ldr	r3, [pc, #88]	; (8009c0c <timer3_init+0x74>)
 8009bb2:	2203      	movs	r2, #3
 8009bb4:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM3->CCR2 = (uint16_t)2;           //duty cycle 2/(3+1)=0.5
 8009bb6:	4b15      	ldr	r3, [pc, #84]	; (8009c0c <timer3_init+0x74>)
 8009bb8:	2202      	movs	r2, #2
 8009bba:	871a      	strh	r2, [r3, #56]	; 0x38
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_2;    //PWM mode 2
 8009bbc:	4b13      	ldr	r3, [pc, #76]	; (8009c0c <timer3_init+0x74>)
 8009bbe:	8b1b      	ldrh	r3, [r3, #24]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	4a12      	ldr	r2, [pc, #72]	; (8009c0c <timer3_init+0x74>)
 8009bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	8313      	strh	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_1;
 8009bcc:	4b0f      	ldr	r3, [pc, #60]	; (8009c0c <timer3_init+0x74>)
 8009bce:	8b1b      	ldrh	r3, [r3, #24]
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	4a0e      	ldr	r2, [pc, #56]	; (8009c0c <timer3_init+0x74>)
 8009bd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	8313      	strh	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_0;
 8009bdc:	4b0b      	ldr	r3, [pc, #44]	; (8009c0c <timer3_init+0x74>)
 8009bde:	8b1b      	ldrh	r3, [r3, #24]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	4a0a      	ldr	r2, [pc, #40]	; (8009c0c <timer3_init+0x74>)
 8009be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	8313      	strh	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC2E;        //CH2 output enable
 8009bec:	4b07      	ldr	r3, [pc, #28]	; (8009c0c <timer3_init+0x74>)
 8009bee:	8c1b      	ldrh	r3, [r3, #32]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	4a06      	ldr	r2, [pc, #24]	; (8009c0c <timer3_init+0x74>)
 8009bf4:	f043 0310 	orr.w	r3, r3, #16
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	8413      	strh	r3, [r2, #32]

	timer3_stop();
 8009bfc:	f000 f820 	bl	8009c40 <timer3_stop>
	timer3_clock_disable();
 8009c00:	f000 f806 	bl	8009c10 <timer3_clock_disable>
}
 8009c04:	bf00      	nop
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	40021000 	.word	0x40021000
 8009c0c:	40000400 	.word	0x40000400

08009c10 <timer3_clock_disable>:



void timer3_clock_disable(void)
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB1ENR, RCC_APB1ENR_TIM3EN) = 0;
 8009c14:	4b03      	ldr	r3, [pc, #12]	; (8009c24 <timer3_clock_disable+0x14>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
}
 8009c1a:	bf00      	nop
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bc80      	pop	{r7}
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	42420384 	.word	0x42420384

08009c28 <timer3_clock_enable>:



void timer3_clock_enable(void)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	af00      	add	r7, sp, #0
	BIT_BAND_PERI(RCC->APB1ENR, RCC_APB1ENR_TIM3EN) = 1;
 8009c2c:	4b03      	ldr	r3, [pc, #12]	; (8009c3c <timer3_clock_enable+0x14>)
 8009c2e:	2201      	movs	r2, #1
 8009c30:	601a      	str	r2, [r3, #0]
}
 8009c32:	bf00      	nop
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	42420384 	.word	0x42420384

08009c40 <timer3_stop>:



void timer3_stop(void)
{
 8009c40:	b480      	push	{r7}
 8009c42:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~TIM_CR1_CEN;      //disable PWM timer
 8009c44:	4b07      	ldr	r3, [pc, #28]	; (8009c64 <timer3_stop+0x24>)
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	4a06      	ldr	r2, [pc, #24]	; (8009c64 <timer3_stop+0x24>)
 8009c4c:	f023 0301 	bic.w	r3, r3, #1
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	8013      	strh	r3, [r2, #0]
	TIM3->CNT = 0;                  //force output low
 8009c54:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <timer3_stop+0x24>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8009c5a:	bf00      	nop
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bc80      	pop	{r7}
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	40000400 	.word	0x40000400

08009c68 <timer3_start>:



void timer3_start(void)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
	TIM3->CR1 |= TIM_CR1_CEN;   	//enable PWM timer
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <timer3_start+0x1c>)
 8009c6e:	881b      	ldrh	r3, [r3, #0]
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	4a04      	ldr	r2, [pc, #16]	; (8009c84 <timer3_start+0x1c>)
 8009c74:	f043 0301 	orr.w	r3, r3, #1
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	8013      	strh	r3, [r2, #0]
}
 8009c7c:	bf00      	nop
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bc80      	pop	{r7}
 8009c82:	4770      	bx	lr
 8009c84:	40000400 	.word	0x40000400

08009c88 <NVIC_EnableIRQ>:
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	f003 031f 	and.w	r3, r3, #31
 8009c98:	2201      	movs	r2, #1
 8009c9a:	fa02 f103 	lsl.w	r1, r2, r3
 8009c9e:	4a05      	ldr	r2, [pc, #20]	; (8009cb4 <NVIC_EnableIRQ+0x2c>)
 8009ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ca4:	095b      	lsrs	r3, r3, #5
 8009ca6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8009caa:	bf00      	nop
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bc80      	pop	{r7}
 8009cb2:	4770      	bx	lr
 8009cb4:	e000e100 	.word	0xe000e100

08009cb8 <uart_dma_init>:
char *backup_buf;


//UART Init
void uart_dma_init(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;   //ENABLE usart clock
 8009cbc:	4b2c      	ldr	r3, [pc, #176]	; (8009d70 <uart_dma_init+0xb8>)
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	4a2b      	ldr	r2, [pc, #172]	; (8009d70 <uart_dma_init+0xb8>)
 8009cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cc6:	6193      	str	r3, [r2, #24]
    
    USART1->BRR = 0x0138;                   //9600 bod; mantissa 19, frac 8
 8009cc8:	4b2a      	ldr	r3, [pc, #168]	; (8009d74 <uart_dma_init+0xbc>)
 8009cca:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009cce:	811a      	strh	r2, [r3, #8]
    USART1->CR1 |= USART_CR1_TE;            //enable tx
 8009cd0:	4b28      	ldr	r3, [pc, #160]	; (8009d74 <uart_dma_init+0xbc>)
 8009cd2:	899b      	ldrh	r3, [r3, #12]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	4a27      	ldr	r2, [pc, #156]	; (8009d74 <uart_dma_init+0xbc>)
 8009cd8:	f043 0308 	orr.w	r3, r3, #8
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	8193      	strh	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_RE;            //enable rx
 8009ce0:	4b24      	ldr	r3, [pc, #144]	; (8009d74 <uart_dma_init+0xbc>)
 8009ce2:	899b      	ldrh	r3, [r3, #12]
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	4a23      	ldr	r2, [pc, #140]	; (8009d74 <uart_dma_init+0xbc>)
 8009ce8:	f043 0304 	orr.w	r3, r3, #4
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	8193      	strh	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;            //uart enable
 8009cf0:	4b20      	ldr	r3, [pc, #128]	; (8009d74 <uart_dma_init+0xbc>)
 8009cf2:	899b      	ldrh	r3, [r3, #12]
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	4a1f      	ldr	r2, [pc, #124]	; (8009d74 <uart_dma_init+0xbc>)
 8009cf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	8193      	strh	r3, [r2, #12]
    
    USART1->CR3 |= USART_CR3_DMAR;          //enable DMA mode USART
 8009d00:	4b1c      	ldr	r3, [pc, #112]	; (8009d74 <uart_dma_init+0xbc>)
 8009d02:	8a9b      	ldrh	r3, [r3, #20]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	4a1b      	ldr	r2, [pc, #108]	; (8009d74 <uart_dma_init+0xbc>)
 8009d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	8293      	strh	r3, [r2, #20]
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;       //enable dma1 clock
 8009d10:	4b17      	ldr	r3, [pc, #92]	; (8009d70 <uart_dma_init+0xb8>)
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	4a16      	ldr	r2, [pc, #88]	; (8009d70 <uart_dma_init+0xb8>)
 8009d16:	f043 0301 	orr.w	r3, r3, #1
 8009d1a:	6153      	str	r3, [r2, #20]
    
    DMA1_Channel5->CPAR = (uint32_t)(&(USART1->DR));    //transfer source 
 8009d1c:	4b16      	ldr	r3, [pc, #88]	; (8009d78 <uart_dma_init+0xc0>)
 8009d1e:	4a17      	ldr	r2, [pc, #92]	; (8009d7c <uart_dma_init+0xc4>)
 8009d20:	609a      	str	r2, [r3, #8]
    DMA1_Channel5->CMAR = (uint32_t)(&uart_buffer[0]);  //transfer destination
 8009d22:	4b15      	ldr	r3, [pc, #84]	; (8009d78 <uart_dma_init+0xc0>)
 8009d24:	4a16      	ldr	r2, [pc, #88]	; (8009d80 <uart_dma_init+0xc8>)
 8009d26:	60da      	str	r2, [r3, #12]
    DMA1_Channel5->CNDTR = UART_BUF_LEN;                //bytes amount to receive
 8009d28:	4b13      	ldr	r3, [pc, #76]	; (8009d78 <uart_dma_init+0xc0>)
 8009d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d2e:	605a      	str	r2, [r3, #4]
    
    DMA1_Channel5->CCR |= DMA_CCR5_MINC;    //enable memory increment
 8009d30:	4b11      	ldr	r3, [pc, #68]	; (8009d78 <uart_dma_init+0xc0>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a10      	ldr	r2, [pc, #64]	; (8009d78 <uart_dma_init+0xc0>)
 8009d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d3a:	6013      	str	r3, [r2, #0]
    DMA1_Channel5->CCR |= DMA_CCR5_TCIE;    //enable transfer complete interrupt
 8009d3c:	4b0e      	ldr	r3, [pc, #56]	; (8009d78 <uart_dma_init+0xc0>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a0d      	ldr	r2, [pc, #52]	; (8009d78 <uart_dma_init+0xc0>)
 8009d42:	f043 0302 	orr.w	r3, r3, #2
 8009d46:	6013      	str	r3, [r2, #0]
    DMA1_Channel5->CCR |= DMA_CCR5_EN;      //enable channel
 8009d48:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <uart_dma_init+0xc0>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a0a      	ldr	r2, [pc, #40]	; (8009d78 <uart_dma_init+0xc0>)
 8009d4e:	f043 0301 	orr.w	r3, r3, #1
 8009d52:	6013      	str	r3, [r2, #0]
    
    NVIC_EnableIRQ(DMA1_Channel5_IRQn);     //enable interrupts
 8009d54:	200f      	movs	r0, #15
 8009d56:	f7ff ff97 	bl	8009c88 <NVIC_EnableIRQ>
    DMA1->IFCR = DMA_IFCR_CGIF5;            //clear all interrupt flags for DMA channel 5
 8009d5a:	4b0a      	ldr	r3, [pc, #40]	; (8009d84 <uart_dma_init+0xcc>)
 8009d5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009d60:	605a      	str	r2, [r3, #4]

    backup_buf = get_nmea_buf();
 8009d62:	f7f8 fccd 	bl	8002700 <get_nmea_buf>
 8009d66:	4602      	mov	r2, r0
 8009d68:	4b07      	ldr	r3, [pc, #28]	; (8009d88 <uart_dma_init+0xd0>)
 8009d6a:	601a      	str	r2, [r3, #0]
}
 8009d6c:	bf00      	nop
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	40021000 	.word	0x40021000
 8009d74:	40013800 	.word	0x40013800
 8009d78:	40020058 	.word	0x40020058
 8009d7c:	40013804 	.word	0x40013804
 8009d80:	20000d38 	.word	0x20000d38
 8009d84:	40020000 	.word	0x40020000
 8009d88:	20000d34 	.word	0x20000d34

08009d8c <uart_dma_stop>:



//Stop UART DMA
void uart_dma_stop(void)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	af00      	add	r7, sp, #0
    DMA1_Channel5->CCR &= ~DMA_CCR5_EN;     //disable channel
 8009d90:	4b04      	ldr	r3, [pc, #16]	; (8009da4 <uart_dma_stop+0x18>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a03      	ldr	r2, [pc, #12]	; (8009da4 <uart_dma_stop+0x18>)
 8009d96:	f023 0301 	bic.w	r3, r3, #1
 8009d9a:	6013      	str	r3, [r2, #0]
}
 8009d9c:	bf00      	nop
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bc80      	pop	{r7}
 8009da2:	4770      	bx	lr
 8009da4:	40020058 	.word	0x40020058

08009da8 <uart_dma_restart>:



//Restart UART DMA
void uart_dma_restart(void)
{
 8009da8:	b480      	push	{r7}
 8009daa:	af00      	add	r7, sp, #0
    DMA1_Channel5->CNDTR = UART_BUF_LEN;    //reload bytes amount to receive
 8009dac:	4b08      	ldr	r3, [pc, #32]	; (8009dd0 <uart_dma_restart+0x28>)
 8009dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009db2:	605a      	str	r2, [r3, #4]
    (void)USART1->SR;						//clear ORE bit due to UART overrun occured between DMA operations
 8009db4:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <uart_dma_restart+0x2c>)
 8009db6:	881b      	ldrh	r3, [r3, #0]
    (void)USART1->DR;
 8009db8:	4b06      	ldr	r3, [pc, #24]	; (8009dd4 <uart_dma_restart+0x2c>)
 8009dba:	889b      	ldrh	r3, [r3, #4]
    DMA1_Channel5->CCR |= DMA_CCR5_EN;      //enable channel
 8009dbc:	4b04      	ldr	r3, [pc, #16]	; (8009dd0 <uart_dma_restart+0x28>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a03      	ldr	r2, [pc, #12]	; (8009dd0 <uart_dma_restart+0x28>)
 8009dc2:	f043 0301 	orr.w	r3, r3, #1
 8009dc6:	6013      	str	r3, [r2, #0]
}
 8009dc8:	bf00      	nop
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bc80      	pop	{r7}
 8009dce:	4770      	bx	lr
 8009dd0:	40020058 	.word	0x40020058
 8009dd4:	40013800 	.word	0x40013800

08009dd8 <backup_and_clear_uart_buffer>:



//Backup uart buffer and then clear it
void backup_and_clear_uart_buffer(void)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < UART_BUF_LEN; i++)     //copy received data to buffer and clear uart_buffer
 8009dde:	2300      	movs	r3, #0
 8009de0:	80fb      	strh	r3, [r7, #6]
 8009de2:	e00e      	b.n	8009e02 <backup_and_clear_uart_buffer+0x2a>
	{
		backup_buf[i] = uart_buffer[i];
 8009de4:	88fa      	ldrh	r2, [r7, #6]
 8009de6:	4b0b      	ldr	r3, [pc, #44]	; (8009e14 <backup_and_clear_uart_buffer+0x3c>)
 8009de8:	6819      	ldr	r1, [r3, #0]
 8009dea:	88fb      	ldrh	r3, [r7, #6]
 8009dec:	440b      	add	r3, r1
 8009dee:	490a      	ldr	r1, [pc, #40]	; (8009e18 <backup_and_clear_uart_buffer+0x40>)
 8009df0:	5c8a      	ldrb	r2, [r1, r2]
 8009df2:	701a      	strb	r2, [r3, #0]
		uart_buffer[i] = 0;
 8009df4:	88fb      	ldrh	r3, [r7, #6]
 8009df6:	4a08      	ldr	r2, [pc, #32]	; (8009e18 <backup_and_clear_uart_buffer+0x40>)
 8009df8:	2100      	movs	r1, #0
 8009dfa:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < UART_BUF_LEN; i++)     //copy received data to buffer and clear uart_buffer
 8009dfc:	88fb      	ldrh	r3, [r7, #6]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	80fb      	strh	r3, [r7, #6]
 8009e02:	88fb      	ldrh	r3, [r7, #6]
 8009e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e08:	d3ec      	bcc.n	8009de4 <backup_and_clear_uart_buffer+0xc>
	}
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc80      	pop	{r7}
 8009e12:	4770      	bx	lr
 8009e14:	20000d34 	.word	0x20000d34
 8009e18:	20000d38 	.word	0x20000d38

08009e1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009e1c:	480d      	ldr	r0, [pc, #52]	; (8009e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009e1e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8009e20:	f7f7 f9c4 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009e24:	480c      	ldr	r0, [pc, #48]	; (8009e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8009e26:	490d      	ldr	r1, [pc, #52]	; (8009e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8009e28:	4a0d      	ldr	r2, [pc, #52]	; (8009e60 <LoopForever+0xe>)
  movs r3, #0
 8009e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009e2c:	e002      	b.n	8009e34 <LoopCopyDataInit>

08009e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009e32:	3304      	adds	r3, #4

08009e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009e38:	d3f9      	bcc.n	8009e2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009e3a:	4a0a      	ldr	r2, [pc, #40]	; (8009e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009e3c:	4c0a      	ldr	r4, [pc, #40]	; (8009e68 <LoopForever+0x16>)
  movs r3, #0
 8009e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009e40:	e001      	b.n	8009e46 <LoopFillZerobss>

08009e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009e44:	3204      	adds	r2, #4

08009e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009e48:	d3fb      	bcc.n	8009e42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009e4a:	f000 f811 	bl	8009e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009e4e:	f7f9 fed5 	bl	8003bfc <main>

08009e52 <LoopForever>:

LoopForever:
    b LoopForever
 8009e52:	e7fe      	b.n	8009e52 <LoopForever>
  ldr   r0, =_estack
 8009e54:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8009e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009e5c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8009e60:	0800ed28 	.word	0x0800ed28
  ldr r2, =_sbss
 8009e64:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8009e68:	20001138 	.word	0x20001138

08009e6c <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009e6c:	e7fe      	b.n	8009e6c <ADC3_IRQHandler>
	...

08009e70 <__libc_init_array>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	2500      	movs	r5, #0
 8009e74:	4e0c      	ldr	r6, [pc, #48]	; (8009ea8 <__libc_init_array+0x38>)
 8009e76:	4c0d      	ldr	r4, [pc, #52]	; (8009eac <__libc_init_array+0x3c>)
 8009e78:	1ba4      	subs	r4, r4, r6
 8009e7a:	10a4      	asrs	r4, r4, #2
 8009e7c:	42a5      	cmp	r5, r4
 8009e7e:	d109      	bne.n	8009e94 <__libc_init_array+0x24>
 8009e80:	f003 f84c 	bl	800cf1c <_init>
 8009e84:	2500      	movs	r5, #0
 8009e86:	4e0a      	ldr	r6, [pc, #40]	; (8009eb0 <__libc_init_array+0x40>)
 8009e88:	4c0a      	ldr	r4, [pc, #40]	; (8009eb4 <__libc_init_array+0x44>)
 8009e8a:	1ba4      	subs	r4, r4, r6
 8009e8c:	10a4      	asrs	r4, r4, #2
 8009e8e:	42a5      	cmp	r5, r4
 8009e90:	d105      	bne.n	8009e9e <__libc_init_array+0x2e>
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e98:	4798      	blx	r3
 8009e9a:	3501      	adds	r5, #1
 8009e9c:	e7ee      	b.n	8009e7c <__libc_init_array+0xc>
 8009e9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ea2:	4798      	blx	r3
 8009ea4:	3501      	adds	r5, #1
 8009ea6:	e7f2      	b.n	8009e8e <__libc_init_array+0x1e>
 8009ea8:	0800ed20 	.word	0x0800ed20
 8009eac:	0800ed20 	.word	0x0800ed20
 8009eb0:	0800ed20 	.word	0x0800ed20
 8009eb4:	0800ed24 	.word	0x0800ed24

08009eb8 <memcpy>:
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	1e43      	subs	r3, r0, #1
 8009ebc:	440a      	add	r2, r1
 8009ebe:	4291      	cmp	r1, r2
 8009ec0:	d100      	bne.n	8009ec4 <memcpy+0xc>
 8009ec2:	bd10      	pop	{r4, pc}
 8009ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ecc:	e7f7      	b.n	8009ebe <memcpy+0x6>

08009ece <memset>:
 8009ece:	4603      	mov	r3, r0
 8009ed0:	4402      	add	r2, r0
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d100      	bne.n	8009ed8 <memset+0xa>
 8009ed6:	4770      	bx	lr
 8009ed8:	f803 1b01 	strb.w	r1, [r3], #1
 8009edc:	e7f9      	b.n	8009ed2 <memset+0x4>
	...

08009ee0 <atan>:
 8009ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	4bb6      	ldr	r3, [pc, #728]	; (800a1c0 <atan+0x2e0>)
 8009ee6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009eea:	429e      	cmp	r6, r3
 8009eec:	4604      	mov	r4, r0
 8009eee:	460d      	mov	r5, r1
 8009ef0:	468b      	mov	fp, r1
 8009ef2:	dd17      	ble.n	8009f24 <atan+0x44>
 8009ef4:	4bb3      	ldr	r3, [pc, #716]	; (800a1c4 <atan+0x2e4>)
 8009ef6:	429e      	cmp	r6, r3
 8009ef8:	dc01      	bgt.n	8009efe <atan+0x1e>
 8009efa:	d109      	bne.n	8009f10 <atan+0x30>
 8009efc:	b140      	cbz	r0, 8009f10 <atan+0x30>
 8009efe:	4622      	mov	r2, r4
 8009f00:	462b      	mov	r3, r5
 8009f02:	4620      	mov	r0, r4
 8009f04:	4629      	mov	r1, r5
 8009f06:	f7f6 f939 	bl	800017c <__adddf3>
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	460d      	mov	r5, r1
 8009f0e:	e005      	b.n	8009f1c <atan+0x3c>
 8009f10:	f1bb 0f00 	cmp.w	fp, #0
 8009f14:	4cac      	ldr	r4, [pc, #688]	; (800a1c8 <atan+0x2e8>)
 8009f16:	f340 8121 	ble.w	800a15c <atan+0x27c>
 8009f1a:	4dac      	ldr	r5, [pc, #688]	; (800a1cc <atan+0x2ec>)
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4629      	mov	r1, r5
 8009f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f24:	4baa      	ldr	r3, [pc, #680]	; (800a1d0 <atan+0x2f0>)
 8009f26:	429e      	cmp	r6, r3
 8009f28:	dc11      	bgt.n	8009f4e <atan+0x6e>
 8009f2a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009f2e:	429e      	cmp	r6, r3
 8009f30:	dc0a      	bgt.n	8009f48 <atan+0x68>
 8009f32:	a38b      	add	r3, pc, #556	; (adr r3, 800a160 <atan+0x280>)
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	f7f6 f920 	bl	800017c <__adddf3>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	4ba5      	ldr	r3, [pc, #660]	; (800a1d4 <atan+0x2f4>)
 8009f40:	f7f6 fd62 	bl	8000a08 <__aeabi_dcmpgt>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d1e9      	bne.n	8009f1c <atan+0x3c>
 8009f48:	f04f 3aff 	mov.w	sl, #4294967295
 8009f4c:	e027      	b.n	8009f9e <atan+0xbe>
 8009f4e:	f000 f987 	bl	800a260 <fabs>
 8009f52:	4ba1      	ldr	r3, [pc, #644]	; (800a1d8 <atan+0x2f8>)
 8009f54:	4604      	mov	r4, r0
 8009f56:	429e      	cmp	r6, r3
 8009f58:	460d      	mov	r5, r1
 8009f5a:	f300 80b8 	bgt.w	800a0ce <atan+0x1ee>
 8009f5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009f62:	429e      	cmp	r6, r3
 8009f64:	f300 809c 	bgt.w	800a0a0 <atan+0x1c0>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	f7f6 f906 	bl	800017c <__adddf3>
 8009f70:	2200      	movs	r2, #0
 8009f72:	4b98      	ldr	r3, [pc, #608]	; (800a1d4 <atan+0x2f4>)
 8009f74:	f7f6 f900 	bl	8000178 <__aeabi_dsub>
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	460f      	mov	r7, r1
 8009f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f82:	4620      	mov	r0, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	f7f6 f8f9 	bl	800017c <__adddf3>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4639      	mov	r1, r7
 8009f92:	f7f6 fbd3 	bl	800073c <__aeabi_ddiv>
 8009f96:	f04f 0a00 	mov.w	sl, #0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	460d      	mov	r5, r1
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	462b      	mov	r3, r5
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	f7f6 fa9f 	bl	80004e8 <__aeabi_dmul>
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	4680      	mov	r8, r0
 8009fb0:	4689      	mov	r9, r1
 8009fb2:	f7f6 fa99 	bl	80004e8 <__aeabi_dmul>
 8009fb6:	a36c      	add	r3, pc, #432	; (adr r3, 800a168 <atan+0x288>)
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	460f      	mov	r7, r1
 8009fc0:	f7f6 fa92 	bl	80004e8 <__aeabi_dmul>
 8009fc4:	a36a      	add	r3, pc, #424	; (adr r3, 800a170 <atan+0x290>)
 8009fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fca:	f7f6 f8d7 	bl	800017c <__adddf3>
 8009fce:	4632      	mov	r2, r6
 8009fd0:	463b      	mov	r3, r7
 8009fd2:	f7f6 fa89 	bl	80004e8 <__aeabi_dmul>
 8009fd6:	a368      	add	r3, pc, #416	; (adr r3, 800a178 <atan+0x298>)
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	f7f6 f8ce 	bl	800017c <__adddf3>
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	463b      	mov	r3, r7
 8009fe4:	f7f6 fa80 	bl	80004e8 <__aeabi_dmul>
 8009fe8:	a365      	add	r3, pc, #404	; (adr r3, 800a180 <atan+0x2a0>)
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	f7f6 f8c5 	bl	800017c <__adddf3>
 8009ff2:	4632      	mov	r2, r6
 8009ff4:	463b      	mov	r3, r7
 8009ff6:	f7f6 fa77 	bl	80004e8 <__aeabi_dmul>
 8009ffa:	a363      	add	r3, pc, #396	; (adr r3, 800a188 <atan+0x2a8>)
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	f7f6 f8bc 	bl	800017c <__adddf3>
 800a004:	4632      	mov	r2, r6
 800a006:	463b      	mov	r3, r7
 800a008:	f7f6 fa6e 	bl	80004e8 <__aeabi_dmul>
 800a00c:	a360      	add	r3, pc, #384	; (adr r3, 800a190 <atan+0x2b0>)
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	f7f6 f8b3 	bl	800017c <__adddf3>
 800a016:	4642      	mov	r2, r8
 800a018:	464b      	mov	r3, r9
 800a01a:	f7f6 fa65 	bl	80004e8 <__aeabi_dmul>
 800a01e:	a35e      	add	r3, pc, #376	; (adr r3, 800a198 <atan+0x2b8>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	4680      	mov	r8, r0
 800a026:	4689      	mov	r9, r1
 800a028:	4630      	mov	r0, r6
 800a02a:	4639      	mov	r1, r7
 800a02c:	f7f6 fa5c 	bl	80004e8 <__aeabi_dmul>
 800a030:	a35b      	add	r3, pc, #364	; (adr r3, 800a1a0 <atan+0x2c0>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f7f6 f89f 	bl	8000178 <__aeabi_dsub>
 800a03a:	4632      	mov	r2, r6
 800a03c:	463b      	mov	r3, r7
 800a03e:	f7f6 fa53 	bl	80004e8 <__aeabi_dmul>
 800a042:	a359      	add	r3, pc, #356	; (adr r3, 800a1a8 <atan+0x2c8>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f7f6 f896 	bl	8000178 <__aeabi_dsub>
 800a04c:	4632      	mov	r2, r6
 800a04e:	463b      	mov	r3, r7
 800a050:	f7f6 fa4a 	bl	80004e8 <__aeabi_dmul>
 800a054:	a356      	add	r3, pc, #344	; (adr r3, 800a1b0 <atan+0x2d0>)
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	f7f6 f88d 	bl	8000178 <__aeabi_dsub>
 800a05e:	4632      	mov	r2, r6
 800a060:	463b      	mov	r3, r7
 800a062:	f7f6 fa41 	bl	80004e8 <__aeabi_dmul>
 800a066:	a354      	add	r3, pc, #336	; (adr r3, 800a1b8 <atan+0x2d8>)
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	f7f6 f884 	bl	8000178 <__aeabi_dsub>
 800a070:	4632      	mov	r2, r6
 800a072:	463b      	mov	r3, r7
 800a074:	f7f6 fa38 	bl	80004e8 <__aeabi_dmul>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	4640      	mov	r0, r8
 800a07e:	4649      	mov	r1, r9
 800a080:	f7f6 f87c 	bl	800017c <__adddf3>
 800a084:	4622      	mov	r2, r4
 800a086:	462b      	mov	r3, r5
 800a088:	f7f6 fa2e 	bl	80004e8 <__aeabi_dmul>
 800a08c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	d144      	bne.n	800a120 <atan+0x240>
 800a096:	4620      	mov	r0, r4
 800a098:	4629      	mov	r1, r5
 800a09a:	f7f6 f86d 	bl	8000178 <__aeabi_dsub>
 800a09e:	e734      	b.n	8009f0a <atan+0x2a>
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	4b4c      	ldr	r3, [pc, #304]	; (800a1d4 <atan+0x2f4>)
 800a0a4:	f7f6 f868 	bl	8000178 <__aeabi_dsub>
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	4b49      	ldr	r3, [pc, #292]	; (800a1d4 <atan+0x2f4>)
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	f7f6 f862 	bl	800017c <__adddf3>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4630      	mov	r0, r6
 800a0be:	4639      	mov	r1, r7
 800a0c0:	f7f6 fb3c 	bl	800073c <__aeabi_ddiv>
 800a0c4:	f04f 0a01 	mov.w	sl, #1
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	e767      	b.n	8009f9e <atan+0xbe>
 800a0ce:	4b43      	ldr	r3, [pc, #268]	; (800a1dc <atan+0x2fc>)
 800a0d0:	429e      	cmp	r6, r3
 800a0d2:	dc1a      	bgt.n	800a10a <atan+0x22a>
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	4b42      	ldr	r3, [pc, #264]	; (800a1e0 <atan+0x300>)
 800a0d8:	f7f6 f84e 	bl	8000178 <__aeabi_dsub>
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4606      	mov	r6, r0
 800a0e0:	460f      	mov	r7, r1
 800a0e2:	4b3f      	ldr	r3, [pc, #252]	; (800a1e0 <atan+0x300>)
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	f7f6 f9fe 	bl	80004e8 <__aeabi_dmul>
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	4b39      	ldr	r3, [pc, #228]	; (800a1d4 <atan+0x2f4>)
 800a0f0:	f7f6 f844 	bl	800017c <__adddf3>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	4639      	mov	r1, r7
 800a0fc:	f7f6 fb1e 	bl	800073c <__aeabi_ddiv>
 800a100:	f04f 0a02 	mov.w	sl, #2
 800a104:	4604      	mov	r4, r0
 800a106:	460d      	mov	r5, r1
 800a108:	e749      	b.n	8009f9e <atan+0xbe>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	2000      	movs	r0, #0
 800a110:	4934      	ldr	r1, [pc, #208]	; (800a1e4 <atan+0x304>)
 800a112:	f7f6 fb13 	bl	800073c <__aeabi_ddiv>
 800a116:	f04f 0a03 	mov.w	sl, #3
 800a11a:	4604      	mov	r4, r0
 800a11c:	460d      	mov	r5, r1
 800a11e:	e73e      	b.n	8009f9e <atan+0xbe>
 800a120:	4b31      	ldr	r3, [pc, #196]	; (800a1e8 <atan+0x308>)
 800a122:	4e32      	ldr	r6, [pc, #200]	; (800a1ec <atan+0x30c>)
 800a124:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800a128:	4456      	add	r6, sl
 800a12a:	449a      	add	sl, r3
 800a12c:	e9da 2300 	ldrd	r2, r3, [sl]
 800a130:	f7f6 f822 	bl	8000178 <__aeabi_dsub>
 800a134:	4622      	mov	r2, r4
 800a136:	462b      	mov	r3, r5
 800a138:	f7f6 f81e 	bl	8000178 <__aeabi_dsub>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a144:	f7f6 f818 	bl	8000178 <__aeabi_dsub>
 800a148:	f1bb 0f00 	cmp.w	fp, #0
 800a14c:	4604      	mov	r4, r0
 800a14e:	460d      	mov	r5, r1
 800a150:	f6bf aee4 	bge.w	8009f1c <atan+0x3c>
 800a154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a158:	461d      	mov	r5, r3
 800a15a:	e6df      	b.n	8009f1c <atan+0x3c>
 800a15c:	4d24      	ldr	r5, [pc, #144]	; (800a1f0 <atan+0x310>)
 800a15e:	e6dd      	b.n	8009f1c <atan+0x3c>
 800a160:	8800759c 	.word	0x8800759c
 800a164:	7e37e43c 	.word	0x7e37e43c
 800a168:	e322da11 	.word	0xe322da11
 800a16c:	3f90ad3a 	.word	0x3f90ad3a
 800a170:	24760deb 	.word	0x24760deb
 800a174:	3fa97b4b 	.word	0x3fa97b4b
 800a178:	a0d03d51 	.word	0xa0d03d51
 800a17c:	3fb10d66 	.word	0x3fb10d66
 800a180:	c54c206e 	.word	0xc54c206e
 800a184:	3fb745cd 	.word	0x3fb745cd
 800a188:	920083ff 	.word	0x920083ff
 800a18c:	3fc24924 	.word	0x3fc24924
 800a190:	5555550d 	.word	0x5555550d
 800a194:	3fd55555 	.word	0x3fd55555
 800a198:	2c6a6c2f 	.word	0x2c6a6c2f
 800a19c:	bfa2b444 	.word	0xbfa2b444
 800a1a0:	52defd9a 	.word	0x52defd9a
 800a1a4:	3fadde2d 	.word	0x3fadde2d
 800a1a8:	af749a6d 	.word	0xaf749a6d
 800a1ac:	3fb3b0f2 	.word	0x3fb3b0f2
 800a1b0:	fe231671 	.word	0xfe231671
 800a1b4:	3fbc71c6 	.word	0x3fbc71c6
 800a1b8:	9998ebc4 	.word	0x9998ebc4
 800a1bc:	3fc99999 	.word	0x3fc99999
 800a1c0:	440fffff 	.word	0x440fffff
 800a1c4:	7ff00000 	.word	0x7ff00000
 800a1c8:	54442d18 	.word	0x54442d18
 800a1cc:	3ff921fb 	.word	0x3ff921fb
 800a1d0:	3fdbffff 	.word	0x3fdbffff
 800a1d4:	3ff00000 	.word	0x3ff00000
 800a1d8:	3ff2ffff 	.word	0x3ff2ffff
 800a1dc:	40037fff 	.word	0x40037fff
 800a1e0:	3ff80000 	.word	0x3ff80000
 800a1e4:	bff00000 	.word	0xbff00000
 800a1e8:	0800ead0 	.word	0x0800ead0
 800a1ec:	0800eab0 	.word	0x0800eab0
 800a1f0:	bff921fb 	.word	0xbff921fb

0800a1f4 <cos>:
 800a1f4:	b530      	push	{r4, r5, lr}
 800a1f6:	4a18      	ldr	r2, [pc, #96]	; (800a258 <cos+0x64>)
 800a1f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	b087      	sub	sp, #28
 800a200:	dc04      	bgt.n	800a20c <cos+0x18>
 800a202:	2200      	movs	r2, #0
 800a204:	2300      	movs	r3, #0
 800a206:	f001 fe6b 	bl	800bee0 <__kernel_cos>
 800a20a:	e006      	b.n	800a21a <cos+0x26>
 800a20c:	4a13      	ldr	r2, [pc, #76]	; (800a25c <cos+0x68>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	dd05      	ble.n	800a21e <cos+0x2a>
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	f7f5 ffaf 	bl	8000178 <__aeabi_dsub>
 800a21a:	b007      	add	sp, #28
 800a21c:	bd30      	pop	{r4, r5, pc}
 800a21e:	aa02      	add	r2, sp, #8
 800a220:	f001 fbc2 	bl	800b9a8 <__ieee754_rem_pio2>
 800a224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a228:	f000 0403 	and.w	r4, r0, #3
 800a22c:	2c01      	cmp	r4, #1
 800a22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a232:	d008      	beq.n	800a246 <cos+0x52>
 800a234:	2c02      	cmp	r4, #2
 800a236:	d00c      	beq.n	800a252 <cos+0x5e>
 800a238:	2c00      	cmp	r4, #0
 800a23a:	d0e4      	beq.n	800a206 <cos+0x12>
 800a23c:	2401      	movs	r4, #1
 800a23e:	9400      	str	r4, [sp, #0]
 800a240:	f002 fa56 	bl	800c6f0 <__kernel_sin>
 800a244:	e7e9      	b.n	800a21a <cos+0x26>
 800a246:	9400      	str	r4, [sp, #0]
 800a248:	f002 fa52 	bl	800c6f0 <__kernel_sin>
 800a24c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a250:	e7e3      	b.n	800a21a <cos+0x26>
 800a252:	f001 fe45 	bl	800bee0 <__kernel_cos>
 800a256:	e7f9      	b.n	800a24c <cos+0x58>
 800a258:	3fe921fb 	.word	0x3fe921fb
 800a25c:	7fefffff 	.word	0x7fefffff

0800a260 <fabs>:
 800a260:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a264:	4619      	mov	r1, r3
 800a266:	4770      	bx	lr

0800a268 <sin>:
 800a268:	b530      	push	{r4, r5, lr}
 800a26a:	4a1a      	ldr	r2, [pc, #104]	; (800a2d4 <sin+0x6c>)
 800a26c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a270:	4293      	cmp	r3, r2
 800a272:	b087      	sub	sp, #28
 800a274:	dc06      	bgt.n	800a284 <sin+0x1c>
 800a276:	2300      	movs	r3, #0
 800a278:	2200      	movs	r2, #0
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	2300      	movs	r3, #0
 800a27e:	f002 fa37 	bl	800c6f0 <__kernel_sin>
 800a282:	e006      	b.n	800a292 <sin+0x2a>
 800a284:	4a14      	ldr	r2, [pc, #80]	; (800a2d8 <sin+0x70>)
 800a286:	4293      	cmp	r3, r2
 800a288:	dd05      	ble.n	800a296 <sin+0x2e>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	f7f5 ff73 	bl	8000178 <__aeabi_dsub>
 800a292:	b007      	add	sp, #28
 800a294:	bd30      	pop	{r4, r5, pc}
 800a296:	aa02      	add	r2, sp, #8
 800a298:	f001 fb86 	bl	800b9a8 <__ieee754_rem_pio2>
 800a29c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2a0:	f000 0403 	and.w	r4, r0, #3
 800a2a4:	2c01      	cmp	r4, #1
 800a2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2aa:	d005      	beq.n	800a2b8 <sin+0x50>
 800a2ac:	2c02      	cmp	r4, #2
 800a2ae:	d006      	beq.n	800a2be <sin+0x56>
 800a2b0:	b964      	cbnz	r4, 800a2cc <sin+0x64>
 800a2b2:	2401      	movs	r4, #1
 800a2b4:	9400      	str	r4, [sp, #0]
 800a2b6:	e7e2      	b.n	800a27e <sin+0x16>
 800a2b8:	f001 fe12 	bl	800bee0 <__kernel_cos>
 800a2bc:	e7e9      	b.n	800a292 <sin+0x2a>
 800a2be:	2401      	movs	r4, #1
 800a2c0:	9400      	str	r4, [sp, #0]
 800a2c2:	f002 fa15 	bl	800c6f0 <__kernel_sin>
 800a2c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a2ca:	e7e2      	b.n	800a292 <sin+0x2a>
 800a2cc:	f001 fe08 	bl	800bee0 <__kernel_cos>
 800a2d0:	e7f9      	b.n	800a2c6 <sin+0x5e>
 800a2d2:	bf00      	nop
 800a2d4:	3fe921fb 	.word	0x3fe921fb
 800a2d8:	7fefffff 	.word	0x7fefffff

0800a2dc <tan>:
 800a2dc:	b530      	push	{r4, r5, lr}
 800a2de:	4a12      	ldr	r2, [pc, #72]	; (800a328 <tan+0x4c>)
 800a2e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	b087      	sub	sp, #28
 800a2e8:	dc06      	bgt.n	800a2f8 <tan+0x1c>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f002 fab5 	bl	800c860 <__kernel_tan>
 800a2f6:	e006      	b.n	800a306 <tan+0x2a>
 800a2f8:	4a0c      	ldr	r2, [pc, #48]	; (800a32c <tan+0x50>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	dd05      	ble.n	800a30a <tan+0x2e>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	f7f5 ff39 	bl	8000178 <__aeabi_dsub>
 800a306:	b007      	add	sp, #28
 800a308:	bd30      	pop	{r4, r5, pc}
 800a30a:	aa02      	add	r2, sp, #8
 800a30c:	f001 fb4c 	bl	800b9a8 <__ieee754_rem_pio2>
 800a310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a314:	0040      	lsls	r0, r0, #1
 800a316:	f000 0002 	and.w	r0, r0, #2
 800a31a:	f1c0 0001 	rsb	r0, r0, #1
 800a31e:	9000      	str	r0, [sp, #0]
 800a320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a324:	e7e5      	b.n	800a2f2 <tan+0x16>
 800a326:	bf00      	nop
 800a328:	3fe921fb 	.word	0x3fe921fb
 800a32c:	7fefffff 	.word	0x7fefffff

0800a330 <asin>:
 800a330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a334:	b08b      	sub	sp, #44	; 0x2c
 800a336:	4604      	mov	r4, r0
 800a338:	460d      	mov	r5, r1
 800a33a:	f000 fa79 	bl	800a830 <__ieee754_asin>
 800a33e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800a3d4 <asin+0xa4>
 800a342:	4606      	mov	r6, r0
 800a344:	f998 3000 	ldrsb.w	r3, [r8]
 800a348:	460f      	mov	r7, r1
 800a34a:	3301      	adds	r3, #1
 800a34c:	d036      	beq.n	800a3bc <asin+0x8c>
 800a34e:	4622      	mov	r2, r4
 800a350:	462b      	mov	r3, r5
 800a352:	4620      	mov	r0, r4
 800a354:	4629      	mov	r1, r5
 800a356:	f7f6 fb61 	bl	8000a1c <__aeabi_dcmpun>
 800a35a:	4681      	mov	r9, r0
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d12d      	bne.n	800a3bc <asin+0x8c>
 800a360:	4620      	mov	r0, r4
 800a362:	4629      	mov	r1, r5
 800a364:	f7ff ff7c 	bl	800a260 <fabs>
 800a368:	2200      	movs	r2, #0
 800a36a:	4b17      	ldr	r3, [pc, #92]	; (800a3c8 <asin+0x98>)
 800a36c:	f7f6 fb4c 	bl	8000a08 <__aeabi_dcmpgt>
 800a370:	b320      	cbz	r0, 800a3bc <asin+0x8c>
 800a372:	2301      	movs	r3, #1
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	4b15      	ldr	r3, [pc, #84]	; (800a3cc <asin+0x9c>)
 800a378:	4815      	ldr	r0, [pc, #84]	; (800a3d0 <asin+0xa0>)
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	f8cd 9020 	str.w	r9, [sp, #32]
 800a380:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a384:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a388:	f002 fcb8 	bl	800ccfc <nan>
 800a38c:	f998 3000 	ldrsb.w	r3, [r8]
 800a390:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a394:	2b02      	cmp	r3, #2
 800a396:	d104      	bne.n	800a3a2 <asin+0x72>
 800a398:	f002 fdba 	bl	800cf10 <__errno>
 800a39c:	2321      	movs	r3, #33	; 0x21
 800a39e:	6003      	str	r3, [r0, #0]
 800a3a0:	e004      	b.n	800a3ac <asin+0x7c>
 800a3a2:	4668      	mov	r0, sp
 800a3a4:	f002 fca8 	bl	800ccf8 <matherr>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d0f5      	beq.n	800a398 <asin+0x68>
 800a3ac:	9b08      	ldr	r3, [sp, #32]
 800a3ae:	b11b      	cbz	r3, 800a3b8 <asin+0x88>
 800a3b0:	f002 fdae 	bl	800cf10 <__errno>
 800a3b4:	9b08      	ldr	r3, [sp, #32]
 800a3b6:	6003      	str	r3, [r0, #0]
 800a3b8:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800a3bc:	4630      	mov	r0, r6
 800a3be:	4639      	mov	r1, r7
 800a3c0:	b00b      	add	sp, #44	; 0x2c
 800a3c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3c6:	bf00      	nop
 800a3c8:	3ff00000 	.word	0x3ff00000
 800a3cc:	0800eaf0 	.word	0x0800eaf0
 800a3d0:	0800eaf8 	.word	0x0800eaf8
 800a3d4:	200000c0 	.word	0x200000c0

0800a3d8 <log>:
 800a3d8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800a3dc:	b08a      	sub	sp, #40	; 0x28
 800a3de:	4604      	mov	r4, r0
 800a3e0:	460d      	mov	r5, r1
 800a3e2:	f000 fc21 	bl	800ac28 <__ieee754_log>
 800a3e6:	4b34      	ldr	r3, [pc, #208]	; (800a4b8 <log+0xe0>)
 800a3e8:	4680      	mov	r8, r0
 800a3ea:	f993 6000 	ldrsb.w	r6, [r3]
 800a3ee:	4689      	mov	r9, r1
 800a3f0:	1c73      	adds	r3, r6, #1
 800a3f2:	d05b      	beq.n	800a4ac <log+0xd4>
 800a3f4:	4622      	mov	r2, r4
 800a3f6:	462b      	mov	r3, r5
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	f7f6 fb0e 	bl	8000a1c <__aeabi_dcmpun>
 800a400:	2800      	cmp	r0, #0
 800a402:	d153      	bne.n	800a4ac <log+0xd4>
 800a404:	2200      	movs	r2, #0
 800a406:	2300      	movs	r3, #0
 800a408:	4620      	mov	r0, r4
 800a40a:	4629      	mov	r1, r5
 800a40c:	f7f6 fafc 	bl	8000a08 <__aeabi_dcmpgt>
 800a410:	2800      	cmp	r0, #0
 800a412:	d14b      	bne.n	800a4ac <log+0xd4>
 800a414:	4b29      	ldr	r3, [pc, #164]	; (800a4bc <log+0xe4>)
 800a416:	9008      	str	r0, [sp, #32]
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a41e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a422:	b9a6      	cbnz	r6, 800a44e <log+0x76>
 800a424:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a428:	4b25      	ldr	r3, [pc, #148]	; (800a4c0 <log+0xe8>)
 800a42a:	4620      	mov	r0, r4
 800a42c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a430:	4629      	mov	r1, r5
 800a432:	2200      	movs	r2, #0
 800a434:	2300      	movs	r3, #0
 800a436:	f7f6 fabf 	bl	80009b8 <__aeabi_dcmpeq>
 800a43a:	bb40      	cbnz	r0, 800a48e <log+0xb6>
 800a43c:	2301      	movs	r3, #1
 800a43e:	2e02      	cmp	r6, #2
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	d119      	bne.n	800a478 <log+0xa0>
 800a444:	f002 fd64 	bl	800cf10 <__errno>
 800a448:	2321      	movs	r3, #33	; 0x21
 800a44a:	6003      	str	r3, [r0, #0]
 800a44c:	e019      	b.n	800a482 <log+0xaa>
 800a44e:	2200      	movs	r2, #0
 800a450:	4b1c      	ldr	r3, [pc, #112]	; (800a4c4 <log+0xec>)
 800a452:	4620      	mov	r0, r4
 800a454:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a458:	4629      	mov	r1, r5
 800a45a:	2200      	movs	r2, #0
 800a45c:	2300      	movs	r3, #0
 800a45e:	f7f6 faab 	bl	80009b8 <__aeabi_dcmpeq>
 800a462:	2800      	cmp	r0, #0
 800a464:	d0ea      	beq.n	800a43c <log+0x64>
 800a466:	2302      	movs	r3, #2
 800a468:	429e      	cmp	r6, r3
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	d111      	bne.n	800a492 <log+0xba>
 800a46e:	f002 fd4f 	bl	800cf10 <__errno>
 800a472:	2322      	movs	r3, #34	; 0x22
 800a474:	6003      	str	r3, [r0, #0]
 800a476:	e011      	b.n	800a49c <log+0xc4>
 800a478:	4668      	mov	r0, sp
 800a47a:	f002 fc3d 	bl	800ccf8 <matherr>
 800a47e:	2800      	cmp	r0, #0
 800a480:	d0e0      	beq.n	800a444 <log+0x6c>
 800a482:	4811      	ldr	r0, [pc, #68]	; (800a4c8 <log+0xf0>)
 800a484:	f002 fc3a 	bl	800ccfc <nan>
 800a488:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a48c:	e006      	b.n	800a49c <log+0xc4>
 800a48e:	2302      	movs	r3, #2
 800a490:	9300      	str	r3, [sp, #0]
 800a492:	4668      	mov	r0, sp
 800a494:	f002 fc30 	bl	800ccf8 <matherr>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d0e8      	beq.n	800a46e <log+0x96>
 800a49c:	9b08      	ldr	r3, [sp, #32]
 800a49e:	b11b      	cbz	r3, 800a4a8 <log+0xd0>
 800a4a0:	f002 fd36 	bl	800cf10 <__errno>
 800a4a4:	9b08      	ldr	r3, [sp, #32]
 800a4a6:	6003      	str	r3, [r0, #0]
 800a4a8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a4ac:	4640      	mov	r0, r8
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	b00a      	add	sp, #40	; 0x28
 800a4b2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a4b6:	bf00      	nop
 800a4b8:	200000c0 	.word	0x200000c0
 800a4bc:	0800eaf5 	.word	0x0800eaf5
 800a4c0:	c7efffff 	.word	0xc7efffff
 800a4c4:	fff00000 	.word	0xfff00000
 800a4c8:	0800eaf8 	.word	0x0800eaf8

0800a4cc <pow>:
 800a4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d0:	b08f      	sub	sp, #60	; 0x3c
 800a4d2:	461d      	mov	r5, r3
 800a4d4:	4680      	mov	r8, r0
 800a4d6:	4689      	mov	r9, r1
 800a4d8:	4614      	mov	r4, r2
 800a4da:	f000 fd59 	bl	800af90 <__ieee754_pow>
 800a4de:	4fa1      	ldr	r7, [pc, #644]	; (800a764 <pow+0x298>)
 800a4e0:	e9cd 0100 	strd	r0, r1, [sp]
 800a4e4:	f997 3000 	ldrsb.w	r3, [r7]
 800a4e8:	463e      	mov	r6, r7
 800a4ea:	9302      	str	r3, [sp, #8]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	d05f      	beq.n	800a5b0 <pow+0xe4>
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	462b      	mov	r3, r5
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	f7f6 fa90 	bl	8000a1c <__aeabi_dcmpun>
 800a4fc:	4682      	mov	sl, r0
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d156      	bne.n	800a5b0 <pow+0xe4>
 800a502:	4642      	mov	r2, r8
 800a504:	464b      	mov	r3, r9
 800a506:	4640      	mov	r0, r8
 800a508:	4649      	mov	r1, r9
 800a50a:	f7f6 fa87 	bl	8000a1c <__aeabi_dcmpun>
 800a50e:	9003      	str	r0, [sp, #12]
 800a510:	b1e8      	cbz	r0, 800a54e <pow+0x82>
 800a512:	2200      	movs	r2, #0
 800a514:	2300      	movs	r3, #0
 800a516:	4620      	mov	r0, r4
 800a518:	4629      	mov	r1, r5
 800a51a:	f7f6 fa4d 	bl	80009b8 <__aeabi_dcmpeq>
 800a51e:	2800      	cmp	r0, #0
 800a520:	d046      	beq.n	800a5b0 <pow+0xe4>
 800a522:	2301      	movs	r3, #1
 800a524:	2200      	movs	r2, #0
 800a526:	9304      	str	r3, [sp, #16]
 800a528:	4b8f      	ldr	r3, [pc, #572]	; (800a768 <pow+0x29c>)
 800a52a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a52e:	9305      	str	r3, [sp, #20]
 800a530:	4b8e      	ldr	r3, [pc, #568]	; (800a76c <pow+0x2a0>)
 800a532:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a536:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a53a:	9b02      	ldr	r3, [sp, #8]
 800a53c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a540:	2b02      	cmp	r3, #2
 800a542:	d031      	beq.n	800a5a8 <pow+0xdc>
 800a544:	a804      	add	r0, sp, #16
 800a546:	f002 fbd7 	bl	800ccf8 <matherr>
 800a54a:	bb38      	cbnz	r0, 800a59c <pow+0xd0>
 800a54c:	e058      	b.n	800a600 <pow+0x134>
 800a54e:	f04f 0a00 	mov.w	sl, #0
 800a552:	f04f 0b00 	mov.w	fp, #0
 800a556:	4652      	mov	r2, sl
 800a558:	465b      	mov	r3, fp
 800a55a:	4640      	mov	r0, r8
 800a55c:	4649      	mov	r1, r9
 800a55e:	f7f6 fa2b 	bl	80009b8 <__aeabi_dcmpeq>
 800a562:	2800      	cmp	r0, #0
 800a564:	d051      	beq.n	800a60a <pow+0x13e>
 800a566:	4652      	mov	r2, sl
 800a568:	465b      	mov	r3, fp
 800a56a:	4620      	mov	r0, r4
 800a56c:	4629      	mov	r1, r5
 800a56e:	f7f6 fa23 	bl	80009b8 <__aeabi_dcmpeq>
 800a572:	4606      	mov	r6, r0
 800a574:	b308      	cbz	r0, 800a5ba <pow+0xee>
 800a576:	2301      	movs	r3, #1
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	4b7b      	ldr	r3, [pc, #492]	; (800a768 <pow+0x29c>)
 800a57c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a580:	9305      	str	r3, [sp, #20]
 800a582:	9b03      	ldr	r3, [sp, #12]
 800a584:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a588:	930c      	str	r3, [sp, #48]	; 0x30
 800a58a:	9b02      	ldr	r3, [sp, #8]
 800a58c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a590:	2b00      	cmp	r3, #0
 800a592:	d0d7      	beq.n	800a544 <pow+0x78>
 800a594:	2200      	movs	r2, #0
 800a596:	4b75      	ldr	r3, [pc, #468]	; (800a76c <pow+0x2a0>)
 800a598:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a59c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a59e:	b11b      	cbz	r3, 800a5a8 <pow+0xdc>
 800a5a0:	f002 fcb6 	bl	800cf10 <__errno>
 800a5a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5a6:	6003      	str	r3, [r0, #0]
 800a5a8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800a5ac:	e9cd 3400 	strd	r3, r4, [sp]
 800a5b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5b4:	b00f      	add	sp, #60	; 0x3c
 800a5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	4629      	mov	r1, r5
 800a5be:	f002 fb0f 	bl	800cbe0 <finite>
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d0f4      	beq.n	800a5b0 <pow+0xe4>
 800a5c6:	4652      	mov	r2, sl
 800a5c8:	465b      	mov	r3, fp
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	f7f6 f9fd 	bl	80009cc <__aeabi_dcmplt>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d0ec      	beq.n	800a5b0 <pow+0xe4>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	9304      	str	r3, [sp, #16]
 800a5da:	4b63      	ldr	r3, [pc, #396]	; (800a768 <pow+0x29c>)
 800a5dc:	960c      	str	r6, [sp, #48]	; 0x30
 800a5de:	9305      	str	r3, [sp, #20]
 800a5e0:	f997 3000 	ldrsb.w	r3, [r7]
 800a5e4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a5e8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a5ec:	b913      	cbnz	r3, 800a5f4 <pow+0x128>
 800a5ee:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a5f2:	e7a7      	b.n	800a544 <pow+0x78>
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	495e      	ldr	r1, [pc, #376]	; (800a770 <pow+0x2a4>)
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a5fe:	d1a1      	bne.n	800a544 <pow+0x78>
 800a600:	f002 fc86 	bl	800cf10 <__errno>
 800a604:	2321      	movs	r3, #33	; 0x21
 800a606:	6003      	str	r3, [r0, #0]
 800a608:	e7c8      	b.n	800a59c <pow+0xd0>
 800a60a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a60e:	f002 fae7 	bl	800cbe0 <finite>
 800a612:	9002      	str	r0, [sp, #8]
 800a614:	2800      	cmp	r0, #0
 800a616:	d177      	bne.n	800a708 <pow+0x23c>
 800a618:	4640      	mov	r0, r8
 800a61a:	4649      	mov	r1, r9
 800a61c:	f002 fae0 	bl	800cbe0 <finite>
 800a620:	2800      	cmp	r0, #0
 800a622:	d071      	beq.n	800a708 <pow+0x23c>
 800a624:	4620      	mov	r0, r4
 800a626:	4629      	mov	r1, r5
 800a628:	f002 fada 	bl	800cbe0 <finite>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d06b      	beq.n	800a708 <pow+0x23c>
 800a630:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a634:	4619      	mov	r1, r3
 800a636:	4610      	mov	r0, r2
 800a638:	f7f6 f9f0 	bl	8000a1c <__aeabi_dcmpun>
 800a63c:	f997 7000 	ldrsb.w	r7, [r7]
 800a640:	4b49      	ldr	r3, [pc, #292]	; (800a768 <pow+0x29c>)
 800a642:	b1a0      	cbz	r0, 800a66e <pow+0x1a2>
 800a644:	2201      	movs	r2, #1
 800a646:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a64a:	9b02      	ldr	r3, [sp, #8]
 800a64c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a650:	930c      	str	r3, [sp, #48]	; 0x30
 800a652:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a656:	2f00      	cmp	r7, #0
 800a658:	d0c9      	beq.n	800a5ee <pow+0x122>
 800a65a:	4652      	mov	r2, sl
 800a65c:	465b      	mov	r3, fp
 800a65e:	4650      	mov	r0, sl
 800a660:	4659      	mov	r1, fp
 800a662:	f7f6 f86b 	bl	800073c <__aeabi_ddiv>
 800a666:	2f02      	cmp	r7, #2
 800a668:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a66c:	e7c7      	b.n	800a5fe <pow+0x132>
 800a66e:	2203      	movs	r2, #3
 800a670:	900c      	str	r0, [sp, #48]	; 0x30
 800a672:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a676:	4620      	mov	r0, r4
 800a678:	4629      	mov	r1, r5
 800a67a:	2200      	movs	r2, #0
 800a67c:	4b3d      	ldr	r3, [pc, #244]	; (800a774 <pow+0x2a8>)
 800a67e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a682:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a686:	f7f5 ff2f 	bl	80004e8 <__aeabi_dmul>
 800a68a:	4604      	mov	r4, r0
 800a68c:	460d      	mov	r5, r1
 800a68e:	bb17      	cbnz	r7, 800a6d6 <pow+0x20a>
 800a690:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a694:	4b38      	ldr	r3, [pc, #224]	; (800a778 <pow+0x2ac>)
 800a696:	4640      	mov	r0, r8
 800a698:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a69c:	4649      	mov	r1, r9
 800a69e:	4652      	mov	r2, sl
 800a6a0:	465b      	mov	r3, fp
 800a6a2:	f7f6 f993 	bl	80009cc <__aeabi_dcmplt>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d054      	beq.n	800a754 <pow+0x288>
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	f002 fb2b 	bl	800cd08 <rint>
 800a6b2:	4622      	mov	r2, r4
 800a6b4:	462b      	mov	r3, r5
 800a6b6:	f7f6 f97f 	bl	80009b8 <__aeabi_dcmpeq>
 800a6ba:	b920      	cbnz	r0, 800a6c6 <pow+0x1fa>
 800a6bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a6c0:	4b2e      	ldr	r3, [pc, #184]	; (800a77c <pow+0x2b0>)
 800a6c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a6c6:	f996 3000 	ldrsb.w	r3, [r6]
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d142      	bne.n	800a754 <pow+0x288>
 800a6ce:	f002 fc1f 	bl	800cf10 <__errno>
 800a6d2:	2322      	movs	r3, #34	; 0x22
 800a6d4:	e797      	b.n	800a606 <pow+0x13a>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	4b29      	ldr	r3, [pc, #164]	; (800a780 <pow+0x2b4>)
 800a6da:	4640      	mov	r0, r8
 800a6dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	4652      	mov	r2, sl
 800a6e4:	465b      	mov	r3, fp
 800a6e6:	f7f6 f971 	bl	80009cc <__aeabi_dcmplt>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d0eb      	beq.n	800a6c6 <pow+0x1fa>
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	f002 fb09 	bl	800cd08 <rint>
 800a6f6:	4622      	mov	r2, r4
 800a6f8:	462b      	mov	r3, r5
 800a6fa:	f7f6 f95d 	bl	80009b8 <__aeabi_dcmpeq>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d1e1      	bne.n	800a6c6 <pow+0x1fa>
 800a702:	2200      	movs	r2, #0
 800a704:	4b1a      	ldr	r3, [pc, #104]	; (800a770 <pow+0x2a4>)
 800a706:	e7dc      	b.n	800a6c2 <pow+0x1f6>
 800a708:	2200      	movs	r2, #0
 800a70a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a70e:	2300      	movs	r3, #0
 800a710:	f7f6 f952 	bl	80009b8 <__aeabi_dcmpeq>
 800a714:	2800      	cmp	r0, #0
 800a716:	f43f af4b 	beq.w	800a5b0 <pow+0xe4>
 800a71a:	4640      	mov	r0, r8
 800a71c:	4649      	mov	r1, r9
 800a71e:	f002 fa5f 	bl	800cbe0 <finite>
 800a722:	2800      	cmp	r0, #0
 800a724:	f43f af44 	beq.w	800a5b0 <pow+0xe4>
 800a728:	4620      	mov	r0, r4
 800a72a:	4629      	mov	r1, r5
 800a72c:	f002 fa58 	bl	800cbe0 <finite>
 800a730:	2800      	cmp	r0, #0
 800a732:	f43f af3d 	beq.w	800a5b0 <pow+0xe4>
 800a736:	2304      	movs	r3, #4
 800a738:	9304      	str	r3, [sp, #16]
 800a73a:	4b0b      	ldr	r3, [pc, #44]	; (800a768 <pow+0x29c>)
 800a73c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800a740:	9305      	str	r3, [sp, #20]
 800a742:	2300      	movs	r3, #0
 800a744:	2400      	movs	r4, #0
 800a746:	930c      	str	r3, [sp, #48]	; 0x30
 800a748:	2300      	movs	r3, #0
 800a74a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a74e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800a752:	e7b8      	b.n	800a6c6 <pow+0x1fa>
 800a754:	a804      	add	r0, sp, #16
 800a756:	f002 facf 	bl	800ccf8 <matherr>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f47f af1e 	bne.w	800a59c <pow+0xd0>
 800a760:	e7b5      	b.n	800a6ce <pow+0x202>
 800a762:	bf00      	nop
 800a764:	200000c0 	.word	0x200000c0
 800a768:	0800eaf9 	.word	0x0800eaf9
 800a76c:	3ff00000 	.word	0x3ff00000
 800a770:	fff00000 	.word	0xfff00000
 800a774:	3fe00000 	.word	0x3fe00000
 800a778:	47efffff 	.word	0x47efffff
 800a77c:	c7efffff 	.word	0xc7efffff
 800a780:	7ff00000 	.word	0x7ff00000

0800a784 <sqrt>:
 800a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	b08b      	sub	sp, #44	; 0x2c
 800a78a:	4604      	mov	r4, r0
 800a78c:	460d      	mov	r5, r1
 800a78e:	f001 fafb 	bl	800bd88 <__ieee754_sqrt>
 800a792:	4b24      	ldr	r3, [pc, #144]	; (800a824 <sqrt+0xa0>)
 800a794:	4680      	mov	r8, r0
 800a796:	f993 a000 	ldrsb.w	sl, [r3]
 800a79a:	4689      	mov	r9, r1
 800a79c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a7a0:	d02b      	beq.n	800a7fa <sqrt+0x76>
 800a7a2:	4622      	mov	r2, r4
 800a7a4:	462b      	mov	r3, r5
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	f7f6 f937 	bl	8000a1c <__aeabi_dcmpun>
 800a7ae:	4683      	mov	fp, r0
 800a7b0:	bb18      	cbnz	r0, 800a7fa <sqrt+0x76>
 800a7b2:	2600      	movs	r6, #0
 800a7b4:	2700      	movs	r7, #0
 800a7b6:	4632      	mov	r2, r6
 800a7b8:	463b      	mov	r3, r7
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	4629      	mov	r1, r5
 800a7be:	f7f6 f905 	bl	80009cc <__aeabi_dcmplt>
 800a7c2:	b1d0      	cbz	r0, 800a7fa <sqrt+0x76>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	4b17      	ldr	r3, [pc, #92]	; (800a828 <sqrt+0xa4>)
 800a7ca:	f8cd b020 	str.w	fp, [sp, #32]
 800a7ce:	9301      	str	r3, [sp, #4]
 800a7d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a7d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a7d8:	f1ba 0f00 	cmp.w	sl, #0
 800a7dc:	d112      	bne.n	800a804 <sqrt+0x80>
 800a7de:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a7e2:	4668      	mov	r0, sp
 800a7e4:	f002 fa88 	bl	800ccf8 <matherr>
 800a7e8:	b1b8      	cbz	r0, 800a81a <sqrt+0x96>
 800a7ea:	9b08      	ldr	r3, [sp, #32]
 800a7ec:	b11b      	cbz	r3, 800a7f6 <sqrt+0x72>
 800a7ee:	f002 fb8f 	bl	800cf10 <__errno>
 800a7f2:	9b08      	ldr	r3, [sp, #32]
 800a7f4:	6003      	str	r3, [r0, #0]
 800a7f6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a7fa:	4640      	mov	r0, r8
 800a7fc:	4649      	mov	r1, r9
 800a7fe:	b00b      	add	sp, #44	; 0x2c
 800a800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a804:	4632      	mov	r2, r6
 800a806:	463b      	mov	r3, r7
 800a808:	4630      	mov	r0, r6
 800a80a:	4639      	mov	r1, r7
 800a80c:	f7f5 ff96 	bl	800073c <__aeabi_ddiv>
 800a810:	f1ba 0f02 	cmp.w	sl, #2
 800a814:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a818:	d1e3      	bne.n	800a7e2 <sqrt+0x5e>
 800a81a:	f002 fb79 	bl	800cf10 <__errno>
 800a81e:	2321      	movs	r3, #33	; 0x21
 800a820:	6003      	str	r3, [r0, #0]
 800a822:	e7e2      	b.n	800a7ea <sqrt+0x66>
 800a824:	200000c0 	.word	0x200000c0
 800a828:	0800eafd 	.word	0x0800eafd
 800a82c:	00000000 	.word	0x00000000

0800a830 <__ieee754_asin>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	4bc4      	ldr	r3, [pc, #784]	; (800ab48 <__ieee754_asin+0x318>)
 800a836:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a83a:	b087      	sub	sp, #28
 800a83c:	429f      	cmp	r7, r3
 800a83e:	4604      	mov	r4, r0
 800a840:	460d      	mov	r5, r1
 800a842:	9103      	str	r1, [sp, #12]
 800a844:	dd2a      	ble.n	800a89c <__ieee754_asin+0x6c>
 800a846:	4603      	mov	r3, r0
 800a848:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800a84c:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800a850:	433b      	orrs	r3, r7
 800a852:	d114      	bne.n	800a87e <__ieee754_asin+0x4e>
 800a854:	a3a2      	add	r3, pc, #648	; (adr r3, 800aae0 <__ieee754_asin+0x2b0>)
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f7f5 fe45 	bl	80004e8 <__aeabi_dmul>
 800a85e:	a3a2      	add	r3, pc, #648	; (adr r3, 800aae8 <__ieee754_asin+0x2b8>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	4606      	mov	r6, r0
 800a866:	460f      	mov	r7, r1
 800a868:	4620      	mov	r0, r4
 800a86a:	4629      	mov	r1, r5
 800a86c:	f7f5 fe3c 	bl	80004e8 <__aeabi_dmul>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4630      	mov	r0, r6
 800a876:	4639      	mov	r1, r7
 800a878:	f7f5 fc80 	bl	800017c <__adddf3>
 800a87c:	e007      	b.n	800a88e <__ieee754_asin+0x5e>
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	f7f5 fc79 	bl	8000178 <__aeabi_dsub>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	f7f5 ff57 	bl	800073c <__aeabi_ddiv>
 800a88e:	4604      	mov	r4, r0
 800a890:	460d      	mov	r5, r1
 800a892:	4620      	mov	r0, r4
 800a894:	4629      	mov	r1, r5
 800a896:	b007      	add	sp, #28
 800a898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89c:	4bab      	ldr	r3, [pc, #684]	; (800ab4c <__ieee754_asin+0x31c>)
 800a89e:	429f      	cmp	r7, r3
 800a8a0:	dc0e      	bgt.n	800a8c0 <__ieee754_asin+0x90>
 800a8a2:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800a8a6:	f280 80ab 	bge.w	800aa00 <__ieee754_asin+0x1d0>
 800a8aa:	a391      	add	r3, pc, #580	; (adr r3, 800aaf0 <__ieee754_asin+0x2c0>)
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	f7f5 fc64 	bl	800017c <__adddf3>
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4ba6      	ldr	r3, [pc, #664]	; (800ab50 <__ieee754_asin+0x320>)
 800a8b8:	f7f6 f8a6 	bl	8000a08 <__aeabi_dcmpgt>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d1e8      	bne.n	800a892 <__ieee754_asin+0x62>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f7ff fccc 	bl	800a260 <fabs>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	49a0      	ldr	r1, [pc, #640]	; (800ab50 <__ieee754_asin+0x320>)
 800a8d0:	f7f5 fc52 	bl	8000178 <__aeabi_dsub>
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4b9f      	ldr	r3, [pc, #636]	; (800ab54 <__ieee754_asin+0x324>)
 800a8d8:	f7f5 fe06 	bl	80004e8 <__aeabi_dmul>
 800a8dc:	a386      	add	r3, pc, #536	; (adr r3, 800aaf8 <__ieee754_asin+0x2c8>)
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	460d      	mov	r5, r1
 800a8e6:	f7f5 fdff 	bl	80004e8 <__aeabi_dmul>
 800a8ea:	a385      	add	r3, pc, #532	; (adr r3, 800ab00 <__ieee754_asin+0x2d0>)
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	f7f5 fc44 	bl	800017c <__adddf3>
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	462b      	mov	r3, r5
 800a8f8:	f7f5 fdf6 	bl	80004e8 <__aeabi_dmul>
 800a8fc:	a382      	add	r3, pc, #520	; (adr r3, 800ab08 <__ieee754_asin+0x2d8>)
 800a8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a902:	f7f5 fc39 	bl	8000178 <__aeabi_dsub>
 800a906:	4622      	mov	r2, r4
 800a908:	462b      	mov	r3, r5
 800a90a:	f7f5 fded 	bl	80004e8 <__aeabi_dmul>
 800a90e:	a380      	add	r3, pc, #512	; (adr r3, 800ab10 <__ieee754_asin+0x2e0>)
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	f7f5 fc32 	bl	800017c <__adddf3>
 800a918:	4622      	mov	r2, r4
 800a91a:	462b      	mov	r3, r5
 800a91c:	f7f5 fde4 	bl	80004e8 <__aeabi_dmul>
 800a920:	a37d      	add	r3, pc, #500	; (adr r3, 800ab18 <__ieee754_asin+0x2e8>)
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f7f5 fc27 	bl	8000178 <__aeabi_dsub>
 800a92a:	4622      	mov	r2, r4
 800a92c:	462b      	mov	r3, r5
 800a92e:	f7f5 fddb 	bl	80004e8 <__aeabi_dmul>
 800a932:	a37b      	add	r3, pc, #492	; (adr r3, 800ab20 <__ieee754_asin+0x2f0>)
 800a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a938:	f7f5 fc20 	bl	800017c <__adddf3>
 800a93c:	4622      	mov	r2, r4
 800a93e:	462b      	mov	r3, r5
 800a940:	f7f5 fdd2 	bl	80004e8 <__aeabi_dmul>
 800a944:	a378      	add	r3, pc, #480	; (adr r3, 800ab28 <__ieee754_asin+0x2f8>)
 800a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94a:	4680      	mov	r8, r0
 800a94c:	4689      	mov	r9, r1
 800a94e:	4620      	mov	r0, r4
 800a950:	4629      	mov	r1, r5
 800a952:	f7f5 fdc9 	bl	80004e8 <__aeabi_dmul>
 800a956:	a376      	add	r3, pc, #472	; (adr r3, 800ab30 <__ieee754_asin+0x300>)
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	f7f5 fc0c 	bl	8000178 <__aeabi_dsub>
 800a960:	4622      	mov	r2, r4
 800a962:	462b      	mov	r3, r5
 800a964:	f7f5 fdc0 	bl	80004e8 <__aeabi_dmul>
 800a968:	a373      	add	r3, pc, #460	; (adr r3, 800ab38 <__ieee754_asin+0x308>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	f7f5 fc05 	bl	800017c <__adddf3>
 800a972:	4622      	mov	r2, r4
 800a974:	462b      	mov	r3, r5
 800a976:	f7f5 fdb7 	bl	80004e8 <__aeabi_dmul>
 800a97a:	a371      	add	r3, pc, #452	; (adr r3, 800ab40 <__ieee754_asin+0x310>)
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	f7f5 fbfa 	bl	8000178 <__aeabi_dsub>
 800a984:	4622      	mov	r2, r4
 800a986:	462b      	mov	r3, r5
 800a988:	f7f5 fdae 	bl	80004e8 <__aeabi_dmul>
 800a98c:	4b70      	ldr	r3, [pc, #448]	; (800ab50 <__ieee754_asin+0x320>)
 800a98e:	2200      	movs	r2, #0
 800a990:	f7f5 fbf4 	bl	800017c <__adddf3>
 800a994:	e9cd 0100 	strd	r0, r1, [sp]
 800a998:	4620      	mov	r0, r4
 800a99a:	4629      	mov	r1, r5
 800a99c:	f001 f9f4 	bl	800bd88 <__ieee754_sqrt>
 800a9a0:	4b6d      	ldr	r3, [pc, #436]	; (800ab58 <__ieee754_asin+0x328>)
 800a9a2:	4682      	mov	sl, r0
 800a9a4:	429f      	cmp	r7, r3
 800a9a6:	468b      	mov	fp, r1
 800a9a8:	f340 80d8 	ble.w	800ab5c <__ieee754_asin+0x32c>
 800a9ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	4649      	mov	r1, r9
 800a9b4:	f7f5 fec2 	bl	800073c <__aeabi_ddiv>
 800a9b8:	4652      	mov	r2, sl
 800a9ba:	465b      	mov	r3, fp
 800a9bc:	f7f5 fd94 	bl	80004e8 <__aeabi_dmul>
 800a9c0:	4652      	mov	r2, sl
 800a9c2:	465b      	mov	r3, fp
 800a9c4:	f7f5 fbda 	bl	800017c <__adddf3>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	f7f5 fbd6 	bl	800017c <__adddf3>
 800a9d0:	a345      	add	r3, pc, #276	; (adr r3, 800aae8 <__ieee754_asin+0x2b8>)
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	f7f5 fbcf 	bl	8000178 <__aeabi_dsub>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	a140      	add	r1, pc, #256	; (adr r1, 800aae0 <__ieee754_asin+0x2b0>)
 800a9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9e4:	f7f5 fbc8 	bl	8000178 <__aeabi_dsub>
 800a9e8:	9b03      	ldr	r3, [sp, #12]
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfdc      	itt	le
 800a9f0:	4602      	movle	r2, r0
 800a9f2:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	bfdc      	itt	le
 800a9fa:	4614      	movle	r4, r2
 800a9fc:	461d      	movle	r5, r3
 800a9fe:	e748      	b.n	800a892 <__ieee754_asin+0x62>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	f7f5 fd70 	bl	80004e8 <__aeabi_dmul>
 800aa08:	a33b      	add	r3, pc, #236	; (adr r3, 800aaf8 <__ieee754_asin+0x2c8>)
 800aa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460f      	mov	r7, r1
 800aa12:	f7f5 fd69 	bl	80004e8 <__aeabi_dmul>
 800aa16:	a33a      	add	r3, pc, #232	; (adr r3, 800ab00 <__ieee754_asin+0x2d0>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f5 fbae 	bl	800017c <__adddf3>
 800aa20:	4632      	mov	r2, r6
 800aa22:	463b      	mov	r3, r7
 800aa24:	f7f5 fd60 	bl	80004e8 <__aeabi_dmul>
 800aa28:	a337      	add	r3, pc, #220	; (adr r3, 800ab08 <__ieee754_asin+0x2d8>)
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f7f5 fba3 	bl	8000178 <__aeabi_dsub>
 800aa32:	4632      	mov	r2, r6
 800aa34:	463b      	mov	r3, r7
 800aa36:	f7f5 fd57 	bl	80004e8 <__aeabi_dmul>
 800aa3a:	a335      	add	r3, pc, #212	; (adr r3, 800ab10 <__ieee754_asin+0x2e0>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f5 fb9c 	bl	800017c <__adddf3>
 800aa44:	4632      	mov	r2, r6
 800aa46:	463b      	mov	r3, r7
 800aa48:	f7f5 fd4e 	bl	80004e8 <__aeabi_dmul>
 800aa4c:	a332      	add	r3, pc, #200	; (adr r3, 800ab18 <__ieee754_asin+0x2e8>)
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	f7f5 fb91 	bl	8000178 <__aeabi_dsub>
 800aa56:	4632      	mov	r2, r6
 800aa58:	463b      	mov	r3, r7
 800aa5a:	f7f5 fd45 	bl	80004e8 <__aeabi_dmul>
 800aa5e:	a330      	add	r3, pc, #192	; (adr r3, 800ab20 <__ieee754_asin+0x2f0>)
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	f7f5 fb8a 	bl	800017c <__adddf3>
 800aa68:	4632      	mov	r2, r6
 800aa6a:	463b      	mov	r3, r7
 800aa6c:	f7f5 fd3c 	bl	80004e8 <__aeabi_dmul>
 800aa70:	a32d      	add	r3, pc, #180	; (adr r3, 800ab28 <__ieee754_asin+0x2f8>)
 800aa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa76:	4680      	mov	r8, r0
 800aa78:	4689      	mov	r9, r1
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	f7f5 fd33 	bl	80004e8 <__aeabi_dmul>
 800aa82:	a32b      	add	r3, pc, #172	; (adr r3, 800ab30 <__ieee754_asin+0x300>)
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	f7f5 fb76 	bl	8000178 <__aeabi_dsub>
 800aa8c:	4632      	mov	r2, r6
 800aa8e:	463b      	mov	r3, r7
 800aa90:	f7f5 fd2a 	bl	80004e8 <__aeabi_dmul>
 800aa94:	a328      	add	r3, pc, #160	; (adr r3, 800ab38 <__ieee754_asin+0x308>)
 800aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9a:	f7f5 fb6f 	bl	800017c <__adddf3>
 800aa9e:	4632      	mov	r2, r6
 800aaa0:	463b      	mov	r3, r7
 800aaa2:	f7f5 fd21 	bl	80004e8 <__aeabi_dmul>
 800aaa6:	a326      	add	r3, pc, #152	; (adr r3, 800ab40 <__ieee754_asin+0x310>)
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	f7f5 fb64 	bl	8000178 <__aeabi_dsub>
 800aab0:	4632      	mov	r2, r6
 800aab2:	463b      	mov	r3, r7
 800aab4:	f7f5 fd18 	bl	80004e8 <__aeabi_dmul>
 800aab8:	2200      	movs	r2, #0
 800aaba:	4b25      	ldr	r3, [pc, #148]	; (800ab50 <__ieee754_asin+0x320>)
 800aabc:	f7f5 fb5e 	bl	800017c <__adddf3>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4640      	mov	r0, r8
 800aac6:	4649      	mov	r1, r9
 800aac8:	f7f5 fe38 	bl	800073c <__aeabi_ddiv>
 800aacc:	4622      	mov	r2, r4
 800aace:	462b      	mov	r3, r5
 800aad0:	f7f5 fd0a 	bl	80004e8 <__aeabi_dmul>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	4620      	mov	r0, r4
 800aada:	4629      	mov	r1, r5
 800aadc:	e6cc      	b.n	800a878 <__ieee754_asin+0x48>
 800aade:	bf00      	nop
 800aae0:	54442d18 	.word	0x54442d18
 800aae4:	3ff921fb 	.word	0x3ff921fb
 800aae8:	33145c07 	.word	0x33145c07
 800aaec:	3c91a626 	.word	0x3c91a626
 800aaf0:	8800759c 	.word	0x8800759c
 800aaf4:	7e37e43c 	.word	0x7e37e43c
 800aaf8:	0dfdf709 	.word	0x0dfdf709
 800aafc:	3f023de1 	.word	0x3f023de1
 800ab00:	7501b288 	.word	0x7501b288
 800ab04:	3f49efe0 	.word	0x3f49efe0
 800ab08:	b5688f3b 	.word	0xb5688f3b
 800ab0c:	3fa48228 	.word	0x3fa48228
 800ab10:	0e884455 	.word	0x0e884455
 800ab14:	3fc9c155 	.word	0x3fc9c155
 800ab18:	03eb6f7d 	.word	0x03eb6f7d
 800ab1c:	3fd4d612 	.word	0x3fd4d612
 800ab20:	55555555 	.word	0x55555555
 800ab24:	3fc55555 	.word	0x3fc55555
 800ab28:	b12e9282 	.word	0xb12e9282
 800ab2c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ab30:	1b8d0159 	.word	0x1b8d0159
 800ab34:	3fe6066c 	.word	0x3fe6066c
 800ab38:	9c598ac8 	.word	0x9c598ac8
 800ab3c:	40002ae5 	.word	0x40002ae5
 800ab40:	1c8a2d4b 	.word	0x1c8a2d4b
 800ab44:	40033a27 	.word	0x40033a27
 800ab48:	3fefffff 	.word	0x3fefffff
 800ab4c:	3fdfffff 	.word	0x3fdfffff
 800ab50:	3ff00000 	.word	0x3ff00000
 800ab54:	3fe00000 	.word	0x3fe00000
 800ab58:	3fef3332 	.word	0x3fef3332
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	460f      	mov	r7, r1
 800ab62:	f7f5 fb0b 	bl	800017c <__adddf3>
 800ab66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab6e:	4640      	mov	r0, r8
 800ab70:	4649      	mov	r1, r9
 800ab72:	f7f5 fde3 	bl	800073c <__aeabi_ddiv>
 800ab76:	4602      	mov	r2, r0
 800ab78:	460b      	mov	r3, r1
 800ab7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab7e:	f7f5 fcb3 	bl	80004e8 <__aeabi_dmul>
 800ab82:	2600      	movs	r6, #0
 800ab84:	4680      	mov	r8, r0
 800ab86:	4689      	mov	r9, r1
 800ab88:	4632      	mov	r2, r6
 800ab8a:	465b      	mov	r3, fp
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	4659      	mov	r1, fp
 800ab90:	f7f5 fcaa 	bl	80004e8 <__aeabi_dmul>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4620      	mov	r0, r4
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	f7f5 faec 	bl	8000178 <__aeabi_dsub>
 800aba0:	4632      	mov	r2, r6
 800aba2:	4604      	mov	r4, r0
 800aba4:	460d      	mov	r5, r1
 800aba6:	465b      	mov	r3, fp
 800aba8:	4650      	mov	r0, sl
 800abaa:	4659      	mov	r1, fp
 800abac:	f7f5 fae6 	bl	800017c <__adddf3>
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	4620      	mov	r0, r4
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f5 fdc0 	bl	800073c <__aeabi_ddiv>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	f7f5 fadc 	bl	800017c <__adddf3>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	a113      	add	r1, pc, #76	; (adr r1, 800ac18 <__ieee754_asin+0x3e8>)
 800abca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abce:	f7f5 fad3 	bl	8000178 <__aeabi_dsub>
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	4640      	mov	r0, r8
 800abd8:	4649      	mov	r1, r9
 800abda:	f7f5 facd 	bl	8000178 <__aeabi_dsub>
 800abde:	4632      	mov	r2, r6
 800abe0:	4604      	mov	r4, r0
 800abe2:	460d      	mov	r5, r1
 800abe4:	465b      	mov	r3, fp
 800abe6:	4630      	mov	r0, r6
 800abe8:	4639      	mov	r1, r7
 800abea:	f7f5 fac7 	bl	800017c <__adddf3>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	a10b      	add	r1, pc, #44	; (adr r1, 800ac20 <__ieee754_asin+0x3f0>)
 800abf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abf8:	f7f5 fabe 	bl	8000178 <__aeabi_dsub>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4620      	mov	r0, r4
 800ac02:	4629      	mov	r1, r5
 800ac04:	f7f5 fab8 	bl	8000178 <__aeabi_dsub>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	a104      	add	r1, pc, #16	; (adr r1, 800ac20 <__ieee754_asin+0x3f0>)
 800ac0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac12:	e6e7      	b.n	800a9e4 <__ieee754_asin+0x1b4>
 800ac14:	f3af 8000 	nop.w
 800ac18:	33145c07 	.word	0x33145c07
 800ac1c:	3c91a626 	.word	0x3c91a626
 800ac20:	54442d18 	.word	0x54442d18
 800ac24:	3fe921fb 	.word	0x3fe921fb

0800ac28 <__ieee754_log>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ac30:	b087      	sub	sp, #28
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	460d      	mov	r5, r1
 800ac38:	da24      	bge.n	800ac84 <__ieee754_log+0x5c>
 800ac3a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800ac3e:	4304      	orrs	r4, r0
 800ac40:	d108      	bne.n	800ac54 <__ieee754_log+0x2c>
 800ac42:	2200      	movs	r2, #0
 800ac44:	2300      	movs	r3, #0
 800ac46:	2000      	movs	r0, #0
 800ac48:	49cb      	ldr	r1, [pc, #812]	; (800af78 <__ieee754_log+0x350>)
 800ac4a:	f7f5 fd77 	bl	800073c <__aeabi_ddiv>
 800ac4e:	b007      	add	sp, #28
 800ac50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac54:	2900      	cmp	r1, #0
 800ac56:	da04      	bge.n	800ac62 <__ieee754_log+0x3a>
 800ac58:	f7f5 fa8e 	bl	8000178 <__aeabi_dsub>
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e7f3      	b.n	800ac4a <__ieee754_log+0x22>
 800ac62:	2200      	movs	r2, #0
 800ac64:	4bc5      	ldr	r3, [pc, #788]	; (800af7c <__ieee754_log+0x354>)
 800ac66:	f7f5 fc3f 	bl	80004e8 <__aeabi_dmul>
 800ac6a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	460d      	mov	r5, r1
 800ac74:	49c2      	ldr	r1, [pc, #776]	; (800af80 <__ieee754_log+0x358>)
 800ac76:	428d      	cmp	r5, r1
 800ac78:	dd06      	ble.n	800ac88 <__ieee754_log+0x60>
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	f7f5 fa7d 	bl	800017c <__adddf3>
 800ac82:	e7e4      	b.n	800ac4e <__ieee754_log+0x26>
 800ac84:	2600      	movs	r6, #0
 800ac86:	e7f5      	b.n	800ac74 <__ieee754_log+0x4c>
 800ac88:	152c      	asrs	r4, r5, #20
 800ac8a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ac8e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800ac92:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ac96:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800ac9a:	4426      	add	r6, r4
 800ac9c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800aca0:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800aca4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800aca8:	ea41 0305 	orr.w	r3, r1, r5
 800acac:	4610      	mov	r0, r2
 800acae:	4619      	mov	r1, r3
 800acb0:	2200      	movs	r2, #0
 800acb2:	4bb4      	ldr	r3, [pc, #720]	; (800af84 <__ieee754_log+0x35c>)
 800acb4:	f7f5 fa60 	bl	8000178 <__aeabi_dsub>
 800acb8:	1cab      	adds	r3, r5, #2
 800acba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800acc4:	4682      	mov	sl, r0
 800acc6:	468b      	mov	fp, r1
 800acc8:	f04f 0200 	mov.w	r2, #0
 800accc:	dc53      	bgt.n	800ad76 <__ieee754_log+0x14e>
 800acce:	2300      	movs	r3, #0
 800acd0:	f7f5 fe72 	bl	80009b8 <__aeabi_dcmpeq>
 800acd4:	b1d0      	cbz	r0, 800ad0c <__ieee754_log+0xe4>
 800acd6:	2c00      	cmp	r4, #0
 800acd8:	f000 8120 	beq.w	800af1c <__ieee754_log+0x2f4>
 800acdc:	4620      	mov	r0, r4
 800acde:	f7f5 fb99 	bl	8000414 <__aeabi_i2d>
 800ace2:	a391      	add	r3, pc, #580	; (adr r3, 800af28 <__ieee754_log+0x300>)
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	4606      	mov	r6, r0
 800acea:	460f      	mov	r7, r1
 800acec:	f7f5 fbfc 	bl	80004e8 <__aeabi_dmul>
 800acf0:	a38f      	add	r3, pc, #572	; (adr r3, 800af30 <__ieee754_log+0x308>)
 800acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf6:	4604      	mov	r4, r0
 800acf8:	460d      	mov	r5, r1
 800acfa:	4630      	mov	r0, r6
 800acfc:	4639      	mov	r1, r7
 800acfe:	f7f5 fbf3 	bl	80004e8 <__aeabi_dmul>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4620      	mov	r0, r4
 800ad08:	4629      	mov	r1, r5
 800ad0a:	e7b8      	b.n	800ac7e <__ieee754_log+0x56>
 800ad0c:	a38a      	add	r3, pc, #552	; (adr r3, 800af38 <__ieee754_log+0x310>)
 800ad0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad12:	4650      	mov	r0, sl
 800ad14:	4659      	mov	r1, fp
 800ad16:	f7f5 fbe7 	bl	80004e8 <__aeabi_dmul>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	2000      	movs	r0, #0
 800ad20:	4999      	ldr	r1, [pc, #612]	; (800af88 <__ieee754_log+0x360>)
 800ad22:	f7f5 fa29 	bl	8000178 <__aeabi_dsub>
 800ad26:	4652      	mov	r2, sl
 800ad28:	4606      	mov	r6, r0
 800ad2a:	460f      	mov	r7, r1
 800ad2c:	465b      	mov	r3, fp
 800ad2e:	4650      	mov	r0, sl
 800ad30:	4659      	mov	r1, fp
 800ad32:	f7f5 fbd9 	bl	80004e8 <__aeabi_dmul>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	f7f5 fbd3 	bl	80004e8 <__aeabi_dmul>
 800ad42:	4606      	mov	r6, r0
 800ad44:	460f      	mov	r7, r1
 800ad46:	b914      	cbnz	r4, 800ad4e <__ieee754_log+0x126>
 800ad48:	4632      	mov	r2, r6
 800ad4a:	463b      	mov	r3, r7
 800ad4c:	e0a0      	b.n	800ae90 <__ieee754_log+0x268>
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f7f5 fb60 	bl	8000414 <__aeabi_i2d>
 800ad54:	a374      	add	r3, pc, #464	; (adr r3, 800af28 <__ieee754_log+0x300>)
 800ad56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5a:	4680      	mov	r8, r0
 800ad5c:	4689      	mov	r9, r1
 800ad5e:	f7f5 fbc3 	bl	80004e8 <__aeabi_dmul>
 800ad62:	a373      	add	r3, pc, #460	; (adr r3, 800af30 <__ieee754_log+0x308>)
 800ad64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad68:	4604      	mov	r4, r0
 800ad6a:	460d      	mov	r5, r1
 800ad6c:	4640      	mov	r0, r8
 800ad6e:	4649      	mov	r1, r9
 800ad70:	f7f5 fbba 	bl	80004e8 <__aeabi_dmul>
 800ad74:	e0a5      	b.n	800aec2 <__ieee754_log+0x29a>
 800ad76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad7a:	f7f5 f9ff 	bl	800017c <__adddf3>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4650      	mov	r0, sl
 800ad84:	4659      	mov	r1, fp
 800ad86:	f7f5 fcd9 	bl	800073c <__aeabi_ddiv>
 800ad8a:	e9cd 0100 	strd	r0, r1, [sp]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f7f5 fb40 	bl	8000414 <__aeabi_i2d>
 800ad94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	4619      	mov	r1, r3
 800ada0:	f7f5 fba2 	bl	80004e8 <__aeabi_dmul>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adac:	f7f5 fb9c 	bl	80004e8 <__aeabi_dmul>
 800adb0:	a363      	add	r3, pc, #396	; (adr r3, 800af40 <__ieee754_log+0x318>)
 800adb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb6:	4680      	mov	r8, r0
 800adb8:	4689      	mov	r9, r1
 800adba:	f7f5 fb95 	bl	80004e8 <__aeabi_dmul>
 800adbe:	a362      	add	r3, pc, #392	; (adr r3, 800af48 <__ieee754_log+0x320>)
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	f7f5 f9da 	bl	800017c <__adddf3>
 800adc8:	4642      	mov	r2, r8
 800adca:	464b      	mov	r3, r9
 800adcc:	f7f5 fb8c 	bl	80004e8 <__aeabi_dmul>
 800add0:	a35f      	add	r3, pc, #380	; (adr r3, 800af50 <__ieee754_log+0x328>)
 800add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add6:	f7f5 f9d1 	bl	800017c <__adddf3>
 800adda:	4642      	mov	r2, r8
 800addc:	464b      	mov	r3, r9
 800adde:	f7f5 fb83 	bl	80004e8 <__aeabi_dmul>
 800ade2:	a35d      	add	r3, pc, #372	; (adr r3, 800af58 <__ieee754_log+0x330>)
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	f7f5 f9c8 	bl	800017c <__adddf3>
 800adec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adf0:	f7f5 fb7a 	bl	80004e8 <__aeabi_dmul>
 800adf4:	a35a      	add	r3, pc, #360	; (adr r3, 800af60 <__ieee754_log+0x338>)
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adfe:	4640      	mov	r0, r8
 800ae00:	4649      	mov	r1, r9
 800ae02:	f7f5 fb71 	bl	80004e8 <__aeabi_dmul>
 800ae06:	a358      	add	r3, pc, #352	; (adr r3, 800af68 <__ieee754_log+0x340>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	f7f5 f9b6 	bl	800017c <__adddf3>
 800ae10:	4642      	mov	r2, r8
 800ae12:	464b      	mov	r3, r9
 800ae14:	f7f5 fb68 	bl	80004e8 <__aeabi_dmul>
 800ae18:	a355      	add	r3, pc, #340	; (adr r3, 800af70 <__ieee754_log+0x348>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	f7f5 f9ad 	bl	800017c <__adddf3>
 800ae22:	4642      	mov	r2, r8
 800ae24:	464b      	mov	r3, r9
 800ae26:	f7f5 fb5f 	bl	80004e8 <__aeabi_dmul>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae32:	f7f5 f9a3 	bl	800017c <__adddf3>
 800ae36:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800ae3a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ae3e:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800ae42:	3551      	adds	r5, #81	; 0x51
 800ae44:	4335      	orrs	r5, r6
 800ae46:	2d00      	cmp	r5, #0
 800ae48:	4680      	mov	r8, r0
 800ae4a:	4689      	mov	r9, r1
 800ae4c:	dd48      	ble.n	800aee0 <__ieee754_log+0x2b8>
 800ae4e:	2200      	movs	r2, #0
 800ae50:	4b4d      	ldr	r3, [pc, #308]	; (800af88 <__ieee754_log+0x360>)
 800ae52:	4650      	mov	r0, sl
 800ae54:	4659      	mov	r1, fp
 800ae56:	f7f5 fb47 	bl	80004e8 <__aeabi_dmul>
 800ae5a:	4652      	mov	r2, sl
 800ae5c:	465b      	mov	r3, fp
 800ae5e:	f7f5 fb43 	bl	80004e8 <__aeabi_dmul>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4606      	mov	r6, r0
 800ae68:	460f      	mov	r7, r1
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	f7f5 f985 	bl	800017c <__adddf3>
 800ae72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae76:	f7f5 fb37 	bl	80004e8 <__aeabi_dmul>
 800ae7a:	4680      	mov	r8, r0
 800ae7c:	4689      	mov	r9, r1
 800ae7e:	b964      	cbnz	r4, 800ae9a <__ieee754_log+0x272>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4630      	mov	r0, r6
 800ae86:	4639      	mov	r1, r7
 800ae88:	f7f5 f976 	bl	8000178 <__aeabi_dsub>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	4650      	mov	r0, sl
 800ae92:	4659      	mov	r1, fp
 800ae94:	f7f5 f970 	bl	8000178 <__aeabi_dsub>
 800ae98:	e6d9      	b.n	800ac4e <__ieee754_log+0x26>
 800ae9a:	a323      	add	r3, pc, #140	; (adr r3, 800af28 <__ieee754_log+0x300>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aea4:	f7f5 fb20 	bl	80004e8 <__aeabi_dmul>
 800aea8:	a321      	add	r3, pc, #132	; (adr r3, 800af30 <__ieee754_log+0x308>)
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	4604      	mov	r4, r0
 800aeb0:	460d      	mov	r5, r1
 800aeb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeb6:	f7f5 fb17 	bl	80004e8 <__aeabi_dmul>
 800aeba:	4642      	mov	r2, r8
 800aebc:	464b      	mov	r3, r9
 800aebe:	f7f5 f95d 	bl	800017c <__adddf3>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4630      	mov	r0, r6
 800aec8:	4639      	mov	r1, r7
 800aeca:	f7f5 f955 	bl	8000178 <__aeabi_dsub>
 800aece:	4652      	mov	r2, sl
 800aed0:	465b      	mov	r3, fp
 800aed2:	f7f5 f951 	bl	8000178 <__aeabi_dsub>
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	4620      	mov	r0, r4
 800aedc:	4629      	mov	r1, r5
 800aede:	e7d9      	b.n	800ae94 <__ieee754_log+0x26c>
 800aee0:	4602      	mov	r2, r0
 800aee2:	460b      	mov	r3, r1
 800aee4:	4650      	mov	r0, sl
 800aee6:	4659      	mov	r1, fp
 800aee8:	f7f5 f946 	bl	8000178 <__aeabi_dsub>
 800aeec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aef0:	f7f5 fafa 	bl	80004e8 <__aeabi_dmul>
 800aef4:	4606      	mov	r6, r0
 800aef6:	460f      	mov	r7, r1
 800aef8:	2c00      	cmp	r4, #0
 800aefa:	f43f af25 	beq.w	800ad48 <__ieee754_log+0x120>
 800aefe:	a30a      	add	r3, pc, #40	; (adr r3, 800af28 <__ieee754_log+0x300>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af08:	f7f5 faee 	bl	80004e8 <__aeabi_dmul>
 800af0c:	a308      	add	r3, pc, #32	; (adr r3, 800af30 <__ieee754_log+0x308>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	4604      	mov	r4, r0
 800af14:	460d      	mov	r5, r1
 800af16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af1a:	e729      	b.n	800ad70 <__ieee754_log+0x148>
 800af1c:	2000      	movs	r0, #0
 800af1e:	2100      	movs	r1, #0
 800af20:	e695      	b.n	800ac4e <__ieee754_log+0x26>
 800af22:	bf00      	nop
 800af24:	f3af 8000 	nop.w
 800af28:	fee00000 	.word	0xfee00000
 800af2c:	3fe62e42 	.word	0x3fe62e42
 800af30:	35793c76 	.word	0x35793c76
 800af34:	3dea39ef 	.word	0x3dea39ef
 800af38:	55555555 	.word	0x55555555
 800af3c:	3fd55555 	.word	0x3fd55555
 800af40:	df3e5244 	.word	0xdf3e5244
 800af44:	3fc2f112 	.word	0x3fc2f112
 800af48:	96cb03de 	.word	0x96cb03de
 800af4c:	3fc74664 	.word	0x3fc74664
 800af50:	94229359 	.word	0x94229359
 800af54:	3fd24924 	.word	0x3fd24924
 800af58:	55555593 	.word	0x55555593
 800af5c:	3fe55555 	.word	0x3fe55555
 800af60:	d078c69f 	.word	0xd078c69f
 800af64:	3fc39a09 	.word	0x3fc39a09
 800af68:	1d8e78af 	.word	0x1d8e78af
 800af6c:	3fcc71c5 	.word	0x3fcc71c5
 800af70:	9997fa04 	.word	0x9997fa04
 800af74:	3fd99999 	.word	0x3fd99999
 800af78:	c3500000 	.word	0xc3500000
 800af7c:	43500000 	.word	0x43500000
 800af80:	7fefffff 	.word	0x7fefffff
 800af84:	3ff00000 	.word	0x3ff00000
 800af88:	3fe00000 	.word	0x3fe00000
 800af8c:	00000000 	.word	0x00000000

0800af90 <__ieee754_pow>:
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	b091      	sub	sp, #68	; 0x44
 800af96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af9a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800af9e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800afa2:	ea55 0302 	orrs.w	r3, r5, r2
 800afa6:	4607      	mov	r7, r0
 800afa8:	4688      	mov	r8, r1
 800afaa:	f000 84b7 	beq.w	800b91c <__ieee754_pow+0x98c>
 800afae:	4b80      	ldr	r3, [pc, #512]	; (800b1b0 <__ieee754_pow+0x220>)
 800afb0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800afb4:	429c      	cmp	r4, r3
 800afb6:	4689      	mov	r9, r1
 800afb8:	4682      	mov	sl, r0
 800afba:	dc09      	bgt.n	800afd0 <__ieee754_pow+0x40>
 800afbc:	d103      	bne.n	800afc6 <__ieee754_pow+0x36>
 800afbe:	b938      	cbnz	r0, 800afd0 <__ieee754_pow+0x40>
 800afc0:	42a5      	cmp	r5, r4
 800afc2:	dc0d      	bgt.n	800afe0 <__ieee754_pow+0x50>
 800afc4:	e001      	b.n	800afca <__ieee754_pow+0x3a>
 800afc6:	429d      	cmp	r5, r3
 800afc8:	dc02      	bgt.n	800afd0 <__ieee754_pow+0x40>
 800afca:	429d      	cmp	r5, r3
 800afcc:	d10e      	bne.n	800afec <__ieee754_pow+0x5c>
 800afce:	b16a      	cbz	r2, 800afec <__ieee754_pow+0x5c>
 800afd0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800afd4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800afd8:	ea54 030a 	orrs.w	r3, r4, sl
 800afdc:	f000 849e 	beq.w	800b91c <__ieee754_pow+0x98c>
 800afe0:	4874      	ldr	r0, [pc, #464]	; (800b1b4 <__ieee754_pow+0x224>)
 800afe2:	b011      	add	sp, #68	; 0x44
 800afe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe8:	f001 be88 	b.w	800ccfc <nan>
 800afec:	f1b9 0f00 	cmp.w	r9, #0
 800aff0:	da53      	bge.n	800b09a <__ieee754_pow+0x10a>
 800aff2:	4b71      	ldr	r3, [pc, #452]	; (800b1b8 <__ieee754_pow+0x228>)
 800aff4:	429d      	cmp	r5, r3
 800aff6:	dc4e      	bgt.n	800b096 <__ieee754_pow+0x106>
 800aff8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800affc:	429d      	cmp	r5, r3
 800affe:	dd4c      	ble.n	800b09a <__ieee754_pow+0x10a>
 800b000:	152b      	asrs	r3, r5, #20
 800b002:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b006:	2b14      	cmp	r3, #20
 800b008:	dd28      	ble.n	800b05c <__ieee754_pow+0xcc>
 800b00a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b00e:	fa22 f103 	lsr.w	r1, r2, r3
 800b012:	fa01 f303 	lsl.w	r3, r1, r3
 800b016:	4293      	cmp	r3, r2
 800b018:	d13f      	bne.n	800b09a <__ieee754_pow+0x10a>
 800b01a:	f001 0101 	and.w	r1, r1, #1
 800b01e:	f1c1 0302 	rsb	r3, r1, #2
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	2a00      	cmp	r2, #0
 800b026:	d15c      	bne.n	800b0e2 <__ieee754_pow+0x152>
 800b028:	4b61      	ldr	r3, [pc, #388]	; (800b1b0 <__ieee754_pow+0x220>)
 800b02a:	429d      	cmp	r5, r3
 800b02c:	d126      	bne.n	800b07c <__ieee754_pow+0xec>
 800b02e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b032:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b036:	ea53 030a 	orrs.w	r3, r3, sl
 800b03a:	f000 846f 	beq.w	800b91c <__ieee754_pow+0x98c>
 800b03e:	4b5f      	ldr	r3, [pc, #380]	; (800b1bc <__ieee754_pow+0x22c>)
 800b040:	429c      	cmp	r4, r3
 800b042:	dd2c      	ble.n	800b09e <__ieee754_pow+0x10e>
 800b044:	2e00      	cmp	r6, #0
 800b046:	f280 846f 	bge.w	800b928 <__ieee754_pow+0x998>
 800b04a:	f04f 0b00 	mov.w	fp, #0
 800b04e:	f04f 0c00 	mov.w	ip, #0
 800b052:	4658      	mov	r0, fp
 800b054:	4661      	mov	r1, ip
 800b056:	b011      	add	sp, #68	; 0x44
 800b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05c:	2a00      	cmp	r2, #0
 800b05e:	d13e      	bne.n	800b0de <__ieee754_pow+0x14e>
 800b060:	f1c3 0314 	rsb	r3, r3, #20
 800b064:	fa45 f103 	asr.w	r1, r5, r3
 800b068:	fa01 f303 	lsl.w	r3, r1, r3
 800b06c:	42ab      	cmp	r3, r5
 800b06e:	f040 8463 	bne.w	800b938 <__ieee754_pow+0x9a8>
 800b072:	f001 0101 	and.w	r1, r1, #1
 800b076:	f1c1 0302 	rsb	r3, r1, #2
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	4b50      	ldr	r3, [pc, #320]	; (800b1c0 <__ieee754_pow+0x230>)
 800b07e:	429d      	cmp	r5, r3
 800b080:	d114      	bne.n	800b0ac <__ieee754_pow+0x11c>
 800b082:	2e00      	cmp	r6, #0
 800b084:	f280 8454 	bge.w	800b930 <__ieee754_pow+0x9a0>
 800b088:	463a      	mov	r2, r7
 800b08a:	4643      	mov	r3, r8
 800b08c:	2000      	movs	r0, #0
 800b08e:	494c      	ldr	r1, [pc, #304]	; (800b1c0 <__ieee754_pow+0x230>)
 800b090:	f7f5 fb54 	bl	800073c <__aeabi_ddiv>
 800b094:	e013      	b.n	800b0be <__ieee754_pow+0x12e>
 800b096:	2302      	movs	r3, #2
 800b098:	e7c3      	b.n	800b022 <__ieee754_pow+0x92>
 800b09a:	2300      	movs	r3, #0
 800b09c:	e7c1      	b.n	800b022 <__ieee754_pow+0x92>
 800b09e:	2e00      	cmp	r6, #0
 800b0a0:	dad3      	bge.n	800b04a <__ieee754_pow+0xba>
 800b0a2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b0a6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b0aa:	e7d2      	b.n	800b052 <__ieee754_pow+0xc2>
 800b0ac:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800b0b0:	d108      	bne.n	800b0c4 <__ieee754_pow+0x134>
 800b0b2:	463a      	mov	r2, r7
 800b0b4:	4643      	mov	r3, r8
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	4641      	mov	r1, r8
 800b0ba:	f7f5 fa15 	bl	80004e8 <__aeabi_dmul>
 800b0be:	4683      	mov	fp, r0
 800b0c0:	468c      	mov	ip, r1
 800b0c2:	e7c6      	b.n	800b052 <__ieee754_pow+0xc2>
 800b0c4:	4b3f      	ldr	r3, [pc, #252]	; (800b1c4 <__ieee754_pow+0x234>)
 800b0c6:	429e      	cmp	r6, r3
 800b0c8:	d10b      	bne.n	800b0e2 <__ieee754_pow+0x152>
 800b0ca:	f1b9 0f00 	cmp.w	r9, #0
 800b0ce:	db08      	blt.n	800b0e2 <__ieee754_pow+0x152>
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	4641      	mov	r1, r8
 800b0d4:	b011      	add	sp, #68	; 0x44
 800b0d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0da:	f000 be55 	b.w	800bd88 <__ieee754_sqrt>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	4638      	mov	r0, r7
 800b0e4:	4641      	mov	r1, r8
 800b0e6:	f7ff f8bb 	bl	800a260 <fabs>
 800b0ea:	4683      	mov	fp, r0
 800b0ec:	468c      	mov	ip, r1
 800b0ee:	f1ba 0f00 	cmp.w	sl, #0
 800b0f2:	d12b      	bne.n	800b14c <__ieee754_pow+0x1bc>
 800b0f4:	b124      	cbz	r4, 800b100 <__ieee754_pow+0x170>
 800b0f6:	4b32      	ldr	r3, [pc, #200]	; (800b1c0 <__ieee754_pow+0x230>)
 800b0f8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d125      	bne.n	800b14c <__ieee754_pow+0x1bc>
 800b100:	2e00      	cmp	r6, #0
 800b102:	da07      	bge.n	800b114 <__ieee754_pow+0x184>
 800b104:	465a      	mov	r2, fp
 800b106:	4663      	mov	r3, ip
 800b108:	2000      	movs	r0, #0
 800b10a:	492d      	ldr	r1, [pc, #180]	; (800b1c0 <__ieee754_pow+0x230>)
 800b10c:	f7f5 fb16 	bl	800073c <__aeabi_ddiv>
 800b110:	4683      	mov	fp, r0
 800b112:	468c      	mov	ip, r1
 800b114:	f1b9 0f00 	cmp.w	r9, #0
 800b118:	da9b      	bge.n	800b052 <__ieee754_pow+0xc2>
 800b11a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b11e:	9b00      	ldr	r3, [sp, #0]
 800b120:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b124:	4323      	orrs	r3, r4
 800b126:	d108      	bne.n	800b13a <__ieee754_pow+0x1aa>
 800b128:	465a      	mov	r2, fp
 800b12a:	4663      	mov	r3, ip
 800b12c:	4658      	mov	r0, fp
 800b12e:	4661      	mov	r1, ip
 800b130:	f7f5 f822 	bl	8000178 <__aeabi_dsub>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	e7aa      	b.n	800b090 <__ieee754_pow+0x100>
 800b13a:	9b00      	ldr	r3, [sp, #0]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d188      	bne.n	800b052 <__ieee754_pow+0xc2>
 800b140:	4658      	mov	r0, fp
 800b142:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b146:	4683      	mov	fp, r0
 800b148:	469c      	mov	ip, r3
 800b14a:	e782      	b.n	800b052 <__ieee754_pow+0xc2>
 800b14c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800b150:	f109 33ff 	add.w	r3, r9, #4294967295
 800b154:	930d      	str	r3, [sp, #52]	; 0x34
 800b156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b158:	9b00      	ldr	r3, [sp, #0]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	d104      	bne.n	800b168 <__ieee754_pow+0x1d8>
 800b15e:	463a      	mov	r2, r7
 800b160:	4643      	mov	r3, r8
 800b162:	4638      	mov	r0, r7
 800b164:	4641      	mov	r1, r8
 800b166:	e7e3      	b.n	800b130 <__ieee754_pow+0x1a0>
 800b168:	4b17      	ldr	r3, [pc, #92]	; (800b1c8 <__ieee754_pow+0x238>)
 800b16a:	429d      	cmp	r5, r3
 800b16c:	f340 80fe 	ble.w	800b36c <__ieee754_pow+0x3dc>
 800b170:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b174:	429d      	cmp	r5, r3
 800b176:	dd0b      	ble.n	800b190 <__ieee754_pow+0x200>
 800b178:	4b10      	ldr	r3, [pc, #64]	; (800b1bc <__ieee754_pow+0x22c>)
 800b17a:	429c      	cmp	r4, r3
 800b17c:	dc0e      	bgt.n	800b19c <__ieee754_pow+0x20c>
 800b17e:	2e00      	cmp	r6, #0
 800b180:	f6bf af63 	bge.w	800b04a <__ieee754_pow+0xba>
 800b184:	a308      	add	r3, pc, #32	; (adr r3, 800b1a8 <__ieee754_pow+0x218>)
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	4610      	mov	r0, r2
 800b18c:	4619      	mov	r1, r3
 800b18e:	e794      	b.n	800b0ba <__ieee754_pow+0x12a>
 800b190:	4b0e      	ldr	r3, [pc, #56]	; (800b1cc <__ieee754_pow+0x23c>)
 800b192:	429c      	cmp	r4, r3
 800b194:	ddf3      	ble.n	800b17e <__ieee754_pow+0x1ee>
 800b196:	4b0a      	ldr	r3, [pc, #40]	; (800b1c0 <__ieee754_pow+0x230>)
 800b198:	429c      	cmp	r4, r3
 800b19a:	dd19      	ble.n	800b1d0 <__ieee754_pow+0x240>
 800b19c:	2e00      	cmp	r6, #0
 800b19e:	dcf1      	bgt.n	800b184 <__ieee754_pow+0x1f4>
 800b1a0:	e753      	b.n	800b04a <__ieee754_pow+0xba>
 800b1a2:	bf00      	nop
 800b1a4:	f3af 8000 	nop.w
 800b1a8:	8800759c 	.word	0x8800759c
 800b1ac:	7e37e43c 	.word	0x7e37e43c
 800b1b0:	7ff00000 	.word	0x7ff00000
 800b1b4:	0800eaf8 	.word	0x0800eaf8
 800b1b8:	433fffff 	.word	0x433fffff
 800b1bc:	3fefffff 	.word	0x3fefffff
 800b1c0:	3ff00000 	.word	0x3ff00000
 800b1c4:	3fe00000 	.word	0x3fe00000
 800b1c8:	41e00000 	.word	0x41e00000
 800b1cc:	3feffffe 	.word	0x3feffffe
 800b1d0:	4661      	mov	r1, ip
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4b60      	ldr	r3, [pc, #384]	; (800b358 <__ieee754_pow+0x3c8>)
 800b1d6:	4658      	mov	r0, fp
 800b1d8:	f7f4 ffce 	bl	8000178 <__aeabi_dsub>
 800b1dc:	a354      	add	r3, pc, #336	; (adr r3, 800b330 <__ieee754_pow+0x3a0>)
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	460d      	mov	r5, r1
 800b1e6:	f7f5 f97f 	bl	80004e8 <__aeabi_dmul>
 800b1ea:	a353      	add	r3, pc, #332	; (adr r3, 800b338 <__ieee754_pow+0x3a8>)
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	460f      	mov	r7, r1
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 f976 	bl	80004e8 <__aeabi_dmul>
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4682      	mov	sl, r0
 800b200:	468b      	mov	fp, r1
 800b202:	4b56      	ldr	r3, [pc, #344]	; (800b35c <__ieee754_pow+0x3cc>)
 800b204:	4620      	mov	r0, r4
 800b206:	4629      	mov	r1, r5
 800b208:	f7f5 f96e 	bl	80004e8 <__aeabi_dmul>
 800b20c:	4602      	mov	r2, r0
 800b20e:	460b      	mov	r3, r1
 800b210:	a14b      	add	r1, pc, #300	; (adr r1, 800b340 <__ieee754_pow+0x3b0>)
 800b212:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b216:	f7f4 ffaf 	bl	8000178 <__aeabi_dsub>
 800b21a:	4622      	mov	r2, r4
 800b21c:	462b      	mov	r3, r5
 800b21e:	f7f5 f963 	bl	80004e8 <__aeabi_dmul>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	2000      	movs	r0, #0
 800b228:	494d      	ldr	r1, [pc, #308]	; (800b360 <__ieee754_pow+0x3d0>)
 800b22a:	f7f4 ffa5 	bl	8000178 <__aeabi_dsub>
 800b22e:	4622      	mov	r2, r4
 800b230:	462b      	mov	r3, r5
 800b232:	4680      	mov	r8, r0
 800b234:	4689      	mov	r9, r1
 800b236:	4620      	mov	r0, r4
 800b238:	4629      	mov	r1, r5
 800b23a:	f7f5 f955 	bl	80004e8 <__aeabi_dmul>
 800b23e:	4602      	mov	r2, r0
 800b240:	460b      	mov	r3, r1
 800b242:	4640      	mov	r0, r8
 800b244:	4649      	mov	r1, r9
 800b246:	f7f5 f94f 	bl	80004e8 <__aeabi_dmul>
 800b24a:	a33f      	add	r3, pc, #252	; (adr r3, 800b348 <__ieee754_pow+0x3b8>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f7f5 f94a 	bl	80004e8 <__aeabi_dmul>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4650      	mov	r0, sl
 800b25a:	4659      	mov	r1, fp
 800b25c:	f7f4 ff8c 	bl	8000178 <__aeabi_dsub>
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	4604      	mov	r4, r0
 800b266:	460d      	mov	r5, r1
 800b268:	4630      	mov	r0, r6
 800b26a:	4639      	mov	r1, r7
 800b26c:	f7f4 ff86 	bl	800017c <__adddf3>
 800b270:	2000      	movs	r0, #0
 800b272:	468b      	mov	fp, r1
 800b274:	4682      	mov	sl, r0
 800b276:	4632      	mov	r2, r6
 800b278:	463b      	mov	r3, r7
 800b27a:	f7f4 ff7d 	bl	8000178 <__aeabi_dsub>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4620      	mov	r0, r4
 800b284:	4629      	mov	r1, r5
 800b286:	f7f4 ff77 	bl	8000178 <__aeabi_dsub>
 800b28a:	9b00      	ldr	r3, [sp, #0]
 800b28c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b28e:	3b01      	subs	r3, #1
 800b290:	4313      	orrs	r3, r2
 800b292:	f04f 0300 	mov.w	r3, #0
 800b296:	bf0c      	ite	eq
 800b298:	4c32      	ldreq	r4, [pc, #200]	; (800b364 <__ieee754_pow+0x3d4>)
 800b29a:	4c2f      	ldrne	r4, [pc, #188]	; (800b358 <__ieee754_pow+0x3c8>)
 800b29c:	4606      	mov	r6, r0
 800b29e:	e9cd 3400 	strd	r3, r4, [sp]
 800b2a2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2a6:	2400      	movs	r4, #0
 800b2a8:	460f      	mov	r7, r1
 800b2aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	462b      	mov	r3, r5
 800b2b2:	f7f4 ff61 	bl	8000178 <__aeabi_dsub>
 800b2b6:	4652      	mov	r2, sl
 800b2b8:	465b      	mov	r3, fp
 800b2ba:	f7f5 f915 	bl	80004e8 <__aeabi_dmul>
 800b2be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2c2:	4680      	mov	r8, r0
 800b2c4:	4689      	mov	r9, r1
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	f7f5 f90d 	bl	80004e8 <__aeabi_dmul>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	4649      	mov	r1, r9
 800b2d6:	f7f4 ff51 	bl	800017c <__adddf3>
 800b2da:	4622      	mov	r2, r4
 800b2dc:	462b      	mov	r3, r5
 800b2de:	4680      	mov	r8, r0
 800b2e0:	4689      	mov	r9, r1
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	4659      	mov	r1, fp
 800b2e6:	f7f5 f8ff 	bl	80004e8 <__aeabi_dmul>
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	4649      	mov	r1, r9
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b2fa:	f7f4 ff3f 	bl	800017c <__adddf3>
 800b2fe:	4b1a      	ldr	r3, [pc, #104]	; (800b368 <__ieee754_pow+0x3d8>)
 800b300:	4682      	mov	sl, r0
 800b302:	4299      	cmp	r1, r3
 800b304:	460f      	mov	r7, r1
 800b306:	460e      	mov	r6, r1
 800b308:	f340 82e1 	ble.w	800b8ce <__ieee754_pow+0x93e>
 800b30c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b310:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b314:	4303      	orrs	r3, r0
 800b316:	f000 81db 	beq.w	800b6d0 <__ieee754_pow+0x740>
 800b31a:	a30d      	add	r3, pc, #52	; (adr r3, 800b350 <__ieee754_pow+0x3c0>)
 800b31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b320:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b324:	f7f5 f8e0 	bl	80004e8 <__aeabi_dmul>
 800b328:	a309      	add	r3, pc, #36	; (adr r3, 800b350 <__ieee754_pow+0x3c0>)
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	e6c4      	b.n	800b0ba <__ieee754_pow+0x12a>
 800b330:	60000000 	.word	0x60000000
 800b334:	3ff71547 	.word	0x3ff71547
 800b338:	f85ddf44 	.word	0xf85ddf44
 800b33c:	3e54ae0b 	.word	0x3e54ae0b
 800b340:	55555555 	.word	0x55555555
 800b344:	3fd55555 	.word	0x3fd55555
 800b348:	652b82fe 	.word	0x652b82fe
 800b34c:	3ff71547 	.word	0x3ff71547
 800b350:	8800759c 	.word	0x8800759c
 800b354:	7e37e43c 	.word	0x7e37e43c
 800b358:	3ff00000 	.word	0x3ff00000
 800b35c:	3fd00000 	.word	0x3fd00000
 800b360:	3fe00000 	.word	0x3fe00000
 800b364:	bff00000 	.word	0xbff00000
 800b368:	408fffff 	.word	0x408fffff
 800b36c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b370:	f04f 0200 	mov.w	r2, #0
 800b374:	da08      	bge.n	800b388 <__ieee754_pow+0x3f8>
 800b376:	4658      	mov	r0, fp
 800b378:	4bcd      	ldr	r3, [pc, #820]	; (800b6b0 <__ieee754_pow+0x720>)
 800b37a:	4661      	mov	r1, ip
 800b37c:	f7f5 f8b4 	bl	80004e8 <__aeabi_dmul>
 800b380:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b384:	4683      	mov	fp, r0
 800b386:	460c      	mov	r4, r1
 800b388:	1523      	asrs	r3, r4, #20
 800b38a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b38e:	4413      	add	r3, r2
 800b390:	930c      	str	r3, [sp, #48]	; 0x30
 800b392:	4bc8      	ldr	r3, [pc, #800]	; (800b6b4 <__ieee754_pow+0x724>)
 800b394:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b398:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b39c:	429c      	cmp	r4, r3
 800b39e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b3a2:	dd08      	ble.n	800b3b6 <__ieee754_pow+0x426>
 800b3a4:	4bc4      	ldr	r3, [pc, #784]	; (800b6b8 <__ieee754_pow+0x728>)
 800b3a6:	429c      	cmp	r4, r3
 800b3a8:	f340 815b 	ble.w	800b662 <__ieee754_pow+0x6d2>
 800b3ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	930c      	str	r3, [sp, #48]	; 0x30
 800b3b6:	f04f 0800 	mov.w	r8, #0
 800b3ba:	4658      	mov	r0, fp
 800b3bc:	4629      	mov	r1, r5
 800b3be:	4bbf      	ldr	r3, [pc, #764]	; (800b6bc <__ieee754_pow+0x72c>)
 800b3c0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800b3c4:	444b      	add	r3, r9
 800b3c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3ca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	4623      	mov	r3, r4
 800b3d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b3d6:	f7f4 fecf 	bl	8000178 <__aeabi_dsub>
 800b3da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b3de:	4606      	mov	r6, r0
 800b3e0:	460f      	mov	r7, r1
 800b3e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b3e6:	f7f4 fec9 	bl	800017c <__adddf3>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	49b3      	ldr	r1, [pc, #716]	; (800b6c0 <__ieee754_pow+0x730>)
 800b3f2:	f7f5 f9a3 	bl	800073c <__aeabi_ddiv>
 800b3f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	4630      	mov	r0, r6
 800b400:	4639      	mov	r1, r7
 800b402:	f7f5 f871 	bl	80004e8 <__aeabi_dmul>
 800b406:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b40a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b40e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b412:	2300      	movs	r3, #0
 800b414:	2200      	movs	r2, #0
 800b416:	106d      	asrs	r5, r5, #1
 800b418:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b422:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b426:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800b42a:	4650      	mov	r0, sl
 800b42c:	4659      	mov	r1, fp
 800b42e:	4614      	mov	r4, r2
 800b430:	461d      	mov	r5, r3
 800b432:	f7f5 f859 	bl	80004e8 <__aeabi_dmul>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	4630      	mov	r0, r6
 800b43c:	4639      	mov	r1, r7
 800b43e:	f7f4 fe9b 	bl	8000178 <__aeabi_dsub>
 800b442:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b446:	4606      	mov	r6, r0
 800b448:	460f      	mov	r7, r1
 800b44a:	4620      	mov	r0, r4
 800b44c:	4629      	mov	r1, r5
 800b44e:	f7f4 fe93 	bl	8000178 <__aeabi_dsub>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b45a:	f7f4 fe8d 	bl	8000178 <__aeabi_dsub>
 800b45e:	4652      	mov	r2, sl
 800b460:	465b      	mov	r3, fp
 800b462:	f7f5 f841 	bl	80004e8 <__aeabi_dmul>
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
 800b46a:	4630      	mov	r0, r6
 800b46c:	4639      	mov	r1, r7
 800b46e:	f7f4 fe83 	bl	8000178 <__aeabi_dsub>
 800b472:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b476:	f7f5 f837 	bl	80004e8 <__aeabi_dmul>
 800b47a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b47e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b482:	4610      	mov	r0, r2
 800b484:	4619      	mov	r1, r3
 800b486:	f7f5 f82f 	bl	80004e8 <__aeabi_dmul>
 800b48a:	a377      	add	r3, pc, #476	; (adr r3, 800b668 <__ieee754_pow+0x6d8>)
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	4604      	mov	r4, r0
 800b492:	460d      	mov	r5, r1
 800b494:	f7f5 f828 	bl	80004e8 <__aeabi_dmul>
 800b498:	a375      	add	r3, pc, #468	; (adr r3, 800b670 <__ieee754_pow+0x6e0>)
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	f7f4 fe6d 	bl	800017c <__adddf3>
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	462b      	mov	r3, r5
 800b4a6:	f7f5 f81f 	bl	80004e8 <__aeabi_dmul>
 800b4aa:	a373      	add	r3, pc, #460	; (adr r3, 800b678 <__ieee754_pow+0x6e8>)
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f7f4 fe64 	bl	800017c <__adddf3>
 800b4b4:	4622      	mov	r2, r4
 800b4b6:	462b      	mov	r3, r5
 800b4b8:	f7f5 f816 	bl	80004e8 <__aeabi_dmul>
 800b4bc:	a370      	add	r3, pc, #448	; (adr r3, 800b680 <__ieee754_pow+0x6f0>)
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	f7f4 fe5b 	bl	800017c <__adddf3>
 800b4c6:	4622      	mov	r2, r4
 800b4c8:	462b      	mov	r3, r5
 800b4ca:	f7f5 f80d 	bl	80004e8 <__aeabi_dmul>
 800b4ce:	a36e      	add	r3, pc, #440	; (adr r3, 800b688 <__ieee754_pow+0x6f8>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f7f4 fe52 	bl	800017c <__adddf3>
 800b4d8:	4622      	mov	r2, r4
 800b4da:	462b      	mov	r3, r5
 800b4dc:	f7f5 f804 	bl	80004e8 <__aeabi_dmul>
 800b4e0:	a36b      	add	r3, pc, #428	; (adr r3, 800b690 <__ieee754_pow+0x700>)
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	f7f4 fe49 	bl	800017c <__adddf3>
 800b4ea:	4622      	mov	r2, r4
 800b4ec:	4606      	mov	r6, r0
 800b4ee:	460f      	mov	r7, r1
 800b4f0:	462b      	mov	r3, r5
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	f7f4 fff7 	bl	80004e8 <__aeabi_dmul>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4630      	mov	r0, r6
 800b500:	4639      	mov	r1, r7
 800b502:	f7f4 fff1 	bl	80004e8 <__aeabi_dmul>
 800b506:	4604      	mov	r4, r0
 800b508:	460d      	mov	r5, r1
 800b50a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b50e:	4652      	mov	r2, sl
 800b510:	465b      	mov	r3, fp
 800b512:	f7f4 fe33 	bl	800017c <__adddf3>
 800b516:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b51a:	f7f4 ffe5 	bl	80004e8 <__aeabi_dmul>
 800b51e:	4622      	mov	r2, r4
 800b520:	462b      	mov	r3, r5
 800b522:	f7f4 fe2b 	bl	800017c <__adddf3>
 800b526:	4652      	mov	r2, sl
 800b528:	4606      	mov	r6, r0
 800b52a:	460f      	mov	r7, r1
 800b52c:	465b      	mov	r3, fp
 800b52e:	4650      	mov	r0, sl
 800b530:	4659      	mov	r1, fp
 800b532:	f7f4 ffd9 	bl	80004e8 <__aeabi_dmul>
 800b536:	2200      	movs	r2, #0
 800b538:	4b62      	ldr	r3, [pc, #392]	; (800b6c4 <__ieee754_pow+0x734>)
 800b53a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b53e:	f7f4 fe1d 	bl	800017c <__adddf3>
 800b542:	4632      	mov	r2, r6
 800b544:	463b      	mov	r3, r7
 800b546:	f7f4 fe19 	bl	800017c <__adddf3>
 800b54a:	9804      	ldr	r0, [sp, #16]
 800b54c:	460d      	mov	r5, r1
 800b54e:	4604      	mov	r4, r0
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	4650      	mov	r0, sl
 800b556:	4659      	mov	r1, fp
 800b558:	f7f4 ffc6 	bl	80004e8 <__aeabi_dmul>
 800b55c:	2200      	movs	r2, #0
 800b55e:	4682      	mov	sl, r0
 800b560:	468b      	mov	fp, r1
 800b562:	4b58      	ldr	r3, [pc, #352]	; (800b6c4 <__ieee754_pow+0x734>)
 800b564:	4620      	mov	r0, r4
 800b566:	4629      	mov	r1, r5
 800b568:	f7f4 fe06 	bl	8000178 <__aeabi_dsub>
 800b56c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b570:	f7f4 fe02 	bl	8000178 <__aeabi_dsub>
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	4630      	mov	r0, r6
 800b57a:	4639      	mov	r1, r7
 800b57c:	f7f4 fdfc 	bl	8000178 <__aeabi_dsub>
 800b580:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b584:	f7f4 ffb0 	bl	80004e8 <__aeabi_dmul>
 800b588:	4622      	mov	r2, r4
 800b58a:	4606      	mov	r6, r0
 800b58c:	460f      	mov	r7, r1
 800b58e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b592:	462b      	mov	r3, r5
 800b594:	f7f4 ffa8 	bl	80004e8 <__aeabi_dmul>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	4630      	mov	r0, r6
 800b59e:	4639      	mov	r1, r7
 800b5a0:	f7f4 fdec 	bl	800017c <__adddf3>
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	460f      	mov	r7, r1
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4650      	mov	r0, sl
 800b5ae:	4659      	mov	r1, fp
 800b5b0:	f7f4 fde4 	bl	800017c <__adddf3>
 800b5b4:	a338      	add	r3, pc, #224	; (adr r3, 800b698 <__ieee754_pow+0x708>)
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	9804      	ldr	r0, [sp, #16]
 800b5bc:	460d      	mov	r5, r1
 800b5be:	4604      	mov	r4, r0
 800b5c0:	f7f4 ff92 	bl	80004e8 <__aeabi_dmul>
 800b5c4:	4652      	mov	r2, sl
 800b5c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b5ca:	465b      	mov	r3, fp
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	f7f4 fdd2 	bl	8000178 <__aeabi_dsub>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4630      	mov	r0, r6
 800b5da:	4639      	mov	r1, r7
 800b5dc:	f7f4 fdcc 	bl	8000178 <__aeabi_dsub>
 800b5e0:	a32f      	add	r3, pc, #188	; (adr r3, 800b6a0 <__ieee754_pow+0x710>)
 800b5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e6:	f7f4 ff7f 	bl	80004e8 <__aeabi_dmul>
 800b5ea:	a32f      	add	r3, pc, #188	; (adr r3, 800b6a8 <__ieee754_pow+0x718>)
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	460f      	mov	r7, r1
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	f7f4 ff76 	bl	80004e8 <__aeabi_dmul>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	4630      	mov	r0, r6
 800b602:	4639      	mov	r1, r7
 800b604:	f7f4 fdba 	bl	800017c <__adddf3>
 800b608:	4b2f      	ldr	r3, [pc, #188]	; (800b6c8 <__ieee754_pow+0x738>)
 800b60a:	444b      	add	r3, r9
 800b60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b610:	f7f4 fdb4 	bl	800017c <__adddf3>
 800b614:	4604      	mov	r4, r0
 800b616:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b618:	460d      	mov	r5, r1
 800b61a:	f7f4 fefb 	bl	8000414 <__aeabi_i2d>
 800b61e:	4606      	mov	r6, r0
 800b620:	460f      	mov	r7, r1
 800b622:	4b2a      	ldr	r3, [pc, #168]	; (800b6cc <__ieee754_pow+0x73c>)
 800b624:	4622      	mov	r2, r4
 800b626:	444b      	add	r3, r9
 800b628:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b62c:	462b      	mov	r3, r5
 800b62e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b632:	f7f4 fda3 	bl	800017c <__adddf3>
 800b636:	4642      	mov	r2, r8
 800b638:	464b      	mov	r3, r9
 800b63a:	f7f4 fd9f 	bl	800017c <__adddf3>
 800b63e:	4632      	mov	r2, r6
 800b640:	463b      	mov	r3, r7
 800b642:	f7f4 fd9b 	bl	800017c <__adddf3>
 800b646:	9804      	ldr	r0, [sp, #16]
 800b648:	4632      	mov	r2, r6
 800b64a:	463b      	mov	r3, r7
 800b64c:	4682      	mov	sl, r0
 800b64e:	468b      	mov	fp, r1
 800b650:	f7f4 fd92 	bl	8000178 <__aeabi_dsub>
 800b654:	4642      	mov	r2, r8
 800b656:	464b      	mov	r3, r9
 800b658:	f7f4 fd8e 	bl	8000178 <__aeabi_dsub>
 800b65c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b660:	e60b      	b.n	800b27a <__ieee754_pow+0x2ea>
 800b662:	f04f 0801 	mov.w	r8, #1
 800b666:	e6a8      	b.n	800b3ba <__ieee754_pow+0x42a>
 800b668:	4a454eef 	.word	0x4a454eef
 800b66c:	3fca7e28 	.word	0x3fca7e28
 800b670:	93c9db65 	.word	0x93c9db65
 800b674:	3fcd864a 	.word	0x3fcd864a
 800b678:	a91d4101 	.word	0xa91d4101
 800b67c:	3fd17460 	.word	0x3fd17460
 800b680:	518f264d 	.word	0x518f264d
 800b684:	3fd55555 	.word	0x3fd55555
 800b688:	db6fabff 	.word	0xdb6fabff
 800b68c:	3fdb6db6 	.word	0x3fdb6db6
 800b690:	33333303 	.word	0x33333303
 800b694:	3fe33333 	.word	0x3fe33333
 800b698:	e0000000 	.word	0xe0000000
 800b69c:	3feec709 	.word	0x3feec709
 800b6a0:	dc3a03fd 	.word	0xdc3a03fd
 800b6a4:	3feec709 	.word	0x3feec709
 800b6a8:	145b01f5 	.word	0x145b01f5
 800b6ac:	be3e2fe0 	.word	0xbe3e2fe0
 800b6b0:	43400000 	.word	0x43400000
 800b6b4:	0003988e 	.word	0x0003988e
 800b6b8:	000bb679 	.word	0x000bb679
 800b6bc:	0800eb08 	.word	0x0800eb08
 800b6c0:	3ff00000 	.word	0x3ff00000
 800b6c4:	40080000 	.word	0x40080000
 800b6c8:	0800eb28 	.word	0x0800eb28
 800b6cc:	0800eb18 	.word	0x0800eb18
 800b6d0:	a39b      	add	r3, pc, #620	; (adr r3, 800b940 <__ieee754_pow+0x9b0>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	4640      	mov	r0, r8
 800b6d8:	4649      	mov	r1, r9
 800b6da:	f7f4 fd4f 	bl	800017c <__adddf3>
 800b6de:	4622      	mov	r2, r4
 800b6e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6e4:	462b      	mov	r3, r5
 800b6e6:	4650      	mov	r0, sl
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	f7f4 fd45 	bl	8000178 <__aeabi_dsub>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6f6:	f7f5 f987 	bl	8000a08 <__aeabi_dcmpgt>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	f47f ae0d 	bne.w	800b31a <__ieee754_pow+0x38a>
 800b700:	4aa3      	ldr	r2, [pc, #652]	; (800b990 <__ieee754_pow+0xa00>)
 800b702:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b706:	4293      	cmp	r3, r2
 800b708:	f340 8103 	ble.w	800b912 <__ieee754_pow+0x982>
 800b70c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b710:	2000      	movs	r0, #0
 800b712:	151b      	asrs	r3, r3, #20
 800b714:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b718:	fa4a f303 	asr.w	r3, sl, r3
 800b71c:	4433      	add	r3, r6
 800b71e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b722:	4f9c      	ldr	r7, [pc, #624]	; (800b994 <__ieee754_pow+0xa04>)
 800b724:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b728:	4117      	asrs	r7, r2
 800b72a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b72e:	ea23 0107 	bic.w	r1, r3, r7
 800b732:	f1c2 0214 	rsb	r2, r2, #20
 800b736:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b73a:	fa4a fa02 	asr.w	sl, sl, r2
 800b73e:	2e00      	cmp	r6, #0
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4620      	mov	r0, r4
 800b746:	4629      	mov	r1, r5
 800b748:	bfb8      	it	lt
 800b74a:	f1ca 0a00 	rsblt	sl, sl, #0
 800b74e:	f7f4 fd13 	bl	8000178 <__aeabi_dsub>
 800b752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b75a:	4642      	mov	r2, r8
 800b75c:	464b      	mov	r3, r9
 800b75e:	f7f4 fd0d 	bl	800017c <__adddf3>
 800b762:	a379      	add	r3, pc, #484	; (adr r3, 800b948 <__ieee754_pow+0x9b8>)
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	2000      	movs	r0, #0
 800b76a:	460d      	mov	r5, r1
 800b76c:	4604      	mov	r4, r0
 800b76e:	f7f4 febb 	bl	80004e8 <__aeabi_dmul>
 800b772:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b776:	4606      	mov	r6, r0
 800b778:	460f      	mov	r7, r1
 800b77a:	4620      	mov	r0, r4
 800b77c:	4629      	mov	r1, r5
 800b77e:	f7f4 fcfb 	bl	8000178 <__aeabi_dsub>
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	4640      	mov	r0, r8
 800b788:	4649      	mov	r1, r9
 800b78a:	f7f4 fcf5 	bl	8000178 <__aeabi_dsub>
 800b78e:	a370      	add	r3, pc, #448	; (adr r3, 800b950 <__ieee754_pow+0x9c0>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	f7f4 fea8 	bl	80004e8 <__aeabi_dmul>
 800b798:	a36f      	add	r3, pc, #444	; (adr r3, 800b958 <__ieee754_pow+0x9c8>)
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	4680      	mov	r8, r0
 800b7a0:	4689      	mov	r9, r1
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	f7f4 fe9f 	bl	80004e8 <__aeabi_dmul>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	f7f4 fce3 	bl	800017c <__adddf3>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	460d      	mov	r5, r1
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4630      	mov	r0, r6
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	f7f4 fcdb 	bl	800017c <__adddf3>
 800b7c6:	4632      	mov	r2, r6
 800b7c8:	463b      	mov	r3, r7
 800b7ca:	4680      	mov	r8, r0
 800b7cc:	4689      	mov	r9, r1
 800b7ce:	f7f4 fcd3 	bl	8000178 <__aeabi_dsub>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	4629      	mov	r1, r5
 800b7da:	f7f4 fccd 	bl	8000178 <__aeabi_dsub>
 800b7de:	4642      	mov	r2, r8
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	460f      	mov	r7, r1
 800b7e4:	464b      	mov	r3, r9
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	f7f4 fe7d 	bl	80004e8 <__aeabi_dmul>
 800b7ee:	a35c      	add	r3, pc, #368	; (adr r3, 800b960 <__ieee754_pow+0x9d0>)
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	460d      	mov	r5, r1
 800b7f8:	f7f4 fe76 	bl	80004e8 <__aeabi_dmul>
 800b7fc:	a35a      	add	r3, pc, #360	; (adr r3, 800b968 <__ieee754_pow+0x9d8>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	f7f4 fcb9 	bl	8000178 <__aeabi_dsub>
 800b806:	4622      	mov	r2, r4
 800b808:	462b      	mov	r3, r5
 800b80a:	f7f4 fe6d 	bl	80004e8 <__aeabi_dmul>
 800b80e:	a358      	add	r3, pc, #352	; (adr r3, 800b970 <__ieee754_pow+0x9e0>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f7f4 fcb2 	bl	800017c <__adddf3>
 800b818:	4622      	mov	r2, r4
 800b81a:	462b      	mov	r3, r5
 800b81c:	f7f4 fe64 	bl	80004e8 <__aeabi_dmul>
 800b820:	a355      	add	r3, pc, #340	; (adr r3, 800b978 <__ieee754_pow+0x9e8>)
 800b822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b826:	f7f4 fca7 	bl	8000178 <__aeabi_dsub>
 800b82a:	4622      	mov	r2, r4
 800b82c:	462b      	mov	r3, r5
 800b82e:	f7f4 fe5b 	bl	80004e8 <__aeabi_dmul>
 800b832:	a353      	add	r3, pc, #332	; (adr r3, 800b980 <__ieee754_pow+0x9f0>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fca0 	bl	800017c <__adddf3>
 800b83c:	4622      	mov	r2, r4
 800b83e:	462b      	mov	r3, r5
 800b840:	f7f4 fe52 	bl	80004e8 <__aeabi_dmul>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	4640      	mov	r0, r8
 800b84a:	4649      	mov	r1, r9
 800b84c:	f7f4 fc94 	bl	8000178 <__aeabi_dsub>
 800b850:	4604      	mov	r4, r0
 800b852:	460d      	mov	r5, r1
 800b854:	4602      	mov	r2, r0
 800b856:	460b      	mov	r3, r1
 800b858:	4640      	mov	r0, r8
 800b85a:	4649      	mov	r1, r9
 800b85c:	f7f4 fe44 	bl	80004e8 <__aeabi_dmul>
 800b860:	2200      	movs	r2, #0
 800b862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b86a:	4620      	mov	r0, r4
 800b86c:	4629      	mov	r1, r5
 800b86e:	f7f4 fc83 	bl	8000178 <__aeabi_dsub>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b87a:	f7f4 ff5f 	bl	800073c <__aeabi_ddiv>
 800b87e:	4632      	mov	r2, r6
 800b880:	4604      	mov	r4, r0
 800b882:	460d      	mov	r5, r1
 800b884:	463b      	mov	r3, r7
 800b886:	4640      	mov	r0, r8
 800b888:	4649      	mov	r1, r9
 800b88a:	f7f4 fe2d 	bl	80004e8 <__aeabi_dmul>
 800b88e:	4632      	mov	r2, r6
 800b890:	463b      	mov	r3, r7
 800b892:	f7f4 fc73 	bl	800017c <__adddf3>
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	4620      	mov	r0, r4
 800b89c:	4629      	mov	r1, r5
 800b89e:	f7f4 fc6b 	bl	8000178 <__aeabi_dsub>
 800b8a2:	4642      	mov	r2, r8
 800b8a4:	464b      	mov	r3, r9
 800b8a6:	f7f4 fc67 	bl	8000178 <__aeabi_dsub>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	4939      	ldr	r1, [pc, #228]	; (800b998 <__ieee754_pow+0xa08>)
 800b8b2:	f7f4 fc61 	bl	8000178 <__aeabi_dsub>
 800b8b6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b8ba:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b8be:	da2b      	bge.n	800b918 <__ieee754_pow+0x988>
 800b8c0:	4652      	mov	r2, sl
 800b8c2:	f001 faad 	bl	800ce20 <scalbn>
 800b8c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8ca:	f7ff bbf6 	b.w	800b0ba <__ieee754_pow+0x12a>
 800b8ce:	4b33      	ldr	r3, [pc, #204]	; (800b99c <__ieee754_pow+0xa0c>)
 800b8d0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b8d4:	429f      	cmp	r7, r3
 800b8d6:	f77f af13 	ble.w	800b700 <__ieee754_pow+0x770>
 800b8da:	4b31      	ldr	r3, [pc, #196]	; (800b9a0 <__ieee754_pow+0xa10>)
 800b8dc:	440b      	add	r3, r1
 800b8de:	4303      	orrs	r3, r0
 800b8e0:	d00b      	beq.n	800b8fa <__ieee754_pow+0x96a>
 800b8e2:	a329      	add	r3, pc, #164	; (adr r3, 800b988 <__ieee754_pow+0x9f8>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8ec:	f7f4 fdfc 	bl	80004e8 <__aeabi_dmul>
 800b8f0:	a325      	add	r3, pc, #148	; (adr r3, 800b988 <__ieee754_pow+0x9f8>)
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	f7ff bbe0 	b.w	800b0ba <__ieee754_pow+0x12a>
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	462b      	mov	r3, r5
 800b8fe:	f7f4 fc3b 	bl	8000178 <__aeabi_dsub>
 800b902:	4642      	mov	r2, r8
 800b904:	464b      	mov	r3, r9
 800b906:	f7f5 f875 	bl	80009f4 <__aeabi_dcmpge>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	f43f aef8 	beq.w	800b700 <__ieee754_pow+0x770>
 800b910:	e7e7      	b.n	800b8e2 <__ieee754_pow+0x952>
 800b912:	f04f 0a00 	mov.w	sl, #0
 800b916:	e71e      	b.n	800b756 <__ieee754_pow+0x7c6>
 800b918:	4621      	mov	r1, r4
 800b91a:	e7d4      	b.n	800b8c6 <__ieee754_pow+0x936>
 800b91c:	f04f 0b00 	mov.w	fp, #0
 800b920:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b998 <__ieee754_pow+0xa08>
 800b924:	f7ff bb95 	b.w	800b052 <__ieee754_pow+0xc2>
 800b928:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b92c:	f7ff bb91 	b.w	800b052 <__ieee754_pow+0xc2>
 800b930:	4638      	mov	r0, r7
 800b932:	4641      	mov	r1, r8
 800b934:	f7ff bbc3 	b.w	800b0be <__ieee754_pow+0x12e>
 800b938:	9200      	str	r2, [sp, #0]
 800b93a:	f7ff bb9f 	b.w	800b07c <__ieee754_pow+0xec>
 800b93e:	bf00      	nop
 800b940:	652b82fe 	.word	0x652b82fe
 800b944:	3c971547 	.word	0x3c971547
 800b948:	00000000 	.word	0x00000000
 800b94c:	3fe62e43 	.word	0x3fe62e43
 800b950:	fefa39ef 	.word	0xfefa39ef
 800b954:	3fe62e42 	.word	0x3fe62e42
 800b958:	0ca86c39 	.word	0x0ca86c39
 800b95c:	be205c61 	.word	0xbe205c61
 800b960:	72bea4d0 	.word	0x72bea4d0
 800b964:	3e663769 	.word	0x3e663769
 800b968:	c5d26bf1 	.word	0xc5d26bf1
 800b96c:	3ebbbd41 	.word	0x3ebbbd41
 800b970:	af25de2c 	.word	0xaf25de2c
 800b974:	3f11566a 	.word	0x3f11566a
 800b978:	16bebd93 	.word	0x16bebd93
 800b97c:	3f66c16c 	.word	0x3f66c16c
 800b980:	5555553e 	.word	0x5555553e
 800b984:	3fc55555 	.word	0x3fc55555
 800b988:	c2f8f359 	.word	0xc2f8f359
 800b98c:	01a56e1f 	.word	0x01a56e1f
 800b990:	3fe00000 	.word	0x3fe00000
 800b994:	000fffff 	.word	0x000fffff
 800b998:	3ff00000 	.word	0x3ff00000
 800b99c:	4090cbff 	.word	0x4090cbff
 800b9a0:	3f6f3400 	.word	0x3f6f3400
 800b9a4:	00000000 	.word	0x00000000

0800b9a8 <__ieee754_rem_pio2>:
 800b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ac:	4614      	mov	r4, r2
 800b9ae:	4ac2      	ldr	r2, [pc, #776]	; (800bcb8 <__ieee754_rem_pio2+0x310>)
 800b9b0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b9b4:	4592      	cmp	sl, r2
 800b9b6:	b08d      	sub	sp, #52	; 0x34
 800b9b8:	468b      	mov	fp, r1
 800b9ba:	dc07      	bgt.n	800b9cc <__ieee754_rem_pio2+0x24>
 800b9bc:	2200      	movs	r2, #0
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e9c4 0100 	strd	r0, r1, [r4]
 800b9c4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b9c8:	2500      	movs	r5, #0
 800b9ca:	e023      	b.n	800ba14 <__ieee754_rem_pio2+0x6c>
 800b9cc:	4abb      	ldr	r2, [pc, #748]	; (800bcbc <__ieee754_rem_pio2+0x314>)
 800b9ce:	4592      	cmp	sl, r2
 800b9d0:	dc71      	bgt.n	800bab6 <__ieee754_rem_pio2+0x10e>
 800b9d2:	a3ab      	add	r3, pc, #684	; (adr r3, 800bc80 <__ieee754_rem_pio2+0x2d8>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	2900      	cmp	r1, #0
 800b9da:	4db9      	ldr	r5, [pc, #740]	; (800bcc0 <__ieee754_rem_pio2+0x318>)
 800b9dc:	dd36      	ble.n	800ba4c <__ieee754_rem_pio2+0xa4>
 800b9de:	f7f4 fbcb 	bl	8000178 <__aeabi_dsub>
 800b9e2:	45aa      	cmp	sl, r5
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	460f      	mov	r7, r1
 800b9e8:	d018      	beq.n	800ba1c <__ieee754_rem_pio2+0x74>
 800b9ea:	a3a7      	add	r3, pc, #668	; (adr r3, 800bc88 <__ieee754_rem_pio2+0x2e0>)
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	f7f4 fbc2 	bl	8000178 <__aeabi_dsub>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	e9c4 2300 	strd	r2, r3, [r4]
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f4 fbba 	bl	8000178 <__aeabi_dsub>
 800ba04:	a3a0      	add	r3, pc, #640	; (adr r3, 800bc88 <__ieee754_rem_pio2+0x2e0>)
 800ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0a:	f7f4 fbb5 	bl	8000178 <__aeabi_dsub>
 800ba0e:	2501      	movs	r5, #1
 800ba10:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba14:	4628      	mov	r0, r5
 800ba16:	b00d      	add	sp, #52	; 0x34
 800ba18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1c:	a39c      	add	r3, pc, #624	; (adr r3, 800bc90 <__ieee754_rem_pio2+0x2e8>)
 800ba1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba22:	f7f4 fba9 	bl	8000178 <__aeabi_dsub>
 800ba26:	a39c      	add	r3, pc, #624	; (adr r3, 800bc98 <__ieee754_rem_pio2+0x2f0>)
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	460f      	mov	r7, r1
 800ba30:	f7f4 fba2 	bl	8000178 <__aeabi_dsub>
 800ba34:	4602      	mov	r2, r0
 800ba36:	460b      	mov	r3, r1
 800ba38:	4630      	mov	r0, r6
 800ba3a:	e9c4 2300 	strd	r2, r3, [r4]
 800ba3e:	4639      	mov	r1, r7
 800ba40:	f7f4 fb9a 	bl	8000178 <__aeabi_dsub>
 800ba44:	a394      	add	r3, pc, #592	; (adr r3, 800bc98 <__ieee754_rem_pio2+0x2f0>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	e7de      	b.n	800ba0a <__ieee754_rem_pio2+0x62>
 800ba4c:	f7f4 fb96 	bl	800017c <__adddf3>
 800ba50:	45aa      	cmp	sl, r5
 800ba52:	4606      	mov	r6, r0
 800ba54:	460f      	mov	r7, r1
 800ba56:	d016      	beq.n	800ba86 <__ieee754_rem_pio2+0xde>
 800ba58:	a38b      	add	r3, pc, #556	; (adr r3, 800bc88 <__ieee754_rem_pio2+0x2e0>)
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	f7f4 fb8d 	bl	800017c <__adddf3>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	4630      	mov	r0, r6
 800ba68:	e9c4 2300 	strd	r2, r3, [r4]
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	f7f4 fb83 	bl	8000178 <__aeabi_dsub>
 800ba72:	a385      	add	r3, pc, #532	; (adr r3, 800bc88 <__ieee754_rem_pio2+0x2e0>)
 800ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba78:	f7f4 fb80 	bl	800017c <__adddf3>
 800ba7c:	f04f 35ff 	mov.w	r5, #4294967295
 800ba80:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba84:	e7c6      	b.n	800ba14 <__ieee754_rem_pio2+0x6c>
 800ba86:	a382      	add	r3, pc, #520	; (adr r3, 800bc90 <__ieee754_rem_pio2+0x2e8>)
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f7f4 fb76 	bl	800017c <__adddf3>
 800ba90:	a381      	add	r3, pc, #516	; (adr r3, 800bc98 <__ieee754_rem_pio2+0x2f0>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	4606      	mov	r6, r0
 800ba98:	460f      	mov	r7, r1
 800ba9a:	f7f4 fb6f 	bl	800017c <__adddf3>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4630      	mov	r0, r6
 800baa4:	e9c4 2300 	strd	r2, r3, [r4]
 800baa8:	4639      	mov	r1, r7
 800baaa:	f7f4 fb65 	bl	8000178 <__aeabi_dsub>
 800baae:	a37a      	add	r3, pc, #488	; (adr r3, 800bc98 <__ieee754_rem_pio2+0x2f0>)
 800bab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab4:	e7e0      	b.n	800ba78 <__ieee754_rem_pio2+0xd0>
 800bab6:	4a83      	ldr	r2, [pc, #524]	; (800bcc4 <__ieee754_rem_pio2+0x31c>)
 800bab8:	4592      	cmp	sl, r2
 800baba:	f300 80d2 	bgt.w	800bc62 <__ieee754_rem_pio2+0x2ba>
 800babe:	f7fe fbcf 	bl	800a260 <fabs>
 800bac2:	a377      	add	r3, pc, #476	; (adr r3, 800bca0 <__ieee754_rem_pio2+0x2f8>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	4606      	mov	r6, r0
 800baca:	460f      	mov	r7, r1
 800bacc:	f7f4 fd0c 	bl	80004e8 <__aeabi_dmul>
 800bad0:	2200      	movs	r2, #0
 800bad2:	4b7d      	ldr	r3, [pc, #500]	; (800bcc8 <__ieee754_rem_pio2+0x320>)
 800bad4:	f7f4 fb52 	bl	800017c <__adddf3>
 800bad8:	f7f4 ffb6 	bl	8000a48 <__aeabi_d2iz>
 800badc:	4605      	mov	r5, r0
 800bade:	f7f4 fc99 	bl	8000414 <__aeabi_i2d>
 800bae2:	a367      	add	r3, pc, #412	; (adr r3, 800bc80 <__ieee754_rem_pio2+0x2d8>)
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baec:	f7f4 fcfc 	bl	80004e8 <__aeabi_dmul>
 800baf0:	4602      	mov	r2, r0
 800baf2:	460b      	mov	r3, r1
 800baf4:	4630      	mov	r0, r6
 800baf6:	4639      	mov	r1, r7
 800baf8:	f7f4 fb3e 	bl	8000178 <__aeabi_dsub>
 800bafc:	a362      	add	r3, pc, #392	; (adr r3, 800bc88 <__ieee754_rem_pio2+0x2e0>)
 800bafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb02:	4606      	mov	r6, r0
 800bb04:	460f      	mov	r7, r1
 800bb06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb0a:	f7f4 fced 	bl	80004e8 <__aeabi_dmul>
 800bb0e:	2d1f      	cmp	r5, #31
 800bb10:	4680      	mov	r8, r0
 800bb12:	4689      	mov	r9, r1
 800bb14:	dc0e      	bgt.n	800bb34 <__ieee754_rem_pio2+0x18c>
 800bb16:	4b6d      	ldr	r3, [pc, #436]	; (800bccc <__ieee754_rem_pio2+0x324>)
 800bb18:	1e6a      	subs	r2, r5, #1
 800bb1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb1e:	4553      	cmp	r3, sl
 800bb20:	d008      	beq.n	800bb34 <__ieee754_rem_pio2+0x18c>
 800bb22:	4642      	mov	r2, r8
 800bb24:	464b      	mov	r3, r9
 800bb26:	4630      	mov	r0, r6
 800bb28:	4639      	mov	r1, r7
 800bb2a:	f7f4 fb25 	bl	8000178 <__aeabi_dsub>
 800bb2e:	e9c4 0100 	strd	r0, r1, [r4]
 800bb32:	e011      	b.n	800bb58 <__ieee754_rem_pio2+0x1b0>
 800bb34:	464b      	mov	r3, r9
 800bb36:	4642      	mov	r2, r8
 800bb38:	4630      	mov	r0, r6
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	f7f4 fb1c 	bl	8000178 <__aeabi_dsub>
 800bb40:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800bb44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb48:	ebaa 0303 	sub.w	r3, sl, r3
 800bb4c:	2b10      	cmp	r3, #16
 800bb4e:	dc1f      	bgt.n	800bb90 <__ieee754_rem_pio2+0x1e8>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	e9c4 2300 	strd	r2, r3, [r4]
 800bb58:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	4653      	mov	r3, sl
 800bb60:	4639      	mov	r1, r7
 800bb62:	f7f4 fb09 	bl	8000178 <__aeabi_dsub>
 800bb66:	4642      	mov	r2, r8
 800bb68:	464b      	mov	r3, r9
 800bb6a:	f7f4 fb05 	bl	8000178 <__aeabi_dsub>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	f1bb 0f00 	cmp.w	fp, #0
 800bb76:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bb7a:	f6bf af4b 	bge.w	800ba14 <__ieee754_rem_pio2+0x6c>
 800bb7e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800bb82:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800bb86:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bb8a:	60e1      	str	r1, [r4, #12]
 800bb8c:	426d      	negs	r5, r5
 800bb8e:	e741      	b.n	800ba14 <__ieee754_rem_pio2+0x6c>
 800bb90:	a33f      	add	r3, pc, #252	; (adr r3, 800bc90 <__ieee754_rem_pio2+0x2e8>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb9a:	f7f4 fca5 	bl	80004e8 <__aeabi_dmul>
 800bb9e:	4680      	mov	r8, r0
 800bba0:	4689      	mov	r9, r1
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4630      	mov	r0, r6
 800bba8:	4639      	mov	r1, r7
 800bbaa:	f7f4 fae5 	bl	8000178 <__aeabi_dsub>
 800bbae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	4639      	mov	r1, r7
 800bbba:	f7f4 fadd 	bl	8000178 <__aeabi_dsub>
 800bbbe:	4642      	mov	r2, r8
 800bbc0:	464b      	mov	r3, r9
 800bbc2:	f7f4 fad9 	bl	8000178 <__aeabi_dsub>
 800bbc6:	a334      	add	r3, pc, #208	; (adr r3, 800bc98 <__ieee754_rem_pio2+0x2f0>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	4606      	mov	r6, r0
 800bbce:	460f      	mov	r7, r1
 800bbd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbd4:	f7f4 fc88 	bl	80004e8 <__aeabi_dmul>
 800bbd8:	4632      	mov	r2, r6
 800bbda:	463b      	mov	r3, r7
 800bbdc:	f7f4 facc 	bl	8000178 <__aeabi_dsub>
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	4680      	mov	r8, r0
 800bbe6:	4689      	mov	r9, r1
 800bbe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbec:	f7f4 fac4 	bl	8000178 <__aeabi_dsub>
 800bbf0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bbf4:	ebaa 0a03 	sub.w	sl, sl, r3
 800bbf8:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800bbfc:	dc06      	bgt.n	800bc0c <__ieee754_rem_pio2+0x264>
 800bbfe:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800bc02:	4602      	mov	r2, r0
 800bc04:	460b      	mov	r3, r1
 800bc06:	e9c4 2300 	strd	r2, r3, [r4]
 800bc0a:	e7a5      	b.n	800bb58 <__ieee754_rem_pio2+0x1b0>
 800bc0c:	a326      	add	r3, pc, #152	; (adr r3, 800bca8 <__ieee754_rem_pio2+0x300>)
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc16:	f7f4 fc67 	bl	80004e8 <__aeabi_dmul>
 800bc1a:	4680      	mov	r8, r0
 800bc1c:	4689      	mov	r9, r1
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc26:	f7f4 faa7 	bl	8000178 <__aeabi_dsub>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	4606      	mov	r6, r0
 800bc30:	460f      	mov	r7, r1
 800bc32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc36:	f7f4 fa9f 	bl	8000178 <__aeabi_dsub>
 800bc3a:	4642      	mov	r2, r8
 800bc3c:	464b      	mov	r3, r9
 800bc3e:	f7f4 fa9b 	bl	8000178 <__aeabi_dsub>
 800bc42:	a31b      	add	r3, pc, #108	; (adr r3, 800bcb0 <__ieee754_rem_pio2+0x308>)
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	4680      	mov	r8, r0
 800bc4a:	4689      	mov	r9, r1
 800bc4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc50:	f7f4 fc4a 	bl	80004e8 <__aeabi_dmul>
 800bc54:	4642      	mov	r2, r8
 800bc56:	464b      	mov	r3, r9
 800bc58:	f7f4 fa8e 	bl	8000178 <__aeabi_dsub>
 800bc5c:	4680      	mov	r8, r0
 800bc5e:	4689      	mov	r9, r1
 800bc60:	e75f      	b.n	800bb22 <__ieee754_rem_pio2+0x17a>
 800bc62:	4a1b      	ldr	r2, [pc, #108]	; (800bcd0 <__ieee754_rem_pio2+0x328>)
 800bc64:	4592      	cmp	sl, r2
 800bc66:	dd35      	ble.n	800bcd4 <__ieee754_rem_pio2+0x32c>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	f7f4 fa84 	bl	8000178 <__aeabi_dsub>
 800bc70:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc74:	e9c4 0100 	strd	r0, r1, [r4]
 800bc78:	e6a6      	b.n	800b9c8 <__ieee754_rem_pio2+0x20>
 800bc7a:	bf00      	nop
 800bc7c:	f3af 8000 	nop.w
 800bc80:	54400000 	.word	0x54400000
 800bc84:	3ff921fb 	.word	0x3ff921fb
 800bc88:	1a626331 	.word	0x1a626331
 800bc8c:	3dd0b461 	.word	0x3dd0b461
 800bc90:	1a600000 	.word	0x1a600000
 800bc94:	3dd0b461 	.word	0x3dd0b461
 800bc98:	2e037073 	.word	0x2e037073
 800bc9c:	3ba3198a 	.word	0x3ba3198a
 800bca0:	6dc9c883 	.word	0x6dc9c883
 800bca4:	3fe45f30 	.word	0x3fe45f30
 800bca8:	2e000000 	.word	0x2e000000
 800bcac:	3ba3198a 	.word	0x3ba3198a
 800bcb0:	252049c1 	.word	0x252049c1
 800bcb4:	397b839a 	.word	0x397b839a
 800bcb8:	3fe921fb 	.word	0x3fe921fb
 800bcbc:	4002d97b 	.word	0x4002d97b
 800bcc0:	3ff921fb 	.word	0x3ff921fb
 800bcc4:	413921fb 	.word	0x413921fb
 800bcc8:	3fe00000 	.word	0x3fe00000
 800bccc:	0800eb38 	.word	0x0800eb38
 800bcd0:	7fefffff 	.word	0x7fefffff
 800bcd4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800bcd8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bcdc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800bce0:	460f      	mov	r7, r1
 800bce2:	4606      	mov	r6, r0
 800bce4:	f7f4 feb0 	bl	8000a48 <__aeabi_d2iz>
 800bce8:	f7f4 fb94 	bl	8000414 <__aeabi_i2d>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcf8:	f7f4 fa3e 	bl	8000178 <__aeabi_dsub>
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	4b20      	ldr	r3, [pc, #128]	; (800bd80 <__ieee754_rem_pio2+0x3d8>)
 800bd00:	f7f4 fbf2 	bl	80004e8 <__aeabi_dmul>
 800bd04:	460f      	mov	r7, r1
 800bd06:	4606      	mov	r6, r0
 800bd08:	f7f4 fe9e 	bl	8000a48 <__aeabi_d2iz>
 800bd0c:	f7f4 fb82 	bl	8000414 <__aeabi_i2d>
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4630      	mov	r0, r6
 800bd16:	4639      	mov	r1, r7
 800bd18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bd1c:	f7f4 fa2c 	bl	8000178 <__aeabi_dsub>
 800bd20:	2200      	movs	r2, #0
 800bd22:	4b17      	ldr	r3, [pc, #92]	; (800bd80 <__ieee754_rem_pio2+0x3d8>)
 800bd24:	f7f4 fbe0 	bl	80004e8 <__aeabi_dmul>
 800bd28:	f04f 0803 	mov.w	r8, #3
 800bd2c:	2600      	movs	r6, #0
 800bd2e:	2700      	movs	r7, #0
 800bd30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bd34:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800bd38:	4632      	mov	r2, r6
 800bd3a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bd3e:	463b      	mov	r3, r7
 800bd40:	f108 3aff 	add.w	sl, r8, #4294967295
 800bd44:	f7f4 fe38 	bl	80009b8 <__aeabi_dcmpeq>
 800bd48:	b9b8      	cbnz	r0, 800bd7a <__ieee754_rem_pio2+0x3d2>
 800bd4a:	4b0e      	ldr	r3, [pc, #56]	; (800bd84 <__ieee754_rem_pio2+0x3dc>)
 800bd4c:	462a      	mov	r2, r5
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	2302      	movs	r3, #2
 800bd52:	4621      	mov	r1, r4
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	a806      	add	r0, sp, #24
 800bd58:	4643      	mov	r3, r8
 800bd5a:	f000 f97f 	bl	800c05c <__kernel_rem_pio2>
 800bd5e:	f1bb 0f00 	cmp.w	fp, #0
 800bd62:	4605      	mov	r5, r0
 800bd64:	f6bf ae56 	bge.w	800ba14 <__ieee754_rem_pio2+0x6c>
 800bd68:	6863      	ldr	r3, [r4, #4]
 800bd6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd6e:	6063      	str	r3, [r4, #4]
 800bd70:	68e3      	ldr	r3, [r4, #12]
 800bd72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd76:	60e3      	str	r3, [r4, #12]
 800bd78:	e708      	b.n	800bb8c <__ieee754_rem_pio2+0x1e4>
 800bd7a:	46d0      	mov	r8, sl
 800bd7c:	e7dc      	b.n	800bd38 <__ieee754_rem_pio2+0x390>
 800bd7e:	bf00      	nop
 800bd80:	41700000 	.word	0x41700000
 800bd84:	0800ebb8 	.word	0x0800ebb8

0800bd88 <__ieee754_sqrt>:
 800bd88:	4b54      	ldr	r3, [pc, #336]	; (800bedc <__ieee754_sqrt+0x154>)
 800bd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd8e:	438b      	bics	r3, r1
 800bd90:	4606      	mov	r6, r0
 800bd92:	460d      	mov	r5, r1
 800bd94:	460a      	mov	r2, r1
 800bd96:	460c      	mov	r4, r1
 800bd98:	d10f      	bne.n	800bdba <__ieee754_sqrt+0x32>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	f7f4 fba3 	bl	80004e8 <__aeabi_dmul>
 800bda2:	4602      	mov	r2, r0
 800bda4:	460b      	mov	r3, r1
 800bda6:	4630      	mov	r0, r6
 800bda8:	4629      	mov	r1, r5
 800bdaa:	f7f4 f9e7 	bl	800017c <__adddf3>
 800bdae:	4606      	mov	r6, r0
 800bdb0:	460d      	mov	r5, r1
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdba:	2900      	cmp	r1, #0
 800bdbc:	4607      	mov	r7, r0
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	dc0e      	bgt.n	800bde0 <__ieee754_sqrt+0x58>
 800bdc2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800bdc6:	ea5c 0707 	orrs.w	r7, ip, r7
 800bdca:	d0f2      	beq.n	800bdb2 <__ieee754_sqrt+0x2a>
 800bdcc:	b141      	cbz	r1, 800bde0 <__ieee754_sqrt+0x58>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	f7f4 f9d1 	bl	8000178 <__aeabi_dsub>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	460b      	mov	r3, r1
 800bdda:	f7f4 fcaf 	bl	800073c <__aeabi_ddiv>
 800bdde:	e7e6      	b.n	800bdae <__ieee754_sqrt+0x26>
 800bde0:	1512      	asrs	r2, r2, #20
 800bde2:	d074      	beq.n	800bece <__ieee754_sqrt+0x146>
 800bde4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bde8:	07d5      	lsls	r5, r2, #31
 800bdea:	f04f 0500 	mov.w	r5, #0
 800bdee:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bdf2:	bf48      	it	mi
 800bdf4:	0fd9      	lsrmi	r1, r3, #31
 800bdf6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800bdfa:	bf44      	itt	mi
 800bdfc:	005b      	lslmi	r3, r3, #1
 800bdfe:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800be02:	1051      	asrs	r1, r2, #1
 800be04:	0fda      	lsrs	r2, r3, #31
 800be06:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800be0a:	4628      	mov	r0, r5
 800be0c:	2216      	movs	r2, #22
 800be0e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800be12:	005b      	lsls	r3, r3, #1
 800be14:	1987      	adds	r7, r0, r6
 800be16:	42a7      	cmp	r7, r4
 800be18:	bfde      	ittt	le
 800be1a:	19b8      	addle	r0, r7, r6
 800be1c:	1be4      	suble	r4, r4, r7
 800be1e:	19ad      	addle	r5, r5, r6
 800be20:	0fdf      	lsrs	r7, r3, #31
 800be22:	3a01      	subs	r2, #1
 800be24:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800be28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be2c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800be30:	d1f0      	bne.n	800be14 <__ieee754_sqrt+0x8c>
 800be32:	f04f 0c20 	mov.w	ip, #32
 800be36:	4696      	mov	lr, r2
 800be38:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800be3c:	4284      	cmp	r4, r0
 800be3e:	eb06 070e 	add.w	r7, r6, lr
 800be42:	dc02      	bgt.n	800be4a <__ieee754_sqrt+0xc2>
 800be44:	d112      	bne.n	800be6c <__ieee754_sqrt+0xe4>
 800be46:	429f      	cmp	r7, r3
 800be48:	d810      	bhi.n	800be6c <__ieee754_sqrt+0xe4>
 800be4a:	2f00      	cmp	r7, #0
 800be4c:	eb07 0e06 	add.w	lr, r7, r6
 800be50:	da42      	bge.n	800bed8 <__ieee754_sqrt+0x150>
 800be52:	f1be 0f00 	cmp.w	lr, #0
 800be56:	db3f      	blt.n	800bed8 <__ieee754_sqrt+0x150>
 800be58:	f100 0801 	add.w	r8, r0, #1
 800be5c:	1a24      	subs	r4, r4, r0
 800be5e:	4640      	mov	r0, r8
 800be60:	429f      	cmp	r7, r3
 800be62:	bf88      	it	hi
 800be64:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800be68:	1bdb      	subs	r3, r3, r7
 800be6a:	4432      	add	r2, r6
 800be6c:	0064      	lsls	r4, r4, #1
 800be6e:	f1bc 0c01 	subs.w	ip, ip, #1
 800be72:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800be76:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800be7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be7e:	d1dd      	bne.n	800be3c <__ieee754_sqrt+0xb4>
 800be80:	4323      	orrs	r3, r4
 800be82:	d006      	beq.n	800be92 <__ieee754_sqrt+0x10a>
 800be84:	1c54      	adds	r4, r2, #1
 800be86:	bf0b      	itete	eq
 800be88:	4662      	moveq	r2, ip
 800be8a:	3201      	addne	r2, #1
 800be8c:	3501      	addeq	r5, #1
 800be8e:	f022 0201 	bicne.w	r2, r2, #1
 800be92:	106b      	asrs	r3, r5, #1
 800be94:	0852      	lsrs	r2, r2, #1
 800be96:	07e8      	lsls	r0, r5, #31
 800be98:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800be9c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bea0:	bf48      	it	mi
 800bea2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bea6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800beaa:	4616      	mov	r6, r2
 800beac:	e781      	b.n	800bdb2 <__ieee754_sqrt+0x2a>
 800beae:	0adc      	lsrs	r4, r3, #11
 800beb0:	3915      	subs	r1, #21
 800beb2:	055b      	lsls	r3, r3, #21
 800beb4:	2c00      	cmp	r4, #0
 800beb6:	d0fa      	beq.n	800beae <__ieee754_sqrt+0x126>
 800beb8:	02e6      	lsls	r6, r4, #11
 800beba:	d50a      	bpl.n	800bed2 <__ieee754_sqrt+0x14a>
 800bebc:	f1c2 0020 	rsb	r0, r2, #32
 800bec0:	fa23 f000 	lsr.w	r0, r3, r0
 800bec4:	1e55      	subs	r5, r2, #1
 800bec6:	4093      	lsls	r3, r2
 800bec8:	4304      	orrs	r4, r0
 800beca:	1b4a      	subs	r2, r1, r5
 800becc:	e78a      	b.n	800bde4 <__ieee754_sqrt+0x5c>
 800bece:	4611      	mov	r1, r2
 800bed0:	e7f0      	b.n	800beb4 <__ieee754_sqrt+0x12c>
 800bed2:	0064      	lsls	r4, r4, #1
 800bed4:	3201      	adds	r2, #1
 800bed6:	e7ef      	b.n	800beb8 <__ieee754_sqrt+0x130>
 800bed8:	4680      	mov	r8, r0
 800beda:	e7bf      	b.n	800be5c <__ieee754_sqrt+0xd4>
 800bedc:	7ff00000 	.word	0x7ff00000

0800bee0 <__kernel_cos>:
 800bee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bee8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800beec:	4680      	mov	r8, r0
 800beee:	460f      	mov	r7, r1
 800bef0:	e9cd 2300 	strd	r2, r3, [sp]
 800bef4:	da04      	bge.n	800bf00 <__kernel_cos+0x20>
 800bef6:	f7f4 fda7 	bl	8000a48 <__aeabi_d2iz>
 800befa:	2800      	cmp	r0, #0
 800befc:	f000 8086 	beq.w	800c00c <__kernel_cos+0x12c>
 800bf00:	4642      	mov	r2, r8
 800bf02:	463b      	mov	r3, r7
 800bf04:	4640      	mov	r0, r8
 800bf06:	4639      	mov	r1, r7
 800bf08:	f7f4 faee 	bl	80004e8 <__aeabi_dmul>
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	4b4e      	ldr	r3, [pc, #312]	; (800c048 <__kernel_cos+0x168>)
 800bf10:	4604      	mov	r4, r0
 800bf12:	460d      	mov	r5, r1
 800bf14:	f7f4 fae8 	bl	80004e8 <__aeabi_dmul>
 800bf18:	a33f      	add	r3, pc, #252	; (adr r3, 800c018 <__kernel_cos+0x138>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	4682      	mov	sl, r0
 800bf20:	468b      	mov	fp, r1
 800bf22:	4620      	mov	r0, r4
 800bf24:	4629      	mov	r1, r5
 800bf26:	f7f4 fadf 	bl	80004e8 <__aeabi_dmul>
 800bf2a:	a33d      	add	r3, pc, #244	; (adr r3, 800c020 <__kernel_cos+0x140>)
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	f7f4 f924 	bl	800017c <__adddf3>
 800bf34:	4622      	mov	r2, r4
 800bf36:	462b      	mov	r3, r5
 800bf38:	f7f4 fad6 	bl	80004e8 <__aeabi_dmul>
 800bf3c:	a33a      	add	r3, pc, #232	; (adr r3, 800c028 <__kernel_cos+0x148>)
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	f7f4 f919 	bl	8000178 <__aeabi_dsub>
 800bf46:	4622      	mov	r2, r4
 800bf48:	462b      	mov	r3, r5
 800bf4a:	f7f4 facd 	bl	80004e8 <__aeabi_dmul>
 800bf4e:	a338      	add	r3, pc, #224	; (adr r3, 800c030 <__kernel_cos+0x150>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	f7f4 f912 	bl	800017c <__adddf3>
 800bf58:	4622      	mov	r2, r4
 800bf5a:	462b      	mov	r3, r5
 800bf5c:	f7f4 fac4 	bl	80004e8 <__aeabi_dmul>
 800bf60:	a335      	add	r3, pc, #212	; (adr r3, 800c038 <__kernel_cos+0x158>)
 800bf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf66:	f7f4 f907 	bl	8000178 <__aeabi_dsub>
 800bf6a:	4622      	mov	r2, r4
 800bf6c:	462b      	mov	r3, r5
 800bf6e:	f7f4 fabb 	bl	80004e8 <__aeabi_dmul>
 800bf72:	a333      	add	r3, pc, #204	; (adr r3, 800c040 <__kernel_cos+0x160>)
 800bf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf78:	f7f4 f900 	bl	800017c <__adddf3>
 800bf7c:	4622      	mov	r2, r4
 800bf7e:	462b      	mov	r3, r5
 800bf80:	f7f4 fab2 	bl	80004e8 <__aeabi_dmul>
 800bf84:	4622      	mov	r2, r4
 800bf86:	462b      	mov	r3, r5
 800bf88:	f7f4 faae 	bl	80004e8 <__aeabi_dmul>
 800bf8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf90:	4604      	mov	r4, r0
 800bf92:	460d      	mov	r5, r1
 800bf94:	4640      	mov	r0, r8
 800bf96:	4639      	mov	r1, r7
 800bf98:	f7f4 faa6 	bl	80004e8 <__aeabi_dmul>
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f7f4 f8e8 	bl	8000178 <__aeabi_dsub>
 800bfa8:	4b28      	ldr	r3, [pc, #160]	; (800c04c <__kernel_cos+0x16c>)
 800bfaa:	4680      	mov	r8, r0
 800bfac:	429e      	cmp	r6, r3
 800bfae:	4689      	mov	r9, r1
 800bfb0:	dc0e      	bgt.n	800bfd0 <__kernel_cos+0xf0>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4650      	mov	r0, sl
 800bfb8:	4659      	mov	r1, fp
 800bfba:	f7f4 f8dd 	bl	8000178 <__aeabi_dsub>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4922      	ldr	r1, [pc, #136]	; (800c050 <__kernel_cos+0x170>)
 800bfc6:	f7f4 f8d7 	bl	8000178 <__aeabi_dsub>
 800bfca:	b003      	add	sp, #12
 800bfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd0:	2400      	movs	r4, #0
 800bfd2:	4b20      	ldr	r3, [pc, #128]	; (800c054 <__kernel_cos+0x174>)
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	429e      	cmp	r6, r3
 800bfd8:	bfcc      	ite	gt
 800bfda:	4d1f      	ldrgt	r5, [pc, #124]	; (800c058 <__kernel_cos+0x178>)
 800bfdc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800bfe0:	462b      	mov	r3, r5
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	491a      	ldr	r1, [pc, #104]	; (800c050 <__kernel_cos+0x170>)
 800bfe6:	f7f4 f8c7 	bl	8000178 <__aeabi_dsub>
 800bfea:	4622      	mov	r2, r4
 800bfec:	4606      	mov	r6, r0
 800bfee:	460f      	mov	r7, r1
 800bff0:	462b      	mov	r3, r5
 800bff2:	4650      	mov	r0, sl
 800bff4:	4659      	mov	r1, fp
 800bff6:	f7f4 f8bf 	bl	8000178 <__aeabi_dsub>
 800bffa:	4642      	mov	r2, r8
 800bffc:	464b      	mov	r3, r9
 800bffe:	f7f4 f8bb 	bl	8000178 <__aeabi_dsub>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	4630      	mov	r0, r6
 800c008:	4639      	mov	r1, r7
 800c00a:	e7dc      	b.n	800bfc6 <__kernel_cos+0xe6>
 800c00c:	2000      	movs	r0, #0
 800c00e:	4910      	ldr	r1, [pc, #64]	; (800c050 <__kernel_cos+0x170>)
 800c010:	e7db      	b.n	800bfca <__kernel_cos+0xea>
 800c012:	bf00      	nop
 800c014:	f3af 8000 	nop.w
 800c018:	be8838d4 	.word	0xbe8838d4
 800c01c:	bda8fae9 	.word	0xbda8fae9
 800c020:	bdb4b1c4 	.word	0xbdb4b1c4
 800c024:	3e21ee9e 	.word	0x3e21ee9e
 800c028:	809c52ad 	.word	0x809c52ad
 800c02c:	3e927e4f 	.word	0x3e927e4f
 800c030:	19cb1590 	.word	0x19cb1590
 800c034:	3efa01a0 	.word	0x3efa01a0
 800c038:	16c15177 	.word	0x16c15177
 800c03c:	3f56c16c 	.word	0x3f56c16c
 800c040:	5555554c 	.word	0x5555554c
 800c044:	3fa55555 	.word	0x3fa55555
 800c048:	3fe00000 	.word	0x3fe00000
 800c04c:	3fd33332 	.word	0x3fd33332
 800c050:	3ff00000 	.word	0x3ff00000
 800c054:	3fe90000 	.word	0x3fe90000
 800c058:	3fd20000 	.word	0x3fd20000

0800c05c <__kernel_rem_pio2>:
 800c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c060:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c064:	9307      	str	r3, [sp, #28]
 800c066:	9104      	str	r1, [sp, #16]
 800c068:	4bbf      	ldr	r3, [pc, #764]	; (800c368 <__kernel_rem_pio2+0x30c>)
 800c06a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c06c:	1ed4      	subs	r4, r2, #3
 800c06e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c072:	2500      	movs	r5, #0
 800c074:	9302      	str	r3, [sp, #8]
 800c076:	9b07      	ldr	r3, [sp, #28]
 800c078:	9008      	str	r0, [sp, #32]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	9306      	str	r3, [sp, #24]
 800c07e:	2318      	movs	r3, #24
 800c080:	fb94 f4f3 	sdiv	r4, r4, r3
 800c084:	f06f 0317 	mvn.w	r3, #23
 800c088:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c08c:	fb04 3303 	mla	r3, r4, r3, r3
 800c090:	eb03 0a02 	add.w	sl, r3, r2
 800c094:	9a06      	ldr	r2, [sp, #24]
 800c096:	9b02      	ldr	r3, [sp, #8]
 800c098:	1aa7      	subs	r7, r4, r2
 800c09a:	eb03 0802 	add.w	r8, r3, r2
 800c09e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	ae1e      	add	r6, sp, #120	; 0x78
 800c0aa:	4545      	cmp	r5, r8
 800c0ac:	dd14      	ble.n	800c0d8 <__kernel_rem_pio2+0x7c>
 800c0ae:	2600      	movs	r6, #0
 800c0b0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800c0b4:	9b02      	ldr	r3, [sp, #8]
 800c0b6:	429e      	cmp	r6, r3
 800c0b8:	dc39      	bgt.n	800c12e <__kernel_rem_pio2+0xd2>
 800c0ba:	9b08      	ldr	r3, [sp, #32]
 800c0bc:	f04f 0800 	mov.w	r8, #0
 800c0c0:	3b08      	subs	r3, #8
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	9b07      	ldr	r3, [sp, #28]
 800c0c6:	f04f 0900 	mov.w	r9, #0
 800c0ca:	199d      	adds	r5, r3, r6
 800c0cc:	ab20      	add	r3, sp, #128	; 0x80
 800c0ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0d2:	9305      	str	r3, [sp, #20]
 800c0d4:	2700      	movs	r7, #0
 800c0d6:	e023      	b.n	800c120 <__kernel_rem_pio2+0xc4>
 800c0d8:	42ef      	cmn	r7, r5
 800c0da:	d40b      	bmi.n	800c0f4 <__kernel_rem_pio2+0x98>
 800c0dc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c0e0:	e9cd 2300 	strd	r2, r3, [sp]
 800c0e4:	f7f4 f996 	bl	8000414 <__aeabi_i2d>
 800c0e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0ec:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800c0f0:	3501      	adds	r5, #1
 800c0f2:	e7da      	b.n	800c0aa <__kernel_rem_pio2+0x4e>
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	e7f8      	b.n	800c0ec <__kernel_rem_pio2+0x90>
 800c0fa:	9905      	ldr	r1, [sp, #20]
 800c0fc:	9d00      	ldr	r5, [sp, #0]
 800c0fe:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c102:	9105      	str	r1, [sp, #20]
 800c104:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800c108:	9500      	str	r5, [sp, #0]
 800c10a:	f7f4 f9ed 	bl	80004e8 <__aeabi_dmul>
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	4640      	mov	r0, r8
 800c114:	4649      	mov	r1, r9
 800c116:	f7f4 f831 	bl	800017c <__adddf3>
 800c11a:	4680      	mov	r8, r0
 800c11c:	4689      	mov	r9, r1
 800c11e:	3701      	adds	r7, #1
 800c120:	9b06      	ldr	r3, [sp, #24]
 800c122:	429f      	cmp	r7, r3
 800c124:	dde9      	ble.n	800c0fa <__kernel_rem_pio2+0x9e>
 800c126:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800c12a:	3601      	adds	r6, #1
 800c12c:	e7c2      	b.n	800c0b4 <__kernel_rem_pio2+0x58>
 800c12e:	9b02      	ldr	r3, [sp, #8]
 800c130:	aa0c      	add	r2, sp, #48	; 0x30
 800c132:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c136:	930b      	str	r3, [sp, #44]	; 0x2c
 800c138:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c13a:	9f02      	ldr	r7, [sp, #8]
 800c13c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c140:	930a      	str	r3, [sp, #40]	; 0x28
 800c142:	2600      	movs	r6, #0
 800c144:	ab98      	add	r3, sp, #608	; 0x260
 800c146:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800c14a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c14e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c152:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c156:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c15a:	ab98      	add	r3, sp, #608	; 0x260
 800c15c:	445b      	add	r3, fp
 800c15e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800c162:	1bbb      	subs	r3, r7, r6
 800c164:	2b00      	cmp	r3, #0
 800c166:	dc71      	bgt.n	800c24c <__kernel_rem_pio2+0x1f0>
 800c168:	4652      	mov	r2, sl
 800c16a:	4640      	mov	r0, r8
 800c16c:	4649      	mov	r1, r9
 800c16e:	f000 fe57 	bl	800ce20 <scalbn>
 800c172:	2200      	movs	r2, #0
 800c174:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c178:	4604      	mov	r4, r0
 800c17a:	460d      	mov	r5, r1
 800c17c:	f7f4 f9b4 	bl	80004e8 <__aeabi_dmul>
 800c180:	f000 fd36 	bl	800cbf0 <floor>
 800c184:	2200      	movs	r2, #0
 800c186:	4b79      	ldr	r3, [pc, #484]	; (800c36c <__kernel_rem_pio2+0x310>)
 800c188:	f7f4 f9ae 	bl	80004e8 <__aeabi_dmul>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4620      	mov	r0, r4
 800c192:	4629      	mov	r1, r5
 800c194:	f7f3 fff0 	bl	8000178 <__aeabi_dsub>
 800c198:	460d      	mov	r5, r1
 800c19a:	4604      	mov	r4, r0
 800c19c:	f7f4 fc54 	bl	8000a48 <__aeabi_d2iz>
 800c1a0:	9005      	str	r0, [sp, #20]
 800c1a2:	f7f4 f937 	bl	8000414 <__aeabi_i2d>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	4629      	mov	r1, r5
 800c1ae:	f7f3 ffe3 	bl	8000178 <__aeabi_dsub>
 800c1b2:	f1ba 0f00 	cmp.w	sl, #0
 800c1b6:	4680      	mov	r8, r0
 800c1b8:	4689      	mov	r9, r1
 800c1ba:	dd6c      	ble.n	800c296 <__kernel_rem_pio2+0x23a>
 800c1bc:	1e7a      	subs	r2, r7, #1
 800c1be:	ab0c      	add	r3, sp, #48	; 0x30
 800c1c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c1c4:	f1ca 0118 	rsb	r1, sl, #24
 800c1c8:	9c05      	ldr	r4, [sp, #20]
 800c1ca:	fa40 f301 	asr.w	r3, r0, r1
 800c1ce:	441c      	add	r4, r3
 800c1d0:	408b      	lsls	r3, r1
 800c1d2:	1ac0      	subs	r0, r0, r3
 800c1d4:	ab0c      	add	r3, sp, #48	; 0x30
 800c1d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c1da:	f1ca 0317 	rsb	r3, sl, #23
 800c1de:	9405      	str	r4, [sp, #20]
 800c1e0:	fa40 f303 	asr.w	r3, r0, r3
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	9b00      	ldr	r3, [sp, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dd62      	ble.n	800c2b2 <__kernel_rem_pio2+0x256>
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c1f2:	4614      	mov	r4, r2
 800c1f4:	9b05      	ldr	r3, [sp, #20]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	9305      	str	r3, [sp, #20]
 800c1fa:	4297      	cmp	r7, r2
 800c1fc:	f300 809f 	bgt.w	800c33e <__kernel_rem_pio2+0x2e2>
 800c200:	f1ba 0f00 	cmp.w	sl, #0
 800c204:	dd07      	ble.n	800c216 <__kernel_rem_pio2+0x1ba>
 800c206:	f1ba 0f01 	cmp.w	sl, #1
 800c20a:	f000 80bb 	beq.w	800c384 <__kernel_rem_pio2+0x328>
 800c20e:	f1ba 0f02 	cmp.w	sl, #2
 800c212:	f000 80c1 	beq.w	800c398 <__kernel_rem_pio2+0x33c>
 800c216:	9b00      	ldr	r3, [sp, #0]
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d14a      	bne.n	800c2b2 <__kernel_rem_pio2+0x256>
 800c21c:	4642      	mov	r2, r8
 800c21e:	464b      	mov	r3, r9
 800c220:	2000      	movs	r0, #0
 800c222:	4953      	ldr	r1, [pc, #332]	; (800c370 <__kernel_rem_pio2+0x314>)
 800c224:	f7f3 ffa8 	bl	8000178 <__aeabi_dsub>
 800c228:	4680      	mov	r8, r0
 800c22a:	4689      	mov	r9, r1
 800c22c:	2c00      	cmp	r4, #0
 800c22e:	d040      	beq.n	800c2b2 <__kernel_rem_pio2+0x256>
 800c230:	4652      	mov	r2, sl
 800c232:	2000      	movs	r0, #0
 800c234:	494e      	ldr	r1, [pc, #312]	; (800c370 <__kernel_rem_pio2+0x314>)
 800c236:	f000 fdf3 	bl	800ce20 <scalbn>
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	4640      	mov	r0, r8
 800c240:	4649      	mov	r1, r9
 800c242:	f7f3 ff99 	bl	8000178 <__aeabi_dsub>
 800c246:	4680      	mov	r8, r0
 800c248:	4689      	mov	r9, r1
 800c24a:	e032      	b.n	800c2b2 <__kernel_rem_pio2+0x256>
 800c24c:	2200      	movs	r2, #0
 800c24e:	4b49      	ldr	r3, [pc, #292]	; (800c374 <__kernel_rem_pio2+0x318>)
 800c250:	4640      	mov	r0, r8
 800c252:	4649      	mov	r1, r9
 800c254:	f7f4 f948 	bl	80004e8 <__aeabi_dmul>
 800c258:	f7f4 fbf6 	bl	8000a48 <__aeabi_d2iz>
 800c25c:	f7f4 f8da 	bl	8000414 <__aeabi_i2d>
 800c260:	2200      	movs	r2, #0
 800c262:	4b45      	ldr	r3, [pc, #276]	; (800c378 <__kernel_rem_pio2+0x31c>)
 800c264:	e9cd 0100 	strd	r0, r1, [sp]
 800c268:	f7f4 f93e 	bl	80004e8 <__aeabi_dmul>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4640      	mov	r0, r8
 800c272:	4649      	mov	r1, r9
 800c274:	f7f3 ff80 	bl	8000178 <__aeabi_dsub>
 800c278:	f7f4 fbe6 	bl	8000a48 <__aeabi_d2iz>
 800c27c:	ab0c      	add	r3, sp, #48	; 0x30
 800c27e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c282:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c286:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c28a:	f7f3 ff77 	bl	800017c <__adddf3>
 800c28e:	3601      	adds	r6, #1
 800c290:	4680      	mov	r8, r0
 800c292:	4689      	mov	r9, r1
 800c294:	e765      	b.n	800c162 <__kernel_rem_pio2+0x106>
 800c296:	d105      	bne.n	800c2a4 <__kernel_rem_pio2+0x248>
 800c298:	1e7b      	subs	r3, r7, #1
 800c29a:	aa0c      	add	r2, sp, #48	; 0x30
 800c29c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c2a0:	15c3      	asrs	r3, r0, #23
 800c2a2:	e79f      	b.n	800c1e4 <__kernel_rem_pio2+0x188>
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	4b35      	ldr	r3, [pc, #212]	; (800c37c <__kernel_rem_pio2+0x320>)
 800c2a8:	f7f4 fba4 	bl	80009f4 <__aeabi_dcmpge>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d143      	bne.n	800c338 <__kernel_rem_pio2+0x2dc>
 800c2b0:	9000      	str	r0, [sp, #0]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	4640      	mov	r0, r8
 800c2b8:	4649      	mov	r1, r9
 800c2ba:	f7f4 fb7d 	bl	80009b8 <__aeabi_dcmpeq>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	f000 80c3 	beq.w	800c44a <__kernel_rem_pio2+0x3ee>
 800c2c4:	1e7c      	subs	r4, r7, #1
 800c2c6:	4623      	mov	r3, r4
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	9902      	ldr	r1, [sp, #8]
 800c2cc:	428b      	cmp	r3, r1
 800c2ce:	da6a      	bge.n	800c3a6 <__kernel_rem_pio2+0x34a>
 800c2d0:	2a00      	cmp	r2, #0
 800c2d2:	f000 8084 	beq.w	800c3de <__kernel_rem_pio2+0x382>
 800c2d6:	ab0c      	add	r3, sp, #48	; 0x30
 800c2d8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c2dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f000 80b0 	beq.w	800c446 <__kernel_rem_pio2+0x3ea>
 800c2e6:	4652      	mov	r2, sl
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	4921      	ldr	r1, [pc, #132]	; (800c370 <__kernel_rem_pio2+0x314>)
 800c2ec:	f000 fd98 	bl	800ce20 <scalbn>
 800c2f0:	4625      	mov	r5, r4
 800c2f2:	4606      	mov	r6, r0
 800c2f4:	460f      	mov	r7, r1
 800c2f6:	f04f 0a00 	mov.w	sl, #0
 800c2fa:	00e3      	lsls	r3, r4, #3
 800c2fc:	aa98      	add	r2, sp, #608	; 0x260
 800c2fe:	eb02 0803 	add.w	r8, r2, r3
 800c302:	f8df b070 	ldr.w	fp, [pc, #112]	; 800c374 <__kernel_rem_pio2+0x318>
 800c306:	9306      	str	r3, [sp, #24]
 800c308:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800c30c:	2d00      	cmp	r5, #0
 800c30e:	f280 80d2 	bge.w	800c4b6 <__kernel_rem_pio2+0x45a>
 800c312:	2500      	movs	r5, #0
 800c314:	9a06      	ldr	r2, [sp, #24]
 800c316:	ab98      	add	r3, sp, #608	; 0x260
 800c318:	189e      	adds	r6, r3, r2
 800c31a:	3ea8      	subs	r6, #168	; 0xa8
 800c31c:	1b63      	subs	r3, r4, r5
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f2c0 80f9 	blt.w	800c516 <__kernel_rem_pio2+0x4ba>
 800c324:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800c380 <__kernel_rem_pio2+0x324>
 800c328:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800c32c:	f04f 0a00 	mov.w	sl, #0
 800c330:	f04f 0b00 	mov.w	fp, #0
 800c334:	2700      	movs	r7, #0
 800c336:	e0e2      	b.n	800c4fe <__kernel_rem_pio2+0x4a2>
 800c338:	2302      	movs	r3, #2
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	e756      	b.n	800c1ec <__kernel_rem_pio2+0x190>
 800c33e:	ab0c      	add	r3, sp, #48	; 0x30
 800c340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c344:	b94c      	cbnz	r4, 800c35a <__kernel_rem_pio2+0x2fe>
 800c346:	b12b      	cbz	r3, 800c354 <__kernel_rem_pio2+0x2f8>
 800c348:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c34c:	a80c      	add	r0, sp, #48	; 0x30
 800c34e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c352:	2301      	movs	r3, #1
 800c354:	3201      	adds	r2, #1
 800c356:	461c      	mov	r4, r3
 800c358:	e74f      	b.n	800c1fa <__kernel_rem_pio2+0x19e>
 800c35a:	1acb      	subs	r3, r1, r3
 800c35c:	a80c      	add	r0, sp, #48	; 0x30
 800c35e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c362:	4623      	mov	r3, r4
 800c364:	e7f6      	b.n	800c354 <__kernel_rem_pio2+0x2f8>
 800c366:	bf00      	nop
 800c368:	0800ed00 	.word	0x0800ed00
 800c36c:	40200000 	.word	0x40200000
 800c370:	3ff00000 	.word	0x3ff00000
 800c374:	3e700000 	.word	0x3e700000
 800c378:	41700000 	.word	0x41700000
 800c37c:	3fe00000 	.word	0x3fe00000
 800c380:	0800ecb8 	.word	0x0800ecb8
 800c384:	1e7a      	subs	r2, r7, #1
 800c386:	ab0c      	add	r3, sp, #48	; 0x30
 800c388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c390:	a90c      	add	r1, sp, #48	; 0x30
 800c392:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c396:	e73e      	b.n	800c216 <__kernel_rem_pio2+0x1ba>
 800c398:	1e7a      	subs	r2, r7, #1
 800c39a:	ab0c      	add	r3, sp, #48	; 0x30
 800c39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c3a4:	e7f4      	b.n	800c390 <__kernel_rem_pio2+0x334>
 800c3a6:	a90c      	add	r1, sp, #48	; 0x30
 800c3a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	e78b      	b.n	800c2ca <__kernel_rem_pio2+0x26e>
 800c3b2:	3401      	adds	r4, #1
 800c3b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c3b8:	2a00      	cmp	r2, #0
 800c3ba:	d0fa      	beq.n	800c3b2 <__kernel_rem_pio2+0x356>
 800c3bc:	ab98      	add	r3, sp, #608	; 0x260
 800c3be:	449b      	add	fp, r3
 800c3c0:	9b07      	ldr	r3, [sp, #28]
 800c3c2:	1c7e      	adds	r6, r7, #1
 800c3c4:	19dd      	adds	r5, r3, r7
 800c3c6:	ab98      	add	r3, sp, #608	; 0x260
 800c3c8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c3cc:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800c3d0:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800c3d4:	443c      	add	r4, r7
 800c3d6:	42b4      	cmp	r4, r6
 800c3d8:	da04      	bge.n	800c3e4 <__kernel_rem_pio2+0x388>
 800c3da:	4627      	mov	r7, r4
 800c3dc:	e6b1      	b.n	800c142 <__kernel_rem_pio2+0xe6>
 800c3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3e0:	2401      	movs	r4, #1
 800c3e2:	e7e7      	b.n	800c3b4 <__kernel_rem_pio2+0x358>
 800c3e4:	f105 0308 	add.w	r3, r5, #8
 800c3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ec:	2700      	movs	r7, #0
 800c3ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c3f2:	f7f4 f80f 	bl	8000414 <__aeabi_i2d>
 800c3f6:	f04f 0800 	mov.w	r8, #0
 800c3fa:	f04f 0900 	mov.w	r9, #0
 800c3fe:	9b08      	ldr	r3, [sp, #32]
 800c400:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c404:	3b08      	subs	r3, #8
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	f105 0310 	add.w	r3, r5, #16
 800c40c:	9305      	str	r3, [sp, #20]
 800c40e:	9b06      	ldr	r3, [sp, #24]
 800c410:	429f      	cmp	r7, r3
 800c412:	dd04      	ble.n	800c41e <__kernel_rem_pio2+0x3c2>
 800c414:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800c418:	3601      	adds	r6, #1
 800c41a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c41c:	e7db      	b.n	800c3d6 <__kernel_rem_pio2+0x37a>
 800c41e:	9905      	ldr	r1, [sp, #20]
 800c420:	9d00      	ldr	r5, [sp, #0]
 800c422:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c426:	9105      	str	r1, [sp, #20]
 800c428:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800c42c:	9500      	str	r5, [sp, #0]
 800c42e:	f7f4 f85b 	bl	80004e8 <__aeabi_dmul>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	4640      	mov	r0, r8
 800c438:	4649      	mov	r1, r9
 800c43a:	f7f3 fe9f 	bl	800017c <__adddf3>
 800c43e:	3701      	adds	r7, #1
 800c440:	4680      	mov	r8, r0
 800c442:	4689      	mov	r9, r1
 800c444:	e7e3      	b.n	800c40e <__kernel_rem_pio2+0x3b2>
 800c446:	3c01      	subs	r4, #1
 800c448:	e745      	b.n	800c2d6 <__kernel_rem_pio2+0x27a>
 800c44a:	f1ca 0200 	rsb	r2, sl, #0
 800c44e:	4640      	mov	r0, r8
 800c450:	4649      	mov	r1, r9
 800c452:	f000 fce5 	bl	800ce20 <scalbn>
 800c456:	2200      	movs	r2, #0
 800c458:	4ba3      	ldr	r3, [pc, #652]	; (800c6e8 <__kernel_rem_pio2+0x68c>)
 800c45a:	4604      	mov	r4, r0
 800c45c:	460d      	mov	r5, r1
 800c45e:	f7f4 fac9 	bl	80009f4 <__aeabi_dcmpge>
 800c462:	b1f8      	cbz	r0, 800c4a4 <__kernel_rem_pio2+0x448>
 800c464:	2200      	movs	r2, #0
 800c466:	4ba1      	ldr	r3, [pc, #644]	; (800c6ec <__kernel_rem_pio2+0x690>)
 800c468:	4620      	mov	r0, r4
 800c46a:	4629      	mov	r1, r5
 800c46c:	f7f4 f83c 	bl	80004e8 <__aeabi_dmul>
 800c470:	f7f4 faea 	bl	8000a48 <__aeabi_d2iz>
 800c474:	4606      	mov	r6, r0
 800c476:	f7f3 ffcd 	bl	8000414 <__aeabi_i2d>
 800c47a:	2200      	movs	r2, #0
 800c47c:	4b9a      	ldr	r3, [pc, #616]	; (800c6e8 <__kernel_rem_pio2+0x68c>)
 800c47e:	f7f4 f833 	bl	80004e8 <__aeabi_dmul>
 800c482:	460b      	mov	r3, r1
 800c484:	4602      	mov	r2, r0
 800c486:	4629      	mov	r1, r5
 800c488:	4620      	mov	r0, r4
 800c48a:	f7f3 fe75 	bl	8000178 <__aeabi_dsub>
 800c48e:	f7f4 fadb 	bl	8000a48 <__aeabi_d2iz>
 800c492:	1c7c      	adds	r4, r7, #1
 800c494:	ab0c      	add	r3, sp, #48	; 0x30
 800c496:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c49a:	f10a 0a18 	add.w	sl, sl, #24
 800c49e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800c4a2:	e720      	b.n	800c2e6 <__kernel_rem_pio2+0x28a>
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	f7f4 face 	bl	8000a48 <__aeabi_d2iz>
 800c4ac:	ab0c      	add	r3, sp, #48	; 0x30
 800c4ae:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800c4b2:	463c      	mov	r4, r7
 800c4b4:	e717      	b.n	800c2e6 <__kernel_rem_pio2+0x28a>
 800c4b6:	ab0c      	add	r3, sp, #48	; 0x30
 800c4b8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4bc:	f7f3 ffaa 	bl	8000414 <__aeabi_i2d>
 800c4c0:	4632      	mov	r2, r6
 800c4c2:	463b      	mov	r3, r7
 800c4c4:	f7f4 f810 	bl	80004e8 <__aeabi_dmul>
 800c4c8:	4652      	mov	r2, sl
 800c4ca:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c4ce:	465b      	mov	r3, fp
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	4639      	mov	r1, r7
 800c4d4:	f7f4 f808 	bl	80004e8 <__aeabi_dmul>
 800c4d8:	3d01      	subs	r5, #1
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460f      	mov	r7, r1
 800c4de:	e715      	b.n	800c30c <__kernel_rem_pio2+0x2b0>
 800c4e0:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800c4e4:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c4e8:	f7f3 fffe 	bl	80004e8 <__aeabi_dmul>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	4650      	mov	r0, sl
 800c4f2:	4659      	mov	r1, fp
 800c4f4:	f7f3 fe42 	bl	800017c <__adddf3>
 800c4f8:	4682      	mov	sl, r0
 800c4fa:	468b      	mov	fp, r1
 800c4fc:	3701      	adds	r7, #1
 800c4fe:	9b02      	ldr	r3, [sp, #8]
 800c500:	429f      	cmp	r7, r3
 800c502:	dc01      	bgt.n	800c508 <__kernel_rem_pio2+0x4ac>
 800c504:	42bd      	cmp	r5, r7
 800c506:	daeb      	bge.n	800c4e0 <__kernel_rem_pio2+0x484>
 800c508:	ab48      	add	r3, sp, #288	; 0x120
 800c50a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c50e:	e9c3 ab00 	strd	sl, fp, [r3]
 800c512:	3501      	adds	r5, #1
 800c514:	e702      	b.n	800c31c <__kernel_rem_pio2+0x2c0>
 800c516:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c518:	2b03      	cmp	r3, #3
 800c51a:	d86c      	bhi.n	800c5f6 <__kernel_rem_pio2+0x59a>
 800c51c:	e8df f003 	tbb	[pc, r3]
 800c520:	022f2f59 	.word	0x022f2f59
 800c524:	9a06      	ldr	r2, [sp, #24]
 800c526:	ab48      	add	r3, sp, #288	; 0x120
 800c528:	189d      	adds	r5, r3, r2
 800c52a:	46aa      	mov	sl, r5
 800c52c:	46a3      	mov	fp, r4
 800c52e:	f1bb 0f00 	cmp.w	fp, #0
 800c532:	f300 8087 	bgt.w	800c644 <__kernel_rem_pio2+0x5e8>
 800c536:	46a2      	mov	sl, r4
 800c538:	f1ba 0f01 	cmp.w	sl, #1
 800c53c:	f300 809f 	bgt.w	800c67e <__kernel_rem_pio2+0x622>
 800c540:	2700      	movs	r7, #0
 800c542:	463e      	mov	r6, r7
 800c544:	9d06      	ldr	r5, [sp, #24]
 800c546:	ab48      	add	r3, sp, #288	; 0x120
 800c548:	3508      	adds	r5, #8
 800c54a:	441d      	add	r5, r3
 800c54c:	2c01      	cmp	r4, #1
 800c54e:	f300 80b3 	bgt.w	800c6b8 <__kernel_rem_pio2+0x65c>
 800c552:	9b00      	ldr	r3, [sp, #0]
 800c554:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800c556:	9849      	ldr	r0, [sp, #292]	; 0x124
 800c558:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800c55a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f040 80b5 	bne.w	800c6cc <__kernel_rem_pio2+0x670>
 800c562:	4603      	mov	r3, r0
 800c564:	462a      	mov	r2, r5
 800c566:	9804      	ldr	r0, [sp, #16]
 800c568:	e9c0 2300 	strd	r2, r3, [r0]
 800c56c:	4622      	mov	r2, r4
 800c56e:	460b      	mov	r3, r1
 800c570:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c574:	463a      	mov	r2, r7
 800c576:	4633      	mov	r3, r6
 800c578:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c57c:	e03b      	b.n	800c5f6 <__kernel_rem_pio2+0x59a>
 800c57e:	f04f 0c00 	mov.w	ip, #0
 800c582:	4626      	mov	r6, r4
 800c584:	4667      	mov	r7, ip
 800c586:	9d06      	ldr	r5, [sp, #24]
 800c588:	ab48      	add	r3, sp, #288	; 0x120
 800c58a:	3508      	adds	r5, #8
 800c58c:	441d      	add	r5, r3
 800c58e:	2e00      	cmp	r6, #0
 800c590:	da42      	bge.n	800c618 <__kernel_rem_pio2+0x5bc>
 800c592:	9b00      	ldr	r3, [sp, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d049      	beq.n	800c62c <__kernel_rem_pio2+0x5d0>
 800c598:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800c59c:	4662      	mov	r2, ip
 800c59e:	460b      	mov	r3, r1
 800c5a0:	9904      	ldr	r1, [sp, #16]
 800c5a2:	2601      	movs	r6, #1
 800c5a4:	e9c1 2300 	strd	r2, r3, [r1]
 800c5a8:	a948      	add	r1, sp, #288	; 0x120
 800c5aa:	463b      	mov	r3, r7
 800c5ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5b0:	f7f3 fde2 	bl	8000178 <__aeabi_dsub>
 800c5b4:	4684      	mov	ip, r0
 800c5b6:	460f      	mov	r7, r1
 800c5b8:	ad48      	add	r5, sp, #288	; 0x120
 800c5ba:	42b4      	cmp	r4, r6
 800c5bc:	da38      	bge.n	800c630 <__kernel_rem_pio2+0x5d4>
 800c5be:	9b00      	ldr	r3, [sp, #0]
 800c5c0:	b10b      	cbz	r3, 800c5c6 <__kernel_rem_pio2+0x56a>
 800c5c2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c5c6:	4662      	mov	r2, ip
 800c5c8:	463b      	mov	r3, r7
 800c5ca:	9904      	ldr	r1, [sp, #16]
 800c5cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c5d0:	e011      	b.n	800c5f6 <__kernel_rem_pio2+0x59a>
 800c5d2:	2700      	movs	r7, #0
 800c5d4:	463d      	mov	r5, r7
 800c5d6:	9b06      	ldr	r3, [sp, #24]
 800c5d8:	aa98      	add	r2, sp, #608	; 0x260
 800c5da:	4413      	add	r3, r2
 800c5dc:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800c5e0:	2c00      	cmp	r4, #0
 800c5e2:	da0f      	bge.n	800c604 <__kernel_rem_pio2+0x5a8>
 800c5e4:	9b00      	ldr	r3, [sp, #0]
 800c5e6:	b10b      	cbz	r3, 800c5ec <__kernel_rem_pio2+0x590>
 800c5e8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800c5ec:	463a      	mov	r2, r7
 800c5ee:	462b      	mov	r3, r5
 800c5f0:	9904      	ldr	r1, [sp, #16]
 800c5f2:	e9c1 2300 	strd	r2, r3, [r1]
 800c5f6:	9b05      	ldr	r3, [sp, #20]
 800c5f8:	f003 0007 	and.w	r0, r3, #7
 800c5fc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c604:	4638      	mov	r0, r7
 800c606:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c60a:	4629      	mov	r1, r5
 800c60c:	f7f3 fdb6 	bl	800017c <__adddf3>
 800c610:	3c01      	subs	r4, #1
 800c612:	4607      	mov	r7, r0
 800c614:	460d      	mov	r5, r1
 800c616:	e7e3      	b.n	800c5e0 <__kernel_rem_pio2+0x584>
 800c618:	4660      	mov	r0, ip
 800c61a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c61e:	4639      	mov	r1, r7
 800c620:	f7f3 fdac 	bl	800017c <__adddf3>
 800c624:	3e01      	subs	r6, #1
 800c626:	4684      	mov	ip, r0
 800c628:	460f      	mov	r7, r1
 800c62a:	e7b0      	b.n	800c58e <__kernel_rem_pio2+0x532>
 800c62c:	4639      	mov	r1, r7
 800c62e:	e7b5      	b.n	800c59c <__kernel_rem_pio2+0x540>
 800c630:	4660      	mov	r0, ip
 800c632:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800c636:	4639      	mov	r1, r7
 800c638:	f7f3 fda0 	bl	800017c <__adddf3>
 800c63c:	3601      	adds	r6, #1
 800c63e:	4684      	mov	ip, r0
 800c640:	460f      	mov	r7, r1
 800c642:	e7ba      	b.n	800c5ba <__kernel_rem_pio2+0x55e>
 800c644:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800c648:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800c64c:	4640      	mov	r0, r8
 800c64e:	4649      	mov	r1, r9
 800c650:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c654:	f7f3 fd92 	bl	800017c <__adddf3>
 800c658:	4602      	mov	r2, r0
 800c65a:	460b      	mov	r3, r1
 800c65c:	4606      	mov	r6, r0
 800c65e:	460f      	mov	r7, r1
 800c660:	4640      	mov	r0, r8
 800c662:	4649      	mov	r1, r9
 800c664:	f7f3 fd88 	bl	8000178 <__aeabi_dsub>
 800c668:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c66c:	f7f3 fd86 	bl	800017c <__adddf3>
 800c670:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c674:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c678:	e9ca 6700 	strd	r6, r7, [sl]
 800c67c:	e757      	b.n	800c52e <__kernel_rem_pio2+0x4d2>
 800c67e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800c682:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800c686:	4630      	mov	r0, r6
 800c688:	4639      	mov	r1, r7
 800c68a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c68e:	f7f3 fd75 	bl	800017c <__adddf3>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	4680      	mov	r8, r0
 800c698:	4689      	mov	r9, r1
 800c69a:	4630      	mov	r0, r6
 800c69c:	4639      	mov	r1, r7
 800c69e:	f7f3 fd6b 	bl	8000178 <__aeabi_dsub>
 800c6a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6a6:	f7f3 fd69 	bl	800017c <__adddf3>
 800c6aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6ae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c6b2:	e9c5 8900 	strd	r8, r9, [r5]
 800c6b6:	e73f      	b.n	800c538 <__kernel_rem_pio2+0x4dc>
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c6be:	4631      	mov	r1, r6
 800c6c0:	f7f3 fd5c 	bl	800017c <__adddf3>
 800c6c4:	3c01      	subs	r4, #1
 800c6c6:	4607      	mov	r7, r0
 800c6c8:	460e      	mov	r6, r1
 800c6ca:	e73f      	b.n	800c54c <__kernel_rem_pio2+0x4f0>
 800c6cc:	9b04      	ldr	r3, [sp, #16]
 800c6ce:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c6d2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c6d6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c6da:	601d      	str	r5, [r3, #0]
 800c6dc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c6e0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c6e4:	615e      	str	r6, [r3, #20]
 800c6e6:	e786      	b.n	800c5f6 <__kernel_rem_pio2+0x59a>
 800c6e8:	41700000 	.word	0x41700000
 800c6ec:	3e700000 	.word	0x3e700000

0800c6f0 <__kernel_sin>:
 800c6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f4:	b086      	sub	sp, #24
 800c6f6:	e9cd 2300 	strd	r2, r3, [sp]
 800c6fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c6fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c702:	4682      	mov	sl, r0
 800c704:	460c      	mov	r4, r1
 800c706:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c708:	da03      	bge.n	800c712 <__kernel_sin+0x22>
 800c70a:	f7f4 f99d 	bl	8000a48 <__aeabi_d2iz>
 800c70e:	2800      	cmp	r0, #0
 800c710:	d050      	beq.n	800c7b4 <__kernel_sin+0xc4>
 800c712:	4652      	mov	r2, sl
 800c714:	4623      	mov	r3, r4
 800c716:	4650      	mov	r0, sl
 800c718:	4621      	mov	r1, r4
 800c71a:	f7f3 fee5 	bl	80004e8 <__aeabi_dmul>
 800c71e:	4606      	mov	r6, r0
 800c720:	460f      	mov	r7, r1
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4650      	mov	r0, sl
 800c728:	4621      	mov	r1, r4
 800c72a:	f7f3 fedd 	bl	80004e8 <__aeabi_dmul>
 800c72e:	a33e      	add	r3, pc, #248	; (adr r3, 800c828 <__kernel_sin+0x138>)
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	4680      	mov	r8, r0
 800c736:	4689      	mov	r9, r1
 800c738:	4630      	mov	r0, r6
 800c73a:	4639      	mov	r1, r7
 800c73c:	f7f3 fed4 	bl	80004e8 <__aeabi_dmul>
 800c740:	a33b      	add	r3, pc, #236	; (adr r3, 800c830 <__kernel_sin+0x140>)
 800c742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c746:	f7f3 fd17 	bl	8000178 <__aeabi_dsub>
 800c74a:	4632      	mov	r2, r6
 800c74c:	463b      	mov	r3, r7
 800c74e:	f7f3 fecb 	bl	80004e8 <__aeabi_dmul>
 800c752:	a339      	add	r3, pc, #228	; (adr r3, 800c838 <__kernel_sin+0x148>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	f7f3 fd10 	bl	800017c <__adddf3>
 800c75c:	4632      	mov	r2, r6
 800c75e:	463b      	mov	r3, r7
 800c760:	f7f3 fec2 	bl	80004e8 <__aeabi_dmul>
 800c764:	a336      	add	r3, pc, #216	; (adr r3, 800c840 <__kernel_sin+0x150>)
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	f7f3 fd05 	bl	8000178 <__aeabi_dsub>
 800c76e:	4632      	mov	r2, r6
 800c770:	463b      	mov	r3, r7
 800c772:	f7f3 feb9 	bl	80004e8 <__aeabi_dmul>
 800c776:	a334      	add	r3, pc, #208	; (adr r3, 800c848 <__kernel_sin+0x158>)
 800c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77c:	f7f3 fcfe 	bl	800017c <__adddf3>
 800c780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c784:	b9dd      	cbnz	r5, 800c7be <__kernel_sin+0xce>
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	4630      	mov	r0, r6
 800c78c:	4639      	mov	r1, r7
 800c78e:	f7f3 feab 	bl	80004e8 <__aeabi_dmul>
 800c792:	a32f      	add	r3, pc, #188	; (adr r3, 800c850 <__kernel_sin+0x160>)
 800c794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c798:	f7f3 fcee 	bl	8000178 <__aeabi_dsub>
 800c79c:	4642      	mov	r2, r8
 800c79e:	464b      	mov	r3, r9
 800c7a0:	f7f3 fea2 	bl	80004e8 <__aeabi_dmul>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4650      	mov	r0, sl
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	f7f3 fce6 	bl	800017c <__adddf3>
 800c7b0:	4682      	mov	sl, r0
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	4650      	mov	r0, sl
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	b006      	add	sp, #24
 800c7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7be:	2200      	movs	r2, #0
 800c7c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7c4:	4b24      	ldr	r3, [pc, #144]	; (800c858 <__kernel_sin+0x168>)
 800c7c6:	f7f3 fe8f 	bl	80004e8 <__aeabi_dmul>
 800c7ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7d2:	4640      	mov	r0, r8
 800c7d4:	4649      	mov	r1, r9
 800c7d6:	f7f3 fe87 	bl	80004e8 <__aeabi_dmul>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7e2:	f7f3 fcc9 	bl	8000178 <__aeabi_dsub>
 800c7e6:	4632      	mov	r2, r6
 800c7e8:	463b      	mov	r3, r7
 800c7ea:	f7f3 fe7d 	bl	80004e8 <__aeabi_dmul>
 800c7ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7f2:	f7f3 fcc1 	bl	8000178 <__aeabi_dsub>
 800c7f6:	a316      	add	r3, pc, #88	; (adr r3, 800c850 <__kernel_sin+0x160>)
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	460f      	mov	r7, r1
 800c800:	4640      	mov	r0, r8
 800c802:	4649      	mov	r1, r9
 800c804:	f7f3 fe70 	bl	80004e8 <__aeabi_dmul>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4630      	mov	r0, r6
 800c80e:	4639      	mov	r1, r7
 800c810:	f7f3 fcb4 	bl	800017c <__adddf3>
 800c814:	4602      	mov	r2, r0
 800c816:	460b      	mov	r3, r1
 800c818:	4650      	mov	r0, sl
 800c81a:	4621      	mov	r1, r4
 800c81c:	f7f3 fcac 	bl	8000178 <__aeabi_dsub>
 800c820:	e7c6      	b.n	800c7b0 <__kernel_sin+0xc0>
 800c822:	bf00      	nop
 800c824:	f3af 8000 	nop.w
 800c828:	5acfd57c 	.word	0x5acfd57c
 800c82c:	3de5d93a 	.word	0x3de5d93a
 800c830:	8a2b9ceb 	.word	0x8a2b9ceb
 800c834:	3e5ae5e6 	.word	0x3e5ae5e6
 800c838:	57b1fe7d 	.word	0x57b1fe7d
 800c83c:	3ec71de3 	.word	0x3ec71de3
 800c840:	19c161d5 	.word	0x19c161d5
 800c844:	3f2a01a0 	.word	0x3f2a01a0
 800c848:	1110f8a6 	.word	0x1110f8a6
 800c84c:	3f811111 	.word	0x3f811111
 800c850:	55555549 	.word	0x55555549
 800c854:	3fc55555 	.word	0x3fc55555
 800c858:	3fe00000 	.word	0x3fe00000
 800c85c:	00000000 	.word	0x00000000

0800c860 <__kernel_tan>:
 800c860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c864:	461f      	mov	r7, r3
 800c866:	4bda      	ldr	r3, [pc, #872]	; (800cbd0 <__kernel_tan+0x370>)
 800c868:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c86c:	b089      	sub	sp, #36	; 0x24
 800c86e:	429e      	cmp	r6, r3
 800c870:	4682      	mov	sl, r0
 800c872:	468b      	mov	fp, r1
 800c874:	4690      	mov	r8, r2
 800c876:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800c87a:	9105      	str	r1, [sp, #20]
 800c87c:	dc21      	bgt.n	800c8c2 <__kernel_tan+0x62>
 800c87e:	f7f4 f8e3 	bl	8000a48 <__aeabi_d2iz>
 800c882:	2800      	cmp	r0, #0
 800c884:	d140      	bne.n	800c908 <__kernel_tan+0xa8>
 800c886:	4652      	mov	r2, sl
 800c888:	f109 0301 	add.w	r3, r9, #1
 800c88c:	4313      	orrs	r3, r2
 800c88e:	4333      	orrs	r3, r6
 800c890:	d110      	bne.n	800c8b4 <__kernel_tan+0x54>
 800c892:	4650      	mov	r0, sl
 800c894:	4659      	mov	r1, fp
 800c896:	f7fd fce3 	bl	800a260 <fabs>
 800c89a:	4602      	mov	r2, r0
 800c89c:	2000      	movs	r0, #0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	49cc      	ldr	r1, [pc, #816]	; (800cbd4 <__kernel_tan+0x374>)
 800c8a2:	f7f3 ff4b 	bl	800073c <__aeabi_ddiv>
 800c8a6:	4682      	mov	sl, r0
 800c8a8:	468b      	mov	fp, r1
 800c8aa:	4650      	mov	r0, sl
 800c8ac:	4659      	mov	r1, fp
 800c8ae:	b009      	add	sp, #36	; 0x24
 800c8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b4:	f1b9 0f01 	cmp.w	r9, #1
 800c8b8:	d0f7      	beq.n	800c8aa <__kernel_tan+0x4a>
 800c8ba:	465b      	mov	r3, fp
 800c8bc:	2000      	movs	r0, #0
 800c8be:	49c6      	ldr	r1, [pc, #792]	; (800cbd8 <__kernel_tan+0x378>)
 800c8c0:	e7ef      	b.n	800c8a2 <__kernel_tan+0x42>
 800c8c2:	4bc6      	ldr	r3, [pc, #792]	; (800cbdc <__kernel_tan+0x37c>)
 800c8c4:	429e      	cmp	r6, r3
 800c8c6:	dd1f      	ble.n	800c908 <__kernel_tan+0xa8>
 800c8c8:	2900      	cmp	r1, #0
 800c8ca:	da04      	bge.n	800c8d6 <__kernel_tan+0x76>
 800c8cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c8d0:	469b      	mov	fp, r3
 800c8d2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c8d6:	4652      	mov	r2, sl
 800c8d8:	a19f      	add	r1, pc, #636	; (adr r1, 800cb58 <__kernel_tan+0x2f8>)
 800c8da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8de:	465b      	mov	r3, fp
 800c8e0:	f7f3 fc4a 	bl	8000178 <__aeabi_dsub>
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	460d      	mov	r5, r1
 800c8e8:	a19d      	add	r1, pc, #628	; (adr r1, 800cb60 <__kernel_tan+0x300>)
 800c8ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ee:	4642      	mov	r2, r8
 800c8f0:	463b      	mov	r3, r7
 800c8f2:	f7f3 fc41 	bl	8000178 <__aeabi_dsub>
 800c8f6:	4622      	mov	r2, r4
 800c8f8:	462b      	mov	r3, r5
 800c8fa:	f7f3 fc3f 	bl	800017c <__adddf3>
 800c8fe:	f04f 0800 	mov.w	r8, #0
 800c902:	4682      	mov	sl, r0
 800c904:	468b      	mov	fp, r1
 800c906:	4647      	mov	r7, r8
 800c908:	4652      	mov	r2, sl
 800c90a:	465b      	mov	r3, fp
 800c90c:	4650      	mov	r0, sl
 800c90e:	4659      	mov	r1, fp
 800c910:	f7f3 fdea 	bl	80004e8 <__aeabi_dmul>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	e9cd 0100 	strd	r0, r1, [sp]
 800c91c:	f7f3 fde4 	bl	80004e8 <__aeabi_dmul>
 800c920:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c924:	4604      	mov	r4, r0
 800c926:	460d      	mov	r5, r1
 800c928:	4650      	mov	r0, sl
 800c92a:	4659      	mov	r1, fp
 800c92c:	f7f3 fddc 	bl	80004e8 <__aeabi_dmul>
 800c930:	a38d      	add	r3, pc, #564	; (adr r3, 800cb68 <__kernel_tan+0x308>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c93a:	4620      	mov	r0, r4
 800c93c:	4629      	mov	r1, r5
 800c93e:	f7f3 fdd3 	bl	80004e8 <__aeabi_dmul>
 800c942:	a38b      	add	r3, pc, #556	; (adr r3, 800cb70 <__kernel_tan+0x310>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f7f3 fc18 	bl	800017c <__adddf3>
 800c94c:	4622      	mov	r2, r4
 800c94e:	462b      	mov	r3, r5
 800c950:	f7f3 fdca 	bl	80004e8 <__aeabi_dmul>
 800c954:	a388      	add	r3, pc, #544	; (adr r3, 800cb78 <__kernel_tan+0x318>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	f7f3 fc0f 	bl	800017c <__adddf3>
 800c95e:	4622      	mov	r2, r4
 800c960:	462b      	mov	r3, r5
 800c962:	f7f3 fdc1 	bl	80004e8 <__aeabi_dmul>
 800c966:	a386      	add	r3, pc, #536	; (adr r3, 800cb80 <__kernel_tan+0x320>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	f7f3 fc06 	bl	800017c <__adddf3>
 800c970:	4622      	mov	r2, r4
 800c972:	462b      	mov	r3, r5
 800c974:	f7f3 fdb8 	bl	80004e8 <__aeabi_dmul>
 800c978:	a383      	add	r3, pc, #524	; (adr r3, 800cb88 <__kernel_tan+0x328>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fbfd 	bl	800017c <__adddf3>
 800c982:	4622      	mov	r2, r4
 800c984:	462b      	mov	r3, r5
 800c986:	f7f3 fdaf 	bl	80004e8 <__aeabi_dmul>
 800c98a:	a381      	add	r3, pc, #516	; (adr r3, 800cb90 <__kernel_tan+0x330>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f7f3 fbf4 	bl	800017c <__adddf3>
 800c994:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c998:	f7f3 fda6 	bl	80004e8 <__aeabi_dmul>
 800c99c:	a37e      	add	r3, pc, #504	; (adr r3, 800cb98 <__kernel_tan+0x338>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	f7f3 fd9d 	bl	80004e8 <__aeabi_dmul>
 800c9ae:	a37c      	add	r3, pc, #496	; (adr r3, 800cba0 <__kernel_tan+0x340>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f7f3 fbe2 	bl	800017c <__adddf3>
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	462b      	mov	r3, r5
 800c9bc:	f7f3 fd94 	bl	80004e8 <__aeabi_dmul>
 800c9c0:	a379      	add	r3, pc, #484	; (adr r3, 800cba8 <__kernel_tan+0x348>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	f7f3 fbd9 	bl	800017c <__adddf3>
 800c9ca:	4622      	mov	r2, r4
 800c9cc:	462b      	mov	r3, r5
 800c9ce:	f7f3 fd8b 	bl	80004e8 <__aeabi_dmul>
 800c9d2:	a377      	add	r3, pc, #476	; (adr r3, 800cbb0 <__kernel_tan+0x350>)
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	f7f3 fbd0 	bl	800017c <__adddf3>
 800c9dc:	4622      	mov	r2, r4
 800c9de:	462b      	mov	r3, r5
 800c9e0:	f7f3 fd82 	bl	80004e8 <__aeabi_dmul>
 800c9e4:	a374      	add	r3, pc, #464	; (adr r3, 800cbb8 <__kernel_tan+0x358>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f3 fbc7 	bl	800017c <__adddf3>
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	462b      	mov	r3, r5
 800c9f2:	f7f3 fd79 	bl	80004e8 <__aeabi_dmul>
 800c9f6:	a372      	add	r3, pc, #456	; (adr r3, 800cbc0 <__kernel_tan+0x360>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	f7f3 fbbe 	bl	800017c <__adddf3>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca08:	f7f3 fbb8 	bl	800017c <__adddf3>
 800ca0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca10:	f7f3 fd6a 	bl	80004e8 <__aeabi_dmul>
 800ca14:	4642      	mov	r2, r8
 800ca16:	463b      	mov	r3, r7
 800ca18:	f7f3 fbb0 	bl	800017c <__adddf3>
 800ca1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca20:	f7f3 fd62 	bl	80004e8 <__aeabi_dmul>
 800ca24:	4642      	mov	r2, r8
 800ca26:	463b      	mov	r3, r7
 800ca28:	f7f3 fba8 	bl	800017c <__adddf3>
 800ca2c:	a366      	add	r3, pc, #408	; (adr r3, 800cbc8 <__kernel_tan+0x368>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	4604      	mov	r4, r0
 800ca34:	460d      	mov	r5, r1
 800ca36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca3a:	f7f3 fd55 	bl	80004e8 <__aeabi_dmul>
 800ca3e:	4622      	mov	r2, r4
 800ca40:	462b      	mov	r3, r5
 800ca42:	f7f3 fb9b 	bl	800017c <__adddf3>
 800ca46:	e9cd 0100 	strd	r0, r1, [sp]
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	4659      	mov	r1, fp
 800ca50:	4650      	mov	r0, sl
 800ca52:	f7f3 fb93 	bl	800017c <__adddf3>
 800ca56:	4b61      	ldr	r3, [pc, #388]	; (800cbdc <__kernel_tan+0x37c>)
 800ca58:	4604      	mov	r4, r0
 800ca5a:	429e      	cmp	r6, r3
 800ca5c:	460d      	mov	r5, r1
 800ca5e:	dd3d      	ble.n	800cadc <__kernel_tan+0x27c>
 800ca60:	4648      	mov	r0, r9
 800ca62:	f7f3 fcd7 	bl	8000414 <__aeabi_i2d>
 800ca66:	4622      	mov	r2, r4
 800ca68:	4680      	mov	r8, r0
 800ca6a:	4689      	mov	r9, r1
 800ca6c:	462b      	mov	r3, r5
 800ca6e:	4620      	mov	r0, r4
 800ca70:	4629      	mov	r1, r5
 800ca72:	f7f3 fd39 	bl	80004e8 <__aeabi_dmul>
 800ca76:	4642      	mov	r2, r8
 800ca78:	4606      	mov	r6, r0
 800ca7a:	460f      	mov	r7, r1
 800ca7c:	464b      	mov	r3, r9
 800ca7e:	4620      	mov	r0, r4
 800ca80:	4629      	mov	r1, r5
 800ca82:	f7f3 fb7b 	bl	800017c <__adddf3>
 800ca86:	4602      	mov	r2, r0
 800ca88:	460b      	mov	r3, r1
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	4639      	mov	r1, r7
 800ca8e:	f7f3 fe55 	bl	800073c <__aeabi_ddiv>
 800ca92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca96:	f7f3 fb6f 	bl	8000178 <__aeabi_dsub>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4650      	mov	r0, sl
 800caa0:	4659      	mov	r1, fp
 800caa2:	f7f3 fb69 	bl	8000178 <__aeabi_dsub>
 800caa6:	4602      	mov	r2, r0
 800caa8:	460b      	mov	r3, r1
 800caaa:	f7f3 fb67 	bl	800017c <__adddf3>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	4640      	mov	r0, r8
 800cab4:	4649      	mov	r1, r9
 800cab6:	f7f3 fb5f 	bl	8000178 <__aeabi_dsub>
 800caba:	9b05      	ldr	r3, [sp, #20]
 800cabc:	4604      	mov	r4, r0
 800cabe:	1798      	asrs	r0, r3, #30
 800cac0:	f000 0002 	and.w	r0, r0, #2
 800cac4:	f1c0 0001 	rsb	r0, r0, #1
 800cac8:	460d      	mov	r5, r1
 800caca:	f7f3 fca3 	bl	8000414 <__aeabi_i2d>
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	4620      	mov	r0, r4
 800cad4:	4629      	mov	r1, r5
 800cad6:	f7f3 fd07 	bl	80004e8 <__aeabi_dmul>
 800cada:	e6e4      	b.n	800c8a6 <__kernel_tan+0x46>
 800cadc:	f1b9 0f01 	cmp.w	r9, #1
 800cae0:	d036      	beq.n	800cb50 <__kernel_tan+0x2f0>
 800cae2:	460f      	mov	r7, r1
 800cae4:	4602      	mov	r2, r0
 800cae6:	460b      	mov	r3, r1
 800cae8:	2000      	movs	r0, #0
 800caea:	493b      	ldr	r1, [pc, #236]	; (800cbd8 <__kernel_tan+0x378>)
 800caec:	f7f3 fe26 	bl	800073c <__aeabi_ddiv>
 800caf0:	2600      	movs	r6, #0
 800caf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800caf6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cafa:	4652      	mov	r2, sl
 800cafc:	465b      	mov	r3, fp
 800cafe:	4630      	mov	r0, r6
 800cb00:	4639      	mov	r1, r7
 800cb02:	f7f3 fb39 	bl	8000178 <__aeabi_dsub>
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb0e:	f7f3 fb33 	bl	8000178 <__aeabi_dsub>
 800cb12:	4632      	mov	r2, r6
 800cb14:	462b      	mov	r3, r5
 800cb16:	f7f3 fce7 	bl	80004e8 <__aeabi_dmul>
 800cb1a:	4632      	mov	r2, r6
 800cb1c:	4682      	mov	sl, r0
 800cb1e:	468b      	mov	fp, r1
 800cb20:	462b      	mov	r3, r5
 800cb22:	4630      	mov	r0, r6
 800cb24:	4639      	mov	r1, r7
 800cb26:	f7f3 fcdf 	bl	80004e8 <__aeabi_dmul>
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	4b29      	ldr	r3, [pc, #164]	; (800cbd4 <__kernel_tan+0x374>)
 800cb2e:	f7f3 fb25 	bl	800017c <__adddf3>
 800cb32:	4602      	mov	r2, r0
 800cb34:	460b      	mov	r3, r1
 800cb36:	4650      	mov	r0, sl
 800cb38:	4659      	mov	r1, fp
 800cb3a:	f7f3 fb1f 	bl	800017c <__adddf3>
 800cb3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb42:	f7f3 fcd1 	bl	80004e8 <__aeabi_dmul>
 800cb46:	4632      	mov	r2, r6
 800cb48:	462b      	mov	r3, r5
 800cb4a:	f7f3 fb17 	bl	800017c <__adddf3>
 800cb4e:	e6aa      	b.n	800c8a6 <__kernel_tan+0x46>
 800cb50:	4682      	mov	sl, r0
 800cb52:	468b      	mov	fp, r1
 800cb54:	e6a9      	b.n	800c8aa <__kernel_tan+0x4a>
 800cb56:	bf00      	nop
 800cb58:	54442d18 	.word	0x54442d18
 800cb5c:	3fe921fb 	.word	0x3fe921fb
 800cb60:	33145c07 	.word	0x33145c07
 800cb64:	3c81a626 	.word	0x3c81a626
 800cb68:	74bf7ad4 	.word	0x74bf7ad4
 800cb6c:	3efb2a70 	.word	0x3efb2a70
 800cb70:	32f0a7e9 	.word	0x32f0a7e9
 800cb74:	3f12b80f 	.word	0x3f12b80f
 800cb78:	1a8d1068 	.word	0x1a8d1068
 800cb7c:	3f3026f7 	.word	0x3f3026f7
 800cb80:	fee08315 	.word	0xfee08315
 800cb84:	3f57dbc8 	.word	0x3f57dbc8
 800cb88:	e96e8493 	.word	0xe96e8493
 800cb8c:	3f8226e3 	.word	0x3f8226e3
 800cb90:	1bb341fe 	.word	0x1bb341fe
 800cb94:	3faba1ba 	.word	0x3faba1ba
 800cb98:	db605373 	.word	0xdb605373
 800cb9c:	bef375cb 	.word	0xbef375cb
 800cba0:	a03792a6 	.word	0xa03792a6
 800cba4:	3f147e88 	.word	0x3f147e88
 800cba8:	f2f26501 	.word	0xf2f26501
 800cbac:	3f4344d8 	.word	0x3f4344d8
 800cbb0:	c9560328 	.word	0xc9560328
 800cbb4:	3f6d6d22 	.word	0x3f6d6d22
 800cbb8:	8406d637 	.word	0x8406d637
 800cbbc:	3f9664f4 	.word	0x3f9664f4
 800cbc0:	1110fe7a 	.word	0x1110fe7a
 800cbc4:	3fc11111 	.word	0x3fc11111
 800cbc8:	55555563 	.word	0x55555563
 800cbcc:	3fd55555 	.word	0x3fd55555
 800cbd0:	3e2fffff 	.word	0x3e2fffff
 800cbd4:	3ff00000 	.word	0x3ff00000
 800cbd8:	bff00000 	.word	0xbff00000
 800cbdc:	3fe59427 	.word	0x3fe59427

0800cbe0 <finite>:
 800cbe0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800cbe4:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800cbe8:	0fc0      	lsrs	r0, r0, #31
 800cbea:	4770      	bx	lr
 800cbec:	0000      	movs	r0, r0
	...

0800cbf0 <floor>:
 800cbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbf4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800cbf8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800cbfc:	2e13      	cmp	r6, #19
 800cbfe:	4607      	mov	r7, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	460c      	mov	r4, r1
 800cc04:	4605      	mov	r5, r0
 800cc06:	dc35      	bgt.n	800cc74 <floor+0x84>
 800cc08:	2e00      	cmp	r6, #0
 800cc0a:	da16      	bge.n	800cc3a <floor+0x4a>
 800cc0c:	a336      	add	r3, pc, #216	; (adr r3, 800cce8 <floor+0xf8>)
 800cc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc12:	f7f3 fab3 	bl	800017c <__adddf3>
 800cc16:	2200      	movs	r2, #0
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f7f3 fef5 	bl	8000a08 <__aeabi_dcmpgt>
 800cc1e:	b148      	cbz	r0, 800cc34 <floor+0x44>
 800cc20:	2c00      	cmp	r4, #0
 800cc22:	da5b      	bge.n	800ccdc <floor+0xec>
 800cc24:	2500      	movs	r5, #0
 800cc26:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cc2a:	4a31      	ldr	r2, [pc, #196]	; (800ccf0 <floor+0x100>)
 800cc2c:	433b      	orrs	r3, r7
 800cc2e:	42ab      	cmp	r3, r5
 800cc30:	bf18      	it	ne
 800cc32:	4614      	movne	r4, r2
 800cc34:	4623      	mov	r3, r4
 800cc36:	462f      	mov	r7, r5
 800cc38:	e026      	b.n	800cc88 <floor+0x98>
 800cc3a:	4a2e      	ldr	r2, [pc, #184]	; (800ccf4 <floor+0x104>)
 800cc3c:	fa42 f806 	asr.w	r8, r2, r6
 800cc40:	ea01 0208 	and.w	r2, r1, r8
 800cc44:	4302      	orrs	r2, r0
 800cc46:	d01f      	beq.n	800cc88 <floor+0x98>
 800cc48:	a327      	add	r3, pc, #156	; (adr r3, 800cce8 <floor+0xf8>)
 800cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4e:	f7f3 fa95 	bl	800017c <__adddf3>
 800cc52:	2200      	movs	r2, #0
 800cc54:	2300      	movs	r3, #0
 800cc56:	f7f3 fed7 	bl	8000a08 <__aeabi_dcmpgt>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d0ea      	beq.n	800cc34 <floor+0x44>
 800cc5e:	2c00      	cmp	r4, #0
 800cc60:	bfbe      	ittt	lt
 800cc62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cc66:	fa43 f606 	asrlt.w	r6, r3, r6
 800cc6a:	19a4      	addlt	r4, r4, r6
 800cc6c:	ea24 0408 	bic.w	r4, r4, r8
 800cc70:	2500      	movs	r5, #0
 800cc72:	e7df      	b.n	800cc34 <floor+0x44>
 800cc74:	2e33      	cmp	r6, #51	; 0x33
 800cc76:	dd0b      	ble.n	800cc90 <floor+0xa0>
 800cc78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cc7c:	d104      	bne.n	800cc88 <floor+0x98>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	f7f3 fa7c 	bl	800017c <__adddf3>
 800cc84:	4607      	mov	r7, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4638      	mov	r0, r7
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc90:	f04f 32ff 	mov.w	r2, #4294967295
 800cc94:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800cc98:	fa22 f808 	lsr.w	r8, r2, r8
 800cc9c:	ea18 0f00 	tst.w	r8, r0
 800cca0:	d0f2      	beq.n	800cc88 <floor+0x98>
 800cca2:	a311      	add	r3, pc, #68	; (adr r3, 800cce8 <floor+0xf8>)
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	f7f3 fa68 	bl	800017c <__adddf3>
 800ccac:	2200      	movs	r2, #0
 800ccae:	2300      	movs	r3, #0
 800ccb0:	f7f3 feaa 	bl	8000a08 <__aeabi_dcmpgt>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d0bd      	beq.n	800cc34 <floor+0x44>
 800ccb8:	2c00      	cmp	r4, #0
 800ccba:	da02      	bge.n	800ccc2 <floor+0xd2>
 800ccbc:	2e14      	cmp	r6, #20
 800ccbe:	d103      	bne.n	800ccc8 <floor+0xd8>
 800ccc0:	3401      	adds	r4, #1
 800ccc2:	ea25 0508 	bic.w	r5, r5, r8
 800ccc6:	e7b5      	b.n	800cc34 <floor+0x44>
 800ccc8:	2301      	movs	r3, #1
 800ccca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ccce:	fa03 f606 	lsl.w	r6, r3, r6
 800ccd2:	4435      	add	r5, r6
 800ccd4:	42bd      	cmp	r5, r7
 800ccd6:	bf38      	it	cc
 800ccd8:	18e4      	addcc	r4, r4, r3
 800ccda:	e7f2      	b.n	800ccc2 <floor+0xd2>
 800ccdc:	2500      	movs	r5, #0
 800ccde:	462c      	mov	r4, r5
 800cce0:	e7a8      	b.n	800cc34 <floor+0x44>
 800cce2:	bf00      	nop
 800cce4:	f3af 8000 	nop.w
 800cce8:	8800759c 	.word	0x8800759c
 800ccec:	7e37e43c 	.word	0x7e37e43c
 800ccf0:	bff00000 	.word	0xbff00000
 800ccf4:	000fffff 	.word	0x000fffff

0800ccf8 <matherr>:
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	4770      	bx	lr

0800ccfc <nan>:
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	4901      	ldr	r1, [pc, #4]	; (800cd04 <nan+0x8>)
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	7ff80000 	.word	0x7ff80000

0800cd08 <rint>:
 800cd08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cd0e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800cd12:	f1bc 0f13 	cmp.w	ip, #19
 800cd16:	4604      	mov	r4, r0
 800cd18:	460d      	mov	r5, r1
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	4606      	mov	r6, r0
 800cd1e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800cd22:	dc5a      	bgt.n	800cdda <rint+0xd2>
 800cd24:	f1bc 0f00 	cmp.w	ip, #0
 800cd28:	da2b      	bge.n	800cd82 <rint+0x7a>
 800cd2a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cd2e:	4302      	orrs	r2, r0
 800cd30:	d023      	beq.n	800cd7a <rint+0x72>
 800cd32:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cd36:	4302      	orrs	r2, r0
 800cd38:	4256      	negs	r6, r2
 800cd3a:	4316      	orrs	r6, r2
 800cd3c:	0c4b      	lsrs	r3, r1, #17
 800cd3e:	0b36      	lsrs	r6, r6, #12
 800cd40:	4934      	ldr	r1, [pc, #208]	; (800ce14 <rint+0x10c>)
 800cd42:	045b      	lsls	r3, r3, #17
 800cd44:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800cd48:	ea46 0503 	orr.w	r5, r6, r3
 800cd4c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800cd50:	4602      	mov	r2, r0
 800cd52:	462b      	mov	r3, r5
 800cd54:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cd58:	4620      	mov	r0, r4
 800cd5a:	4629      	mov	r1, r5
 800cd5c:	f7f3 fa0e 	bl	800017c <__adddf3>
 800cd60:	e9cd 0100 	strd	r0, r1, [sp]
 800cd64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd68:	462b      	mov	r3, r5
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	f7f3 fa04 	bl	8000178 <__aeabi_dsub>
 800cd70:	4604      	mov	r4, r0
 800cd72:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd76:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	b003      	add	sp, #12
 800cd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd82:	4a25      	ldr	r2, [pc, #148]	; (800ce18 <rint+0x110>)
 800cd84:	fa42 f20c 	asr.w	r2, r2, ip
 800cd88:	4011      	ands	r1, r2
 800cd8a:	4301      	orrs	r1, r0
 800cd8c:	d0f5      	beq.n	800cd7a <rint+0x72>
 800cd8e:	0852      	lsrs	r2, r2, #1
 800cd90:	ea05 0102 	and.w	r1, r5, r2
 800cd94:	ea50 0601 	orrs.w	r6, r0, r1
 800cd98:	d00c      	beq.n	800cdb4 <rint+0xac>
 800cd9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd9e:	f1bc 0f13 	cmp.w	ip, #19
 800cda2:	bf0c      	ite	eq
 800cda4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800cda8:	2600      	movne	r6, #0
 800cdaa:	ea25 0202 	bic.w	r2, r5, r2
 800cdae:	fa43 f30c 	asr.w	r3, r3, ip
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	4917      	ldr	r1, [pc, #92]	; (800ce14 <rint+0x10c>)
 800cdb6:	4632      	mov	r2, r6
 800cdb8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800cdbc:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	f7f3 f9da 	bl	800017c <__adddf3>
 800cdc8:	e9cd 0100 	strd	r0, r1, [sp]
 800cdcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdd0:	4622      	mov	r2, r4
 800cdd2:	462b      	mov	r3, r5
 800cdd4:	f7f3 f9d0 	bl	8000178 <__aeabi_dsub>
 800cdd8:	e008      	b.n	800cdec <rint+0xe4>
 800cdda:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800cdde:	dd08      	ble.n	800cdf2 <rint+0xea>
 800cde0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800cde4:	d1c9      	bne.n	800cd7a <rint+0x72>
 800cde6:	4602      	mov	r2, r0
 800cde8:	f7f3 f9c8 	bl	800017c <__adddf3>
 800cdec:	4604      	mov	r4, r0
 800cdee:	460d      	mov	r5, r1
 800cdf0:	e7c3      	b.n	800cd7a <rint+0x72>
 800cdf2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800cdf6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdfa:	40ca      	lsrs	r2, r1
 800cdfc:	4210      	tst	r0, r2
 800cdfe:	d0bc      	beq.n	800cd7a <rint+0x72>
 800ce00:	0852      	lsrs	r2, r2, #1
 800ce02:	4210      	tst	r0, r2
 800ce04:	bf1f      	itttt	ne
 800ce06:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800ce0a:	ea20 0202 	bicne.w	r2, r0, r2
 800ce0e:	410e      	asrne	r6, r1
 800ce10:	4316      	orrne	r6, r2
 800ce12:	e7cf      	b.n	800cdb4 <rint+0xac>
 800ce14:	0800ed10 	.word	0x0800ed10
 800ce18:	000fffff 	.word	0x000fffff
 800ce1c:	00000000 	.word	0x00000000

0800ce20 <scalbn>:
 800ce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce22:	4616      	mov	r6, r2
 800ce24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce28:	4604      	mov	r4, r0
 800ce2a:	460d      	mov	r5, r1
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	b982      	cbnz	r2, 800ce52 <scalbn+0x32>
 800ce30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce34:	4303      	orrs	r3, r0
 800ce36:	d034      	beq.n	800cea2 <scalbn+0x82>
 800ce38:	4b2d      	ldr	r3, [pc, #180]	; (800cef0 <scalbn+0xd0>)
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f7f3 fb54 	bl	80004e8 <__aeabi_dmul>
 800ce40:	4b2c      	ldr	r3, [pc, #176]	; (800cef4 <scalbn+0xd4>)
 800ce42:	4604      	mov	r4, r0
 800ce44:	429e      	cmp	r6, r3
 800ce46:	460d      	mov	r5, r1
 800ce48:	da0d      	bge.n	800ce66 <scalbn+0x46>
 800ce4a:	a325      	add	r3, pc, #148	; (adr r3, 800cee0 <scalbn+0xc0>)
 800ce4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce50:	e01c      	b.n	800ce8c <scalbn+0x6c>
 800ce52:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800ce56:	42ba      	cmp	r2, r7
 800ce58:	d109      	bne.n	800ce6e <scalbn+0x4e>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	f7f3 f98e 	bl	800017c <__adddf3>
 800ce60:	4604      	mov	r4, r0
 800ce62:	460d      	mov	r5, r1
 800ce64:	e01d      	b.n	800cea2 <scalbn+0x82>
 800ce66:	460b      	mov	r3, r1
 800ce68:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce6c:	3a36      	subs	r2, #54	; 0x36
 800ce6e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce72:	4432      	add	r2, r6
 800ce74:	428a      	cmp	r2, r1
 800ce76:	dd0c      	ble.n	800ce92 <scalbn+0x72>
 800ce78:	4622      	mov	r2, r4
 800ce7a:	462b      	mov	r3, r5
 800ce7c:	a11a      	add	r1, pc, #104	; (adr r1, 800cee8 <scalbn+0xc8>)
 800ce7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce82:	f000 f83b 	bl	800cefc <copysign>
 800ce86:	a318      	add	r3, pc, #96	; (adr r3, 800cee8 <scalbn+0xc8>)
 800ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8c:	f7f3 fb2c 	bl	80004e8 <__aeabi_dmul>
 800ce90:	e7e6      	b.n	800ce60 <scalbn+0x40>
 800ce92:	2a00      	cmp	r2, #0
 800ce94:	dd08      	ble.n	800cea8 <scalbn+0x88>
 800ce96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce9e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cea2:	4620      	mov	r0, r4
 800cea4:	4629      	mov	r1, r5
 800cea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cea8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ceac:	da0b      	bge.n	800cec6 <scalbn+0xa6>
 800ceae:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ceb2:	429e      	cmp	r6, r3
 800ceb4:	4622      	mov	r2, r4
 800ceb6:	462b      	mov	r3, r5
 800ceb8:	dce0      	bgt.n	800ce7c <scalbn+0x5c>
 800ceba:	a109      	add	r1, pc, #36	; (adr r1, 800cee0 <scalbn+0xc0>)
 800cebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cec0:	f000 f81c 	bl	800cefc <copysign>
 800cec4:	e7c1      	b.n	800ce4a <scalbn+0x2a>
 800cec6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ceca:	3236      	adds	r2, #54	; 0x36
 800cecc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ced0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ced4:	4620      	mov	r0, r4
 800ced6:	4629      	mov	r1, r5
 800ced8:	2200      	movs	r2, #0
 800ceda:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <scalbn+0xd8>)
 800cedc:	e7d6      	b.n	800ce8c <scalbn+0x6c>
 800cede:	bf00      	nop
 800cee0:	c2f8f359 	.word	0xc2f8f359
 800cee4:	01a56e1f 	.word	0x01a56e1f
 800cee8:	8800759c 	.word	0x8800759c
 800ceec:	7e37e43c 	.word	0x7e37e43c
 800cef0:	43500000 	.word	0x43500000
 800cef4:	ffff3cb0 	.word	0xffff3cb0
 800cef8:	3c900000 	.word	0x3c900000

0800cefc <copysign>:
 800cefc:	b530      	push	{r4, r5, lr}
 800cefe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cf02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf06:	ea42 0503 	orr.w	r5, r2, r3
 800cf0a:	4629      	mov	r1, r5
 800cf0c:	bd30      	pop	{r4, r5, pc}
	...

0800cf10 <__errno>:
 800cf10:	4b01      	ldr	r3, [pc, #4]	; (800cf18 <__errno+0x8>)
 800cf12:	6818      	ldr	r0, [r3, #0]
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	2000005c 	.word	0x2000005c

0800cf1c <_init>:
 800cf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf1e:	bf00      	nop
 800cf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf22:	bc08      	pop	{r3}
 800cf24:	469e      	mov	lr, r3
 800cf26:	4770      	bx	lr

0800cf28 <_fini>:
 800cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2a:	bf00      	nop
 800cf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2e:	bc08      	pop	{r3}
 800cf30:	469e      	mov	lr, r3
 800cf32:	4770      	bx	lr
